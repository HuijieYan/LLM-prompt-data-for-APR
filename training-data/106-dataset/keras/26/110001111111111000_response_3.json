{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    ndim_ = len(inputs.get_shape())\n    if ndim_ < 3:\n        raise ValueError('Input should be at least 3D.')\n\n    if unroll:\n        steps = input_length\n    else:\n        steps = tf.shape(inputs)[0]\n\n    def _step(time, output_ta_t, *states):\n        current_input = input_ta.read(time)\n        mask_t = mask_ta.read(time)\n        output, new_states = step_function(current_input, tuple(states) + tuple(constants))\n        if getattr(output, '_uses_learning_phase', False):\n            global uses_learning_phase\n            uses_learning_phase = True\n        for state, new_state in zip(states, new_states):\n            new_state.set_shape(state.get_shape())\n        tiled_mask_t = tf.tile(mask_t,\n                               tf.concat([[1], tf.shape(output)[1:]], axis=0))\n        output = tf.where(tiled_mask_t, output, states[0])\n        new_states = [tf.where(tiled_mask_t, new_states[i], states[i]) for i in range(len(states))]\n        output_ta_t = output_ta_t.write(time, output)\n        return (time + 1, output_ta_t) + tuple(new_states)\n\n    if mask is not None:\n        if not initial_states:\n            raise ValueError('No initial states provided! '\n                             'When using masking in an RNN, you should '\n                             'provide initial states '\n                             '(and your step function should return '\n                             'as its first state at time `t` '\n                             'the output at time `t-1`).')\n        if go_backwards:\n            mask = reverse(mask, 0)\n\n        def _step(time, output_ta_t, *states):\n            \"\"\"RNN step function.\n\n            Args:\n                time: Current timestep value.\n                output_ta_t: TensorArray.\n                *states: List of states.\n    \n            Returns:\n                Tuple: `(time + 1,output_ta_t) + tuple(new_states)`\n            \"\"\"\n            current_input = input_ta.read(time)\n            mask_t = mask_ta.read(time)\n            output, new_states = step_function(current_input, tuple(states) + tuple(constants))\n            if getattr(output, '_uses_learning_phase', False):\n                global uses_learning_phase\n                uses_learning_phase = True\n            for state, new_state in zip(states, new_states):\n                new_state.set_shape(state.get_shape())\n            tiled_mask_t = tf.tile(mask_t,\n                                   tf.concat([[1], tf.shape(output)[1:]], axis=0))\n            output = tf.where(tiled_mask_t, output, states[0])\n            new_states = [tf.where(tiled_mask_t, new_states[i], states[i]) for i in range(len(states))]\n            output_ta_t = output_ta_t.write(time, output)\n            return (time + 1, output_ta_t) + tuple(new_states)\n    else:\n        def _step(time, output_ta_t, *states):\n            \"\"\"RNN step function.\n\n                Args:\n                    time: Current timestep value.\n                    output_ta_t: TensorArray.\n                    *states: List of states.\n\n                Returns:\n                    Tuple: `(time + 1,output_ta_t) + tuple(new_states)`\n                \"\"\"\n            current_input = input_ta.read(time)\n            output, new_states = step_function(current_input,\n                                               tuple(states) +\n                                               tuple(constants))\n            if getattr(output, '_uses_learning_phase', False):\n                global uses_learning_phase\n                uses_learning_phase = True\n            for state, new_state in zip(states, new_states):\n                new_state.set_shape(state.get_shape())\n            output_ta_t = output_ta_t.write(time, output)\n            return (time + 1, output_ta_t) + tuple(new_states)\n\n    final_outputs = control_flow_ops.while_loop(\n        cond=lambda time, *_: time < steps,\n        body=_step,\n        loop_vars=(time, output_ta) + states,\n        parallel_iterations=32,\n        swap_memory=True)\n    last_time = final_outputs[0]\n    output_ta = final_outputs[1]\n    new_states = final_outputs[2:]\n\n    outputs = output_ta.stack()\n    last_output = output_ta.read(last_time - 1)\n\n    axes = [1, 0] + list(range(2, len(outputs.get_shape())))\n    outputs = tf.transpose(outputs, perm=axes)\n    last_output._uses_learning_phase = uses_learning_phase\n    return last_output, outputs, new_states",
            "imports": []
        }
    ]
}