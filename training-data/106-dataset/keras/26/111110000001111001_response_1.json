{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states, go_backwards=False, mask=None, constants=None, unroll=False, input_length=None):\n\n    ndim = len(inputs.shape)\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n    \n    if unroll is True:\n        if input_length is None:\n            raise ValueError('If unroll is True, input_length must be provided.')\n    \n    if mask is not None:\n        if len(initial_states) == 0:\n            raise ValueError('Mask is provided but initial states are not.')\n    \n    if constants is None:\n        constants = []\n    \n    if unroll:\n        rnn_outputs = []\n        last_states = initial_states\n        timesteps = input_length\n        if go_backwards:\n            inputs = inputs[:, ::-1, ...]  # Reverse the inputs (time dimension)\n        \n        for t in range(timesteps):\n            output, last_states = step_function(inputs[:, t, ...], last_states + constants)\n            rnn_outputs.append(output)\n        \n        outputs = tf.stack(rnn_outputs, axis=1)\n        last_output = rnn_outputs[-1]\n    else:\n        outputs = tf.keras.backend.rnn(step_function, inputs, initial_states, go_backwards=go_backwards, mask=mask, constants=constants, unroll=unroll)\n        last_output = outputs[0]\n        outputs = outputs[1]\n        last_states = outputs[2]\n    \n    return last_output, outputs, last_states"
        }
    ]
}