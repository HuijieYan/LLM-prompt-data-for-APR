{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    \"\"\"Iterates over the time dimension of a tensor.\n\n    # Arguments\n        step_function: RNN step function.\n            - Parameters:\n                - inputs: tensor with shape `(samples, ...)` (no time dimension),\n                    representing input for the batch of samples at a certain\n                    time step.\n                - states: list of tensors.\n            - Returns:\n                - outputs: tensor with shape `(samples, output_dim)`\n                    (no time dimension).\n                - new_states: list of tensors, same length and shapes\n                    as 'states'. The first state in the list must be the\n                    output tensor at the previous timestep.\n\n        inputs: tensor of temporal data of shape `(samples, time, ...)`\n            (at least 3D).\n\n        initial_states: tensor with shape (samples, output_dim)\n            (no time dimension),\n            containing the initial values for the states used in\n            the step function.\n\n        go_backwards: boolean. If True, do the iteration over the time\n            dimension in reverse order and return the reversed sequence.\n\n        mask: binary tensor with shape `(samples, time, 1)`,\n            with a zero for every element that is masked.\n\n        constants: a list of constant values passed at each step.\n\n        unroll: whether to unroll the RNN or to use a symbolic loop (`while_loop` or `scan` depending on backend).\n\n        input_length: not relevant in the TensorFlow implementation.\n            Must be specified if using unrolling with Theano.\n\n    # Returns\n        A tuple, `(last_output, outputs, new_states)`.\n\n            last_output: the latest output of the rnn, of shape `(samples, ...)`\n\n            outputs: tensor with shape `(samples, time, ...)` where each\n                entry `outputs[s, t]` is the output of the step function\n                at time `t` for sample `s`.\n\n            new_states: list of tensors, latest states returned by\n                the step function, of shape `(samples, ...)`.\n\n    # Raises\n        ValueError: if input dimension is less than 3.\n        ValueError: if `unroll` is `True` but input timestep is not a fixed number.\n        ValueError: if `mask` is provided (not `None`) but states is not provided\n            (`len(states)` == 0).\n    \"\"\"\n    def _step(time, output_ta_t, *states):\n        \"\"\"RNN step function.\n        # Arguments\n            time: Current timestep value.\n            output_ta_t: TensorArray.\n            *states: List of states.\n        # Returns\n            Tuple: `(time + 1,output_ta_t) + tuple(new_states)`\n        \"\"\"\n        current_input = input_ta.read(time)\n        if mask is not None:\n            mask_t = mask_ta.read(time)\n            input_list = (current_input, mask_t) if mask_ta is not None else (current_input,)\n\n        output, new_states = step_function(*input_list, tuple(states) + tuple(constants))\n        if getattr(output, '_uses_learning_phase', False):\n            global uses_learning_phase\n            uses_learning_phase = True\n        for state, new_state in zip(states, new_states):\n            new_state.set_shape(state.get_shape())\n        output_ta_t = output_ta_t.write(time, output)\n        return (time + 1, output_ta_t) + tuple(new_states)\n\n    ndim = len(inputs.get_shape())\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n\n    if mask is not None:\n        if mask.dtype != tf.bool:\n            mask = tf.cast(mask, tf.bool)\n        if len(mask.get_shape()) == ndim - 1:\n            mask = tf.expand_dims(mask, len(mask.get_shape()))\n \n    if constants is None:\n        constants = []\n\n    global uses_learning_phase\n    uses_learning_phase = False\n    inputs = tf.transpose(inputs, perm=[1, 0] + list(range(2, ndim)))\n \n    if unroll:\n        raise NotImplementedError()\n    else:\n        from tensorflow.python.keras.layers import version_utils\n        from tensorflow.python.keras import backend as K\n        step_function = version_utils.make_wrapper(stateful=True)(step_function)\n       \n        if go_backwards:\n            inputs = reverse(inputs, 0)\n        time_steps = tf.shape(inputs)[0]\n        outputs, _ = step_function(inputs[0], initial_states + constants)\n        output_ta = tensor_array_ops.TensorArray(dtype=outputs.dtype,\n                                                 size=time_steps,\n                                                 tensor_array_name='output_ta')\n        input_ta = tensor_array_ops.TensorArray(dtype=inputs.dtype,\n                                                size=time_steps,\n                                                tensor_array_name='input_ta')\n        input_ta = input_ta.unstack(inputs)\n        time = K.constant(0, dtype='int32', name='time')\n        if mask is not None:\n            input_length = int_shape(inputs)[0]\n            mask_ta = tensor_array_ops.TensorArray(dtype=tf.bool,\n                                                   size=time_steps,\n                                                   tensor_array_name='mask_ta')\n            mask_ta = mask_ta.unstack(mask)\n        else:\n            mask_ta = None\n        \n        final_outputs = control_flow_ops.while_loop(\n            cond=lambda time, *_: time < time_steps,\n            body=_step,\n            loop_vars=(time, output_ta) + tuple(initial_states),\n            parallel_iterations=32,\n            swap_memory=True)\n\n        last_time = final_outputs[0]\n        output_ta = final_outputs[1]\n        new_states = final_outputs[2:]\n  \n        last_output = output_ta.read(last_time - 1)\n        outputs = output_ta.stack()\n        axes = [1, 0] + list(range(2, len(outputs.get_shape())))\n        outputs = K.transpose(outputs, perm=axes)\n        last_output._uses_learning_phase = uses_learning_phase\n        return last_output, outputs, new_states",
            "import_list": [
                "from tensorflow.python.util import nest",
                "from tensorflow.python.ops import tensor_array_ops",
                "from tensorflow.python.ops import control_flow_ops",
                "from tensorflow.python.keras.layers import version_utils",
                "from tensorflow.python.keras import backend as K"
            ]
        }
    ]
}