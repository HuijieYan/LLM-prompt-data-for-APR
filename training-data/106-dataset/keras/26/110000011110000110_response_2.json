{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    \"\"\"Iterates over the time dimension of a tensor.\n\n    # Arguments\n    step_function: RNN step function.\n        \n    inputs: tensor of temporal data of shape `(samples, time, ...)` (at least 3D).\n    \n    initial_states: tensor with shape (samples, output_dim)\n        (no time dimension), containing the initial values for the states used in the step function.\n        \n    go_backwards: boolean. If True, do the iteration over the time dimension in reverse order and return the reversed sequence.\n    \n    mask: binary tensor with shape `(samples, time, 1)`, with a zero for every element that is masked.\n    \n    constants: a list of constant values passed at each step.\n    \n    unroll: whether to unroll the RNN or to use a symbolic loop (`while_loop` or `scan` depending on backend).\n    \n    input_length: not relevant in the TensorFlow implementation. Must be specified if using unrolling with Theano.\n\n    # Returns\n    A tuple, `(last_output, outputs, new_states)`.\n\n        last_output: the latest output of the rnn, of shape `(samples, ...)`\n        \n        outputs: tensor with shape `(samples, time, ...)` where each entry `outputs[s, t]` is the output of the step function at time `t` for sample `s`.\n        \n        new_states: list of tensors, latest states returned by the step function, of shape `(samples, ...)`.\n\n    # Raises\n    ValueError: if input dimension is less than 3.\n    ValueError: if `unroll` is `True` but input timestep is not a fixed number.\n    ValueError: if `mask` is provided (not `None`) but states is not provided (`len(states)` == 0).\n    \"\"\"\n    \n    ndim = len(inputs.shape)\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n\n    # Transpose to time-major\n    inputs = tf.transpose(inputs, (1, 0, 2))\n\n    if mask is not None:\n        if mask.dtype != tf.bool:\n            mask = tf.cast(mask, tf.bool)\n        if len(mask.shape) == ndim - 1:\n            mask = tf.expand_dims(mask, axis=0)\n        mask = tf.transpose(mask, (1, 0, 2))\n\n    if constants is None:\n        constants = []\n\n    uses_learning_phase = False\n\n    if unroll:\n        if not inputs.shape[0]:\n            raise ValueError('Unrolling requires a fixed number of timesteps.')\n        \n        states = initial_states\n        successive_states = []\n        successive_outputs = []\n        input_list = tf.unstack(inputs)\n        \n        if go_backwards:\n            input_list = input_list[::-1]\n\n        if mask is not None:\n            mask_list = tf.unstack(mask)\n            if go_backwards:\n                mask_list = mask_list[::-1]\n\n            for i, (inp, mask_t) in enumerate(zip(input_list, mask_list)):\n                output, new_states = step_function(inp, states+constants)\n                \n                if getattr(output, '_uses_learning_phase', False):\n                    uses_learning_phase = True\n                \n                # tf.where needs its condition tensor to be the same shape as its two result tensors (A and B)\n                tiled_mask_t = tf.tile(mask_t, [1, tf.shape(output)[1]])\n                \n                if i == 0:\n                    prev_output = tf.zeros_like(output)\n                else:\n                    prev_output = successive_outputs[-1]\n                \n                output = tf.where(tiled_mask_t, output, prev_output)\n                return_states = [tf.where(tiled_mask_t, new_states[j], states[j]) for j in range(len(states))]\n                states = return_states\n                successive_outputs.append(output)\n                successive_states.append(states)\n            \n            last_output = successive_outputs[-1]\n            new_states = successive_states[-1]\n            outputs = tf.stack(successive_outputs)\n        \n        else:\n            for i, inp in enumerate(input_list):\n                output, states = step_function(inp, states+constants)\n                if getattr(output, '_uses_learning_phase', False):\n                    uses_learning_phase = True\n                successive_outputs.append(output)\n                successive_states.append(states)\n            last_output = successive_outputs[-1]\n            new_states = successive_states[-1]\n            outputs = tf.stack(successive_outputs)\n    \n    else:\n        if go_backwards:\n            inputs = tf.reverse(inputs, [0])\n\n        states = tuple(initial_states)\n        time_steps = tf.shape(inputs)[0]\n        outputs, _ = step_function(inputs[0], initial_states+constants)\n        \n        output_ta = tf.TensorArray(dtype=outputs.dtype, size=time_steps)\n        input_ta = tf.TensorArray(dtype=inputs.dtype, size=time_steps)\n        input_ta = input_ta.unstack(inputs)\n        time = tf.constant(0, dtype=tf.int32)\n        \n        if mask is not None:\n            if not states:\n                raise ValueError('No initial states provided! When using masking in an RNN, you should provide initial states (and your step function should return as its first state at time `t` the output at time `t-1`).')\n            if go_backwards:\n                mask = tf.reverse(mask, [0])\n            \n            mask_ta = tf.TensorArray(dtype=tf.bool, size=time_steps)\n            mask_ta = mask_ta.unstack(mask)\n\n            def _step(time, output_ta, *states):\n                current_input = input_ta.read(time)\n                mask_t = mask_ta.read(time)\n                output, new_states = step_function(current_input, tuple(states)+tuple(constants))\n                \n                if getattr(output, '_uses_learning_phase', False):\n                    uses_learning_phase = True\n                \n                for state, new_state in zip(states, new_states):\n                    new_state.set_shape(state.get_shape())\n                \n                tiled_mask_t = tf.tile(mask_t, [1, tf.shape(output)[1]])\n                output = tf.where(tiled_mask_t, output, states[0])\n                new_states = [tf.where(tiled_mask_t, new_states[i], states[i]) for i in range(len(states))]\n                output_ta = output_ta.write(time, output)\n                return (time+1, output_ta) + tuple(new_states)\n        else:\n            def _step(time, output_ta, *states):\n                current_input = input_ta.read(time)\n                output, new_states = step_function(current_input, tuple(states)+tuple(constants))\n                \n                if getattr(output, '_uses_learning_phase', False):\n                    uses_learning_phase = True\n                \n                for state, new_state in zip(states, new_states):\n                    new_state.set_shape(state.get_shape())\n                output_ta = output_ta.write(time, output)\n                return (time+1, output_ta) + tuple(new_states)\n\n        final_outputs = tf.while_loop(cond=lambda time, *args: time < time_steps,\n                                      body=_step,\n                                      loop_vars=(time, output_ta) + states,\n                                      parallel_iterations=32,\n                                      swap_memory=True)\n        last_time = final_outputs[0]\n        output_ta = final_outputs[1]\n        new_states = final_outputs[2:]\n\n        outputs = output_ta.stack()\n        last_output = output_ta.read(last_time-1)\n\n    outputs = tf.transpose(outputs, [1, 0] + list(range(2, outputs.shape.ndims)))\n    last_output._uses_learning_phase = uses_learning_phase\n    return last_output, outputs, new_states",
            "imports": [
                "import tensorflow as tf"
            ]
        }
    ]
}