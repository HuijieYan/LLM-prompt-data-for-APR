{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    if len(inputs.shape) < 3:\n        raise ValueError('Input should be at least 3D.')\n\n    inputs = tf.transpose(inputs, perm=[1, 0, 2])\n\n    if mask is not None:\n        if mask.dtype != tf.bool:\n            mask = tf.cast(mask, tf.bool)\n        if len(mask.get_shape()) == len(inputs.get_shape()) - 1:\n            mask = tf.expand_dims(mask, len(mask.get_shape()))\n\n        mask = tf.transpose(mask, perm=[1, 0, 2])\n\n    if constants is None:\n        constants = []\n\n    uses_learning_phase = False\n\n    if unroll:\n        time_steps = inputs.get_shape()[0].value\n        successive_states = []\n        successive_outputs = []\n        states = initial_states\n\n        if go_backwards:\n            inputs = tf.reverse(inputs, axis=[0])\n\n        def _step(time, output_ta_t, *states):\n            current_input = array_ops.gather(inputs, time)\n            mask_t = array_ops.gather(mask, time) if mask is not None else None\n            output, new_states = step_function(current_input, states + constants)\n\n            if getattr(output, '_uses_learning_phase', False):\n                nonlocal uses_learning_phase\n                uses_learning_phase = True\n\n            if mask_t is not None:\n                mask_t = array_ops.squeeze(mask_t, axis=[1])\n                output = tf.where(mask_t, output, output_ta_t.read(time - 1))\n\n                new_states = [tf.where(mask_t, new_state, state) for state, new_state in zip(states, new_states)]\n\n            output_ta_t = output_ta_t.write(time, output)\n            return (time + 1, output_ta_t) + tuple(new_states)\n\n        output_ta = tensor_array_ops.TensorArray(dtype=inputs.dtype, size=time_steps)\n\n        final_outputs = control_flow_ops.while_loop(\n            cond=lambda time, *_: time < time_steps,\n            body=_step,\n            loop_vars=(0, output_ta) + states,\n            back_prop=False,\n            parallel_iterations=32,\n            swap_memory=True)\n\n        last_time = final_outputs[0]\n        output_ta = final_outputs[1]\n        new_states = final_outputs[2:]\n\n        outputs = output_ta.stack()\n        last_output = output_ta.read(last_time - 1)\n\n    else:\n        # Handle non-unrolled case\n        raise NotImplementedError(\"Non-unrolled RNN is not implemented yet.\")\n\n    axes = [1, 0] + list(range(2, len(outputs.get_shape())))\n    outputs = tf.transpose(outputs, perm=axes)\n    last_output._uses_learning_phase = uses_learning_phase\n    return last_output, outputs, new_states",
            "imports": [
                "import tensorflow as tf",
                "from tensorflow.python.ops import tensor_array_ops, control_flow_ops",
                "from tensorflow.python.ops import array_ops, math_ops"
            ]
        }
    ]
}