{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    # ... (omitted code) ...\n\n    # ... (previous code) ...\n\n\n    def _step(time, output_ta_t, *states):\n        \"\"\"RNN step function.\n    \n        # Arguments\n            time: Current timestep value.\n            output_ta_t: TensorArray.\n            *states: List of states.\n    \n        # Returns\n            Tuple: `(time + 1,output_ta_t) + tuple(new_states)`\n        \"\"\"\n        current_input = input_ta.read(time)\n        mask_t = mask_ta.read(time) if mask is not None else None\n        output, new_states = step_function(current_input, tuple(states) + tuple(constants))\n        if getattr(output, '_uses_learning_phase', False):\n            global uses_learning_phase\n            uses_learning_phase = True\n        for state, new_state in zip(states, new_states):\n            new_state.set_shape(state.get_shape())\n        if mask_t is not None:\n            output = tf.where(mask_t, output, states[0])\n            new_states = [tf.where(mask_t, new_states[i], states[i]) for i in range(len(states))]\n        output_ta_t = output_ta_t.write(time, output)\n        return (time + 1, output_ta_t) + tuple(new_states)"
        }
    ]
}