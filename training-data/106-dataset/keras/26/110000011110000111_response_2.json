{
    "keras": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2676,
            "file_name": "keras/backend/tensorflow_backend.py",
            "replace_code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    \"\"\"Iterates over the time dimension of a tensor.\n\n    # Arguments\n    # ... (same as original documentation)\n\n    # Returns\n    # ... (same as original documentation)\n\n    # Raises\n    # ... (same as original documentation)\n    \"\"\"\n    ndim = len(inputs.get_shape())\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n\n    # Transpose to time-major, i.e.\n    # from (batch, time, ...) to (time, batch, ...)\n    axes = [1, 0] + list(range(2, ndim))\n    inputs = tf.transpose(inputs, axes)\n\n    if mask is not None:\n        if mask.dtype != tf.bool:\n            mask = tf.cast(mask, tf.bool)\n        if len(mask.get_shape()) == ndim - 1:\n            mask = tf.expand_dims(mask, -1)\n        mask = tf.transpose(mask, axes)\n\n    if constants is None:\n        constants = []\n\n    uses_learning_phase = False\n\n    if unroll:\n        if not inputs.get_shape()[0]:\n            raise ValueError('Unrolling requires a fixed number of timesteps.')\n        states = initial_states\n        successive_states = []\n        successive_outputs = []\n\n        input_list = tf.unstack(inputs)\n        if go_backwards:\n            input_list = reversed(input_list)\n\n        if mask is not None:\n            mask_list = tf.unstack(mask)\n            if go_backwards:\n                mask_list = reversed(mask_list)\n\n            for inp, mask_t in zip(input_list, mask_list):\n                output, new_states = step_function(inp, states + constants)\n                if getattr(output, '_uses_learning_phase', False):\n                    uses_learning_phase = True\n\n                tiled_mask_t = tf.tile(tf.expand_dims(mask_t, -1), [1, tf.shape(output)[1]])\n                prev_output = successive_outputs[-1] if successive_outputs else tf.zeros_like(output)\n                output = tf.where(tiled_mask_t, output, prev_output)\n\n                return_states = [tf.where(tiled_mask_t, new_state, state) for state, new_state in zip(states, new_states)]\n                states = return_states\n                successive_outputs.append(output)\n                successive_states.append(states)\n            last_output = successive_outputs[-1]\n            new_states = successive_states[-1]\n            outputs = tf.stack(successive_outputs)\n        else:\n            for inp in input_list:\n                output, states = step_function(inp, states + constants)\n                if getattr(output, '_uses_learning_phase', False):\n                    uses_learning_phase = True\n                successive_outputs.append(output)\n                successive_states.append(states)\n            last_output = successive_outputs[-1]\n            new_states = successive_states[-1]\n            outputs = tf.stack(successive_outputs)\n\n    else:\n        if go_backwards:\n            inputs = tf.reverse(inputs, [0])\n\n        states = tuple(initial_states)\n\n        time_steps = tf.shape(inputs)[0]\n        outputs, _ = step_function(inputs[0], initial_states + constants)\n        output_ta = tf.TensorArray(dtype=outputs.dtype, size=time_steps)\n        input_ta = tf.TensorArray(dtype=inputs.dtype, size=time_steps)\n        input_ta = input_ta.unstack(inputs)\n        time = tf.constant(0, dtype=tf.int32, name='time')\n\n        if mask is not None:\n            if not states:\n                raise ValueError('No initial states provided!')\n            if go_backwards:\n                mask = tf.reverse(mask, [0])\n\n            mask_ta = tf.TensorArray(dtype=tf.bool, size=time_steps)\n            mask_ta = mask_ta.unstack(mask)\n\n            def _step(time, output_ta_t, *states):\n                \"\"\"RNN step function.\"\"\"\n                current_input = input_ta.read(time)\n                mask_t = mask_ta.read(time)\n                output, new_states = step_function(current_input, states + constants)\n                if getattr(output, '_uses_learning_phase', False):\n                    nonlocal uses_learning_phase\n                    uses_learning_phase = True\n                new_states = [tf.where(tf.tile(tf.expand_dims(mask_t, -1), [1, tf.shape(new_state)[1]]), new_state, state) for state, new_state in zip(states, new_states)]\n                output_ta_t = output_ta_t.write(time, output)\n                return (time + 1, output_ta_t) + tuple(new_states)\n        else:\n            def _step(time, output_ta_t, *states):\n                \"\"\"RNN step function.\"\"\"\n                current_input = input_ta.read(time)\n                output, new_states = step_function(current_input, states + constants)\n                if getattr(output, '_uses_learning_phase', False):\n                    nonlocal uses_learning_phase\n                    uses_learning_phase = True\n                output_ta_t = output_ta_t.write(time, output)\n                return (time + 1, output_ta_t) + new_states\n\n        final_outputs = tf.while_loop(\n            cond=lambda time, *_: time < time_steps,\n            body=_step,\n            loop_vars=(time, output_ta) + states,\n            parallel_iterations=32,\n            swap_memory=True)\n\n        last_time = final_outputs[0]\n        output_ta = final_outputs[1]\n        new_states = final_outputs[2:]\n\n        outputs = output_ta.stack()\n        last_output = output_ta.read(last_time - 1)\n\n    axes = [1, 0] + list(range(2, len(outputs.shape)))\n    outputs = tf.transpose(outputs, perm=axes)\n    last_output._uses_learning_phase = uses_learning_phase\n    return last_output, outputs, new_states",
            "imports": []
        }
    ]
}