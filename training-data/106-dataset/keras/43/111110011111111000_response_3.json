{
    "keras": [
        {
            "bugID": 43,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 7,
            "file_name": "keras/utils/np_utils.py",
            "replace_code": "def to_categorical(y, num_classes=None):\n    import numpy as np\n    \"\"\"Converts a class vector (integers) to binary class matrix.\n    \n    E.g. for use with categorical_crossentropy.\n    \n    # Arguments\n        y: class vector to be converted into a matrix\n            (integers from 0 to num_classes).\n        num_classes: total number of classes.\n    \n    # Returns\n        A binary matrix representation of the input.\n    \"\"\"\n    y = np.array(y, dtype='int')\n    # Check if num_classes is None\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n        \n    # Check input shape\n    input_shape = y.shape\n    if len(input_shape) > 0:\n        n = y.shape[0]\n        if len(input_shape) > 1:\n            for dim in input_shape[1:]:\n                n *= dim\n        categorical = np.zeros((n, num_classes))\n        for i in range(n):\n            categorical[i, y[i]] = 1\n        if len(input_shape) == 1:\n            output_shape = (n, num_classes)\n        else:\n            output_shape = input_shape + (num_classes,)\n    else:\n        categorical = np.zeros((1, num_classes))\n        categorical[0, y] = 1\n        output_shape = (1, num_classes)\n    \n    return np.reshape(categorical, output_shape)"
        }
    ]
}