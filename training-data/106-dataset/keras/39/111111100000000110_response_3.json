{
    "keras": [
        {
            "bugID": 39,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 306,
            "file_name": "keras/utils/generic_utils.py",
            "replace_code": "def update(self, current, values=None):\n        \"\"\"Updates the progress bar.\n        \n        # Arguments\n             current: Index of the current step.\n             values: List of tuples (name, value_for_last_step).\n                The progress bar will display averages for these values.\n        \"\"\"\n        if not self.target:\n            self.target = current\n            self.start = time.time()\n            self.last_update = 0\n            if self.target is not None:\n                num_digits = int(\n                    np.floor(np.log10(self.target))) + 1\n                self._total_width = self.width\n            if self._dynamic_display:\n                self._total_width *= 2\n            bar = '%%%dd/%%d [' % num_digits\n            bar = bar % current\n            bar += '-' * (self.width - 6)\n            bar += ']'\n            if self.target is not None:\n                bar += '  %ds ' % self.target\n            self._total_width = max(self._total_width, len(bar))\n            if self.target is not None:\n                self.update(0)\n            else:\n                sys.stdout.write('\\n')\n            sys.stdout.flush()\n        if current < self.target:\n            if values is None:\n                values = []\n            for k, v in values:\n                if k not in self.sum_values:\n                    self.sum_values[k] = [v * (current - self.seen_so_far),\n                                          current - self.seen_so_far]\n                    self.unique_values.append(k)\n                else:\n                    self.sum_values[k][0] += v * (current - self.seen_so_far)\n                    self.sum_values[k][1] += (current - self.seen_so_far)\n            self.seen_so_far = current\n            now = time.time()\n            if self.target is not None:\n                num_digits_i = int(\n                    np.floor(np.log10(self.target))) + 1\n                bar = '%%%dd/%%d [' % num_digits\n                bar = bar % current\n                prog = float(current) / self.target\n                fill_width = int(self.width * prog)\n                bar += '-' * (fill_width - 1)\n                if current < self.target:\n                    bar += '>'\n                else:\n                    bar += '='\n                prog_width = int(self.width * prog)\n                if prog_width > 0:\n                    bar += ('=' * (prog_width - 1))\n                    if current < self.target:\n                        bar += '>'\n                    else:\n                        bar += '='\n                bar += ('.' * (self.width - prog_width))\n                bar += ']'\n                sys.stdout.write(bar)\n                if current:\n                    time_per_unit = (now - self.start) / current\n                else:\n                    time_per_unit = 0\n                sys.stdout.write(bar)\n                sys.stdout.flush()",
            "import_list": []
        }
    ]
}