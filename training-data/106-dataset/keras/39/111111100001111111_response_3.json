{
    "keras": [
        {
            "bugID": 39,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 306,
            "file_name": "keras/utils/generic_utils.py",
            "replace_code": "def update(self, current, values=None, force=False):\n        values = values or []\n        for value_tuple in values:\n            self.sum_values.setdefault(value_tuple[0], [0, 0])\n            self.sum_values[value_tuple[0]][0] += value_tuple[1] * (current - self.seen_so_far)\n            self.sum_values[value_tuple[0]][1] += (current - self.seen_so_far)\n        \n        self.seen_so_far = current\n    \n        now = time.time()\n        if self.verbose == 1 and (force or (now - self.last_update) >= self.interval or current >= self.target):\n            self.last_update = now\n\n            bar = 'Completed: [%i/%i]' % (current, self.target) if self.target is not None else 'Completed %i' % current\n            sys.stdout.write('\\r%s' % bar)\n            sys.stdout.flush()\n\n            if current >= self.target:\n                sys.stdout.write('\\n')",
            "imports": [
                "import sys",
                "import time",
                "import numpy as np"
            ]
        }
    ]
}