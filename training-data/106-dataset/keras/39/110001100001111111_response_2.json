{
    "keras": [
        {
            "bugID": 39,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 306,
            "file_name": "keras/utils/generic_utils.py",
            "replace_code": "def update(self, current, values=None, force=False):\n        values = values or []\n        for k, v in values:\n            if k not in self.sum_values:\n                self.sum_values[k] = [v * (current - self.seen_so_far),\n                                      current - self.seen_so_far]\n                self.unique_values.append(k)\n            else:\n                prev_avg = self.sum_values[k][0] / max(1, self.sum_values[k][1])\n                self.sum_values[k][0] += v * (current - self.seen_so_far)\n                self.sum_values[k][1] += (current - self.seen_so_far)\n                new_avg = self.sum_values[k][0] / max(1, self.sum_values[k][1])\n                avg_diff = new_avg - prev_avg\n                if force or abs(avg_diff) > 1e-5:\n                    self.sum_values[k] = [v * (current - self.seen_so_far),\n                                          current - self.seen_so_far]\n\n        self.seen_so_far = current\n\n        now = time.time()\n        if self.verbose == 1:\n            if (not force and (now - self.last_update) < self.interval and\n                    current < self.target):\n                return\n\n            if self.target is not None:\n                numdigits = len(str(self.target))\n                barstr = '%d/%d [' % (current, self.target)\n                bar = barstr + ('=' * current) + ('.' * (self.target - current)) + ']'\n            else:\n                bar = '%d/Unknown' % current\n\n            sys.stdout.write('\\b' * self.total_width)\n            sys.stdout.write('\\r')\n            sys.stdout.write(bar)\n            sys.stdout.flush()\n            if current >= self.target:\n                sys.stdout.write('\\n')\n        elif self.verbose == 2:\n            if self.target is None or current >= self.target:\n                for k in self.unique_values:\n                    avg = np.mean(\n                        self.sum_values[k][0] / max(1, self.sum_values[k][1]))\n                    sys.stdout.write('- %s: %.4f' % (k, avg))\n                sys.stdout.write('\\n')\n\n        self.last_update = now",
            "imports": [
                "import numpy as np",
                "import sys",
                "import time"
            ]
        }
    ]
}