{
    "keras": [
        {
            "bugID": 39,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 306,
            "file_name": "keras/utils/generic_utils.py",
            "replace_code": "def update(self, current, values=None, force=False):\n        \"\"\"Updates the progress bar.\n    \n        # Arguments\n            current: Index of current step.\n            values: List of tuples (name, value_for_last_step).\n                The progress bar will display averages for these values.\n            force: Whether to force visual progress update.\n        \"\"\"\n        values = values or []\n        if self.target is not None and current < self.target:\n            for k, v in values:\n                if k not in getattr(self, 'sum_values', {}):\n                    getattr(self, 'sum_values', {})[k] = [v * (current - getattr(self, 'seen_so_far', 0)),current - getattr(self, 'seen_so_far', 0)]\n                    getattr(self, 'unique_values', []).append(k)\n                else:\n                    getattr(self, 'sum_values', {})[k][0] += v * (current - getattr(self, 'seen_so_far', 0))\n                    getattr(self, 'sum_values', {})[k][1] += (current - getattr(self, 'seen_so_far', 0))\n                setattr(self, 'seen_so_far', current)\n    \n            now = time.time()\n            info = ' - %.0fs' % (now - getattr(self, 'start', 0))\n            if getattr(self, 'verbose', 1) == 1:\n                if (not force and (now - getattr(self, 'last_update', 0)) < getattr(self, 'interval', 0)):\n                    return\n    \n                prev_total_width = getattr(self, 'total_width', 0)\n                if getattr(self, '_dynamic_display', False):\n                    sys.stdout.write('\\b' * prev_total_width)\n                    sys.stdout.write('\\r')\n                else:\n                    sys.stdout.write('\\n')\n                \n                if getattr(self, 'target', None) is not None:\n                    numdigits = int(np.floor(np.log10(getattr(self, 'target'))) + 1)\n                    barstr = '%%%dd/%d [' % (numdigits, getattr(self, 'target'))\n                    bar = barstr % current\n                    prog = float(current) / getattr(self, 'target')\n                    prog_width = int(getattr(self, 'width') * prog)\n                    if prog_width > 0:\n                        bar += ('=' * (prog_width - 1))\n                        if current < getattr(self, 'target'):\n                            bar += '>'\n                        else:\n                            bar += '='\n                    bar += ('.' * (getattr(self, 'width') - prog_width))\n                    bar += ']'\n                else:\n                    bar = '%7d/Unknown' % current\n                \n                setattr(self, 'total_width', len(bar))\n                sys.stdout.write(bar)\n                \n                if current:\n                    time_per_unit = (now - getattr(self, 'start')) / current\n                else:\n                    time_per_unit = 0\n                if getattr(self, 'target', None) is not None and current < getattr(self, 'target'):\n                    eta = time_per_unit * (getattr(self, 'target') - current)\n                    if eta > 3600:\n                        eta_format = '%d:%02d:%02d' % (eta // 3600, (eta % 3600) // 60, eta % 60)\n                    elif eta > 60:\n                        eta_format = '%d:%02d' % (eta // 60, eta % 60)\n                    else:\n                        eta_format = '%ds' % eta\n    \n                    info = ' - ETA: %s' % eta_format\n                else:\n                    if time_per_unit >= 1:\n                        info += ' %.0fs/step' % time_per_unit\n                    elif time_per_unit >= 1e-3:\n                        info += ' %.0fms/step' % (time_per_unit * 1e3)\n                    else:\n                        info += ' %.0fus/step' % (time_per_unit * 1e6)\n    \n                for k in getattr(self, 'unique_values', []):\n                    info += ' - %s:' % k\n                    if isinstance(getattr(self, 'sum_values', {})[k], list):\n                        avg = np.mean(\n                            getattr(self, 'sum_values', {})[k][0] / max(1, getattr(self, 'sum_values', {})[k][1]))\n                        if abs(avg) > 1e-3:\n                            info += ' %.4f' % avg\n                        else:\n                            info += ' %.4e' % avg\n                    else:\n                        info += ' %s' % getattr(self, 'sum_values', {})[k]\n    \n                setattr(self, 'total_width', len(info))\n                if prev_total_width > getattr(self, 'total_width', 0):\n                    info += (' ' * (prev_total_width - getattr(self, 'total_width', 0)))\n                \n                if getattr(self, 'target', None) is not None and current >= getattr(self, 'target'):\n                    info += '\\n'\n                \n                sys.stdout.write(info)\n                sys.stdout.flush()\n        \n            elif getattr(self, 'verbose', 2) == 2:\n                if getattr(self, 'target', None) is None or current >= getattr(self, 'target'):\n                    for k in getattr(self, 'unique_values', []):\n                        info += ' - %s:' % k\n                        avg = np.mean(\n                            getattr(self, 'sum_values', {})[k][0] / max(1, getattr(self, 'sum_values', {})[k][1]))\n                        if avg > 1e-3:\n                            info += ' %.4f' % avg\n                        else:\n                            info += ' %.4e' % avg\n                    info += '\\n'\n        \n                    sys.stdout.write(info)\n                    sys.stdout.flush()\n        \n            setattr(self, 'last_update', now)",
            "import_list": []
        }
    ]
}