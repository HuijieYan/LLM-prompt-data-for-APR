{
    "keras": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 114,
            "file_name": "keras/engine/sequential.py",
            "replace_code": "def add(self, layer):\n\n    \"\"\"Adds a layer instance on top of the layer stack.\n    \n    # Arguments\n        layer: layer instance.\n    \n    # Raises\n        TypeError: If `layer` is not a layer instance.\n        ValueError: In case the `layer` argument does not\n            know its input shape.\n        ValueError: In case the `layer` argument has\n            multiple output tensors, or is already connected\n            somewhere else (forbidden in `Sequential` models).\n    \"\"\"\n    if not isinstance(layer, Layer):\n        raise TypeError('The added layer must be an instance of class Layer. Found: ' + str(layer))\n    \n    self.built = False\n    \n    if isinstance(layer, InputLayer):\n        if not self._layers:\n            # First layer in model: check that it is an input layer.\n            if len(layer._inbound_nodes[-1].output_tensors) != 1:\n                raise ValueError('The InputLayer should have a single output tensor.')\n    \n            self.outputs = [layer._inbound_nodes[-1].output_tensors[0]]\n            self.inputs = network.get_source_inputs(self.outputs[0])\n        else:\n            raise ValueError('The InputLayer must be the first layer in model.')\n    else:\n        # For other layer types\n        if not self._layers:\n            batch_shape = None\n            set_inputs = False\n    \n            if hasattr(layer, 'batch_input_shape'):\n                batch_shape = layer.batch_input_shape\n                dtype = layer.dtype\n                \n                x = Input(\n                    batch_shape=batch_shape,\n                    dtype=dtype,\n                    name=layer.name + '_input'\n                )\n                layer(x)\n                set_inputs = True\n    \n        else:\n            output_tensor = layer(self.outputs[0])\n            self.outputs = [output_tensor]\n    \n        if self.inputs:\n            self.build()\n        else:\n            self._layers.append(layer)"
        }
    ]
}