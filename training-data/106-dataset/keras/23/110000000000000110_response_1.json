{
    "keras": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 114,
            "file_name": "keras/engine/sequential.py",
            "replace_code": "def add(self, layer):\n    # Adds a layer instance on top of the layer stack.\n\n    # Arguments\n    #     layer: layer instance.\n\n    # Raises\n    #     TypeError: If `layer` is not a layer instance.\n    #     ValueError: In case the `layer` argument does not\n    #         know its input shape.\n    #     ValueError: In case the `layer` argument has\n    #         multiple output tensors, or is already connected\n    #         somewhere else (forbidden in `Sequential` models).\n\n    if not isinstance(layer, Layer):\n        raise TypeError('The added layer must be '\n                        'an instance of class Layer. '\n                        'Found: ' + str(layer))\n\n    if not self.layers:\n        # For the case of being input layer\n        # Create an input layer\n        batch_input_shape = [None]\n        x = Input(batch_input_shape=batch_input_shape)\n        layer(x)\n        self.outputs = [x]\n        self.inputs = [x]\n    else:\n        if self.outputs:\n            output_tensor = layer(self.outputs[0])\n            # Keep track of output tensor of the newly added layer\n            self.outputs = [output_tensor]\n        self.layers.append(layer)",
            "import_list": []
        }
    ]
}