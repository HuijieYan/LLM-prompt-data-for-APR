{
    "keras": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 114,
            "file_name": "keras/engine/sequential.py",
            "replace_code": "def add(self, layer):\n    if isinstance(layer, Layer):\n        if isinstance(layer, Sequential):\n            # Iterate through the nested Sequential model's layers\n            nested_first_layer = layer.layers[0]\n            while isinstance(nested_first_layer, Sequential):\n                nested_first_layer = nested_first_layer.layers[0]\n\n            if not isinstance(nested_first_layer, InputLayer):\n                # Create an input tensor and call `layer` on the input tensor.\n                batch_shape = nested_first_layer.batch_input_shape\n                dtype = nested_first_layer.dtype\n\n                # Instantiate the input layer.\n                x = Input(\n                    batch_shape=batch_shape,\n                    dtype=dtype,\n                    name=layer.name + '_input')\n                # This will build the current layer\n                # and create the node connecting the current layer\n                # to the input layer we just created.\n                layer(x)\n                self._layers.append(layer)\n            else:\n                # Corner case where the user passes an InputLayer via `add`.\n                assert len(layer._inbound_nodes[-1].output_tensors) == 1\n                self._layers.append(layer)\n        else:\n            self.built = False\n            self._layers.append(layer)\n    else:\n        raise TypeError('The added layer must be an instance of class Layer. Found: ' + str(layer))",
            "imports": []
        }
    ]
}