{
    "keras": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 114,
            "file_name": "keras/engine/sequential.py",
            "replace_code": "def add(self, layer):\n    \"\"\"Adds a layer instance on top of the layer stack.\n\n    # Arguments\n        layer: layer instance.\n\n    # Raises\n        TypeError: If `layer` is not a layer instance.\n    \"\"\"\n    if not isinstance(layer, Layer):\n        raise TypeError('The added layer must be an instance of class Layer. '\n                        'Found: ' + str(layer))\n\n    if not self.outputs:\n        # For the first layer, set the inputs\n        if hasattr(layer, 'batch_input_shape'):\n            self.inputs = [Input(batch_shape=layer.batch_input_shape,\n                                 dtype=layer.dtype, name=layer.name + '_input')\n                           ]\n            x = self.inputs[0]\n            if isinstance(layer, Model):\n                x = layer(x)\n            self.outputs = [x]\n    else:\n        # For subsequent layers, connect the output of the previous layer to this layer\n        x = self.outputs[0]\n        if isinstance(x, list):\n            raise TypeError('All layers in a Sequential model should have a single output tensor. '\n                            'For multi-output layers, use the functional API.')\n        output_tensor = layer(x)\n        self.outputs = [output_tensor]\n\n    # Add the layer to the list of layers\n    self._layers.append(layer)\n    self.built = False",
            "imports": []
        }
    ]
}