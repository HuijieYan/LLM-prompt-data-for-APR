{
    "keras": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 114,
            "file_name": "keras/engine/sequential.py",
            "replace_code": "def add(self, layer):\n    if not isinstance(layer, Layer):\n        raise TypeError('The added layer must be an instance of class Layer. Found: ' + str(layer))\n\n    self.built = False\n    if not self._layers:\n        # First layer in model\n        if not isinstance(layer, InputLayer):\n            # Create an input tensor and call `layer` on the input tensor.\n            # First, we need to infer the expected input shape and dtype.\n            first_layer = layer\n\n            if isinstance(layer, (Model, Sequential)):\n                if not layer.layers:\n                    raise ValueError('Cannot add an empty model to a `Sequential` model.')\n\n                # Get the first layer's input specs\n                input_shape = layer.input_shape\n                dtype = layer.dtype\n            else:\n                input_shape = layer.input_shape\n                dtype = layer.dtype\n\n            x = Input(shape=input_shape, dtype=dtype, name=layer.name + '_input')\n            # This will build the current layer and create the node connecting the current layer to the input layer we just created.\n            layer(x)\n        else:\n            input_shape = layer.input_shape\n            dtype = layer.dtype\n\n        if len(layer._inbound_nodes[-1].output_tensors) != 1:\n            raise ValueError('All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.')\n        self.outputs = [layer._inbound_nodes[-1].output_tensors[0]]\n        self.inputs = network.get_source_inputs(self.outputs[0])\n    else:\n        output_tensor = layer(self.outputs[0])\n        if isinstance(output_tensor, list):\n            raise TypeError('All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.')\n        self.outputs = [output_tensor]\n    \n    if not self.inputs:\n        self._layers.append(layer)\n    else:\n        self.build()",
            "import_list": []
        }
    ]
}