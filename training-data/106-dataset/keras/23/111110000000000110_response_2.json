{
    "keras": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 114,
            "file_name": "keras/engine/sequential.py",
            "replace_code": "def add(self, layer):\n    \"\"\"Adds a layer instance on top of the layer stack.\n\n    # Arguments\n        layer: layer instance.\n\n    # Raises\n        TypeError: If `layer` is not a layer instance.\n        ValueError: In case the `layer` argument does not\n            know its input shape.\n        ValueError: In case the `layer` argument has\n            multiple output tensors, or is already connected\n            somewhere else (forbidden in `Sequential` models).\n    \"\"\"\n    if not isinstance(layer, Layer):\n        raise TypeError('The added layer must be '\n                        'an instance of class Layer. '\n                        'Found: ' + str(layer))\n    if not hasattr(layer, '_batch_input_shape'):\n        raise ValueError('You tried to add a layer with '\n                         'input shape ' + str(layer._batch_input_shape) +\n                         ' but it has no information '\n                         'about its expected input shape. '\n                         'This model only supports layers with '\n                         'a known input or batch_input_shape.')\n    if not hasattr(layer, 'call'):\n        raise ValueError('You tried to add a layer with '\n                         'output ' + str(layer.output) +\n                         ' but a layer is expected.')\n    if self.layers:\n        # Infer the input shape\n        try:\n            shape = layer.batch_input_shape\n        except AttributeError:\n            raise ValueError('You tried to add a layer with '\n                             'output shape ' + str(layer.output_shape) +\n                             ' but use manual or automatic layer inference '\n                             'using the `input_shape` argument of the '\n                             'first layer in your model.')\n        if not self.layers[-1]._inbound_nodes:\n            self.outputs = [layer.output]\n        if not self.outputs:\n            raise ValueError('The previous layer can not '\n                             'be connected to the new layer.')\n        else:\n            output_tensor = layer(self.outputs[0])\n            if isinstance(output_tensor, list):\n                raise ValueError('All layers in the model '\n                                 'should have a single output tensor.')\n        self.layers.append(layer)",
            "imports": []
        }
    ]
}