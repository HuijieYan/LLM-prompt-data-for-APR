{
    "keras": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 114,
            "file_name": "keras/engine/sequential.py",
            "replace_code": "def add(self, layer):\n    \"\"\"Adds a layer instance on top of the layer stack.\n\n    # Arguments\n        layer: layer instance.\n\n    # Raises\n        TypeError: If `layer` is not a layer instance.\n        ValueError: In case the `layer` argument does not\n            know its input shape.\n        ValueError: In case the `layer` argument has\n            multiple output tensors, or is already connected\n            somewhere else (forbidden in `Sequential` models).\n    \"\"\"\n    if not isinstance(layer, Layer):\n        raise TypeError('The added layer must be an instance of class Layer. Found: ' + str(layer))\n\n    if self.outputs:\n        raise AttributeError('Sequential model cannot be modified after being built')\n    if self.inputs:\n        if hasattr(layer, '_inbound_nodes') and layer._inbound_nodes:\n            raise ValueError('All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.')\n\n    layer_id = len(self._layers)\n    n_layers = len(self.outputs) if self.outputs else 0\n\n    if n_layers == 0:  # first use case, no Input_shape and the added layers will carry the input shape\n        if not hasattr(layer, '_inbound_nodes') or not layer._inbound_nodes:\n            if hasattr(layer, 'batch_input_shape') and layer.batch_input_shape:\n                if n_layers < layer_id:\n                    raise ValueError('All layers should have a single output tensor. For multi-output layers, use the functional API.')\n                if layer.batch_input_shape[0]:\n                    self._layers[layer_id:layer_id] = [InputLayer(batch_input_shape=layer.batch_input_shape, dtype=layer.dtype, name=layer.name + '_input')]\n                    layer_id += 1\n\n    # Updating layer index\n    n_layers = len(self._layers)\n\n    if n_layers == layer_id: \n        self._layers.append(layer)\n    else:\n        self._layers[layer_id:layer_id] = [layer]\n\n    self.built = False",
            "import_list": []
        }
    ]
}