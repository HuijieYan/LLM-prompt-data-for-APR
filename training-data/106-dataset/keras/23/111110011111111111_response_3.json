{
    "keras": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 114,
            "file_name": "keras/engine/sequential.py",
            "replace_code": "def add(self, layer):\n    if not isinstance(layer, Layer):\n        raise TypeError('The added layer must be an instance of class Layer. Found: ' + str(layer))\n    \n    self.built = False\n    \n    if not self._layers:\n        set_inputs = False\n        \n        if not isinstance(layer, InputLayer):\n            # Create an input tensor and call `layer` on the input tensor.\n            # First, we need to infer the expected input shape and dtype.\n            first_layer = layer\n            if isinstance(layer, (Model, Sequential)):\n                if not layer.layers:\n                    raise ValueError('Cannot add an empty model to a `Sequential` model.')\n                \n                # Recover the first layer of the deepest model to infer input shape and dtype.\n                while isinstance(first_layer, (Model, Sequential)):\n                    first_layer = first_layer.layers[0]\n                \n                if hasattr(first_layer, 'batch_input_shape'):\n                    batch_shape = first_layer.batch_input_shape\n                    dtype = first_layer.dtype\n                    # Instantiate the input layer.\n                    x = Input(batch_shape=batch_shape, dtype=dtype, name=layer.name + '_input')\n                    layer(x)\n                    set_inputs = True\n                else:\n                    # The layer doesn't know about its expected shape.\n                    batch_shape = None\n        else:\n            set_inputs = True\n        \n        if set_inputs:\n            if len(layer._inbound_nodes[-1].output_tensors) != 1:\n                raise ValueError('All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.')\n            \n            self.outputs = [layer._inbound_nodes[-1].output_tensors[0]]\n            self.inputs = network.get_source_inputs(self.outputs[0])\n    elif self.outputs:\n        output_tensor = layer(self.outputs[0])\n        if isinstance(output_tensor, list):\n            raise TypeError('All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.')\n        self.outputs = [output_tensor]\n    \n    if self.inputs:\n        self.build()\n    else:\n        self._layers.append(layer)",
            "import_list": []
        }
    ]
}