{
    "keras": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 33,
            "file_name": "keras/engine/input_layer.py",
            "replace_code": "def __init__(self, input_shape=None, batch_size=None,\n             batch_input_shape=None,\n             dtype=None, input_tensor=None, sparse=False, name=None):\n    if not name:\n        prefix = 'input'\n        name = prefix + '_' + str(K.get_uid(prefix))\n    super(InputLayer, self).__init__(dtype=dtype, name=name)\n\n    self.trainable = False\n    self.built = True\n    self.sparse = sparse\n\n    if batch_input_shape and len(batch_input_shape) == 0:\n        batch_input_shape = (batch_size,) + tuple(input_shape[1:])\n    \n    if input_tensor is None:\n        input_tensor = K.placeholder(shape=batch_input_shape,\n                                     dtype=dtype,\n                                     sparse=self.sparse,\n                                     name=self.name)\n    else:\n        input_tensor._keras_shape = batch_input_shape\n    self.is_placeholder = True\n    input_tensor._uses_learning_phase = False\n    input_tensor._keras_history = (self, 0, 0)\n    Node(self,\n         outbound_layer=self,\n         inbound_layers=[],\n         node_indices=[],\n         tensor_indices=[],\n         input_tensors=[input_tensor],\n         output_tensors=[input_tensor],\n         input_masks=[None],\n         output_masks=[None],\n         input_shapes=[batch_input_shape],\n         output_shapes=[batch_input_shape])",
            "imports": []
        }
    ]
}