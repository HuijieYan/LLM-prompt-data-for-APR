{
    "keras": [
        {
            "bugID": 25,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 21,
            "file_name": "keras/applications/imagenet_utils.py",
            "replace_code": "def _preprocess_numpy_input(x, data_format, mode):\n    \"\"\"Preprocesses a Numpy array encoding a batch of images.\n\n    # Arguments\n        x: Input array, 3D or 4D.\n        data_format: Data format of the image array.\n        mode: One of \"caffe\", \"tf\" or \"torch\".\n            - caffe: will convert the images from RGB to BGR,\n                then will zero-center each color channel with\n                respect to the ImageNet dataset,\n                without scaling.\n            - tf: will scale pixels between -1 and 1,\n                sample-wise.\n            - torch: will scale pixels between 0 and 1 and then\n                will normalize each channel with respect to the\n                ImageNet dataset.\n\n    # Returns\n        Preprocessed Numpy array.\n    \"\"\"\n    x_copy = x.copy()  # Create a copy of the input array to avoid modifying the original array\n    if mode == 'tf':\n        x_copy = (x_copy / 127.5) - 1.  # Scale pixels between -1 and 1\n        return x_copy\n\n    if mode == 'torch':\n        x_copy /= 255.  # Scale pixels between 0 and 1\n        mean = [0.485, 0.456, 0.406]\n        std = [0.229, 0.224, 0.225]\n        for i in range(3):\n            x_copy[..., i] -= mean[i]\n            if std is not None:\n                x_copy[..., i] /= std[i]\n    else:\n        if data_format == 'channels_first':\n            # 'RGB'->'BGR'\n            if x_copy.ndim == 3:\n                x_copy = x_copy[:, ::-1, ...]\n            else:\n                x_copy = x_copy[:, :, ::-1, ...]\n        else:\n            # 'RGB'->'BGR'\n            x_copy = x_copy[..., ::-1]\n  \n        mean = [103.939, 116.779, 123.68]\n        std = None\n        for i in range(3):\n            x_copy[..., i] -= mean[i]\n            if std is not None:\n                x_copy[..., i] /= std[i]\n\n    return x_copy",
            "import_list": []
        }
    ]
}