{
    "1.1.1": "def process_list_block(docstring, starting_point, section_end,\n                       leading_spaces, marker):\n    ending_point = docstring.find('\\n\\n', starting_point)\n    block = docstring[starting_point:(None if ending_point == -1 else\n                                      ending_point - 1)]\n    # Place marker for later reinjection.\n    docstring_slice = docstring[starting_point:section_end].replace(block, marker)\n    docstring = (docstring[:starting_point]\n                 + docstring_slice\n                 + docstring[section_end:])\n    lines = block.split('\\n')\n    # Remove the computed number of leading white spaces from each line.\n    lines = [re.sub('^' + ' ' * leading_spaces, '', line) for line in lines]\n    # Usually lines have at least 4 additional leading spaces.\n    # These have to be removed, but first the list roots have to be detected.\n    top_level_regex = r'^    ([^\\s\\\\\\(]+):(.*)'\n    top_level_replacement = r'- __\\1__:\\2'\n    lines = [re.sub(top_level_regex, top_level_replacement, line) for line in lines]\n    # All the other lines get simply the 4 leading space (if present) removed\n    lines = [re.sub(r'^    ', '', line) for line in lines]\n    # Fix text lines after lists\n    indent = 0\n    text_block = False\n    for i in range(len(lines)):\n        line = lines[i]\n        spaces = re.search(r'\\S', line)\n        if spaces:\n            # If it is a list element\n            if line[spaces.start()] == '-':\n                indent = spaces.start() + 1\n                if text_block:\n                    text_block = False\n                    lines[i] = '\\n' + line\n            elif spaces.start() < indent:\n                text_block = True\n                indent = spaces.start()\n                lines[i] = '\\n' + line\n        else:\n            text_block = False\n            indent = 0\n    block = '\\n'.join(lines)\n    return docstring, block\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "docs/autogen.py",
    "1.3.2": null,
    "1.4.1": [
        "@pytest.mark.parametrize('docs_descriptor', [\n    test_doc1,\n    test_doc_with_arguments_as_last_block,\n])\ndef test_doc_lists(docs_descriptor):\n    docstring = autogen.process_docstring(docs_descriptor['doc'])\n    assert markdown(docstring) == markdown(docs_descriptor['result'])"
    ],
    "1.4.2": [
        "tests/test_doc_auto_generation.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert ('<p>Base class for recurrent layers.</p>\\n'\\n '<p><strong>Arguments</strong></p>\\n'\\n '<p>return_sequences: Boolean. Whether to return the last output\\n'\\n 'in the output sequence, or the full sequence.\\n'\\n 'return_state: Boolean. Whether to return the last state\\n'\\n 'in addition to the output.</p>') == ('<p>Base class for recurrent layers.</p>\\n'\\n '<p><strong>Arguments</strong></p>\\n'\\n '<ul>\\n'\\n '<li><strong>return_sequences</strong>: Boolean. Whether to return the last '\\n 'output\\n'\\n '    in the output sequence, or the full sequence.</li>\\n'\\n '<li><strong>return_state</strong>: Boolean. Whether to return the last '\\n 'state\\n'\\n '    in addition to the output.</li>\\n'\\n '</ul>')\nE           <p>Base class for recurrent layers.</p>\nE           <p><strong>Arguments</strong></p>\nE         - <ul>\nE         - <li><strong>return_sequences</strong>: Boolean. Whether to return the last output\nE         ?  ^^^^^^^^^^                 ---------\nE         + <p>return_sequences: Boolean. Whether to return the last output\nE         ?  ^\nE         -     in the output sequence, or the full sequence.</li>\nE         ? ----                                             -----\nE         + in the output sequence, or the full sequence.\nE         - <li><strong>return_state</strong>: Boolean. Whether to return the last state\nE         ? ------------            ---------\nE         + return_state: Boolean. Whether to return the last state\nE         -     in addition to the output.</li>\nE         ? ----                            ^^ -\nE         + in addition to the output.</p>\nE         ?                             ^\nE         - </ul>"
        ]
    ],
    "2.1.2": [
        [
            "docs_descriptor = {'doc': 'Base class for recurrent layers.\\n\\n    # Arguments\\n        return_sequences: Boolean. Whether to return the...r the full sequence.\\n- __return_state__: Boolean. Whether to return the last state\\n    in addition to the output.\\n'}\n\n    @pytest.mark.parametrize('docs_descriptor', [\n        test_doc1,\n        test_doc_with_arguments_as_last_block,\n    ])\n    def test_doc_lists(docs_descriptor):\n        docstring = autogen.process_docstring(docs_descriptor['doc'])\n>       assert markdown(docstring) == markdown(docs_descriptor['result'])",
            "\ntests/test_doc_auto_generation.py:355: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "docstring": {
                    "value": "'Base class for recurrent layers.\\n\\n    # Arguments\\n        return_sequences: Boolean. Whether to return the last output\\n            in the output sequence, or the full sequence.\\n        return_state: Boolean. Whether to return the last state\\n            in addition to the output.\\n    '",
                    "shape": "284"
                },
                "starting_point": {
                    "value": "50",
                    "shape": null
                },
                "section_end": {
                    "value": "-1",
                    "shape": null
                },
                "marker": {
                    "value": "'$Arguments$'",
                    "shape": "11"
                },
                "leading_spaces": {
                    "value": "4",
                    "shape": null
                }
            },
            {
                "ending_point": {
                    "value": "-1",
                    "shape": null
                },
                "block": {
                    "value": "'- __return_sequences__: Boolean. Whether to return the last output\\n    in the output sequence, or the full sequence.\\n- __return_state__: Boolean. Whether to return the last state\\n    in addition to the output.\\n'",
                    "shape": "210"
                },
                "docstring_slice": {
                    "value": "'        return_sequences: Boolean. Whether to return the last output\\n            in the output sequence, or the full sequence.\\n        return_state: Boolean. Whether to return the last state\\n            in addition to the output.\\n   '",
                    "shape": "233"
                },
                "lines": {
                    "value": "['- __return_sequences__: Boolean. Whether to return the last output', '    in the output sequence, or the full sequence.', '- __return_state__: Boolean. Whether to return the last state', '    in addition to the output.', '']",
                    "shape": "5"
                },
                "line": {
                    "value": "''",
                    "shape": "0"
                },
                "top_level_regex": {
                    "value": "'^    ([^\\\\s\\\\\\\\\\\\(]+):(.*)'",
                    "shape": "22"
                },
                "top_level_replacement": {
                    "value": "'- __\\\\1__:\\\\2'",
                    "shape": "11"
                },
                "indent": {
                    "value": "0",
                    "shape": null
                },
                "text_block": {
                    "value": "False",
                    "shape": null
                },
                "i": {
                    "value": "4",
                    "shape": null
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "docstring": "str",
                "starting_point": "int",
                "section_end": "int",
                "marker": "str",
                "leading_spaces": "int"
            },
            {
                "ending_point": "int",
                "block": "str",
                "docstring_slice": "str",
                "lines": "list",
                "line": "str",
                "top_level_regex": "str",
                "top_level_replacement": "str",
                "indent": "int",
                "text_block": "bool",
                "i": "int"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "docstring": {
                    "value": "'Base class for recurrent layers.\\n\\n    # Arguments\\n        return_sequences: Boolean. Whether to return the last output\\n            in the output sequence, or the full sequence.\\n        return_state: Boolean. Whether to return the last state\\n            in addition to the output.\\n    '",
                    "shape": "284"
                },
                "starting_point": {
                    "value": "50",
                    "shape": null
                },
                "section_end": {
                    "value": "-1",
                    "shape": null
                },
                "marker": {
                    "value": "'$Arguments$'",
                    "shape": "11"
                },
                "leading_spaces": {
                    "value": "4",
                    "shape": null
                }
            },
            {
                "ending_point": {
                    "value": "-1",
                    "shape": null
                },
                "docstring": {
                    "value": "'Base class for recurrent layers.\\n\\n    # Arguments\\n$Arguments$ '",
                    "shape": "62"
                },
                "block": {
                    "value": "'- __return_sequences__: Boolean. Whether to return the last output\\n    in the output sequence, or the full sequence.\\n- __return_state__: Boolean. Whether to return the last state\\n    in addition to the output.\\n   '",
                    "shape": "213"
                },
                "docstring_slice": {
                    "value": "'$Arguments$'",
                    "shape": "11"
                },
                "lines": {
                    "value": "['- __return_sequences__: Boolean. Whether to return the last output', '    in the output sequence, or the full sequence.', '- __return_state__: Boolean. Whether to return the last state', '    in addition to the output.', '   ']",
                    "shape": "5"
                },
                "line": {
                    "value": "'   '",
                    "shape": "3"
                },
                "top_level_regex": {
                    "value": "'^    ([^\\\\s\\\\\\\\\\\\(]+):(.*)'",
                    "shape": "22"
                },
                "top_level_replacement": {
                    "value": "'- __\\\\1__:\\\\2'",
                    "shape": "11"
                },
                "indent": {
                    "value": "0",
                    "shape": null
                },
                "text_block": {
                    "value": "False",
                    "shape": null
                },
                "i": {
                    "value": "4",
                    "shape": null
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "docstring": "str",
                "starting_point": "int",
                "section_end": "int",
                "marker": "str",
                "leading_spaces": "int"
            },
            {
                "ending_point": "int",
                "docstring": "str",
                "block": "str",
                "docstring_slice": "str",
                "lines": "list",
                "line": "str",
                "top_level_regex": "str",
                "top_level_replacement": "str",
                "indent": "int",
                "text_block": "bool",
                "i": "int"
            }
        ]
    ],
    "3.1.1": [
        "Callbacks documentation not showing bullet points correctly\n",
        "EarlyStopping documentation with wrong format\n"
    ],
    "3.1.2": [
        "The current documentation on callbacks isn't showing bullet points correctly under the \"Arguments\" section of a few models. Here's the example for ModelCheckpoint:\n\nfilepath: string, path to save the model file. monitor: quantity to monitor. verbose: verbosity mode, 0 or 1. save_best_only: if save_best_only=True, the latest best model according to the quantity monitored will not be overwritten. mode: one of {auto, min, max}. If save_best_only=True, the decision to overwrite the current save file is made based on either the maximization or the minimization of the monitored quantity. For val_acc, this should be max, for val_loss this should be min, etc. In auto mode, the direction is automatically inferred from the name of the monitored quantity. save_weights_only: if True, then only the model's weights will be saved (model.save_weights(filepath)), else the full model is saved (model.save(filepath)). period: Interval (number of epochs) between checkpoints.\n\nLooking at the source code, the docstring seems to be organized correctly:\nkeras/keras/callbacks.py\n\nLines 371 to 390 in dc9e510\n\n     # Arguments \n         filepath: string, path to save the model file. \n         monitor: quantity to monitor. \n         verbose: verbosity mode, 0 or 1. \n         save_best_only: if `save_best_only=True`, \n             the latest best model according to \n             the quantity monitored will not be overwritten. \n         mode: one of {auto, min, max}. \n             If `save_best_only=True`, the decision \n             to overwrite the current save file is made \n             based on either the maximization or the \n             minimization of the monitored quantity. For `val_acc`, \n             this should be `max`, for `val_loss` this should \n             be `min`, etc. In `auto` mode, the direction is \n             automatically inferred from the name of the monitored quantity. \n         save_weights_only: if True, then only the model's weights will be \n             saved (`model.save_weights(filepath)`), else the full model \n             is saved (`model.save(filepath)`). \n         period: Interval (number of epochs) between checkpoints. \n     \"\"\" \nIt is however showing up correctly for other models, e.g. ProgbarLogger:\n\nArguments\ncount_mode: One of \"steps\" or \"samples\". Whether the progress bar should count samples seen or steps (batches) seen.\nstateful_metrics: Iterable of string names of metrics that should not be averaged over an epoch. Metrics in this list will be logged as-is. All others will be averaged over time (e.g. loss, etc).\n",
        "EarlyStopping documentation has the wrong format. See here:\nhttps://keras.io/callbacks/#earlystopping\n\nThe Arguments section is bugged.\n"
    ]
}