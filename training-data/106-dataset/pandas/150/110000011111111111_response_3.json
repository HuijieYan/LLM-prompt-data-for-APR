{
    "pandas": [
        {
            "bugID": 150,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 393,
            "file_name": "pandas/core/dtypes/missing.py",
            "replace_code": "def array_equivalent(left, right, strict_nan=False):\n    left, right = np.asarray(left), np.asarray(right)\n\n    # shape compat\n    if left.shape != right.shape:\n        return False\n\n    # Object arrays can contain None, NaN and NaT.\n    # string dtypes must be come to this path for NumPy 1.7.1 compat\n    if left.dtype.kind == 'O' or right.dtype.kind == 'O':\n        if not strict_nan:\n            return np.array_equal(left, right)\n\n        equal_elements = (left == right) | (np.isnan(left) & np.isnan(right))\n        return equal_elements.all()\n\n    # NaNs can occur in float and complex arrays.\n    if np.issubdtype(left.dtype, np.floating) or np.issubdtype(left.dtype, np.complexfloating):\n        if np.prod(left.shape) == 0 and np.prod(right.shape) == 0:\n            return True\n        equal_elements = (left == right) | (np.isnan(left) & np.isnan(right))\n        return equal_elements.all()\n\n    # Handle datetime-like vs integer comparison\n    if np.issubdtype(left.dtype, np.datetime64) and np.issubdtype(right.dtype, np.integer):\n        return False\n\n    # M8/m8\n    if (np.issubdtype(left.dtype, np.datetime64) and np.issubdtype(right.dtype, np.datetime64)) or (\n            np.issubdtype(left.dtype, np.timedelta64) and np.issubdtype(right.dtype, np.timedelta64)):\n        return np.array_equal(left, right)\n\n    # Compare structured dtypes\n    if left.dtype.type is np.void or right.dtype.type is np.void:\n        if left.dtype != right.dtype:\n            return False\n        return np.array_equal(left, right)\n\n    return np.array_equal(left, right)",
            "imports": [
                "import numpy as np"
            ]
        }
    ]
}