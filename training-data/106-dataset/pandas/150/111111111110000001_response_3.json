{
    "pandas": [
        {
            "bugID": 150,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 393,
            "file_name": "pandas/core/dtypes/missing.py",
            "replace_code": "def array_equivalent(left, right, strict_nan=False):\n    left, right = np.asarray(left), np.asarray(right)\n\n    # shape compat\n    if left.shape != right.shape:\n        return False\n\n    if pd_types.is_object_dtype(left) or pd_types.is_object_dtype(right):\n        if not strict_nan:\n            return np.array_equal(left, right)\n        return (left == right).all()\n\n    if pd_types.is_float_dtype(left) or pd_types.is_complex_dtype(left):\n        return ((left == right) | (pd_types.isna(left) & pd_types.isna(right))).all()\n\n    if pd_types.is_datetime64_any_dtype(left) and pd_types.is_numeric(right):\n        return False\n\n    if pd_types.is_datetime64_any_dtype(left) and pd_types.is_datetime64_any_dtype(right):\n        return pd_types.is_dtype_equal(left.dtype, right.dtype) and (left == right).all()\n\n    if pd_types.is_timedelta64_dtype(left) and pd_types.is_numeric_dtype(right):\n        return False\n\n    if pd_types.is_timedelta64_dtype(left) and pd_types.is_timedelta64_dtype(right):\n        return pd_types.is_dtype_equal(left.dtype, right.dtype) and (left == right).all()\n\n    return pd_types.is_dtype_equal(left.dtype, right.dtype) and np.array_equal(left, right)",
            "imports": [
                "import numpy as np",
                "import pandas.api.types as pd_types"
            ]
        }
    ]
}