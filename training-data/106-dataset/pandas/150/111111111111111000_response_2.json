{
    "pandas": [
        {
            "bugID": 150,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 393,
            "file_name": "pandas/core/dtypes/missing.py",
            "replace_code": "def array_equivalent(left, right, strict_nan=False):\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs\n    in corresponding locations.  False otherwise. It is assumed that left and\n    right are NumPy arrays of the same dtype. The behavior of this function\n    (particularly with respect to NaNs) is not defined if the dtypes are\n    different.\n\n    Parameters\n    ----------\n    left, right : ndarrays\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n\n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equivalent.\n\n    Examples\n    --------\n    >>> array_equivalent(\n    ...     np.array([1, 2, np.nan]),\n    ...     np.array([1, 2, np.nan]))\n    True\n    >>> array_equivalent(\n    ...     np.array([1, np.nan, 2]),\n    ...     np.array([1, 2, np.nan]))\n    False\n    \"\"\"\n\n    left, right = np.asarray(left), np.asarray(right)\n\n    # shape compat\n    if left.shape != right.shape:\n        return False\n\n    # Object arrays can contain None, NaN and NaT.\n    # string dtypes must be come to this path for NumPy 1.7.1 compat\n    def is_string_dtype(array):\n        return array.dtype == 'O'\n\n    def is_na(value):\n        return value is np.nan\n\n    if is_string_dtype(left) or is_string_dtype(right):\n\n        if not strict_nan:\n            # isna considers NaN and None to be equivalent.\n            return np.array_equal(left.ravel(), right.ravel())\n\n        for left_value, right_value in zip(left.ravel(), right.ravel()):\n            if is_na(left_value) and not is_na(right_value):\n                return False\n            elif isinstance(left_value, (float, np.float32, np.float64)) and np.isnan(left_value):\n                if not isinstance(right_value, (float, np.float32, np.float64)) or not np.isnan(right_value):\n                    return False\n            elif left_value != right_value:\n                return False\n        return True\n\n    # NaNs can occur in float and complex arrays.\n    def is_float_dtype(array):\n        return array.dtype in (np.float32, np.float64)\n\n    def is_complex_dtype(array):\n        return array.dtype in (np.complex64, np.complex128)\n\n    if is_float_dtype(left) or is_complex_dtype(left):\n        # empty\n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return ((left == right) | (np.isnan(left) & np.isnan(right))).all()\n\n    # numpy will not allow this type of datetimelike vs integer comparison\n    def is_datetimelike_v_numeric(left, right):\n        if \"M8\" in left.dtype.name or \"m8\" in left.dtype.name:\n            return not np.issubdtype(right.dtype, np.datetime64)\n        elif \"M8\" in right.dtype.name or \"m8\" in right.dtype.name:\n            return not np.issubdtype(left.dtype, np.datetime64)\n        return False\n\n    if is_datetimelike_v_numeric(left, right):\n        return False\n\n    # M8/m8\n    def needs_i8_conversion(array):\n        return \"M8\" in array.dtype.name or \"m8\" in array.dtype.name\n\n    def is_dtype_equal(left_dtype, right_dtype):\n        return left_dtype == right_dtype\n\n    if needs_i8_conversion(left) and needs_i8_conversion(right):\n        if not is_dtype_equal(left.dtype, right.dtype):\n            return False\n\n        left = left.view(\"i8\")\n        right = right.view(\"i8\")\n\n    # if we have structured dtypes, compare first\n    if left.dtype.type is np.void or right.dtype.type is np.void:\n        if left.dtype != right.dtype:\n            return False\n\n    return np.array_equal(left, right)",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}