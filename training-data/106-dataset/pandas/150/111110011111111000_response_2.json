{
    "pandas": [
        {
            "bugID": 150,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 393,
            "file_name": "pandas/core/dtypes/missing.py",
            "replace_code": "def array_equivalent(left, right, strict_nan=False):\n    import numpy as np\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs\n    in corresponding locations. False otherwise. It is assumed that left and\n    right are NumPy arrays of the same dtype. The behavior of this function\n    (particularly with respect to NaNs) is not defined if the dtypes are\n    different.\n    \n    Parameters\n    ----------\n    left, right : ndarrays\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n    \n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equivalent.\n    \"\"\"\n    \n    left, right = np.asarray(left), np.asarray(right)\n    \n    # shape compatibility\n    if left.shape != right.shape:\n        return False\n    \n    # For object arrays or string dtypes\n    if np.issubdtype(left.dtype, np.object_) or np.issubdtype(right.dtype, np.object_):\n    \n        if not strict_nan:\n            # Treat NaN and None as equivalent\n            return (np.array_equal(left, right) | (pd.isnull(left) & pd.isnull(right))).all()\n    \n        return (left == right).all()\n    \n    # For float or complex arrays\n    if np.issubdtype(left.dtype, np.float_) or np.issubdtype(left.dtype, np.complexfloating):\n    \n        # If both arrays are empty\n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return ((left == right) | (np.isnan(left) & np.isnan(right))).all()\n    \n    # For datetime-like arrays\n    if np.issubdtype(left.dtype, np.datetime64) and np.issubdtype(right.dtype, np.datetime64):\n        if np.array_equal(left, right):\n            return True\n    \n    # For other types of arrays, directly compare the arrays\n    return np.array_equal(left, right)"
        }
    ]
}