{
    "pandas": [
        {
            "bugID": 150,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 393,
            "file_name": "pandas/core/dtypes/missing.py",
            "replace_code": "def array_equivalent(left, right, strict_nan=False):\n    left, right = np.asarray(left), np.asarray(right)\n\n    # shape compat\n    if left.shape != right.shape:\n        return False\n\n    # If the arrays are of type object\n    if left.dtype.type is np.object_ or right.dtype.type is np.object_:\n        \n        # Flatten the arrays for element-wise comparison\n        left_flat = left.ravel()\n        right_flat = right.ravel()\n\n        # Compare the elements of the flattened arrays\n        for i in range(len(left_flat)):\n            # If NaNs are not considered strictly\n            if not strict_nan:\n                if left_flat[i] is None and right_flat[i] is None:\n                    # Equivalent if both elements are None\n                    continue\n                if pd.isna(left_flat[i]) and pd.isna(right_flat[i]):\n                    # Equivalent if both elements are NaN\n                    continue\n                if left_flat[i] != right_flat[i]:\n                    # Not equivalent if elements are different\n                    return False\n            # If NaNs are considered strictly\n            else:\n                if left_flat[i] != right_flat[i]:\n                    # Not equivalent if elements are different\n                    return False\n        return True\n\n    # For other data types, use np.array_equal for comparison\n    return np.array_equal(left, right)",
            "import_list": []
        }
    ]
}