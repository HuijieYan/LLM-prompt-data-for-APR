{
    "pandas": [
        {
            "bugID": 150,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 393,
            "file_name": "pandas/core/dtypes/missing.py",
            "replace_code": "def array_equivalent(left, right, strict_nan=False):\n    left, right = np.asarray(left), np.asarray(right)\n    \n    # shape compat\n    if left.shape != right.shape:\n        return False\n    \n    # Object arrays can contain None, NaN and NaT.\n    # string dtypes must be come to this path for NumPy 1.7.1 compat\n    if left.dtype.kind == 'O' or right.dtype.kind == 'O':\n    \n        if not strict_nan:\n            # isna considers NaN and None to be equivalent.\n            return np.array_equal(left.ravel(), right.ravel())\n    \n        for left_value, right_value in zip(left.ravel(), right.ravel()):\n            if pd.isna(left_value) and not pd.isna(right_value):\n                return False\n            elif pd.isna(right_value) and not pd.isna(left_value):\n                return False\n            elif isinstance(left_value, float) and np.isnan(left_value):\n                if not isinstance(right_value, float) or not np.isnan(right_value):\n                    return False\n            else:\n                if left_value != right_value:\n                    return False\n        return True\n    \n    # NaNs can occur in float and complex arrays.\n    if left.dtype.kind in ['f', 'c']:\n        # empty\n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return ((left == right) | (pd.isna(left) & pd.isna(right))).all()\n    \n    # numpy will will not allow this type of datetimelike vs integer comparison\n    elif not np.issubdtype(left.dtype, np.datetime64) and not np.issubdtype(right.dtype, np.datetime64):\n        return False\n    \n    # M8/m8\n    elif np.issubdtype(left.dtype, np.datetime64) and np.issubdtype(right.dtype, np.datetime64):\n        return np.array_equal(left.astype('i8'), right.astype('i8'))\n    \n    # if we have structured dtypes, compare first\n    elif left.dtype.type is np.void or right.dtype.type is np.void:\n        return left.dtype == right.dtype and np.array_equal(left, right)\n    \n    return np.array_equal(left, right)",
            "imports": [
                "import numpy as np"
            ]
        }
    ]
}