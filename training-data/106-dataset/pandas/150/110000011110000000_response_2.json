{
    "pandas": [
        {
            "bugID": 150,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 393,
            "file_name": "pandas/core/dtypes/missing.py",
            "replace_code": "def array_equivalent(left, right, strict_nan=False):\n    left, right = np.asarray(left), np.asarray(right)\n\n    # shape compat\n    if left.shape != right.shape:\n        return False\n\n    # Object arrays can contain None, NaN and NaT.\n    # string dtypes must be come to this path for NumPy 1.7.1 compat\n    if np.issubdtype(left.dtype, np.object_) or np.issubdtype(right.dtype, np.object_):\n\n        if not strict_nan:\n            # isna considers NaN and None to be equivalent.\n            return np.array_equal(\n                np.equal(np.zeros(left.shape, dtype='bool'), np.isnan(left)),\n                np.equal(np.zeros(right.shape, dtype='bool'), np.isnan(right))\n            )\n\n        for left_value, right_value in zip(left, right):\n            if left_value is np.datetime64('NaT') and right_value is not np.datetime64('NaT'):\n                return False\n\n            elif np.issubdtype(left_value.dtype, np.floating) and np.isnan(left_value):\n                if not np.issubdtype(right_value.dtype, np.floating) or not np.isnan(right_value):\n                    return False\n            else:\n                if left_value != right_value:\n                    return False\n        return True\n\n    # NaNs can occur in float and complex arrays.\n    if np.issubdtype(left.dtype, np.floating) or np.issubdtype(left.dtype, np.complexfloating):\n\n        # empty\n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return np.logical_or((left == right), (np.isnan(left) & np.isnan(right))).all()\n\n    # numpy will will not allow this type of datetimelike vs integer comparison\n    elif np.issubdtype(left.dtype, np.datetime_data) and np.issubdtype(right.dtype, np.datetime_data):\n        return False\n\n    # M8/m8\n    elif np.issubdtype(left.dtype, np.datetime_data) and np.issubdtype(right.dtype, np.datetime_data):\n        if left.dtype != right.dtype:\n            return False\n\n        left = left.view(\"i8\")\n        right = right.view(\"i8\")\n        return np.array_equal(left, right)\n\n    # if we have structured dtypes, compare first\n    if np.issubdtype(left.dtype, np.object_) or np.issubdtype(right.dtype, np.object_):\n        if left.dtype != right.dtype:\n            return False\n        return np.array_equal(left, right)",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}