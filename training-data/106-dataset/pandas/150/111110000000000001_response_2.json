{
    "pandas": [
        {
            "bugID": 150,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 393,
            "file_name": "pandas/core/dtypes/missing.py",
            "replace_code": "def array_equivalent(left, right, strict_nan=False):\n    left, right = np.asarray(left), np.asarray(right)\n\n    if left.shape != right.shape:\n        return False\n\n    if np.issubdtype(left.dtype, np.object_) or np.issubdtype(right.dtype, np.object_):\n\n        if not strict_nan:\n            return np.array_equal(left, right)\n\n        for left_value, right_value in zip(left.ravel(), right.ravel()):\n            if left_value is None and right_value is not None:\n                return False\n\n            elif isinstance(left_value, float) and np.isnan(left_value):\n                if not (isinstance(right_value, float) and np.isnan(right_value)):\n                    return False\n            else:\n                if left_value != right_value:\n                    return False\n        return True\n\n    # NaN comparison for float and complex arrays\n    if np.issubdtype(left.dtype, np.floating) or np.issubdtype(left.dtype, np.complexfloating):\n        return np.array_equal(left, right) or (np.isnan(left) & np.isnan(right)).all()\n\n    # Handle other data types\n    return np.array_equal(left, right)",
            "imports": [
                "import numpy as np"
            ]
        }
    ]
}