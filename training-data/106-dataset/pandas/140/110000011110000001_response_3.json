{
    "pandas": [
        {
            "bugID": 140,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1895,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _recast_datetimelike_result(result: pd.DataFrame) -> pd.DataFrame:\n\n    \"\"\"\n    If we have date/time like in the original, then coerce dates\n    as we are stacking can easily have object dtypes here.\n    \n    Parameters\n    ----------\n    result : pd.DataFrame\n    \n    Returns\n    -------\n    pd.DataFrame\n    \n    Notes\n    -----\n    - Assumes Groupby._selected_obj has ndim==2 and at least one\n    datetimelike column\n    \"\"\"\n    result = result.copy()\n    \n    obj_cols = [\n        col for col in result.columns if pd.api.types.is_datetime64_any_dtype(result[col])\n    ]\n    \n    for col in obj_cols:\n        if pd.api.types.is_datetime64_ns_dtype(result[col].dtype):\n            # If the column is datetime64[ns], convert it to a string\n            result[col] = result[col].astype(str)\n        elif pd.api.types.is_timedelta64_dtype(result[col].dtype):\n            # If the column is timedelta64, convert it to its total seconds value\n            result[col] = result[col].dt.total_seconds()\n    \n    return result"
        }
    ]
}