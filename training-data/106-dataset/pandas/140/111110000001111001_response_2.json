{
    "pandas": [
        {
            "bugID": 140,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1895,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _recast_datetimelike_result(result: pd.DataFrame) -> pd.DataFrame:\n    import pandas as pd\n    import numpy as np\n    \"\"\"\n    If we have date/time like in the original, then coerce dates\n    as we are stacking can easily have object dtypes here.\n    \n    Parameters\n    ----------\n    result : DataFrame\n    \n    Returns\n    -------\n    DataFrame\n    \n    Notes\n    -----\n    - Assumes GroupBy._selected_obj has ndim==2 and at least one\n    datetimelike column\n    \"\"\"\n    \n    obj_cols = [\n        col for col, dtype in result.dtypes.items() if dtype == 'object'\n    ]\n    \n    # Loop through columns with object dtypes and convert the values to numeric\n    for col in obj_cols:\n        converted = pd.to_numeric(result[col], errors='coerce')\n        result.loc[:, col] = converted\n    \n    return result"
        }
    ]
}