{
    "pandas": [
        {
            "bugID": 140,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1895,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _recast_datetimelike_result(result: DataFrame) -> DataFrame:\n    \"\"\"\n    If we have date/time like in the original, then coerce dates\n    as we are stacking can easily have object dtypes here.\n\n    Parameters\n    ----------\n    result : DataFrame\n\n    Returns\n    -------\n    DataFrame\n\n    Notes\n    -----\n    - Assumes Groupby._selected_obj has ndim==2 and at least one\n    datetimelike column\n    \"\"\"\n    if is_object_dtype(result.dtypes).any():\n        result = result.copy()\n\n        obj_cols = [\n            idx for idx in range(len(result.columns)) if is_object_dtype(result.dtypes[idx])\n        ]\n\n        # See GH#26285\n        for n in obj_cols:\n            if is_datetime64_any_dtype(result.dtypes[n]):\n                # Skip if the dtype is already datetime\n                continue\n            \n            converted = maybe_convert_objects(\n                result[result.columns[n]].values, convert_numeric=False\n            )\n\n            result[result.columns[n]] = converted\n    return result",
            "import_list": []
        }
    ]
}