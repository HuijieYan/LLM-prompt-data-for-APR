{
    "pandas": [
        {
            "bugID": 78,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 7903,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def _reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds):\n    if axis is not None or filter_type != \"bool\":\n        axis = self._get_axis_number(axis)\n        labels = self._get_agg_axis(axis)\n        constructor = type(self)\n\n        def f(x):\n            return op(x, axis=axis, skipna=skipna, **kwds)\n\n        def _get_data(axis_matters):\n            if filter_type is None or filter_type == \"numeric\":\n                data = self._get_numeric_data()\n            elif filter_type == \"bool\":\n                data = self._get_bool_data()\n            else:\n                raise NotImplementedError(f\"Generating numeric_only data with filter_type {filter_type} not supported.\")\n            return data\n\n        if numeric_only in [None, True]:\n            df = self if numeric_only is True else _get_data(True)\n            if axis == 1:\n                df = df.T\n                axis = 0\n\n            out_dtype = \"bool\" if filter_type == \"bool\" else None\n\n            res = df._data.reduce(op, axis=axis, skipna=skipna, **kwds)\n            assert isinstance(res, dict)\n            if len(res):\n                assert len(res) == max(list(res.keys())) + 1, res.keys()\n            out = constructor._from_axes({0: res}, index=labels, dtype=out_dtype)\n            out.axes[0] = self.columns\n            return out\n\n        values = self.values\n        try:\n            result = f(values)\n            if filter_type == \"bool\" and is_string_dtype(values) and axis is None:\n                result = np.bool_(result)\n        except TypeError:\n            opa = self.apply(f)\n            result = opa.iloc[0] if result.ndim == self.ndim else opa\n\n        if constructor is not None:\n            result = Series(result, index=labels)\n        return result",
            "import_list": []
        }
    ]
}