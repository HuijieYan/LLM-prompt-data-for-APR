{
    "pandas": [
        {
            "bugID": 78,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 7903,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def _reduce(\n        self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n    ):\n        labels = None\n        constructor = None\n        axis = self._get_axis_number(axis)\n        labels = self._get_agg_axis(axis)\n        constructor = self._constructor\n  \n        if numeric_only is not None and axis in [0, 1]:\n            df = self\n            if numeric_only is True:\n                data = self._get_numeric_data()\n            if axis == 1:\n                df = data.T\n                axis = 0\n\n            out_dtype = \"bool\" if filter_type == \"bool\" else None\n\n        if numeric_only is None:\n            values = self.values\n            result = op(values, axis=axis, skipna=skipna, **kwds)\n            return result\n\n        if hasattr(result, \"dtype\") and is_object_dtype(result.dtype):\n            try:\n                if filter_type is None or filter_type == \"numeric\":\n                    result = result.astype(np.float64)\n                elif filter_type == \"bool\" and notna(result).all():\n                    result = result.astype(np.bool_)\n            except (ValueError, TypeError):\n                if axis == 0:\n                    result = coerce_to_dtypes(result, self.dtypes)\n\n        if constructor is not None:\n            result = Series(result, index=labels)\n        return result",
            "imports": []
        }
    ]
}