{
    "pandas": [
        {
            "bugID": 78,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 7903,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def _reduce(\n    self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n):\n\n    axis = self._get_axis_number(axis)\n    labels = self._get_agg_axis(axis)\n    constructor = self._constructor\n\n    def f(x):\n        return op(x, axis=axis, skipna=skipna, **kwds)\n\n    if numeric_only is True:\n        data = self._get_numeric_data()\n    elif filter_type == \"bool\":\n        data = self._get_bool_data()\n    else:\n        msg = (\n            f\"Generating numeric_only data with filter_type {filter_type} \"\n            \"not supported.\"\n        )\n        raise NotImplementedError(msg)\n\n    if axis == 1:\n        data = data.T\n\n    res = data._data.reduce(op, axis=1, skipna=skipna, **kwds)\n    assert isinstance(res, dict)\n    if len(res):\n        assert len(res) == max(list(res.keys())) + 1, res.keys()\n    out = data._constructor_sliced(res, index=range(len(res)))\n    out.index = data.columns\n    return out",
            "import_list": []
        }
    ]
}