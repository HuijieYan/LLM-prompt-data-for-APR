{
    "pandas": [
        {
            "bugID": 78,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 7903,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def _reduce(\n        self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n    ):\n        if axis is None and filter_type == \"bool\":\n            labels = None\n            constructor = None\n            axis_matters = False\n        else:\n            axis = self._get_axis_number(axis)\n            labels = self._get_agg_axis(axis)\n            constructor = self._constructor\n            axis_matters = True\n    \n        if numeric_only is not None and axis in [0, 1]:\n            df = self\n            if numeric_only is True:\n                df = self._get_numeric_data() if axis_matters else self\n            if axis == 1:\n                df = df.T\n                axis = 0\n    \n            out_dtype = \"bool\" if filter_type == \"bool\" else None\n    \n            res = df._data.reduce(op, axis=1, skipna=skipna, **kwds)\n            assert isinstance(res, dict)\n            if len(res):\n                assert len(res) == max(list(res.keys())) + 1, res.keys()\n            out = self._constructor_sliced(res, index=range(len(res)), dtype=out_dtype)\n            out.index = df.columns\n            return out\n    \n        if numeric_only is None:\n            values = self.values\n            try:\n                result = op(values, axis=axis, skipna=skipna, **kwds)\n    \n                if filter_type == \"bool\" and is_object_dtype(values) and axis is None:\n                    result = np.bool_(result)\n            except TypeError:\n                from pandas.core.apply import frame_apply\n    \n                opa = frame_apply(\n                    self, func=op, result_type=\"expand\", ignore_failures=True\n                )\n                result = opa.get_result()\n                if result.ndim == self.ndim:\n                    result = result.iloc[0]\n                return result\n    \n        else:\n            if numeric_only:\n                data = self._get_numeric_data() if axis_matters else self\n    \n                values = data.values\n                labels = data._get_agg_axis(axis)\n            else:\n                values = self.values\n            result = op(values, axis=axis, skipna=skipna, **kwds)\n    \n        if hasattr(result, \"dtype\") and is_object_dtype(result.dtype):\n            try:\n                if filter_type is None or filter_type == \"numeric\":\n                    result = result.astype(np.float64)\n                elif filter_type == \"bool\" and notna(result).all():\n                    result = result.astype(np.bool_)\n            except (ValueError, TypeError):\n                if axis == 0:\n                    result = coerce_to_dtypes(result, self.dtypes)\n    \n        if constructor is not None and labels is not None:\n            result = Series(result, index=labels)\n        return result",
            "import_list": [
                "from pandas.core.apply import frame_apply"
            ]
        }
    ]
}