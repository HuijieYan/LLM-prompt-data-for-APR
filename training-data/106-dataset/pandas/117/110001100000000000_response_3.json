{
    "pandas": [
        {
            "bugID": 117,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 160,
            "file_name": "pandas/core/dtypes/missing.py",
            "replace_code": "def _isna_old(arr):\n        \"\"\"\n        Detect missing values, treating None, NaN, INF, -INF as null.\n    \n        Parameters\n        ----------\n        arr: ndarray or object value\n    \n        Returns\n        -------\n        boolean ndarray or boolean\n        \"\"\"\n        if is_scalar(arr):\n            return libmissing.checknull_old(arr)\n        # hack (for now) because MI registers as ndarray\n        elif isinstance(arr, ABCMultiIndex):\n            raise NotImplementedError(\"isna is not defined for MultiIndex\")\n        elif isinstance(arr, type):\n            return False\n        elif isinstance(arr, (ABCSeries, np.ndarray, ABCIndexClass)):\n            return _isna_ndarraylike_old(arr)\n        elif isinstance(arr, ABCGeneric):\n            return arr._constructor(arr._data.isna(func=_isna_old))\n        elif isinstance(arr, list):\n            return _isna_ndarraylike_old(np.asarray(arr, dtype=object))\n        elif hasattr(arr, \"__array__\"):\n            return _isna_ndarraylike_old(np.asarray(arr))\n        else:\n            return arr is None",
            "import_list": []
        }
    ]
}