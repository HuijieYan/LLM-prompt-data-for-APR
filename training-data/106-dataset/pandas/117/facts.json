{
    "1.1.1": "def _isna_old(obj):\n    \n    if is_scalar(obj):\n        return libmissing.checknull_old(obj)\n    # hack (for now) because MI registers as ndarray\n    elif isinstance(obj, ABCMultiIndex):\n        raise NotImplementedError(\"isna is not defined for MultiIndex\")\n    elif isinstance(obj, type):\n        return False\n    elif isinstance(obj, (ABCSeries, np.ndarray, ABCIndexClass)):\n        return _isna_ndarraylike_old(obj)\n    elif isinstance(obj, ABCGeneric):\n        return obj._constructor(obj._data.isna(func=_isna_old))\n    elif isinstance(obj, list):\n        return _isna_ndarraylike_old(np.asarray(obj, dtype=object))\n    elif hasattr(obj, \"__array__\"):\n        return _isna_ndarraylike_old(np.asarray(obj))\n    else:\n        return obj is None\n",
    "1.1.2": "Detect missing values, treating None, NaN, INF, -INF as null.\n\nParameters\n----------\narr: ndarray or object value\n\nReturns\n-------\nboolean ndarray or boolean",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/dtypes/missing.py",
    "1.3.2": [
        "isna(obj)",
        "_isna_old(obj)",
        "_isna_ndarraylike_old(obj)"
    ],
    "1.4.1": [
        "    def test_count(self, datetime_series):\n        assert datetime_series.count() == len(datetime_series)\n\n        datetime_series[::2] = np.NaN\n\n        assert datetime_series.count() == np.isfinite(datetime_series).sum()\n\n        mi = MultiIndex.from_arrays([list(\"aabbcc\"), [1, 2, 2, np.nan, 1, 2]])\n        ts = Series(np.arange(len(mi)), index=mi)\n\n        left = ts.count(level=1)\n        right = Series([2, 3, 1], index=[1, 2, np.nan])\n        tm.assert_series_equal(left, right)\n\n        ts.iloc[[0, 3, 5]] = np.nan\n        tm.assert_series_equal(ts.count(level=1), right - 1)\n\n        # GH29478\n        with pd.option_context(\"use_inf_as_na\", True):\n            assert pd.Series([pd.Timestamp(\"1990/1/1\")]).count() == 1"
    ],
    "1.4.2": [
        "pandas/tests/series/test_analytics.py"
    ],
    "2.1.1": [
        [
            "E           AttributeError: 'DatetimeArray' object has no attribute '_constructor'"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.series.test_analytics.TestSeriesAnalytics object at 0x115653ca0>\ndatetime_series = 2000-01-03         NaN\n2000-01-04    0.898621\n2000-01-05         NaN\n2000-01-06   -0.862414\n2000-01-07         NaN\n200...2-08         NaN\n2000-02-09    0.067297\n2000-02-10         NaN\n2000-02-11   -1.166231\nFreq: B, Name: ts, dtype: float64\n\n    def test_count(self, datetime_series):\n        assert datetime_series.count() == len(datetime_series)\n    \n        datetime_series[::2] = np.NaN\n    \n        assert datetime_series.count() == np.isfinite(datetime_series).sum()\n    \n        mi = MultiIndex.from_arrays([list(\"aabbcc\"), [1, 2, 2, np.nan, 1, 2]])\n        ts = Series(np.arange(len(mi)), index=mi)\n    \n        left = ts.count(level=1)\n        right = Series([2, 3, 1], index=[1, 2, np.nan])\n        tm.assert_series_equal(left, right)\n    \n        ts.iloc[[0, 3, 5]] = np.nan\n        tm.assert_series_equal(ts.count(level=1), right - 1)\n    \n        # GH29478\n        with pd.option_context(\"use_inf_as_na\", True):\n>           assert pd.Series([pd.Timestamp(\"1990/1/1\")]).count() == 1\n\npandas/tests/series/test_analytics.py:559: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/series.py:1707: in count\n    return notna(self.array).sum()\npandas/core/dtypes/missing.py:370: in notna\n    res = isna(obj)\npandas/core/dtypes/missing.py:123: in isna\n    return _isna(obj)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobj = <DatetimeArray>\n['1990-01-01 00:00:00']\nLength: 1, dtype: datetime64[ns]\n\n    def _isna_old(obj):\n        \"\"\"\n        Detect missing values, treating None, NaN, INF, -INF as null.\n    \n        Parameters\n        ----------\n        arr: ndarray or object value\n    \n        Returns\n        -------\n        boolean ndarray or boolean\n        \"\"\"\n        if is_scalar(obj):\n            return libmissing.checknull_old(obj)\n        # hack (for now) because MI registers as ndarray\n        elif isinstance(obj, ABCMultiIndex):\n            raise NotImplementedError(\"isna is not defined for MultiIndex\")\n        elif isinstance(obj, type):\n            return False\n        elif isinstance(obj, (ABCSeries, np.ndarray, ABCIndexClass)):\n            return _isna_ndarraylike_old(obj)\n        elif isinstance(obj, ABCGeneric):\n>           return obj._constructor(obj._data.isna(func=_isna_old))",
            "\npandas/core/dtypes/missing.py:182: AttributeError"
        ]
    ],
    "2.1.3": [
        [
            {
                "obj": {
                    "value": "<DatetimeArray>\n['1990-01-01 00:00:00']\nLength: 1, dtype: datetime64[ns]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "obj._data": {
                    "value": "array(['1990-01-01T00:00:00.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "obj": "DatetimeArray",
                "obj._data": "ndarray"
            },
            {}
        ]
    ],
    "2.1.5": [
        [
            {
                "obj": {
                    "value": "<DatetimeArray>\n['1990-01-01 00:00:00']\nLength: 1, dtype: datetime64[ns]",
                    "shape": "(1,)",
                    "omitted": false
                },
                "obj._data": {
                    "value": "array(['1990-01-01T00:00:00.000000000'], dtype='datetime64[ns]')",
                    "shape": "(1,)",
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.1.6": [
        [
            {
                "obj": "DatetimeArray",
                "obj._data": "ndarray"
            },
            {}
        ]
    ],
    "3.1.1": [
        "BUG: Series.count() raises exception after upgrading from v0.24.1 to v0.25.3 if use_inf_as_na is enabled for a DateTime series.\n"
    ],
    "3.1.2": [
        "Code Sample, a copy-pastable example if possible\n# Your code here\nimport pandas as pd\nfrom datetime import datetime\n\nif __name__ == '__main__':\n    s = pd.Series([datetime.now()])\n    with pd.option_context('use_inf_as_na', True):\n        s.count()\nProblem description\nPreviously with pandas v0.24.1, the above code works well,\nhowever, after I upgrade the version to v0.25.3,\nthe above code raises an exception:\nAttributeError: 'DatetimeArray' object has no attribute '_constructor'\n\nIt seems that something goes wrong when passing a DatetimeArray to _isna_old.\nI think it is a bug introduced in some recent update.\n"
    ]
}