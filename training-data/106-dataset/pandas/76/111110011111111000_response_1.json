{
    "pandas": [
        {
            "bugID": 76,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 886,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_data(self, name, data, use_dtypes=True, convert_dates=True):\n    import pandas as pd\n    import numpy as np\n    \"\"\"\n    Try to parse an ndarray-like object into a column by inferring dtype.\n    \"\"\"\n    \n    # don't try to coerce, unless forced conversion\n    if use_dtypes:\n        if self.dtype is None:\n            return data, False\n        elif self.dtype is True:\n            pass\n        else:\n            # dtype to enforce\n            dtype = (\n                self.dtype.get(name) if isinstance(self.dtype, dict) else self.dtype\n            )\n            if dtype is not None:\n                try:\n                    dtype = np.dtype(dtype)\n                    return data.astype(dtype), True\n                except (TypeError, ValueError):\n                    return data, False\n    \n    if convert_dates:\n        new_data, result = self._try_convert_to_date(data)\n        if result:\n            return new_data, True\n    \n    result = False\n    \n    if str(data.dtype) == \"object\":\n    \n        # try float\n        try:\n            data = data.astype(\"float64\")\n            result = True\n        except (TypeError, ValueError):\n            pass\n    \n    if data.dtype.kind == \"f\":\n    \n        if str(data.dtype) != \"float64\":\n            # convert floats to 64\n            try:\n                data = data.astype(\"float64\")\n                result = True\n            except (TypeError, ValueError):\n                pass\n    \n    # don't coerce if data is of length 0\n    if len(data) and (str(data.dtype) == \"float\" or str(data.dtype) == \"object\"):\n    \n        # coerce integers if possible\n        try:\n            new_data = data.astype(\"int64\")\n            if (new_data == data).all():\n                data = new_data\n                result = True\n        except (TypeError, ValueError):\n            pass\n    \n    # coerce integers to 64\n    if str(data.dtype) == \"int\":\n        try:\n            data = data.astype(\"int64\")\n            result = True\n        except (TypeError, ValueError):\n            pass\n    \n    return data, result"
        }
    ]
}