{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False) -> 'DataFrame':\n    from pandas.core.reshape.pivot import _shared_docs\n    from pandas.core.reshape.pivot import _add_margins\n    \"\"\"Create a spreadsheet-style pivot table as a DataFrame.\n    \n    Parameters\n    ----------\n    data : DataFrame\n    values : column to aggregate, optional\n    index : column, Grouper, array, or list of the previous\n        If an array is passed, it must be the same length as the data. The list\n        can contain any of the other types (except list).\n    columns : column, Grouper, array, or list of the previous\n        If an array is passed, it must be the same length as the data. The list\n        can contain any of the other types (except list).\n    aggfunc : function, list of functions, dict, default numpy.mean\n        If list of functions passed, the resulting pivot table will have\n        hierarchical columns whose top level are the function names.\n        If dict is passed, the key is column to aggregate and value\n        is function or list of functions\n    fill_value : scalar, default None\n        Value to replace missing values with\n    margins : bool, default False\n        Add all row / columns (e.g. for subtotal / grand totals)\n    dropna : bool, default True\n        Do not include columns whose entries are all NaN\n    margins_name : str, default 'All'\n        Name of the row / column that will contain the totals\n        when margins is True.\n    observed : bool, default False\n        This only applies if any of the groupers are Categoricals. If True: only\n        show observed values for categorical groupers. If False: show all values for\n        categorical groupers.\n    \n    Returns\n    -------\n    DataFrame\n        An Excel style pivot table.\n    \n    Raises\n    ------\n    ValueError\n        * When `values` is not set\n        * When any `column` or `index` is Categorical\n    \"\"\"\n    # ... omitted code ...\n    pass"
        }
    ]
}