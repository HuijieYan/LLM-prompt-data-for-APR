{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False) -> 'DataFrame':\n\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n    \n    # Check if `aggfunc` is a list\n    if isinstance(aggfunc, list):\n        pieces: List[DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            table = pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n        return concat(pieces, keys=keys, axis=1)\n    \n    keys = index + columns\n    \n    # If values is a non-empty list\n    values_passed = values is not None\n    if values_passed:\n        # Check if values is a list\n        if is_list_like(values):\n            values_multi = True\n            values = list(values)\n        else:\n            values_multi = False\n            values = [values]\n    \n        # Make sure value labels are in data\n        for i in values:\n            if i not in data:\n                raise KeyError(i)\n    \n        # Filter values and keys based on their availability in data\n        to_filter = [x for x in keys + values if (isinstance(x, Grouper) and x.key) or (x in data)]\n        if len(to_filter) < len(data.columns):\n            data = data[to_filter]\n    \n    # If values is not a non-empty list\n    else:\n        values = data.columns\n        for key in keys:\n            try:\n                # Remove key from values\n                values = values.drop(key)\n            except (TypeError, ValueError, KeyError):\n                pass\n        values = list(values)\n    \n    # Group data by keys\n    grouped = data.groupby(keys, observed=observed)\n    # Aggregate the grouped data\n    agged = grouped.agg(aggfunc)\n    \n    # If `dropna` is True, drop all rows containing NaN values in the aggregate\n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n    \n        # Downcast the aggregate to integer if original values are integers\n        for v in values:\n            if (\n                v in data\n                and is_integer_dtype(data[v])\n                and v in agged\n                and not is_integer_dtype(agged[v])\n            ):\n                agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n    \n    table = agged\n    \n    if table.index.nlevels > 1:\n        # Unstack the aggregate\n        to_unstack = [i for i in range(len(index), len(keys)) if (agged.index.names[i] is None or agged.index.names[i] in agged.index.names[: len(index)])]\n        table = agged.unstack(to_unstack)\n    \n    if not dropna:\n        if table.index.nlevels > 1:\n            # Reindex based on the levels of index\n            m = MultiIndex.from_arrays(cartesian_product(table.index.levels), names=table.index.names)\n            table = table.reindex(m, axis=0)\n    \n        if table.columns.nlevels > 1:\n            # Reindex based on the levels of columns\n            m = MultiIndex.from_arrays(cartesian_product(table.columns.levels), names=table.columns.names)\n            table = table.reindex(m, axis=1)\n    \n    if isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n    \n    if fill_value is not None:\n        table = table._ensure_type(table.fillna(fill_value, downcast=\"infer\"))\n    \n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n    \n    if values_passed and not values_multi and not table.empty and (table.columns.nlevels > 1):\n        table = table[values[0]]\n    \n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n    \n    if isinstance(table, ABCDataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n    \n    return table"
        }
    ]
}