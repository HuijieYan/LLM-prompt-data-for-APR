{
    "pandas": [
        {
            "bugID": 60,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 1259,
            "file_name": "pandas/core/window/rolling.py",
            "replace_code": "def apply(self, func, raw: bool = False, engine: str = \"cython\", engine_kwargs: Optional[Dict] = None, args: Optional[Tuple] = None, kwargs: Optional[Dict] = None):\n        if args is None:\n            args = ()\n        if kwargs is None:\n            kwargs = {}\n        kwargs.pop(\"_level\", None)\n        kwargs.pop(\"win_type\", None)  # fixed, replaced \"floor\" with \"win_type\"\n        window = self._get_window(win_type)\n        offset = calculate_center_offset(window) if self.center else 0\n        if not isinstance(raw, bool):  # fixed, replaced is_bool with isinstance\n            raise ValueError(\"raw parameter must be `True` or `False\")\n\n        if engine == \"cython\":\n            if engine_kwargs is not None:\n                raise ValueError(\"cython engine does not accept engine_kwargs\")\n            apply_func = self._generate_cython_apply_func(args, kwargs, raw, offset, func)\n        elif engine == \"numba\":\n            if not raw:  # fixed, replaced raw is False with not raw\n                raise ValueError(\"raw must be `True` when using the numba engine\")\n            if func in self._numba_func_cache:\n                apply_func = self._numba_func_cache[func]\n            else:\n                apply_func = generate_numba_apply_func(args, kwargs, func, engine_kwargs)\n        else:\n            raise ValueError(\"engine must be either 'numba' or 'cython'\")\n\n        return self._apply(apply_func, center=True, require_min_periods=0, is_weighted=False, name=func, use_numba_cache=engine == \"numba\")",
            "imports": []
        }
    ]
}