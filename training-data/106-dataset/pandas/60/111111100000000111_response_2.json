{
    "pandas": [
        {
            "bugID": 60,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 1259,
            "file_name": "pandas/core/window/rolling.py",
            "replace_code": "def apply(\n    self,\n    func,\n    raw: bool = False,\n    engine: str = \"cython\",\n    engine_kwargs: Optional[Dict] = None,\n    args: Optional[Tuple] = None,\n    kwargs: Optional[Dict] = None,\n):\n    if args is None:\n        args = ()\n    if kwargs is None:\n        kwargs = {}\n    kwargs.pop(\"_level\", None)\n    kwargs.pop(\"floor\", None)\n    window = self._window\n    if not isinstance(raw, bool):  # Check if raw is a boolean\n        raise ValueError(\"raw parameter must be `True` or `False`\")\n\n    # Validate engine and engine_kwargs settings\n    if engine not in [\"numba\", \"cython\"]:\n        raise ValueError(\"engine must be either 'numba' or 'cython'\")\n    if engine == \"cython\" and engine_kwargs is not None:\n        raise ValueError(\"cython engine does not accept engine_kwargs\")\n\n    # Set apply_func based on engine type and raw parameter\n    if engine == \"cython\":\n        apply_func = self._generate_cython_apply_func(\n            args, kwargs, raw, calculate_center_offset(window), func\n        )\n    elif engine == \"numba\":\n        if not raw:\n            raise ValueError(\"raw must be `True` when using the numba engine\")\n        if func in self._numba_func_cache:\n            apply_func = self._numba_func_cache[func]\n        else:\n            apply_func = generate_numba_apply_func(\n                args, kwargs, func, engine_kwargs\n            )\n\n    # Call _apply with the appropriate settings\n    return self._apply(\n        apply_func,\n        center=self.center,  # Use the center setting from the class\n        floor=0,  # Setting floor to 0\n        name=func,  # Set name to func\n        use_numba_cache=engine == \"numba\"\n    )",
            "imports": []
        }
    ]
}