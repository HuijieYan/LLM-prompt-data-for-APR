{
    "pandas": [
        {
            "bugID": 6,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 601,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def get_grouper(\n    obj: FrameOrSeries,\n    key=None,\n    axis: int = 0,\n    level=None,\n    sort: bool = True,\n    observed: bool = False,\n    mutated: bool = False,\n    validate: bool = True,\n    dropna: bool = True,\n) -> \"Tuple[ops.BaseGrouper, List[Hashable], FrameOrSeries]\":\n    \"\"\"\n    Create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values.\n\n    If validate, then check for key/level overlaps.\n\n    \"\"\"\n    group_axis = obj.index if axis == 0 else obj.columns\n\n    if level is not None:\n        if isinstance(group_axis, MultiIndex) and level[0] in group_axis.names:\n            if key is None and len(level) == 1:\n                key = group_axis.get_level_values(level[0])\n                level = None\n            else:\n                if len(level) == 1:\n                    level = level[0]\n\n        else:\n            if isinstance(level, list):\n                nlevels = len(level)\n                if nlevels == 1:\n                    level = level[0]\n                elif nlevels == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n            if isinstance(level, str):\n                if obj.index.name != level or axis == 1:\n                    raise ValueError(\n                        f\"level name {level} is not the name \"\n                        f\"of the {obj.columns.name if axis == 0 else obj.index.name}\"\n                    )\n            elif level > 0 or level < -1: \n                raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n            level = None\n            key = group_axis\n\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        return (grouper, [], obj) if key.key is None else (grouper, [key.key], obj)\n\n    elif isinstance(key, Grouper):\n        return (key, [], obj)\n\n\n    if isinstance(key, list):\n        keys = key\n    else:\n        keys = [key]\n\n    match_axis_length = len(keys) == group_axis.nlevels or len(keys) == len(group_axis)\n\n    any_callable = any(\n        callable(g) or isinstance(g, dict) for g in keys\n    )\n    any_groupers = any(isinstance(g, Grouper) for g in keys)\n    any_arraylike = any(\n        isinstance(g, (list, tuple, Series, Index, np.ndarray))\n        for g in keys\n    )\n\n    if (\n        not any_callable\n        and not any_arraylike\n        and not any_groupers\n        and match_axis_length\n        and level is None\n    ):\n        if isinstance(obj, DataFrame):\n            if all(isinstance(g, str) and g in obj.columns for g in keys):\n                keys = [(*obj.columns.get_indexer([k]),) for k in keys]\n            else:\n                raise KeyError(\n                    [k for k in keys if k not in obj.columns]\n                )\n        else:\n            if all(g in obj.index.names for g in keys):\n                keys = [(*obj.index.get_level_values(k),) for g in keys]\n            else:\n                raise KeyError(\n                    [k for k in keys if k not in obj.index.names]\n                )\n    if isinstance(level, (tuple, list)):\n        if key is None:\n            keys = [None] * len(level)\n        levels = level\n    else:\n        levels = [level] * len(keys)\n\n    groupings, exclusions = [], []\n\n    def is_in_axis(key) -> bool:\n        return (\n            isinstance(key, int)\n            or key in group_axis\n            or getattr(group_axis, \"name\", None) == key\n        )\n\n    def is_in_obj(gpr) -> bool:\n        return hasattr(gpr, \"name\") and gpr is obj[gpr.name]\n\n    for i, (gpr, level) in enumerate(zip(keys, levels)):\n        if is_in_obj(gpr):  \n            in_axis, name = True, gpr.name\n            exclusions.append(name)\n\n        elif is_in_axis(gpr):  \n            if gpr in obj:\n                if validate:\n                    obj._check_label_or_level_ambiguity(gpr, axis=axis)\n                in_axis, name, gpr = True, gpr, obj[gpr]\n            else:\n                in_axis, name, level, gpr = False, None, gpr, None\n                raise KeyError(gpr)\n        else:\n            in_axis, name = False, None\n\n        if is_categorical_dtype(gpr) and len(gpr) != group_axis.size:\n            raise ValueError(\n                f\"Length of grouper ({len(gpr)}) and axis ({group_axis.size}) \"\n                \"must be same length\"\n            )\n\n        ping = (\n            Grouping(\n                group_axis,\n                gpr,\n                obj=obj,\n                name=name,\n                level=level,\n                sort=sort,\n                observed=observed,\n                in_axis=in_axis,\n                dropna=dropna,\n            )\n            if not isinstance(gpr, Grouping)\n            else gpr\n        )\n        groupings.append(ping)\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    elif len(groupings) == 0:\n        groupings.append(Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp)))\n\n    grouper = ops.BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "imports": []
        }
    ]
}