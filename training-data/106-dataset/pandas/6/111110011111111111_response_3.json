{
    "pandas": [
        {
            "bugID": 6,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 601,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def get_grouper(\n    obj: FrameOrSeries,\n    key = None,\n    axis: int = 0,\n    level = None,\n    sort: bool = True,\n    observed: bool = False,\n    mutated: bool = False,\n    validate: bool = True,\n    dropna: bool = True,\n) -> Tuple[ops.BaseGrouper, List[Hashable], FrameOrSeries]:\n\n    # Existing code...\n\n    # if the actual grouper should be obj[key]\n    import pandas as pd\n    from pandas.core.indexes.base import Index\n    from pandas.core.arrays.period import PeriodIndex\n    from typing import Union, Tuple, List\n    from pandas.core.ops import ops\n    from pandas.core.arrays.categorical import is_categorical_dtype\n    from pandas.core.indexes.multi import MultiIndex\n    from pandas.core.indexes.base import _is_label_like\n    from pandas.core.arrays import CategoricalDtype\n    from pandas.core.indexes.api import IndexObjectMixin\n    def is_in_axis(key) -> bool:\n        if not _is_label_like(key):\n            # items -> .columns for DataFrame, .index for Series\n            items = obj.axes[-1]\n            try:\n                items.get_loc(key)\n                return True\n            except (KeyError, TypeError, AttributeError, ValueError, IndexError):\n                return False\n    \n    # Existing code...\n    \n    for i, (gpr, level) in enumerate(zip(keys, levels)):\n    \n        if is_in_obj(gpr):  # df.groupby(df['name'])\n            in_axis, name = True, gpr.name\n            exclusions.append(name)\n    \n        elif is_in_axis(gpr):  # df.groupby('name')\n            if gpr in obj:\n                if validate:\n                    obj._check_label_or_level_ambiguity(gpr, axis=axis)\n                in_axis, name, gpr = True, gpr, obj[gpr]\n                exclusions.append(name)\n            else:\n                raise KeyError(gpr)"
        }
    ]
}