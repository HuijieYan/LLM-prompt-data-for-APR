{
    "pandas": [
        {
            "bugID": 6,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 601,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def get_grouper(\n    obj: 'FrameOrSeries',\n    key=None,\n    axis: int=0,\n    level=None,\n    sort: bool=True,\n    observed: bool=False,\n    mutated: bool=False,\n    validate: bool=True,\n    dropna: bool=True\n) -> Tuple['ops.BaseGrouper', List[Hashable], 'FrameOrSeries']:\n    \"\"\"\n    Create and return a BaseGrouper, which is an internal mapping\n    of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper. If observed & we have a categorical grouper, only show the observed\n    values. If validate, then check for key/level overlaps.\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        if isinstance(group_axis, MultiIndex):\n            if is_list_like(level) and len(level) == 1:\n                level = level[0]\n\n            if key is None and np.isscalar(level):\n                key = group_axis.get_level_values(level)\n                level = None\n\n        else:\n            if is_list_like(level):\n                nlevels = len(level)\n                if nlevels == 1:\n                    level = level[0]\n                elif nlevels == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n            if isinstance(level, str):\n                if obj._get_axis(axis).name != level:\n                    raise ValueError(\n                        f\"level name {level} is not the name \"\n                        f\"of the {obj._get_axis_name(axis)}\"\n                    )\n            elif level > 0 or level < -1:\n                raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n\n            level = None\n            key = group_axis\n\n    # ... (other code remains unchanged)\n\n    grouper = ops.BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": [
                "from pandas import MultiIndex, Index, DataFrame, Series, Grouper, ops, np, Index, PeriodIndex",
                "from pandas.core.arrays.categorical import is_categorical_dtype",
                "from pandas.core.dtypes.generic import is_list_like",
                "from pandas.core.indexes.base import InvalidIndexError",
                "from typing import List, Hashable, Tuple"
            ]
        }
    ]
}