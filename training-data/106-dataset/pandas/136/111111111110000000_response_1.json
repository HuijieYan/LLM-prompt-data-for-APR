{
    "pandas": [
        {
            "bugID": 136,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n    \n        # note this function has side effects\n        (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n    \n        # validate index types are the same\n        for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n            if not lk.dtype == rk.dtype:  # comparing dtype directly instead of using is_dtype_equal\n                msg = (\n                    \"incompatible merge keys [{i}] {lkdtype} and \"\n                    \"{rkdtype}, must be the same type\".format(\n                        i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                    )\n                )\n                raise MergeError(msg)\n    \n        # validate tolerance; datetime.timedelta or Timedelta if we have a DTI\n        if self.tolerance is not None:\n            lt = self.left.index if self.left_index else left_join_keys[-1]\n            tolerance_type = type(self.tolerance)\n            if is_datetimelike(lt):\n                if not isinstance(self.tolerance, (datetime.timedelta, pd._libs.timedeltas.Timedelta)):\n                    raise MergeError(f\"incompatible tolerance {self.tolerance}, must be compatible with type {lt.dtype}\")\n                if isinstance(self.tolerance, pd._libs.timedeltas.Timedelta) and self.tolerance.to_pytimedelta() < Timedelta(0):\n                    raise MergeError(\"tolerance must be positive\")\n                elif isinstance(self.tolerance, datetime.timedelta) and self.tolerance < datetime.timedelta():\n                    raise MergeError(\"tolerance must be positive\")\n            elif is_integer(lt):\n                if not is_integer(self.tolerance):\n                    raise MergeError(f\"incompatible tolerance {self.tolerance}, must be compatible with type {lt.dtype}\")\n                if self.tolerance < 0:\n                    raise MergeError(\"tolerance must be positive\")\n            elif is_float(lt):\n                if not is_number(self.tolerance):\n                    raise MergeError(f\"incompatible tolerance {self.tolerance}, must be compatible with type {lt.dtype}\")\n                if self.tolerance < 0:\n                    raise MergeError(\"tolerance must be positive\")\n            else:\n                raise MergeError(\"key must be integer, timestamp or float\")\n\n        # validate allow_exact_matches\n        if not isinstance(self.allow_exact_matches, bool):  # replacing is_bool with isinstance\n            msg = \"allow_exact_matches must be boolean, passed {passed}\"\n            raise MergeError(msg.format(passed=self.allow_exact_matches))\n    \n        return left_join_keys, right_join_keys, join_names",
            "imports": []
        }
    ]
}