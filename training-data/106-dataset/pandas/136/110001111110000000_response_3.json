{
    "pandas": [
        {
            "bugID": 136,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n    (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n    for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n        if not lk.dtype == rk.dtype:\n            if pd.api.types.is_categorical_dtype(lk.dtype) and pd.api.types.is_categorical_dtype(rk.dtype):\n                msg = (f\"incompatible merge keys [{i}] {lk.dtype} and {rk.dtype}, both sides category, but not equal ones\")\n            else:\n                msg = (f\"incompatible merge keys [{i}] {lk.dtype} and {rk.dtype}, must be the same type\")\n            raise MergeError(msg)\n\n    if self.tolerance is not None:\n        if self.left_index:\n            lt = self.left.index\n        else:\n            lt = left_join_keys[-1]\n        msg = (f\"incompatible tolerance {self.tolerance}, must be compat with type {lt.dtype}\")\n        if pd.api.types.is_datetime64_any_dtype(lt):\n            if not isinstance(self.tolerance, pd.Timedelta):\n                raise MergeError(msg)\n            if self.tolerance < pd.Timedelta(0):\n                raise MergeError(\"tolerance must be positive\")\n        elif pd.api.types.is_integer_dtype(lt):\n            if not pd.api.types.is_integer(self.tolerance):\n                raise MergeError(msg)\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n        elif pd.api.types.is_float_dtype(lt):\n            if not pd.api.types.is_number(self.tolerance):\n                raise MergeError(msg)\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n        else:\n            raise MergeError(\"key must be integer, timestamp or float\")\n\n    if not pd.api.types.is_bool(self.allow_exact_matches):\n        msg = f\"allow_exact_matches must be boolean, passed {self.allow_exact_matches}\"\n        raise MergeError(msg)\n\n    return left_join_keys, right_join_keys, join_names",
            "import_list": []
        }
    ]
}