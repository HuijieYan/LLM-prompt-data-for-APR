{
    "pandas": [
        {
            "bugID": 136,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n    (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n\n    # validate index types are the same\n    for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n        if not is_dtype_equal(lk.dtype, rk.dtype):\n            if is_categorical_dtype(lk.dtype) and is_categorical_dtype(rk.dtype):\n                msg = (\n                    \"incompatible merge keys [{i}] {lkdtype} and \"\n                    \"{rkdtype}, both sides category, but not equal ones\".format(\n                        i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                    )\n                )\n            else:\n                msg = (\n                    \"incompatible merge keys [{i}] {lkdtype} and \"\n                    \"{rkdtype}, must be the same type\".format(\n                        i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                    )\n                )\n            raise MergeError(msg)\n\n    # validate tolerance; datetime.timedelta or Timedelta if we have a DTI\n    if self.tolerance is not None:\n        lt = self.left.index if self.left_index else left_join_keys[-1]\n        tolerance_type = type(self.tolerance)\n        lt_dtype = lt.dtype\n\n        if (is_datetimelike(lt) and isinstance(self.tolerance, (datetime.timedelta, pd.Timedelta))) or \\\n                (is_int64_dtype(lt) and is_integer(self.tolerance)) or \\\n                (is_float_dtype(lt) and is_number(self.tolerance)):\n            if self.tolerance < pd.Timedelta(0) and is_datetimelike(lt):\n                raise MergeError(\"tolerance must be positive\")\n\n        else:\n            raise MergeError(\"incompatible tolerance {tolerance}, must be compat with type {lkdtype}\".format(\n                tolerance=tolerance_type, lkdtype=repr(lt_dtype)))\n\n    if not is_bool(self.allow_exact_matches):\n        msg = \"allow_exact_matches must be boolean, passed {passed}\"\n        raise MergeError(msg.format(passed=self.allow_exact_matches))\n\n    return left_join_keys, right_join_keys, join_names",
            "imports": []
        }
    ]
}