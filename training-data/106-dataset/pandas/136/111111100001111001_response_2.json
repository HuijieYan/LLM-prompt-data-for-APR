{
    "pandas": [
        {
            "bugID": 136,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n\n\n    (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n    \n    # validate index types are the same\n    for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n        if not (lk.dtype == rk.dtype):  # Check for equality of data types\n            raise MergeError(\n                \"incompatible merge keys [{i}] {lkdtype} and {rkdtype}, must be the same type\".format(\n                    i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                )\n            )\n    \n    # validate tolerance; ensure tolerance is integer or compatible with the data type\n    if self.tolerance is not None:\n        lt = self.left if self.left_index is False else self.left.index\n        if not isinstance(self.tolerance, type(lt.dtype.type(0))):  # Check if tolerance is an instance of the data type\n            raise MergeError(\n                \"incompatible tolerance {tolerance}, must be compat with type {lkdtype}\".format(\n                    tolerance=type(self.tolerance), lkdtype=repr(lt.dtype)\n                )\n            )\n    \n        if isinstance(lt.dtype, pd.core.dtypes.dtypes.Timedelta):  # If data type is timedelta\n            if self.tolerance < lt.dtype(0):\n                raise MergeError(\"tolerance must be positive\")\n    \n        elif isinstance(lt.dtype, pd.core.dtypes.dtypes.Integer):  # If data type is integer\n            if self.tolerance < lt.dtype(0):\n                raise MergeError(\"tolerance must be positive\")\n    \n    # validate allow_exact_matches\n    if not isinstance(self.allow_exact_matches, bool):\n        msg = \"allow_exact_matches must be boolean, passed {passed}\"\n        raise MergeError(msg.format(passed=self.allow_exact_matches))\n    \n    return left_join_keys, right_join_keys, join_names"
        }
    ]
}