{
    "pandas": [
        {
            "bugID": 136,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n    # ... existing code ...\n\n    # validate tolerance; datetime.timedelta or Timedelta if we have a DTI\n\n    if self.tolerance is not None:\n        if self.left_index:\n            lt = self.left.index\n        else:\n            lt = left_join_keys[-1]\n    \n        if not isinstance(self.tolerance, type(lt)):\n            raise MergeError(\"incompatible tolerance {tolerance}, must be compatible with type {lt_dtype}\".format(\n                tolerance=type(self.tolerance), lt_dtype=type(lt)\n            ))\n    \n        if is_datetimelike(lt) and isinstance(self.tolerance, datetime.timedelta):\n            if self.tolerance < Timedelta(0):\n                raise MergeError(\"tolerance must be positive\")\n    \n        elif is_int64_dtype(lt) and not is_integer(self.tolerance):\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n    \n        elif is_float_dtype(lt) and not is_number(self.tolerance):\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n    \n        elif not (isinstance(self.tolerance, datetime.timedelta) or is_integer(self.tolerance) or is_number(self.tolerance)):\n            raise MergeError(\"tolerance must be datetime.timedelta, integer, or float\")\n    \n    # remaining code ...\n    \n    return left_join_keys, right_join_keys, join_names"
        }
    ]
}