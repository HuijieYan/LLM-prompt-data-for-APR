{
    "pandas": [
        {
            "bugID": 136,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n    (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n\n    # validate index types are the same\n    for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n        if lk.dtype != rk.dtype:\n            if pd.api.types.is_categorical_dtype(lk) and pd.api.types.is_categorical_dtype(rk):\n                msg = (\n                    f\"incompatible merge keys [{i}] {lk.dtype} and {rk.dtype}, both sides category, but not equal ones\"\n                )\n            else:\n                msg = (\n                    f\"incompatible merge keys [{i}] {lk.dtype} and {rk.dtype}, must be the same type\"\n                )\n            raise MergeError(msg)\n\n    # validate tolerance; datetime.timedelta or Timedelta if we have a DTI\n    if self.tolerance is not None:\n        # Handle the case when lt is a series\n        if self.left_index:\n            lt = self.left.index\n        else:\n            lt = left_join_keys[-1]\n\n        msg = (\n            f\"incompatible tolerance {self.tolerance}, must be compat with type {lt.dtype}\"\n        )\n\n        lt_type = lt.dtype.type\n        if hasattr(self.tolerance, 'total_seconds'):\n            if lt_type == 'datetime64[ns]':\n                tolerance_type = pd.Timedelta\n            else:\n                tolerance_type = pd.to_timedelta\n            if not isinstance(self.tolerance, tolerance_type):\n                raise MergeError(msg)\n            if self.tolerance < pd.Timedelta(0):\n                raise MergeError(\"tolerance must be positive\")\n        else:\n            if lt_type == np.int64:\n                tolerance_type = np.integer\n            elif lt_type == np.float64:\n                tolerance_type = np.floating\n            else:\n                raise MergeError(\"key must be integer, timestamp or float\")\n            if not isinstance(self.tolerance, tolerance_type):\n                raise MergeError(msg)\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n\n    # validate allow_exact_matches\n    if not isinstance(self.allow_exact_matches, bool):\n        msg = \"allow_exact_matches must be boolean, passed {passed}\"\n        raise MergeError(msg.format(passed=self.allow_exact_matches))\n\n    return left_join_keys, right_join_keys, join_names",
            "import_list": []
        }
    ]
}