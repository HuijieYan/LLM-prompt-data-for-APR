{
    "pandas": [
        {
            "bugID": 136,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n    left_join_keys, right_join_keys, join_names = super()._get_merge_keys()\n\n    for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n        if not lk.equals(rk):\n            raise MergeError(f\"The merge keys must be the same type, but found {lk.dtype} and {rk.dtype} at index {i}\")\n\n    if self.tolerance is not None:\n        lt = self.left.index if self.left_index else left_join_keys[-1]\n        if isinstance(lt, pd.DatetimeIndex):\n          if not isinstance(self.tolerance, (datetime.timedelta, pd.Timedelta)):\n            raise MergeError(f\"The tolerance {self.tolerance} must be of type datetime.timedelta or pd.Timedelta\")\n        \n          if self.tolerance < pd.Timedelta(0):\n            raise MergeError(\"Tolerance must be positive\")\n        elif isinstance(lt, pd.Int64Index):\n          if not isinstance(self.tolerance, int):\n            raise MergeError(f\"The tolerance {self.tolerance} must be of type int\")\n          if self.tolerance < 0:\n            raise MergeError(\"Tolerance must be positive\")\n        elif isinstance(lt, pd.Float64Index):\n          if not isinstance(self.tolerance, float):\n            raise MergeError(f\"The tolerance {self.tolerance} must be of type float\")\n          if self.tolerance < 0:\n            raise MergeError(\"Tolerance must be positive\")\n        else:\n          raise MergeError(\"The key must be of type integer, timestamp or float\")\n      \n    if not isinstance(self.allow_exact_matches, bool):\n        raise MergeError(f\"The allow_exact_matches must be boolean, but found {self.allow_exact_matches}\")\n\n    return left_join_keys, right_join_keys, join_names",
            "imports": []
        }
    ]
}