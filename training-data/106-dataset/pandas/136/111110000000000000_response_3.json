{
    "pandas": [
        {
            "bugID": 136,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n\n        left_join_keys, right_join_keys, join_names = super._get_merge_keys(self)\n\n        for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n            if lk.dtype != rk.dtype:\n                if lk.dtype.name == rk.dtype.name and lk.dtype == object and lk.dtype == int:\n                    msg = \"incompatible merge keys [{i}] {lkdtype} and {rkdtype}, must be the same type\".format(\n                        i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                    )\n                elif lk.dtype.name == rk.dtype.name and lk.dtype == object and lk.dtype == int:\n                    msg = \"incompatible merge keys [{i}] {lkdtype} and {rkdtype}, both sides category, but not equal ones\".format(\n                        i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                    )\n                else:\n                    msg = \"incompatible merge keys [{i}] {lkdtype} and {rkdtype}, must be the same type\".format(\n                        i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                    )\n                raise MergeError(msg)\n\n        if self.tolerance is not None:\n\n            if self.left_index:\n                lt = self.left.index\n            else:\n                lt = left_join_keys[-1]\n\n            msg = (\"incompatible tolerance {tolerance}, must be compat with type {lkdtype}\".format(\n                tolerance=type(self.tolerance), lkdtype=repr(lt.dtype)\n            ))\n\n            if str(lt.dtype) == \"datetime64[ns]\" or str(lt.dtype) == \"timedelta64[ns]\":\n                if not isinstance(self.tolerance, datetime.timedelta):\n                    raise MergeError(msg)\n                if self.tolerance < timedelta(0):\n                    raise MergeError(\"tolerance must be positive\")\n\n            elif lk.dtype == \"int64\":\n                if not isinstance(self.tolerance, int):\n                    raise MergeError(msg)\n                if self.tolerance < 0:\n                    raise MergeError(\"tolerance must be positive\")\n\n            elif lk.dtype == \"float64\":\n                if not isinstance(self.tolerance, float):\n                    raise MergeError(msg)\n                if self.tolerance < 0:\n                    raise MergeError(\"tolerance must be positive\")\n\n            else:\n                raise MergeError(\"key must be integer, timestamp or float\")\n\n        if not isinstance(self.allow_exact_matches, bool):\n            msg = \"allow_exact_matches must be boolean, passed {passed}\"\n            raise MergeError(msg.format(passed=self.allow_exact_matches))\n\n        return left_join_keys, right_join_keys, join_names",
            "import_list": []
        }
    ]
}