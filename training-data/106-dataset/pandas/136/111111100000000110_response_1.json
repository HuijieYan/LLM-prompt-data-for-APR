{
    "pandas": [
        {
            "bugID": 136,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n        (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n        \n        if not all(pd.api.types.is_integer_dtype(lk) and pd.api.types.is_integer_dtype(rk) for lk, rk in zip(left_join_keys, right_join_keys)):\n            msg = \"incompatible merge keys [{i}] {lkdtype} and {rkdtype}, must be the same integer type\".format(\n                i=i, lkdtype=repr(left_join_keys[0]), rkdtype=repr(right_join_keys[0])\n            )\n            raise MergeError(msg)\n\n        # validate tolerance; datetime.timedelta or Timedelta if we have a DTI\n        if self.tolerance is not None:\n            lt = left_index = self.left.index if self.left_index else left_join_keys[-1]\n            lt_dtype = lt.dtype\n\n            if lt_dtype.kind == 't':\n                if not isinstance(self.tolerance, (datetime.timedelta, pd.Timedelta)):\n                    raise MergeError(f\"incompatible tolerance {self.tolerance}, must be compat with type {lt_dtype}\")\n                if self.tolerance < pd.Timedelta(0):\n                    raise MergeError(\"tolerance must be positive\")\n            else:\n                if not pd.api.types.is_numeric(self.tolerance):\n                    raise MergeError(f\"incompatible tolerance {self.tolerance}, must be compat with type {lt_dtype}\")\n                if self.tolerance < 0:\n                    raise MergeError(\"tolerance must be positive\")\n\n        if not pd.api.types.is_bool(self.allow_exact_matches):\n            raise MergeError(f\"allow_exact_matches must be boolean, passed {self.allow_exact_matches}\")\n\n        return left_join_keys, right_join_keys, join_names",
            "imports": []
        }
    ]
}