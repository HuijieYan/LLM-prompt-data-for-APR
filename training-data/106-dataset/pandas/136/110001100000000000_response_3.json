{
    "pandas": [
        {
            "bugID": 136,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n    # note this function has side effects\n    (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n\n    # validate index types are the same\n    for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n        if lk.dtype != rk.dtype:\n            raise MergeError(f\"incompatible merge keys [{i}] {lk.dtype} and {rk.dtype}, must be the same type\")\n    \n    # validate tolerance; datetime.timedelta or Timedelta if we have a DTI\n    if self.tolerance is not None:\n        if self.left_index:\n            lt = self.left.index\n        else:\n            lt = left_join_keys[-1]\n        \n        tolerance_type = type(self.tolerance)\n        if is_datetimelike(lt) and not isinstance(self.tolerance, datetime.timedelta):\n            raise MergeError(f\"incompatible tolerance {self.tolerance}, must be compat with type {lt.dtype}\")\n        elif is_int64_dtype(lt) and not is_integer(self.tolerance):\n            raise MergeError(f\"tolerance must be positive: {self.tolerance}\")\n        elif is_float_dtype(lt) and not is_number(self.tolerance):\n            raise MergeError(f\"tolerance must be positive: {self.tolerance}\")\n        elif not (is_datetimelike(lt) or is_int64_dtype(lt) or is_float_dtype(lt)):\n            raise MergeError(\"key must be integer, timestamp or float\")\n    \n    # validate allow_exact_matches\n    if not is_bool(self.allow_exact_matches):\n        raise MergeError(f\"allow_exact_matches must be boolean, passed {self.allow_exact_matches}\")\n\n    return left_join_keys, right_join_keys, join_names",
            "imports": []
        }
    ]
}