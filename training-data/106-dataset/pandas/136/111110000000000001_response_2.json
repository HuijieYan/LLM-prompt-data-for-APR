{
    "pandas": [
        {
            "bugID": 136,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n    # note this function has side effects\n    (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n\n    # validate index types are the same\n    for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n        if lk.dtype != rk.dtype:\n            msg = \"incompatible merge keys [{i}] {lkdtype} and {rkdtype}, must be the same type\".format(\n                i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n            )\n            raise MergeError(msg)\n\n    # validate tolerance\n    if self.tolerance is not None:\n        lt = self.left.index if self.left_index else left_join_keys[-1]\n\n        if isinstance(lt, datetime.datetime):\n            if not isinstance(self.tolerance, datetime.timedelta):\n                raise MergeError(\"incompatible tolerance {tolerance}, must be compat with type {lkdtype}\".format(\n                    tolerance=type(self.tolerance), lkdtype=repr(lt.dtype)\n                ))\n            if self.tolerance < datetime.timedelta(0):\n                raise MergeError(\"tolerance must be positive\")\n        elif isinstance(lt, int):\n            if not isinstance(self.tolerance, int):\n                raise MergeError(\"incompatible tolerance {tolerance}, must be compat with type {lkdtype}\".format(\n                    tolerance=type(self.tolerance), lkdtype=repr(lt.dtype)\n                ))\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n        elif isinstance(lt, int):\n            if not isinstance(self.tolerance, float):\n                raise MergeError(\"incompatible tolerance {tolerance}, must be compat with type {lkdtype}\".format(\n                    tolerance=type(self.tolerance), lkdtype=repr(lt.dtype)\n                ))\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n        else:\n            raise MergeError(\"key must be integer, timestamp or float\")\n\n    # validate allow_exact_matches\n    if not isinstance(self.allow_exact_matches, bool):\n        msg = \"allow_exact_matches must be boolean, passed {passed}\".format(passed=self.allow_exact_matches)\n        raise MergeError(msg)\n\n    return left_join_keys, right_join_keys, join_names",
            "imports": [
                "import datetime",
                "from pandas.errors import MergeError"
            ]
        }
    ]
}