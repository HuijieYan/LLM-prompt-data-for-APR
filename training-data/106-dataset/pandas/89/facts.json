{
    "1.1.1": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    clevels = [index.levels[i] for i in clocs]\n    ccodes = [index.codes[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    if rlocs == []:\n        # Everything is in clocs, so the dummy df has a regular index\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(\n            levels=rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=rnames + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = clevels\n        new_names = cnames\n        new_codes = recons_codes\n    else:\n        if isinstance(data.columns, MultiIndex):\n            result = data\n            for i in range(len(clocs)):\n                val = clocs[i]\n                result = result.unstack(val)\n                clocs = [v if i > v else v - 1 for v in clocs]\n\n            return result\n\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        if isinstance(unstacked, Series):\n            unstcols = unstacked.index\n        else:\n            unstcols = unstacked.columns\n        new_levels = [unstcols.levels[0]] + clevels\n        new_names = [data.columns.name] + cnames\n\n        new_codes = [unstcols.codes[0]]\n        for rec in recons_codes:\n            new_codes.append(rec.take(unstcols.codes[-1]))\n\n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/reshape/reshape.py",
    "1.3.2": [
        "unstack(obj, level, fill_value=None)"
    ],
    "1.4.1": [
        "def test_unstacking_multi_index_df():\n    # see gh-30740\n    df = DataFrame(\n        {\n            \"name\": [\"Alice\", \"Bob\"],\n            \"score\": [9.5, 8],\n            \"employed\": [False, True],\n            \"kids\": [0, 0],\n            \"gender\": [\"female\", \"male\"],\n        }\n    )\n    df = df.set_index([\"name\", \"employed\", \"kids\", \"gender\"])\n    df = df.unstack([\"gender\"], fill_value=0)\n    expected = df.unstack(\"employed\", fill_value=0).unstack(\"kids\", fill_value=0)\n    result = df.unstack([\"employed\", \"kids\"], fill_value=0)\n    expected = DataFrame(\n        [[9.5, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 8.0]],\n        index=Index([\"Alice\", \"Bob\"], name=\"name\"),\n        columns=MultiIndex.from_tuples(\n            [\n                (\"score\", \"female\", False, 0),\n                (\"score\", \"female\", True, 0),\n                (\"score\", \"male\", False, 0),\n                (\"score\", \"male\", True, 0),\n            ],\n            names=[None, \"gender\", \"employed\", \"kids\"],\n        ),\n    )\n    tm.assert_frame_equal(result, expected)"
    ],
    "1.4.2": [
        "pandas/tests/frame/test_reshape.py"
    ],
    "2.1.1": [
        [
            "E   AssertionError: DataFrame.iloc[:, 0] (column name=\"('score', 'female', False, 0)\") are different\nE   \nE   DataFrame.iloc[:, 0] (column name=\"('score', 'female', False, 0)\") values are different (50.0 %)\nE   [left]:  [9.5, nan]\nE   [right]: [9.5, 0.0]"
        ]
    ],
    "2.1.2": [
        [
            "def test_unstacking_multi_index_df():\n        # see gh-30740\n        df = DataFrame(\n            {\n                \"name\": [\"Alice\", \"Bob\"],\n                \"score\": [9.5, 8],\n                \"employed\": [False, True],\n                \"kids\": [0, 0],\n                \"gender\": [\"female\", \"male\"],\n            }\n        )\n        df = df.set_index([\"name\", \"employed\", \"kids\", \"gender\"])\n        df = df.unstack([\"gender\"], fill_value=0)\n        expected = df.unstack(\"employed\", fill_value=0).unstack(\"kids\", fill_value=0)\n        result = df.unstack([\"employed\", \"kids\"], fill_value=0)\n        expected = DataFrame(\n            [[9.5, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 8.0]],\n            index=Index([\"Alice\", \"Bob\"], name=\"name\"),\n            columns=MultiIndex.from_tuples(\n                [\n                    (\"score\", \"female\", False, 0),\n                    (\"score\", \"female\", True, 0),\n                    (\"score\", \"male\", False, 0),\n                    (\"score\", \"male\", True, 0),\n                ],\n                names=[None, \"gender\", \"employed\", \"kids\"],\n            ),\n        )\n>       tm.assert_frame_equal(result, expected)\n\npandas/tests/frame/test_reshape.py:1161: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "clocs": "['employed', 'kids']",
                "data": "                     score     \ngender              female male\nname  employed kids            \nAlice False    0       9.5  0.0\nBob   True     0       0.0  8.0",
                "data.index": "MultiIndex([('Alice', False, 0),\n            (  'Bob',  True, 0)],\n           names=['name', 'employed', 'kids'])",
                "data.copy": "<bound method NDFrame.copy of                      score     \ngender              female male\nname  employed kids            \nAlice False    0       9.5  0.0\nBob   True     0       0.0  8.0>",
                "fill_value": "0",
                "data.columns": "MultiIndex([('score', 'female'),\n            ('score',   'male')],\n           names=[None, 'gender'])"
            },
            {
                "clocs": "[0, 0]",
                "index": "MultiIndex([('Alice', False, 0),\n            (  'Bob',  True, 0)],\n           names=['name', 'employed', 'kids'])",
                "index._get_level_number": "<bound method MultiIndex._get_level_number of MultiIndex([('Alice', False, 0),\n            (  'Bob',  True, 0)],\n           names=['name', 'employed', 'kids'])>",
                "i": "1",
                "rlocs": "[0]",
                "index.nlevels": "3",
                "clevels": "[Index([False, True], dtype='object', name='employed'), Int64Index([0], dtype='int64', name='kids')]",
                "index.levels": "FrozenList([['Alice', 'Bob'], [False, True], [0]])",
                "ccodes": "[array([0, 1], dtype=int8), array([0, 0], dtype=int8)]",
                "index.codes": "FrozenList([[0, 1], [0, 1], [0, 0]])",
                "cnames": "['employed', 'kids']",
                "index.names": "FrozenList(['name', 'employed', 'kids'])",
                "rlevels": "[Index(['Alice', 'Bob'], dtype='object', name='name')]",
                "rcodes": "[array([0, 1], dtype=int8)]",
                "rnames": "['name']",
                "shape": "[2, 1]",
                "group_index": "array([0, 1])",
                "comp_ids": "array([0, 1])",
                "obs_ids": "array([0, 1])",
                "recons_codes": "[array([0, 1]), array([0, 0])]",
                "dummy_index": "MultiIndex([('Alice', 0),\n            (  'Bob', 1)],\n           names=['name', '__placeholder__'])",
                "result": "          score                  \ngender   female        male      \nemployed  False True  False True \nkids          0     0     0     0\nname                             \nAlice       9.5   NaN   0.0   NaN\nBob         NaN   0.0   NaN   8.0",
                "val": "1",
                "result.unstack": "<bound method DataFrame.unstack of           score                  \ngender   female        male      \nemployed  False True  False True \nkids          0     0     0     0\nname                             \nAlice       9.5   NaN   0.0   NaN\nBob         NaN   0.0   NaN   8.0>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "clocs": "list",
                "data": "DataFrame",
                "data.index": "MultiIndex",
                "data.copy": "method",
                "fill_value": "int",
                "data.columns": "MultiIndex"
            },
            {
                "clocs": "list",
                "index": "MultiIndex",
                "index._get_level_number": "method",
                "i": "int",
                "rlocs": "list",
                "index.nlevels": "int",
                "clevels": "list",
                "index.levels": "FrozenList",
                "ccodes": "list",
                "index.codes": "FrozenList",
                "cnames": "list",
                "index.names": "FrozenList",
                "rlevels": "list",
                "rcodes": "list",
                "rnames": "list",
                "shape": "list",
                "group_index": "ndarray",
                "comp_ids": "ndarray",
                "obs_ids": "ndarray",
                "recons_codes": "list",
                "dummy_index": "MultiIndex",
                "result": "DataFrame",
                "val": "int",
                "result.unstack": "method"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "clocs": "['employed', 'kids']",
                "data": "                     score     \ngender              female male\nname  employed kids            \nAlice False    0       9.5  0.0\nBob   True     0       0.0  8.0",
                "data.index": "MultiIndex([('Alice', False, 0),\n            (  'Bob',  True, 0)],\n           names=['name', 'employed', 'kids'])",
                "data.copy": "<bound method NDFrame.copy of                      score     \ngender              female male\nname  employed kids            \nAlice False    0       9.5  0.0\nBob   True     0       0.0  8.0>",
                "fill_value": "0",
                "data.columns": "MultiIndex([('score', 'female'),\n            ('score',   'male')],\n           names=[None, 'gender'])"
            },
            {
                "clocs": "[0, 0]",
                "index": "MultiIndex([('Alice', False, 0),\n            (  'Bob',  True, 0)],\n           names=['name', 'employed', 'kids'])",
                "index._get_level_number": "<bound method MultiIndex._get_level_number of MultiIndex([('Alice', False, 0),\n            (  'Bob',  True, 0)],\n           names=['name', 'employed', 'kids'])>",
                "i": "1",
                "rlocs": "[0]",
                "index.nlevels": "3",
                "clevels": "[Index([False, True], dtype='object', name='employed'), Int64Index([0], dtype='int64', name='kids')]",
                "index.levels": "FrozenList([['Alice', 'Bob'], [False, True], [0]])",
                "ccodes": "[array([0, 1], dtype=int8), array([0, 0], dtype=int8)]",
                "index.codes": "FrozenList([[0, 1], [0, 1], [0, 0]])",
                "cnames": "['employed', 'kids']",
                "index.names": "FrozenList(['name', 'employed', 'kids'])",
                "rlevels": "[Index(['Alice', 'Bob'], dtype='object', name='name')]",
                "rcodes": "[array([0, 1], dtype=int8)]",
                "rnames": "['name']",
                "shape": "[2, 1]",
                "group_index": "array([0, 1])",
                "comp_ids": "array([0, 1])",
                "obs_ids": "array([0, 1])",
                "recons_codes": "[array([0, 1]), array([0, 0])]",
                "dummy_index": "MultiIndex([('Alice', 0),\n            (  'Bob', 1)],\n           names=['name', '__placeholder__'])",
                "result": "          score                  \ngender   female        male      \nemployed  False True  False True \nkids          0     0     0     0\nname                             \nAlice       9.5   0.0   0.0   0.0\nBob         0.0   0.0   0.0   8.0",
                "val": "1",
                "result.unstack": "<bound method DataFrame.unstack of           score                  \ngender   female        male      \nemployed  False True  False True \nkids          0     0     0     0\nname                             \nAlice       9.5   0.0   0.0   0.0\nBob         0.0   0.0   0.0   8.0>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "clocs": "list",
                "data": "DataFrame",
                "data.index": "MultiIndex",
                "data.copy": "method",
                "fill_value": "int",
                "data.columns": "MultiIndex"
            },
            {
                "clocs": "list",
                "index": "MultiIndex",
                "index._get_level_number": "method",
                "i": "int",
                "rlocs": "list",
                "index.nlevels": "int",
                "clevels": "list",
                "index.levels": "FrozenList",
                "ccodes": "list",
                "index.codes": "FrozenList",
                "cnames": "list",
                "index.names": "FrozenList",
                "rlevels": "list",
                "rcodes": "list",
                "rnames": "list",
                "shape": "list",
                "group_index": "ndarray",
                "comp_ids": "ndarray",
                "obs_ids": "ndarray",
                "recons_codes": "list",
                "dummy_index": "MultiIndex",
                "result": "DataFrame",
                "val": "int",
                "result.unstack": "method"
            }
        ]
    ],
    "3.1.1": [
        "DataFrame.unstack() with list of levels ignores fill_value\n"
    ],
    "3.1.2": [
        "Code Sample, a copy-pastable example if possible\n>>> import pandas as pd\n>>> df = (\n...     pd.DataFrame(\n...         {\n...             \"name\": [\"Alice\", \"Bob\"],\n...             \"score\": [9.5, 8],\n...             \"employed\": [False, True],\n...             \"kids\": [0, 0],\n...             \"gender\": [\"female\", \"male\"],\n...         }\n...     )\n...     .set_index([\"name\", \"employed\", \"kids\", \"gender\"])\n...     .unstack([\"gender\"], fill_value=0)\n... )\n>>> df.unstack([\"employed\", \"kids\"], fill_value=0)\n          score\ngender   female        male\nemployed  False True  False True\nkids          0     0     0     0\nname\nAlice       9.5   NaN   0.0   NaN\nBob         NaN   0.0   NaN   8.0\nProblem description\nwhen unstacking with a list of levels on a DataFrame that already has a columns MultiIndex, fill_value is ignored.\n\nExpected Output\n>>> df.unstack(\"employed\", fill_value=0).unstack(\"kids\", fill_value=0)\n          score\ngender   female        male\nemployed  False True  False True\nkids          0     0     0     0\nname\nAlice       9.5   0.0   0.0   0.0\nBob         0.0   0.0   0.0   8.0\n>>>\n"
    ]
}