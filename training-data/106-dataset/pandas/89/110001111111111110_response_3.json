{
    "pandas": [
        {
            "bugID": 89,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # Extract the index from the data\n    index = data.index\n\n    # Get the level number for each location in clocs\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    # Calculate the remaining level locations\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    # Extract the levels, codes, and names for the columns\n    clevels = [index.levels[i] for i in clocs]\n    ccodes = [index.codes[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n\n    # Extract the levels, codes, and names for the remaining levels\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    # Determine the shape of the levels\n    shape = [len(x) for x in clevels]\n\n    # Group the index based on the codes\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n    # Compress the group index\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n\n    # Reconstruct the codes based on the compressed and observed IDs\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    # Create a new dummy index based on the observed IDs\n    dummy_index = MultiIndex(\n        levels=rlevels + [obs_ids],\n        codes=rcodes + [comp_ids],\n        names=rnames + [\"__placeholder__\"],\n        verify_integrity=False,\n    )\n\n    # If the data is a Series\n    if isinstance(data, Series):\n        # Copy the data and set the index to the dummy index\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        # Unstack the data using the \"__placeholder__\" as the column to unstack\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = clevels\n        new_names = cnames\n        new_codes = recons_codes\n    else:\n        # If the data has a MultiIndex for columns\n        if isinstance(data.columns, MultiIndex):\n            # Unstack the data for each level in clocs\n            result = data\n            for i in range(len(clocs)):\n                val = clocs[i]\n                result = result.unstack(val)\n                clocs = [v if i > v else v - 1 for v in clocs]\n\n            return result\n\n        # Copy the data and set the index to the dummy index\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        # Unstack the data using the \"__placeholder__\" as the column to unstack\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\n        # Determine the location of the unstacked columns\n        if isinstance(unstacked, Series):\n            unstcols = unstacked.index\n        else:\n            unstcols = unstacked.columns\n        new_levels = [unstcols.levels[0]] + clevels\n        new_names = [data.columns.name] + cnames\n\n        new_codes = [unstcols.codes[0]]\n        for rec in recons_codes:\n            new_codes.append(rec.take(unstcols.codes[-1]))\n\n    # Create a new MultiIndex for the unstacked data\n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    # Update the index or columns of the unstacked data\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "imports": []
        }
    ]
}