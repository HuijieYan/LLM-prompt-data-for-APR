{
    "pandas": [
        {
            "bugID": 119,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 187,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def _add_margins(\n    table: Union[Series, DataFrame],\n    data,\n    values,\n    rows,\n    cols,\n    aggfunc,\n    observed=None,\n    margins_name: Union[str, Tuple[str, ...]] = \"All\",\n    fill_value=None,\n):\n    if not isinstance(margins_name, (str, Tuple)):\n        raise ValueError(\"margins_name argument must be a string or a tuple of strings\")\n\n    msg = 'Conflicting name \"{name}\" in margins'.format(name=margins_name)\n    for level in table.index.names:\n        if isinstance(margins_name, tuple):\n            if any(name in table.index.get_level_values(level) for name in margins_name):\n                raise ValueError(msg)\n        else:\n            if margins_name in table.index.get_level_values(level):\n                raise ValueError(msg)\n\n    grand_margin = _compute_grand_margin(data, values, aggfunc, margins_name)\n\n    if table.ndim == 2:\n        # i.e. DataFrame\n        for level in table.columns.names[1:]:\n            if isinstance(margins_name, tuple):\n                if any(name in table.columns.get_level_values(level) for name in margins_name):\n                    raise ValueError(msg)\n            else:\n                if margins_name in table.columns.get_level_values(level):\n                    raise ValueError(msg)",
            "imports": [
                "from typing import Union, Tuple",
                "from pandas.core.generic import ABCSeries, ABCDataFrame",
                "from pandas import Series, DataFrame"
            ]
        }
    ]
}