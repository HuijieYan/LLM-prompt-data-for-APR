{
    "pandas": [
        {
            "bugID": 119,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 187,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def _add_margins(\n    table: Union[\"Series\", \"DataFrame\"],\n    data,\n    values,\n    rows,\n    cols,\n    aggfunc,\n    observed=None,\n    margins_name: str = \"All\",\n    fill_value=None,\n):\n    from pandas import DataFrame, Series, pivot_table, MultiIndex, Index\n    from pandas.api.types import is_scalar, is_list_like\n    from pandas.core.arrays.categorical import Categorical\n    from pandas.core.dtypes.common import is_datetime_or_timedelta_dtype, is_extension_array_dtype, is_period_dtype\n    from pandas.core.tools.numeric import to_numeric, numeric_only\n    from pandas.core.indexes.base import ensure_index, Index\n    if not isinstance(margins_name, str):\n        raise ValueError(\"margins_name argument must be a string\")\n    \n    msg = 'Conflicting name \"{name}\" in margins'.format(name=margins_name)\n    for level in table.index.names:\n        if margins_name in table.index.get_level_values(level):\n            raise ValueError(msg)\n    \n    grand_margin = _compute_grand_margin(data, values, aggfunc, margins_name)\n    \n    if table.ndim == 2:\n        # i.e. DataFrame\n        for level in table.columns.names[1:]:\n            if margins_name in table.columns.get_level_values(level):\n                raise ValueError(msg)\n    \n    key = margins_name if is_scalar(rows) or isinstance(rows, Categorical) else (margins_name,)\n    \n    if not values and isinstance(table, ABCSeries):\n        result = table.copy()\n        result[key] = grand_margin[margins_name]\n        return result\n    \n    elif values:\n        return _generate_marginal_results(\n            table,\n            data,\n            values,\n            rows,\n            cols,\n            aggfunc,\n            observed,\n            grand_margin,\n            margins_name,\n        )\n    else:\n        assert isinstance(table, ABCDataFrame)\n        return _generate_marginal_results_without_values(\n            table, data, rows, cols, aggfunc, observed, margins_name\n        )"
        }
    ]
}