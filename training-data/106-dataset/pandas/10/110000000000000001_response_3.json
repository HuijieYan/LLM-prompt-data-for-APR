{
    "pandas": [
        {
            "bugID": 10,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1590,
            "file_name": "pandas/core/internals/blocks.py",
            "replace_code": "def putmask(\n    self, mask, new, inplace: bool = False, axis: int = 0, transpose: bool = False,\n) -> List[\"Block\"]:\n    import numpy as np\n    from typing import List\n    \"\"\"\n    See Block.putmask.__doc__\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    \n    mask = np.asarray(mask, dtype=bool)\n    \n    new_values = self.values if inplace else self.values.copy()\n    \n    if isinstance(new, np.ndarray) and len(np.atleast_1d(new)) == len(mask):\n        new = np.asarray(new)[mask]\n    \n    mask = np.broadcast_to(mask, new_values.shape)\n    \n    new_values[mask] = new\n    return [self.make_block(values=new_values)]"
        }
    ]
}