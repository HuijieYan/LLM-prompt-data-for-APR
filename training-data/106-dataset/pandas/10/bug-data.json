{
    "pandas:10": {
        "/Volumes/SSD2T/bgp_envs/repos/pandas_10/pandas/core/internals/blocks.py": {
            "buggy_functions": [
                {
                    "function_name": "putmask",
                    "function_code": "def putmask(\n    self, mask, new, inplace: bool = False, axis: int = 0, transpose: bool = False,\n) -> List[\"Block\"]:\n    \"\"\"\n    See Block.putmask.__doc__\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    mask = _extract_bool_array(mask)\n\n    new_values = self.values if inplace else self.values.copy()\n\n    if isinstance(new, np.ndarray) and len(new) == len(mask):\n        new = new[mask]\n\n    mask = _safe_reshape(mask, new_values.shape)\n\n    new_values[mask] = new\n    return [self.make_block(values=new_values)]\n",
                    "decorators": [],
                    "docstring": "See Block.putmask.__doc__",
                    "start_line": 1590,
                    "end_line": 1608,
                    "variables": {
                        "bool": [
                            1591
                        ],
                        "int": [
                            1591
                        ],
                        "inplace": [
                            1600,
                            1596
                        ],
                        "validate_bool_kwarg": [
                            1596
                        ],
                        "mask": [
                            1602,
                            1603,
                            1605,
                            1607,
                            1598
                        ],
                        "_extract_bool_array": [
                            1598
                        ],
                        "new_values": [
                            1600,
                            1608,
                            1605,
                            1607
                        ],
                        "self.values": [
                            1600
                        ],
                        "self": [
                            1600,
                            1608
                        ],
                        "self.values.copy": [
                            1600
                        ],
                        "isinstance": [
                            1602
                        ],
                        "new": [
                            1602,
                            1603,
                            1607
                        ],
                        "np.ndarray": [
                            1602
                        ],
                        "np": [
                            1602
                        ],
                        "len": [
                            1602
                        ],
                        "_safe_reshape": [
                            1605
                        ],
                        "new_values.shape": [
                            1605
                        ],
                        "self.make_block": [
                            1608
                        ],
                        "List": [
                            1592
                        ]
                    },
                    "filtered_variables": {
                        "inplace": [
                            1600,
                            1596
                        ],
                        "validate_bool_kwarg": [
                            1596
                        ],
                        "mask": [
                            1602,
                            1603,
                            1605,
                            1607,
                            1598
                        ],
                        "_extract_bool_array": [
                            1598
                        ],
                        "new_values": [
                            1600,
                            1608,
                            1605,
                            1607
                        ],
                        "self.values": [
                            1600
                        ],
                        "self": [
                            1600,
                            1608
                        ],
                        "self.values.copy": [
                            1600
                        ],
                        "new": [
                            1602,
                            1603,
                            1607
                        ],
                        "np.ndarray": [
                            1602
                        ],
                        "np": [
                            1602
                        ],
                        "_safe_reshape": [
                            1605
                        ],
                        "new_values.shape": [
                            1605
                        ],
                        "self.make_block": [
                            1608
                        ],
                        "List": [
                            1592
                        ]
                    },
                    "diff_line_number": 1602,
                    "class_data": {
                        "signature": "class ExtensionBlock(Block)",
                        "docstring": "Block for holding extension types.\n\nNotes\n-----\nThis holds all 3rd-party extension array types. It's also the immediate\nparent class for our internal extension types' blocks, CategoricalBlock.\n\nExtensionArrays are limited to 1-D.",
                        "constructor_docstring": "Initialize a non-consolidatable block.\n\n'ndim' may be inferred from 'placement'.\n\nThis will call continue to call __init__ for the other base\nclasses mixed in with this Mixin.",
                        "functions": [
                            "def __init__(self, values, placement, ndim=None):\n    \"\"\"\n    Initialize a non-consolidatable block.\n\n    'ndim' may be inferred from 'placement'.\n\n    This will call continue to call __init__ for the other base\n    classes mixed in with this Mixin.\n    \"\"\"\n    values = self._maybe_coerce_values(values)\n    if not isinstance(placement, libinternals.BlockPlacement):\n        placement = libinternals.BlockPlacement(placement)\n    if ndim is None:\n        if len(placement) != 1:\n            ndim = 1\n        else:\n            ndim = 2\n    super().__init__(values, placement, ndim=ndim)\n    if self.ndim == 2 and len(self.mgr_locs) != 1:\n        raise AssertionError('block.size != values.size')",
                            "@property\ndef shape(self):\n    if self.ndim == 1:\n        return (len(self.values),)\n    return (len(self.mgr_locs), len(self.values))",
                            "def iget(self, col):\n    if self.ndim == 2 and isinstance(col, tuple):\n        col, loc = col\n        if not com.is_null_slice(col) and col != 0:\n            raise IndexError(f'{self} only contains one item')\n        elif isinstance(col, slice):\n            if col != slice(None):\n                raise NotImplementedError(col)\n            return self.values[[loc]]\n        return self.values[loc]\n    else:\n        if col != 0:\n            raise IndexError(f'{self} only contains one item')\n        return self.values",
                            "def should_store(self, value: ArrayLike) -> bool:\n    \"\"\"\n    Can we set the given array-like value inplace?\n    \"\"\"\n    return isinstance(value, self._holder)",
                            "def set(self, locs, values):\n    assert locs.tolist() == [0]\n    self.values[:] = values",
                            "def putmask(self, mask, new, inplace: bool=False, axis: int=0, transpose: bool=False) -> List['Block']:\n    \"\"\"\n    See Block.putmask.__doc__\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    mask = _extract_bool_array(mask)\n    new_values = self.values if inplace else self.values.copy()\n    if isinstance(new, np.ndarray) and len(new) == len(mask):\n        new = new[mask]\n    mask = _safe_reshape(mask, new_values.shape)\n    new_values[mask] = new\n    return [self.make_block(values=new_values)]",
                            "def _maybe_coerce_values(self, values):\n    \"\"\"\n    Unbox to an extension array.\n\n    This will unbox an ExtensionArray stored in an Index or Series.\n    ExtensionArrays pass through. No dtype coercion is done.\n\n    Parameters\n    ----------\n    values : Index, Series, ExtensionArray\n\n    Returns\n    -------\n    ExtensionArray\n    \"\"\"\n    return extract_array(values)",
                            "@property\ndef _holder(self):\n    return type(self.values)",
                            "@property\ndef fill_value(self):\n    return self.values.dtype.na_value",
                            "@property\ndef _can_hold_na(self):\n    return self._holder._can_hold_na",
                            "@property\ndef is_view(self) -> bool:\n    \"\"\"Extension arrays are never treated as views.\"\"\"\n    return False",
                            "@property\ndef is_numeric(self):\n    return self.values.dtype._is_numeric",
                            "def setitem(self, indexer, value):\n    \"\"\"\n    Attempt self.values[indexer] = value, possibly creating a new array.\n\n    This differs from Block.setitem by not allowing setitem to change\n    the dtype of the Block.\n\n    Parameters\n    ----------\n    indexer : tuple, list-like, array-like, slice\n        The subset of self.values to set\n    value : object\n        The value being set\n\n    Returns\n    -------\n    Block\n\n    Notes\n    -----\n    `indexer` is a direct slice/positional indexer. `value` must\n    be a compatible shape.\n    \"\"\"\n    if isinstance(indexer, tuple):\n        indexer = indexer[0]\n    check_setitem_lengths(indexer, value, self.values)\n    self.values[indexer] = value\n    return self",
                            "def get_values(self, dtype=None):\n    return np.asarray(self.values).reshape(self.shape)",
                            "def array_values(self) -> ExtensionArray:\n    return self.values",
                            "def to_native_types(self, na_rep='nan', quoting=None, **kwargs):\n    \"\"\"override to use ExtensionArray astype for the conversion\"\"\"\n    values = self.values\n    mask = isna(values)\n    values = np.asarray(values.astype(object))\n    values[mask] = na_rep\n    return values.reshape(1, len(values))",
                            "def take_nd(self, indexer, axis: int=0, new_mgr_locs=None, fill_value=lib.no_default):\n    \"\"\"\n    Take values according to indexer and return them as a block.\n    \"\"\"\n    if fill_value is lib.no_default:\n        fill_value = None\n    new_values = self.values.take(indexer, fill_value=fill_value, allow_fill=True)\n    assert not (self.ndim == 1 and new_mgr_locs is None)\n    if new_mgr_locs is None:\n        new_mgr_locs = self.mgr_locs\n    return self.make_block_same_class(new_values, new_mgr_locs)",
                            "def _can_hold_element(self, element: Any) -> bool:\n    return True",
                            "def _slice(self, slicer):\n    \"\"\"\n    Return a slice of my values.\n\n    Parameters\n    ----------\n    slicer : slice, ndarray[int], or a tuple of these\n        Valid (non-reducing) indexer for self.values.\n\n    Returns\n    -------\n    np.ndarray or ExtensionArray\n    \"\"\"\n    if not isinstance(slicer, tuple) and self.ndim == 2:\n        slicer = (slicer, slice(None))\n    if isinstance(slicer, tuple) and len(slicer) == 2:\n        first = slicer[0]\n        if not isinstance(first, slice):\n            raise AssertionError('invalid slicing for a 1-ndim ExtensionArray', first)\n        new_locs = self.mgr_locs[first]\n        if len(new_locs):\n            slicer = slicer[1]\n        else:\n            raise AssertionError('invalid slicing for a 1-ndim ExtensionArray', slicer)\n    return self.values[slicer]",
                            "def fillna(self, value, limit=None, inplace=False, downcast=None):\n    values = self.values if inplace else self.values.copy()\n    values = values.fillna(value=value, limit=limit)\n    return [self.make_block_same_class(values=values, placement=self.mgr_locs, ndim=self.ndim)]",
                            "def interpolate(self, method='pad', axis=0, inplace=False, limit=None, fill_value=None, **kwargs):\n    values = self.values if inplace else self.values.copy()\n    return self.make_block_same_class(values=values.fillna(value=fill_value, method=method, limit=limit), placement=self.mgr_locs)",
                            "def diff(self, n: int, axis: int=1) -> List['Block']:\n    if axis == 0 and n != 0:\n        return super().diff(len(self.values), axis=0)\n    if axis == 1:\n        axis = 0\n    return super().diff(n, axis)",
                            "def shift(self, periods: int, axis: int=0, fill_value: Any=None) -> List['ExtensionBlock']:\n    \"\"\"\n    Shift the block by `periods`.\n\n    Dispatches to underlying ExtensionArray and re-boxes in an\n    ExtensionBlock.\n    \"\"\"\n    return [self.make_block_same_class(self.values.shift(periods=periods, fill_value=fill_value), placement=self.mgr_locs, ndim=self.ndim)]",
                            "def where(self, other, cond, errors='raise', try_cast: bool=False, axis: int=0) -> List['Block']:\n    cond = _extract_bool_array(cond)\n    assert not isinstance(other, (ABCIndexClass, ABCSeries, ABCDataFrame))\n    if isinstance(other, np.ndarray) and other.ndim == 2:\n        assert other.shape[1] == 1\n        other = other[:, 0]\n    if isinstance(cond, np.ndarray) and cond.ndim == 2:\n        assert cond.shape[1] == 1\n        cond = cond[:, 0]\n    if lib.is_scalar(other) and isna(other):\n        other = self.dtype.na_value\n    if is_sparse(self.values):\n        dtype = None\n    else:\n        dtype = self.dtype\n    result = self.values.copy()\n    icond = ~cond\n    if lib.is_scalar(other):\n        set_other = other\n    else:\n        set_other = other[icond]\n    try:\n        result[icond] = set_other\n    except (NotImplementedError, TypeError):\n        result = self._holder._from_sequence(np.where(cond, self.values, other), dtype=dtype)\n    return [self.make_block_same_class(result, placement=self.mgr_locs)]",
                            "def _unstack(self, unstacker, fill_value, new_placement):\n    n_rows = self.shape[-1]\n    dummy_arr = np.arange(n_rows)\n    new_values, mask = unstacker.get_new_values(dummy_arr, fill_value=-1)\n    mask = mask.any(0)\n    blocks = [self.make_block_same_class(self.values.take(indices, allow_fill=True, fill_value=fill_value), [place]) for indices, place in zip(new_values.T, new_placement)]\n    return (blocks, mask)"
                        ],
                        "constructor_variables": [
                            "ndim",
                            "placement",
                            "values"
                        ],
                        "class_level_variables": [
                            "_can_consolidate",
                            "_verify_integrity",
                            "_validate_ndim",
                            "is_extension"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, values, placement, ndim=None)",
                            "shape(self)",
                            "iget(self, col)",
                            "should_store(self, value: ArrayLike) -> bool",
                            "set(self, locs, values)",
                            "putmask(self, mask, new, inplace: bool=False, axis: int=0, transpose: bool=False) -> List['Block']",
                            "_maybe_coerce_values(self, values)",
                            "_holder(self)",
                            "fill_value(self)",
                            "_can_hold_na(self)",
                            "is_view(self) -> bool",
                            "is_numeric(self)",
                            "setitem(self, indexer, value)",
                            "get_values(self, dtype=None)",
                            "array_values(self) -> ExtensionArray",
                            "to_native_types(self, na_rep='nan', quoting=None, **kwargs)",
                            "take_nd(self, indexer, axis: int=0, new_mgr_locs=None, fill_value=lib.no_default)",
                            "_can_hold_element(self, element: Any) -> bool",
                            "_slice(self, slicer)",
                            "fillna(self, value, limit=None, inplace=False, downcast=None)",
                            "interpolate(self, method='pad', axis=0, inplace=False, limit=None, fill_value=None, **kwargs)",
                            "diff(self, n: int, axis: int=1) -> List['Block']",
                            "shift(self, periods: int, axis: int=0, fill_value: Any=None) -> List['ExtensionBlock']",
                            "where(self, other, cond, errors='raise', try_cast: bool=False, axis: int=0) -> List['Block']",
                            "_unstack(self, unstacker, fill_value, new_placement)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "inplace": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "_extract_bool_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "<BooleanArray>\n[True, <NA>]\nLength: 2, dtype: boolean",
                                    "variable_type": "BooleanArray",
                                    "variable_shape": "(2,)"
                                },
                                "self": {
                                    "variable_value": "ExtensionBlock: 2 dtype: boolean",
                                    "variable_type": "ExtensionBlock",
                                    "variable_shape": "(2,)"
                                },
                                "self.values.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "new": {
                                    "variable_value": "<BooleanArray>\n[<NA>, False]\nLength: 2, dtype: boolean",
                                    "variable_type": "BooleanArray",
                                    "variable_shape": "(2,)"
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_safe_reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.make_block": {
                                    "variable_value": "<bound method Block.make_block of ExtensionBlock: 2 dtype: boolean>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "inplace": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "_extract_bool_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "<StringArray>\n['a', <NA>]\nLength: 2, dtype: string",
                                    "variable_type": "StringArray",
                                    "variable_shape": "(2,)"
                                },
                                "self": {
                                    "variable_value": "ExtensionBlock: 2 dtype: string",
                                    "variable_type": "ExtensionBlock",
                                    "variable_shape": "(2,)"
                                },
                                "self.values.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "new": {
                                    "variable_value": "<StringArray>\n[<NA>, 'b']\nLength: 2, dtype: string",
                                    "variable_type": "StringArray",
                                    "variable_shape": "(2,)"
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ExtensionArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_safe_reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.make_block": {
                                    "variable_value": "<bound method Block.make_block of ExtensionBlock: 2 dtype: string>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "_extract_bool_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": "<StringArray>\n['a', 'b']\nLength: 2, dtype: string",
                                    "variable_type": "StringArray",
                                    "variable_shape": "(2,)"
                                },
                                "self.values": {
                                    "variable_value": "<StringArray>\n['a', 'b']\nLength: 2, dtype: string",
                                    "variable_type": "StringArray",
                                    "variable_shape": "(2,)"
                                },
                                "self": {
                                    "variable_value": "ExtensionBlock: 2 dtype: string",
                                    "variable_type": "ExtensionBlock",
                                    "variable_shape": "(2,)"
                                },
                                "self.values.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "new": {
                                    "variable_value": "<StringArray>\n['b']\nLength: 1, dtype: string",
                                    "variable_type": "StringArray",
                                    "variable_shape": "(1,)"
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ExtensionArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_safe_reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values.shape": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "self.make_block": {
                                    "variable_value": "<bound method Block.make_block of ExtensionBlock: 2 dtype: string>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "_extract_bool_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "<IntegerArray>\n[1, <NA>]\nLength: 2, dtype: Int64",
                                    "variable_type": "IntegerArray",
                                    "variable_shape": "(2,)"
                                },
                                "self": {
                                    "variable_value": "ExtensionBlock: 2 dtype: Int64",
                                    "variable_type": "ExtensionBlock",
                                    "variable_shape": "(2,)"
                                },
                                "self.values.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "new": {
                                    "variable_value": "<IntegerArray>\n[<NA>, 2]\nLength: 2, dtype: Int64",
                                    "variable_type": "IntegerArray",
                                    "variable_shape": "(2,)"
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ExtensionArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_safe_reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.make_block": {
                                    "variable_value": "<bound method Block.make_block of ExtensionBlock: 2 dtype: Int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "_extract_bool_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": "<IntegerArray>\n[1, 2]\nLength: 2, dtype: Int64",
                                    "variable_type": "IntegerArray",
                                    "variable_shape": "(2,)"
                                },
                                "self.values": {
                                    "variable_value": "<IntegerArray>\n[1, 2]\nLength: 2, dtype: Int64",
                                    "variable_type": "IntegerArray",
                                    "variable_shape": "(2,)"
                                },
                                "self": {
                                    "variable_value": "ExtensionBlock: 2 dtype: Int64",
                                    "variable_type": "ExtensionBlock",
                                    "variable_shape": "(2,)"
                                },
                                "self.values.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "new": {
                                    "variable_value": "<IntegerArray>\n[2]\nLength: 1, dtype: Int64",
                                    "variable_type": "IntegerArray",
                                    "variable_shape": "(1,)"
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ExtensionArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_safe_reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values.shape": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "self.make_block": {
                                    "variable_value": "<bound method Block.make_block of ExtensionBlock: 2 dtype: Int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "_extract_bool_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "<BooleanArray>\n[True, <NA>]\nLength: 2, dtype: boolean",
                                    "variable_type": "BooleanArray",
                                    "variable_shape": "(2,)"
                                },
                                "self": {
                                    "variable_value": "ExtensionBlock: 2 dtype: boolean",
                                    "variable_type": "ExtensionBlock",
                                    "variable_shape": "(2,)"
                                },
                                "self.values.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "new": {
                                    "variable_value": "<BooleanArray>\n[<NA>, False]\nLength: 2, dtype: boolean",
                                    "variable_type": "BooleanArray",
                                    "variable_shape": "(2,)"
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ExtensionArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_safe_reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.make_block": {
                                    "variable_value": "<bound method Block.make_block of ExtensionBlock: 2 dtype: boolean>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "_extract_bool_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": "<BooleanArray>\n[True, False]\nLength: 2, dtype: boolean",
                                    "variable_type": "BooleanArray",
                                    "variable_shape": "(2,)"
                                },
                                "self.values": {
                                    "variable_value": "<BooleanArray>\n[True, False]\nLength: 2, dtype: boolean",
                                    "variable_type": "BooleanArray",
                                    "variable_shape": "(2,)"
                                },
                                "self": {
                                    "variable_value": "ExtensionBlock: 2 dtype: boolean",
                                    "variable_type": "ExtensionBlock",
                                    "variable_shape": "(2,)"
                                },
                                "self.values.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "new": {
                                    "variable_value": "<BooleanArray>\n[False]\nLength: 1, dtype: boolean",
                                    "variable_type": "BooleanArray",
                                    "variable_shape": "(1,)"
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ExtensionArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_safe_reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values.shape": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "self.make_block": {
                                    "variable_value": "<bound method Block.make_block of ExtensionBlock: 2 dtype: boolean>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def get_block_type(values, dtype=None):\n    \"\"\"\n    Find the appropriate Block subclass to use for the given values and dtype.\n\n    Parameters\n    ----------\n    values : ndarray-like\n    dtype : numpy or pandas dtype\n\n    Returns\n    -------\n    cls : class, subclass of Block\n    \"\"\"\n    dtype = dtype or values.dtype\n    vtype = dtype.type\n\n    if is_sparse(dtype):\n        # Need this first(ish) so that Sparse[datetime] is sparse\n        cls = ExtensionBlock\n    elif is_categorical_dtype(values.dtype):\n        cls = CategoricalBlock\n    elif issubclass(vtype, np.datetime64):\n        assert not is_datetime64tz_dtype(values.dtype)\n        cls = DatetimeBlock\n    elif is_datetime64tz_dtype(values.dtype):\n        cls = DatetimeTZBlock\n    elif is_interval_dtype(dtype) or is_period_dtype(dtype):\n        cls = ObjectValuesExtensionBlock\n    elif is_extension_array_dtype(values.dtype):\n        cls = ExtensionBlock\n    elif issubclass(vtype, np.floating):\n        cls = FloatBlock\n    elif issubclass(vtype, np.timedelta64):\n        assert issubclass(vtype, np.integer)\n        cls = TimeDeltaBlock\n    elif issubclass(vtype, np.complexfloating):\n        cls = ComplexBlock\n    elif issubclass(vtype, np.integer):\n        cls = IntBlock\n    elif dtype == np.bool_:\n        cls = BoolBlock\n    else:\n        cls = ObjectBlock\n    return cls",
                "def make_block(values, placement, klass=None, ndim=None, dtype=None):\n    # Ensure that we don't allow PandasArray / PandasDtype in internals.\n    # For now, blocks should be backed by ndarrays when possible.\n    if isinstance(values, ABCPandasArray):\n        values = values.to_numpy()\n        if ndim and ndim > 1:\n            # TODO(EA2D): special case not needed with 2D EAs\n            values = np.atleast_2d(values)\n\n    if isinstance(dtype, PandasDtype):\n        dtype = dtype.numpy_dtype\n\n    if klass is None:\n        dtype = dtype or values.dtype\n        klass = get_block_type(values, dtype)\n\n    elif klass is DatetimeTZBlock and not is_datetime64tz_dtype(values):\n        # TODO: This is no longer hit internally; does it need to be retained\n        #  for e.g. pyarrow?\n        values = DatetimeArray._simple_new(values, dtype=dtype)\n\n    return klass(values, ndim=ndim, placement=placement)",
                "def _extend_blocks(result, blocks=None):\n    \"\"\" return a new extended blocks, given the result \"\"\"\n    if blocks is None:\n        blocks = []\n    if isinstance(result, list):\n        for r in result:\n            if isinstance(r, list):\n                blocks.extend(r)\n            else:\n                blocks.append(r)\n    else:\n        assert isinstance(result, Block), type(result)\n        blocks.append(result)\n    return blocks",
                "def _block_shape(values: ArrayLike, ndim: int = 1) -> ArrayLike:\n    \"\"\" guarantee the shape of the values to be at least 1 d \"\"\"\n    if values.ndim < ndim:\n        shape = values.shape\n        if not is_extension_array_dtype(values.dtype):\n            # TODO(EA2D): https://github.com/pandas-dev/pandas/issues/23023\n            # block.shape is incorrect for \"2D\" ExtensionArrays\n            # We can't, and don't need to, reshape.\n            values = values.reshape(tuple((1,) + shape))  # type: ignore\n    return values",
                "def _safe_reshape(arr, new_shape):\n    \"\"\"\n    If possible, reshape `arr` to have shape `new_shape`,\n    with a couple of exceptions (see gh-13012):\n\n    1) If `arr` is a ExtensionArray or Index, `arr` will be\n       returned as is.\n    2) If `arr` is a Series, the `_values` attribute will\n       be reshaped and returned.\n\n    Parameters\n    ----------\n    arr : array-like, object to be reshaped\n    new_shape : int or tuple of ints, the new shape\n    \"\"\"\n    if isinstance(arr, ABCSeries):\n        arr = arr._values\n    if not is_extension_array_dtype(arr.dtype):\n        # Note: this will include TimedeltaArray and tz-naive DatetimeArray\n        # TODO(EA2D): special case will be unnecessary with 2D EAs\n        arr = np.asarray(arr).reshape(new_shape)\n    return arr",
                "def _putmask_smart(v: np.ndarray, mask: np.ndarray, n) -> np.ndarray:\n    \"\"\"\n    Return a new ndarray, try to preserve dtype if possible.\n\n    Parameters\n    ----------\n    v : np.ndarray\n        `values`, updated in-place.\n    mask : np.ndarray[bool]\n        Applies to both sides (array like).\n    n : `new values` either scalar or an array like aligned with `values`\n\n    Returns\n    -------\n    values : ndarray with updated values\n        this *may* be a copy of the original\n\n    See Also\n    --------\n    ndarray.putmask\n    \"\"\"\n    # we cannot use np.asarray() here as we cannot have conversions\n    # that numpy does when numeric are mixed with strings\n\n    # n should be the length of the mask or a scalar here\n    if not is_list_like(n):\n        n = np.repeat(n, len(mask))\n\n    # see if we are only masking values that if putted\n    # will work in the current dtype\n    try:\n        nn = n[mask]\n    except TypeError:\n        # TypeError: only integer scalar arrays can be converted to a scalar index\n        pass\n    else:\n        # make sure that we have a nullable type\n        # if we have nulls\n        if not _isna_compat(v, nn[0]):\n            pass\n        elif not (is_float_dtype(nn.dtype) or is_integer_dtype(nn.dtype)):\n            # only compare integers/floats\n            pass\n        elif not (is_float_dtype(v.dtype) or is_integer_dtype(v.dtype)):\n            # only compare integers/floats\n            pass\n        else:\n\n            # we ignore ComplexWarning here\n            with warnings.catch_warnings(record=True):\n                warnings.simplefilter(\"ignore\", np.ComplexWarning)\n                nn_at = nn.astype(v.dtype)\n\n            comp = nn == nn_at\n            if is_list_like(comp) and comp.all():\n                nv = v.copy()\n                nv[mask] = nn_at\n                return nv\n\n    n = np.asarray(n)\n\n    def _putmask_preserve(nv, n):\n        try:\n            nv[mask] = n[mask]\n        except (IndexError, ValueError):\n            nv[mask] = n\n        return nv\n\n    # preserves dtype if possible\n    if v.dtype.kind == n.dtype.kind:\n        return _putmask_preserve(v, n)\n\n    # change the dtype if needed\n    dtype, _ = maybe_promote(n.dtype)\n\n    v = v.astype(dtype)\n\n    return _putmask_preserve(v, n)",
                "def _extract_bool_array(mask: ArrayLike) -> np.ndarray:\n    \"\"\"\n    If we have a SparseArray or BooleanArray, convert it to ndarray[bool].\n    \"\"\"\n    if isinstance(mask, ExtensionArray):\n        # We could have BooleanArray, Sparse[bool], ...\n        mask = np.asarray(mask, dtype=np.bool_)\n\n    assert isinstance(mask, np.ndarray), type(mask)\n    assert mask.dtype == bool, mask.dtype\n    return mask",
                "def __init__(self, values, placement, ndim=None):\n    self.ndim = self._check_ndim(values, ndim)\n    self.mgr_locs = placement\n    self.values = values\n\n    if self._validate_ndim and self.ndim and len(self.mgr_locs) != len(self.values):\n        raise ValueError(\n            f\"Wrong number of items passed {len(self.values)}, \"\n            f\"placement implies {len(self.mgr_locs)}\"\n        )",
                "def _check_ndim(self, values, ndim):\n    \"\"\"\n    ndim inference and validation.\n\n    Infers ndim from 'values' if not provided to __init__.\n    Validates that values.ndim and ndim are consistent if and only if\n    the class variable '_validate_ndim' is True.\n\n    Parameters\n    ----------\n    values : array-like\n    ndim : int or None\n\n    Returns\n    -------\n    ndim : int\n\n    Raises\n    ------\n    ValueError : the number of dimensions do not match\n    \"\"\"\n    if ndim is None:\n        ndim = values.ndim\n\n    if self._validate_ndim and values.ndim != ndim:\n        raise ValueError(\n            \"Wrong number of dimensions. \"\n            f\"values.ndim != ndim [{values.ndim} != {ndim}]\"\n        )\n    return ndim",
                "@property\ndef _holder(self):\n    \"\"\"\n    The array-like that can hold the underlying values.\n\n    None for 'Block', overridden by subclasses that don't\n    use an ndarray.\n    \"\"\"\n    return None",
                "@property\ndef _consolidate_key(self):\n    return (self._can_consolidate, self.dtype.name)",
                "@property\ndef _is_single_block(self) -> bool:\n    return self.ndim == 1",
                "@property\ndef is_view(self) -> bool:\n    \"\"\" return a boolean if I am possibly a view \"\"\"\n    return self.values.base is not None",
                "@property\ndef is_datelike(self) -> bool:\n    \"\"\" return True if I am a non-datelike \"\"\"\n    return self.is_datetime or self.is_timedelta",
                "def external_values(self):\n    \"\"\"\n    The array that Series.values returns (public attribute).\n\n    This has some historical constraints, and is overridden in block\n    subclasses to return the correct array (e.g. period returns\n    object ndarray and datetimetz a datetime64[ns] ndarray instead of\n    proper extension array).\n    \"\"\"\n    return self.values",
                "def internal_values(self):\n    \"\"\"\n    The array that Series._values returns (internal values).\n    \"\"\"\n    return self.values",
                "def array_values(self) -> ExtensionArray:\n    \"\"\"\n    The array that Series.array returns. Always an ExtensionArray.\n    \"\"\"\n    return PandasArray(self.values)",
                "def get_values(self, dtype=None):\n    \"\"\"\n    return an internal format, currently just the ndarray\n    this is often overridden to handle to_dense like operations\n    \"\"\"\n    if is_object_dtype(dtype):\n        return self.values.astype(object)\n    return self.values",
                "def get_block_values_for_json(self) -> np.ndarray:\n    \"\"\"\n    This is used in the JSON C code.\n    \"\"\"\n    # TODO(EA2D): reshape will be unnecessary with 2D EAs\n    return np.asarray(self.values).reshape(self.shape)",
                "@property\ndef fill_value(self):\n    return np.nan",
                "@property\ndef mgr_locs(self):\n    return self._mgr_locs",
                "@mgr_locs.setter\ndef mgr_locs(self, new_mgr_locs):\n    if not isinstance(new_mgr_locs, libinternals.BlockPlacement):\n        new_mgr_locs = libinternals.BlockPlacement(new_mgr_locs)\n\n    self._mgr_locs = new_mgr_locs",
                "def make_block(self, values, placement=None) -> \"Block\":\n    \"\"\"\n    Create a new block, with type inference propagate any values that are\n    not specified\n    \"\"\"\n    if placement is None:\n        placement = self.mgr_locs\n    if self.is_extension:\n        values = _block_shape(values, ndim=self.ndim)\n\n    return make_block(values, placement=placement, ndim=self.ndim)",
                "def make_block_same_class(self, values, placement=None, ndim=None):\n    \"\"\" Wrap given values in a block of same type as self. \"\"\"\n    if placement is None:\n        placement = self.mgr_locs\n    if ndim is None:\n        ndim = self.ndim\n    return make_block(values, placement=placement, ndim=ndim, klass=type(self))",
                "def __repr__(self) -> str:\n    # don't want to print out all of the items here\n    name = type(self).__name__\n    if self._is_single_block:\n        result = f\"{name}: {len(self)} dtype: {self.dtype}\"\n    else:\n\n        shape = \" x \".join(str(s) for s in self.shape)\n        result = f\"{name}: {self.mgr_locs.indexer}, {shape}, dtype: {self.dtype}\"\n\n    return result",
                "def __len__(self) -> int:\n    return len(self.values)",
                "def __getstate__(self):\n    return self.mgr_locs.indexer, self.values",
                "def __setstate__(self, state):\n    self.mgr_locs = libinternals.BlockPlacement(state[0])\n    self.values = state[1]\n    self.ndim = self.values.ndim",
                "def _slice(self, slicer):\n    \"\"\" return a slice of my values \"\"\"\n\n    return self.values[slicer]",
                "def getitem_block(self, slicer, new_mgr_locs=None):\n    \"\"\"\n    Perform __getitem__-like, return result as block.\n\n    As of now, only supports slices that preserve dimensionality.\n    \"\"\"\n    if new_mgr_locs is None:\n        axis0_slicer = slicer[0] if isinstance(slicer, tuple) else slicer\n        new_mgr_locs = self.mgr_locs[axis0_slicer]\n\n    new_values = self._slice(slicer)\n\n    if self._validate_ndim and new_values.ndim != self.ndim:\n        raise ValueError(\"Only same dim slicing is allowed\")\n\n    return self.make_block_same_class(new_values, new_mgr_locs)",
                "@property\ndef shape(self):\n    return self.values.shape",
                "@property\ndef dtype(self):\n    return self.values.dtype",
                "def iget(self, i):\n    return self.values[i]",
                "def set(self, locs, values):\n    \"\"\"\n    Modify block values in-place with new item value.\n\n    Notes\n    -----\n    `set` never creates a new array or new Block, whereas `setitem` _may_\n    create a new array and always creates a new Block.\n    \"\"\"\n    self.values[locs] = values",
                "def delete(self, loc) -> None:\n    \"\"\"\n    Delete given loc(-s) from block in-place.\n    \"\"\"\n    self.values = np.delete(self.values, loc, 0)\n    self.mgr_locs = self.mgr_locs.delete(loc)",
                "def apply(self, func, **kwargs) -> List[\"Block\"]:\n    \"\"\"\n    apply the function to my values; return a block if we are not\n    one\n    \"\"\"\n    with np.errstate(all=\"ignore\"):\n        result = func(self.values, **kwargs)\n\n    return self._split_op_result(result)",
                "def _split_op_result(self, result) -> List[\"Block\"]:\n    # See also: split_and_operate\n    if is_extension_array_dtype(result) and result.ndim > 1:\n        # TODO(EA2D): unnecessary with 2D EAs\n        # if we get a 2D ExtensionArray, we need to split it into 1D pieces\n        nbs = []\n        for i, loc in enumerate(self.mgr_locs):\n            vals = result[i]\n            block = self.make_block(values=vals, placement=[loc])\n            nbs.append(block)\n        return nbs\n\n    if not isinstance(result, Block):\n        result = self.make_block(result)\n\n    return [result]",
                "def fillna(\n    self, value, limit=None, inplace: bool = False, downcast=None\n) -> List[\"Block\"]:\n    \"\"\"\n    fillna on the block with the value. If we fail, then convert to\n    ObjectBlock and try again\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    mask = isna(self.values)\n    if limit is not None:\n        limit = libalgos._validate_limit(None, limit=limit)\n        mask[mask.cumsum(self.ndim - 1) > limit] = False\n\n    if not self._can_hold_na:\n        if inplace:\n            return [self]\n        else:\n            return [self.copy()]\n\n    if self._can_hold_element(value):\n        # equivalent: _try_coerce_args(value) would not raise\n        blocks = self.putmask(mask, value, inplace=inplace)\n        return self._maybe_downcast(blocks, downcast)\n\n    # we can't process the value, but nothing to do\n    if not mask.any():\n        return [self] if inplace else [self.copy()]\n\n    # operate column-by-column\n    def f(mask, val, idx):\n        block = self.coerce_to_target_dtype(value)\n\n        # slice out our block\n        if idx is not None:\n            # i.e. self.ndim == 2\n            block = block.getitem_block(slice(idx, idx + 1))\n        return block.fillna(value, limit=limit, inplace=inplace, downcast=None)\n\n    return self.split_and_operate(None, f, inplace)",
                "def split_and_operate(self, mask, f, inplace: bool) -> List[\"Block\"]:\n    \"\"\"\n    split the block per-column, and apply the callable f\n    per-column, return a new block for each. Handle\n    masking which will not change a block unless needed.\n\n    Parameters\n    ----------\n    mask : 2-d boolean mask\n    f : callable accepting (1d-mask, 1d values, indexer)\n    inplace : boolean\n\n    Returns\n    -------\n    list of blocks\n    \"\"\"\n    if mask is None:\n        mask = np.broadcast_to(True, shape=self.shape)\n\n    new_values = self.values\n\n    def make_a_block(nv, ref_loc):\n        if isinstance(nv, list):\n            assert len(nv) == 1, nv\n            assert isinstance(nv[0], Block)\n            block = nv[0]\n        else:\n            # Put back the dimension that was taken from it and make\n            # a block out of the result.\n            nv = _block_shape(nv, ndim=self.ndim)\n            block = self.make_block(values=nv, placement=ref_loc)\n        return block\n\n    # ndim == 1\n    if self.ndim == 1:\n        if mask.any():\n            nv = f(mask, new_values, None)\n        else:\n            nv = new_values if inplace else new_values.copy()\n        block = make_a_block(nv, self.mgr_locs)\n        return [block]\n\n    # ndim > 1\n    new_blocks = []\n    for i, ref_loc in enumerate(self.mgr_locs):\n        m = mask[i]\n        v = new_values[i]\n\n        # need a new block\n        if m.any():\n            nv = f(m, v, i)\n        else:\n            nv = v if inplace else v.copy()\n\n        block = make_a_block(nv, [ref_loc])\n        new_blocks.append(block)\n\n    return new_blocks",
                "def _maybe_downcast(self, blocks: List[\"Block\"], downcast=None) -> List[\"Block\"]:\n\n    # no need to downcast our float\n    # unless indicated\n    if downcast is None and (\n        self.is_float or self.is_timedelta or self.is_datetime\n    ):\n        return blocks\n\n    return _extend_blocks([b.downcast(downcast) for b in blocks])",
                "def downcast(self, dtypes=None):\n    \"\"\" try to downcast each item to the dict of dtypes if present \"\"\"\n    # turn it off completely\n    if dtypes is False:\n        return self\n\n    values = self.values\n\n    # single block handling\n    if self._is_single_block:\n\n        # try to cast all non-floats here\n        if dtypes is None:\n            dtypes = \"infer\"\n\n        nv = maybe_downcast_to_dtype(values, dtypes)\n        return self.make_block(nv)\n\n    # ndim > 1\n    if dtypes is None:\n        return self\n\n    if not (dtypes == \"infer\" or isinstance(dtypes, dict)):\n        raise ValueError(\n            \"downcast must have a dictionary or 'infer' as its argument\"\n        )\n    elif dtypes != \"infer\":\n        raise AssertionError(\"dtypes as dict is not supported yet\")\n\n    # operate column-by-column\n    # this is expensive as it splits the blocks items-by-item\n    def f(mask, val, idx):\n        val = maybe_downcast_to_dtype(val, dtype=\"infer\")\n        return val\n\n    return self.split_and_operate(None, f, False)",
                "def astype(self, dtype, copy: bool = False, errors: str = \"raise\"):\n    \"\"\"\n    Coerce to the new dtype.\n\n    Parameters\n    ----------\n    dtype : str, dtype convertible\n    copy : bool, default False\n        copy if indicated\n    errors : str, {'raise', 'ignore'}, default 'ignore'\n        - ``raise`` : allow exceptions to be raised\n        - ``ignore`` : suppress exceptions. On error return original object\n\n    Returns\n    -------\n    Block\n    \"\"\"\n    errors_legal_values = (\"raise\", \"ignore\")\n\n    if errors not in errors_legal_values:\n        invalid_arg = (\n            \"Expected value of kwarg 'errors' to be one of \"\n            f\"{list(errors_legal_values)}. Supplied value is '{errors}'\"\n        )\n        raise ValueError(invalid_arg)\n\n    if inspect.isclass(dtype) and issubclass(dtype, ExtensionDtype):\n        msg = (\n            f\"Expected an instance of {dtype.__name__}, \"\n            \"but got the class instead. Try instantiating 'dtype'.\"\n        )\n        raise TypeError(msg)\n\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n\n    # may need to convert to categorical\n    if is_categorical_dtype(dtype):\n\n        if is_categorical_dtype(self.values.dtype):\n            # GH 10696/18593: update an existing categorical efficiently\n            return self.make_block(self.values.astype(dtype, copy=copy))\n\n        return self.make_block(Categorical(self.values, dtype=dtype))\n\n    dtype = pandas_dtype(dtype)\n\n    # astype processing\n    if is_dtype_equal(self.dtype, dtype):\n        if copy:\n            return self.copy()\n        return self\n\n    # force the copy here\n    if self.is_extension:\n        # TODO: Should we try/except this astype?\n        values = self.values.astype(dtype)\n    else:\n        if issubclass(dtype.type, str):\n\n            # use native type formatting for datetime/tz/timedelta\n            if self.is_datelike:\n                values = self.to_native_types()\n\n            # astype formatting\n            else:\n                # Because we have neither is_extension nor is_datelike,\n                #  self.values already has the correct shape\n                values = self.values\n\n        else:\n            values = self.get_values(dtype=dtype)\n\n        # _astype_nansafe works fine with 1-d only\n        vals1d = values.ravel()\n        try:\n            values = astype_nansafe(vals1d, dtype, copy=True)\n        except (ValueError, TypeError):\n            # e.g. astype_nansafe can fail on object-dtype of strings\n            #  trying to convert to float\n            if errors == \"raise\":\n                raise\n            newb = self.copy() if copy else self\n            return newb\n\n    # TODO(EA2D): special case not needed with 2D EAs\n    if isinstance(values, np.ndarray):\n        values = values.reshape(self.shape)\n\n    newb = make_block(values, placement=self.mgr_locs, ndim=self.ndim)\n\n    if newb.is_numeric and self.is_numeric:\n        if newb.shape != self.shape:\n            raise TypeError(\n                f\"cannot set astype for copy = [{copy}] for dtype \"\n                f\"({self.dtype.name} [{self.shape}]) to different shape \"\n                f\"({newb.dtype.name} [{newb.shape}])\"\n            )\n    return newb",
                "def convert(\n    self,\n    copy: bool = True,\n    datetime: bool = True,\n    numeric: bool = True,\n    timedelta: bool = True,\n    coerce: bool = False,\n):\n    \"\"\"\n    attempt to coerce any object types to better types return a copy\n    of the block (if copy = True) by definition we are not an ObjectBlock\n    here!\n    \"\"\"\n    return self.copy() if copy else self",
                "def _can_hold_element(self, element: Any) -> bool:\n    \"\"\" require the same dtype as ourselves \"\"\"\n    dtype = self.values.dtype.type\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        return issubclass(tipo.type, dtype)\n    return isinstance(element, dtype)",
                "def should_store(self, value: ArrayLike) -> bool:\n    \"\"\"\n    Should we set self.values[indexer] = value inplace or do we need to cast?\n\n    Parameters\n    ----------\n    value : np.ndarray or ExtensionArray\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return is_dtype_equal(value.dtype, self.dtype)",
                "def to_native_types(self, na_rep=\"nan\", quoting=None, **kwargs):\n    \"\"\" convert to our native types format \"\"\"\n    values = self.values\n\n    mask = isna(values)\n    itemsize = writers.word_len(na_rep)\n\n    if not self.is_object and not quoting and itemsize:\n        values = values.astype(str)\n        if values.dtype.itemsize / np.dtype(\"U1\").itemsize < itemsize:\n            # enlarge for the na_rep\n            values = values.astype(f\"<U{itemsize}\")\n    else:\n        values = np.array(values, dtype=\"object\")\n\n    values[mask] = na_rep\n    return values",
                "def copy(self, deep: bool = True):\n    \"\"\" copy constructor \"\"\"\n    values = self.values\n    if deep:\n        values = values.copy()\n    return self.make_block_same_class(values, ndim=self.ndim)",
                "def replace(\n    self,\n    to_replace,\n    value,\n    inplace: bool = False,\n    regex: bool = False,\n    convert: bool = True,\n):\n    \"\"\"\n    replace the to_replace value with value, possible to create new\n    blocks here this is just a call to putmask. regex is not used here.\n    It is used in ObjectBlocks.  It is here for API compatibility.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    original_to_replace = to_replace\n\n    # If we cannot replace with own dtype, convert to ObjectBlock and\n    # retry\n    if not self._can_hold_element(to_replace):\n        if not isinstance(to_replace, list):\n            if inplace:\n                return [self]\n            return [self.copy()]\n\n        to_replace = [x for x in to_replace if self._can_hold_element(x)]\n        if not len(to_replace):\n            # GH#28084 avoid costly checks since we can infer\n            #  that there is nothing to replace in this block\n            if inplace:\n                return [self]\n            return [self.copy()]\n\n        if len(to_replace) == 1:\n            # _can_hold_element checks have reduced this back to the\n            #  scalar case and we can avoid a costly object cast\n            return self.replace(\n                to_replace[0], value, inplace=inplace, regex=regex, convert=convert,\n            )\n\n        # GH 22083, TypeError or ValueError occurred within error handling\n        # causes infinite loop. Cast and retry only if not objectblock.\n        if is_object_dtype(self):\n            raise AssertionError\n\n        # try again with a compatible block\n        block = self.astype(object)\n        return block.replace(\n            to_replace=to_replace,\n            value=value,\n            inplace=inplace,\n            regex=regex,\n            convert=convert,\n        )\n\n    values = self.values\n    if lib.is_scalar(to_replace) and isinstance(values, np.ndarray):\n        # The only non-DatetimeLike class that also has a non-trivial\n        #  try_coerce_args is ObjectBlock, but that overrides replace,\n        #  so does not get here.\n        to_replace = convert_scalar_for_putitemlike(to_replace, values.dtype)\n\n    mask = missing.mask_missing(values, to_replace)\n\n    if not mask.any():\n        if inplace:\n            return [self]\n        return [self.copy()]\n\n    try:\n        blocks = self.putmask(mask, value, inplace=inplace)\n        # Note: it is _not_ the case that self._can_hold_element(value)\n        #  is always true at this point.  In particular, that can fail\n        #  for:\n        #   \"2u\" with bool-dtype, float-dtype\n        #   0.5 with int64-dtype\n        #   np.nan with int64-dtype\n    except (TypeError, ValueError):\n        # GH 22083, TypeError or ValueError occurred within error handling\n        # causes infinite loop. Cast and retry only if not objectblock.\n        if is_object_dtype(self):\n            raise\n\n        assert not self._can_hold_element(value), value\n\n        # try again with a compatible block\n        block = self.astype(object)\n        return block.replace(\n            to_replace=original_to_replace,\n            value=value,\n            inplace=inplace,\n            regex=regex,\n            convert=convert,\n        )\n    if convert:\n        blocks = [b.convert(numeric=False, copy=not inplace) for b in blocks]\n    return blocks",
                "def _replace_single(self, *args, **kwargs):\n    \"\"\" no-op on a non-ObjectBlock \"\"\"\n    return self if kwargs[\"inplace\"] else self.copy()",
                "def setitem(self, indexer, value):\n    \"\"\"\n    Attempt self.values[indexer] = value, possibly creating a new array.\n\n    Parameters\n    ----------\n    indexer : tuple, list-like, array-like, slice\n        The subset of self.values to set\n    value : object\n        The value being set\n\n    Returns\n    -------\n    Block\n\n    Notes\n    -----\n    `indexer` is a direct slice/positional indexer. `value` must\n    be a compatible shape.\n    \"\"\"\n    transpose = self.ndim == 2\n\n    if isinstance(indexer, np.ndarray) and indexer.ndim > self.ndim:\n        raise ValueError(f\"Cannot set values with ndim > {self.ndim}\")\n\n    # coerce None values, if appropriate\n    if value is None:\n        if self.is_numeric:\n            value = np.nan\n\n    # coerce if block dtype can store value\n    values = self.values\n    if self._can_hold_element(value):\n        # We only get here for non-Extension Blocks, so _try_coerce_args\n        #  is only relevant for DatetimeBlock and TimedeltaBlock\n        if lib.is_scalar(value):\n            value = convert_scalar_for_putitemlike(value, values.dtype)\n\n    else:\n        # current dtype cannot store value, coerce to common dtype\n\n        if hasattr(value, \"dtype\"):\n            dtype = value.dtype\n\n        elif lib.is_scalar(value) and not isna(value):\n            dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n\n        else:\n            # e.g. we are bool dtype and value is nan\n            # TODO: watch out for case with listlike value and scalar/empty indexer\n            dtype, _ = maybe_promote(np.array(value).dtype)\n            return self.astype(dtype).setitem(indexer, value)\n\n        dtype = find_common_type([values.dtype, dtype])\n        assert not is_dtype_equal(self.dtype, dtype)\n        # otherwise should have _can_hold_element\n\n        return self.astype(dtype).setitem(indexer, value)\n\n    # value must be storeable at this moment\n    if is_extension_array_dtype(getattr(value, \"dtype\", None)):\n        # We need to be careful not to allow through strings that\n        #  can be parsed to EADtypes\n        arr_value = value\n    else:\n        arr_value = np.array(value)\n\n    if transpose:\n        values = values.T\n\n    # length checking\n    check_setitem_lengths(indexer, value, values)\n    exact_match = (\n        len(arr_value.shape)\n        and arr_value.shape[0] == values.shape[0]\n        and arr_value.size == values.size\n    )\n    if is_empty_indexer(indexer, arr_value):\n        # GH#8669 empty indexers\n        pass\n\n    elif is_scalar_indexer(indexer, self.ndim):\n        # setting a single element for each dim and with a rhs that could\n        #  be e.g. a list; see GH#6043\n        values[indexer] = value\n\n    elif exact_match and is_categorical_dtype(arr_value.dtype):\n        # GH25495 - If the current dtype is not categorical,\n        # we need to create a new categorical block\n        values[indexer] = value\n        return self.make_block(Categorical(self.values, dtype=arr_value.dtype))\n\n    # if we are an exact match (ex-broadcasting),\n    # then use the resultant dtype\n    elif exact_match:\n        # We are setting _all_ of the array's values, so can cast to new dtype\n        values[indexer] = value\n\n        values = values.astype(arr_value.dtype, copy=False)\n\n    # set\n    else:\n        values[indexer] = value\n\n    if transpose:\n        values = values.T\n    block = self.make_block(values)\n    return block",
                "def putmask(\n    self, mask, new, inplace: bool = False, axis: int = 0, transpose: bool = False,\n) -> List[\"Block\"]:\n    \"\"\"\n    putmask the data to the block; it is possible that we may create a\n    new dtype of block\n\n    Return the resulting block(s).\n\n    Parameters\n    ----------\n    mask : np.ndarray[bool], SparseArray[bool], or BooleanArray\n    new : a ndarray/object\n    inplace : bool, default False\n        Perform inplace modification.\n    axis : int\n    transpose : bool, default False\n        Set to True if self is stored with axes reversed.\n\n    Returns\n    -------\n    List[Block]\n    \"\"\"\n    mask = _extract_bool_array(mask)\n    assert not isinstance(new, (ABCIndexClass, ABCSeries, ABCDataFrame))\n\n    new_values = self.values if inplace else self.values.copy()\n\n    # if we are passed a scalar None, convert it here\n    if not is_list_like(new) and isna(new) and not self.is_object:\n        # FIXME: make sure we have compatible NA\n        new = self.fill_value\n\n    if self._can_hold_element(new):\n        # We only get here for non-Extension Blocks, so _try_coerce_args\n        #  is only relevant for DatetimeBlock and TimedeltaBlock\n        if lib.is_scalar(new):\n            new = convert_scalar_for_putitemlike(new, new_values.dtype)\n\n        if transpose:\n            new_values = new_values.T\n\n        # If the default repeat behavior in np.putmask would go in the\n        # wrong direction, then explicitly repeat and reshape new instead\n        if getattr(new, \"ndim\", 0) >= 1:\n            if self.ndim - 1 == new.ndim and axis == 1:\n                new = np.repeat(new, new_values.shape[-1]).reshape(self.shape)\n            new = new.astype(new_values.dtype)\n\n        # we require exact matches between the len of the\n        # values we are setting (or is compat). np.putmask\n        # doesn't check this and will simply truncate / pad\n        # the output, but we want sane error messages\n        #\n        # TODO: this prob needs some better checking\n        # for 2D cases\n        if (\n            is_list_like(new)\n            and np.any(mask[mask])\n            and getattr(new, \"ndim\", 1) == 1\n        ):\n            if mask[mask].shape[-1] == len(new):\n                # GH 30567\n                # If length of ``new`` is less than the length of ``new_values``,\n                # `np.putmask` would first repeat the ``new`` array and then\n                # assign the masked values hence produces incorrect result.\n                # `np.place` on the other hand uses the ``new`` values at it is\n                # to place in the masked locations of ``new_values``\n                np.place(new_values, mask, new)\n            elif mask.shape[-1] == len(new) or len(new) == 1:\n                np.putmask(new_values, mask, new)\n            else:\n                raise ValueError(\"cannot assign mismatch length to masked array\")\n        else:\n            np.putmask(new_values, mask, new)\n\n    # maybe upcast me\n    elif mask.any():\n        if transpose:\n            mask = mask.T\n            if isinstance(new, np.ndarray):\n                new = new.T\n            axis = new_values.ndim - axis - 1\n\n        # Pseudo-broadcast\n        if getattr(new, \"ndim\", 0) >= 1:\n            if self.ndim - 1 == new.ndim:\n                new_shape = list(new.shape)\n                new_shape.insert(axis, 1)\n                new = new.reshape(tuple(new_shape))\n\n        # operate column-by-column\n        def f(mask, val, idx):\n\n            if idx is None:\n                # ndim==1 case.\n                n = new\n            else:\n\n                if isinstance(new, np.ndarray):\n                    n = np.squeeze(new[idx % new.shape[0]])\n                else:\n                    n = np.array(new)\n\n                # type of the new block\n                dtype, _ = maybe_promote(n.dtype)\n\n                # we need to explicitly astype here to make a copy\n                n = n.astype(dtype)\n\n            nv = _putmask_smart(val, mask, n)\n            return nv\n\n        new_blocks = self.split_and_operate(mask, f, inplace)\n        return new_blocks\n\n    if inplace:\n        return [self]\n\n    if transpose:\n        new_values = new_values.T\n\n    return [self.make_block(new_values)]",
                "def coerce_to_target_dtype(self, other):\n    \"\"\"\n    coerce the current block to a dtype compat for other\n    we will return a block, possibly object, and not raise\n\n    we can also safely try to coerce to the same dtype\n    and will receive the same block\n    \"\"\"\n    # if we cannot then coerce to object\n    dtype, _ = infer_dtype_from(other, pandas_dtype=True)\n\n    if is_dtype_equal(self.dtype, dtype):\n        return self\n\n    if self.is_bool or is_object_dtype(dtype) or is_bool_dtype(dtype):\n        # we don't upcast to bool\n        return self.astype(object)\n\n    elif (self.is_float or self.is_complex) and (\n        is_integer_dtype(dtype) or is_float_dtype(dtype)\n    ):\n        # don't coerce float/complex to int\n        return self\n\n    elif (\n        self.is_datetime\n        or is_datetime64_dtype(dtype)\n        or is_datetime64tz_dtype(dtype)\n    ):\n\n        # not a datetime\n        if not (\n            (is_datetime64_dtype(dtype) or is_datetime64tz_dtype(dtype))\n            and self.is_datetime\n        ):\n            return self.astype(object)\n\n        # don't upcast timezone with different timezone or no timezone\n        mytz = getattr(self.dtype, \"tz\", None)\n        othertz = getattr(dtype, \"tz\", None)\n\n        if not tz_compare(mytz, othertz):\n            return self.astype(object)\n\n        raise AssertionError(\n            f\"possible recursion in coerce_to_target_dtype: {self} {other}\"\n        )\n\n    elif self.is_timedelta or is_timedelta64_dtype(dtype):\n\n        # not a timedelta\n        if not (is_timedelta64_dtype(dtype) and self.is_timedelta):\n            return self.astype(object)\n\n        raise AssertionError(\n            f\"possible recursion in coerce_to_target_dtype: {self} {other}\"\n        )\n\n    try:\n        return self.astype(dtype)\n    except (ValueError, TypeError, OverflowError):\n        return self.astype(object)",
                "def interpolate(\n    self,\n    method=\"pad\",\n    axis=0,\n    index=None,\n    inplace=False,\n    limit=None,\n    limit_direction=\"forward\",\n    limit_area=None,\n    fill_value=None,\n    coerce=False,\n    downcast=None,\n    **kwargs,\n):\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    def check_int_bool(self, inplace):\n        # Only FloatBlocks will contain NaNs.\n        # timedelta subclasses IntBlock\n        if (self.is_bool or self.is_integer) and not self.is_timedelta:\n            if inplace:\n                return self\n            else:\n                return self.copy()\n\n    # a fill na type method\n    try:\n        m = missing.clean_fill_method(method)\n    except ValueError:\n        m = None\n\n    if m is not None:\n        r = check_int_bool(self, inplace)\n        if r is not None:\n            return r\n        return self._interpolate_with_fill(\n            method=m,\n            axis=axis,\n            inplace=inplace,\n            limit=limit,\n            fill_value=fill_value,\n            coerce=coerce,\n            downcast=downcast,\n        )\n    # validate the interp method\n    m = missing.clean_interp_method(method, **kwargs)\n\n    r = check_int_bool(self, inplace)\n    if r is not None:\n        return r\n    return self._interpolate(\n        method=m,\n        index=index,\n        axis=axis,\n        limit=limit,\n        limit_direction=limit_direction,\n        limit_area=limit_area,\n        fill_value=fill_value,\n        inplace=inplace,\n        downcast=downcast,\n        **kwargs,\n    )",
                "def _interpolate_with_fill(\n    self,\n    method=\"pad\",\n    axis=0,\n    inplace=False,\n    limit=None,\n    fill_value=None,\n    coerce=False,\n    downcast=None,\n) -> List[\"Block\"]:\n    \"\"\" fillna but using the interpolate machinery \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    # if we are coercing, then don't force the conversion\n    # if the block can't hold the type\n    if coerce:\n        if not self._can_hold_na:\n            if inplace:\n                return [self]\n            else:\n                return [self.copy()]\n\n    values = self.values if inplace else self.values.copy()\n\n    # We only get here for non-ExtensionBlock\n    fill_value = convert_scalar_for_putitemlike(fill_value, self.values.dtype)\n\n    values = missing.interpolate_2d(\n        values,\n        method=method,\n        axis=axis,\n        limit=limit,\n        fill_value=fill_value,\n        dtype=self.dtype,\n    )\n\n    blocks = [self.make_block_same_class(values, ndim=self.ndim)]\n    return self._maybe_downcast(blocks, downcast)",
                "def _interpolate(\n    self,\n    method=None,\n    index=None,\n    fill_value=None,\n    axis=0,\n    limit=None,\n    limit_direction=\"forward\",\n    limit_area=None,\n    inplace=False,\n    downcast=None,\n    **kwargs,\n) -> List[\"Block\"]:\n    \"\"\" interpolate using scipy wrappers \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    data = self.values if inplace else self.values.copy()\n\n    # only deal with floats\n    if not self.is_float:\n        if not self.is_integer:\n            return [self]\n        data = data.astype(np.float64)\n\n    if fill_value is None:\n        fill_value = self.fill_value\n\n    if method in (\"krogh\", \"piecewise_polynomial\", \"pchip\"):\n        if not index.is_monotonic:\n            raise ValueError(\n                f\"{method} interpolation requires that the index be monotonic.\"\n            )\n    # process 1-d slices in the axis direction\n\n    def func(x):\n\n        # process a 1-d slice, returning it\n        # should the axis argument be handled below in apply_along_axis?\n        # i.e. not an arg to missing.interpolate_1d\n        return missing.interpolate_1d(\n            index,\n            x,\n            method=method,\n            limit=limit,\n            limit_direction=limit_direction,\n            limit_area=limit_area,\n            fill_value=fill_value,\n            bounds_error=False,\n            **kwargs,\n        )\n\n    # interp each column independently\n    interp_values = np.apply_along_axis(func, axis, data)\n\n    blocks = [self.make_block_same_class(interp_values)]\n    return self._maybe_downcast(blocks, downcast)",
                "def take_nd(self, indexer, axis: int, new_mgr_locs=None, fill_value=lib.no_default):\n    \"\"\"\n    Take values according to indexer and return them as a block.bb\n\n    \"\"\"\n    # algos.take_nd dispatches for DatetimeTZBlock, CategoricalBlock\n    # so need to preserve types\n    # sparse is treated like an ndarray, but needs .get_values() shaping\n\n    values = self.values\n\n    if fill_value is lib.no_default:\n        fill_value = self.fill_value\n        allow_fill = False\n    else:\n        allow_fill = True\n\n    new_values = algos.take_nd(\n        values, indexer, axis=axis, allow_fill=allow_fill, fill_value=fill_value\n    )\n\n    # Called from three places in managers, all of which satisfy\n    #  this assertion\n    assert not (axis == 0 and new_mgr_locs is None)\n    if new_mgr_locs is None:\n        new_mgr_locs = self.mgr_locs\n\n    if not is_dtype_equal(new_values.dtype, self.dtype):\n        return self.make_block(new_values, new_mgr_locs)\n    else:\n        return self.make_block_same_class(new_values, new_mgr_locs)",
                "def diff(self, n: int, axis: int = 1) -> List[\"Block\"]:\n    \"\"\" return block for the diff of the values \"\"\"\n    new_values = algos.diff(self.values, n, axis=axis, stacklevel=7)\n    return [self.make_block(values=new_values)]",
                "def shift(self, periods: int, axis: int = 0, fill_value=None):\n    \"\"\" shift the block by periods, possibly upcast \"\"\"\n    # convert integer to float if necessary. need to do a lot more than\n    # that, handle boolean etc also\n    new_values, fill_value = maybe_upcast(self.values, fill_value)\n\n    new_values = shift(new_values, periods, axis, fill_value)\n\n    return [self.make_block(new_values)]",
                "def where(\n    self, other, cond, errors=\"raise\", try_cast: bool = False, axis: int = 0,\n) -> List[\"Block\"]:\n    \"\"\"\n    evaluate the block; return result block(s) from the result\n\n    Parameters\n    ----------\n    other : a ndarray/object\n    cond : np.ndarray[bool], SparseArray[bool], or BooleanArray\n    errors : str, {'raise', 'ignore'}, default 'raise'\n        - ``raise`` : allow exceptions to be raised\n        - ``ignore`` : suppress exceptions. On error return original object\n    axis : int, default 0\n\n    Returns\n    -------\n    List[Block]\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    cond = _extract_bool_array(cond)\n    assert not isinstance(other, (ABCIndexClass, ABCSeries, ABCDataFrame))\n\n    assert errors in [\"raise\", \"ignore\"]\n    transpose = self.ndim == 2\n\n    values = self.values\n    orig_other = other\n    if transpose:\n        values = values.T\n\n    # If the default broadcasting would go in the wrong direction, then\n    # explicitly reshape other instead\n    if getattr(other, \"ndim\", 0) >= 1:\n        if values.ndim - 1 == other.ndim and axis == 1:\n            other = other.reshape(tuple(other.shape + (1,)))\n        elif transpose and values.ndim == self.ndim - 1:\n            cond = cond.T\n\n    if not hasattr(cond, \"shape\"):\n        raise ValueError(\"where must have a condition that is ndarray like\")\n\n    def where_func(cond, values, other):\n\n        if not (\n            (self.is_integer or self.is_bool)\n            and lib.is_float(other)\n            and np.isnan(other)\n        ):\n            # np.where will cast integer array to floats in this case\n            if not self._can_hold_element(other):\n                raise TypeError\n            if lib.is_scalar(other) and isinstance(values, np.ndarray):\n                # convert datetime to datetime64, timedelta to timedelta64\n                other = convert_scalar_for_putitemlike(other, values.dtype)\n\n        # By the time we get here, we should have all Series/Index\n        #  args extracted to  ndarray\n        fastres = expressions.where(cond, values, other)\n        return fastres\n\n    if cond.ravel().all():\n        result = values\n    else:\n        # see if we can operate on the entire block, or need item-by-item\n        # or if we are a single block (ndim == 1)\n        try:\n            result = where_func(cond, values, other)\n        except TypeError:\n\n            # we cannot coerce, return a compat dtype\n            # we are explicitly ignoring errors\n            block = self.coerce_to_target_dtype(other)\n            blocks = block.where(\n                orig_other, cond, errors=errors, try_cast=try_cast, axis=axis,\n            )\n            return self._maybe_downcast(blocks, \"infer\")\n\n    if self._can_hold_na or self.ndim == 1:\n\n        if transpose:\n            result = result.T\n\n        return [self.make_block(result)]\n\n    # might need to separate out blocks\n    axis = cond.ndim - 1\n    cond = cond.swapaxes(axis, 0)\n    mask = np.array([cond[i].all() for i in range(cond.shape[0])], dtype=bool)\n\n    result_blocks = []\n    for m in [mask, ~mask]:\n        if m.any():\n            taken = result.take(m.nonzero()[0], axis=axis)\n            r = maybe_downcast_numeric(taken, self.dtype)\n            nb = self.make_block(r.T, placement=self.mgr_locs[m])\n            result_blocks.append(nb)\n\n    return result_blocks",
                "def equals(self, other) -> bool:\n    if self.dtype != other.dtype or self.shape != other.shape:\n        return False\n    return array_equivalent(self.values, other.values)",
                "def _unstack(self, unstacker, fill_value, new_placement):\n    \"\"\"\n    Return a list of unstacked blocks of self\n\n    Parameters\n    ----------\n    unstacker : reshape._Unstacker\n    fill_value : int\n        Only used in ExtensionBlock._unstack\n\n    Returns\n    -------\n    blocks : list of Block\n        New blocks of unstacked values.\n    mask : array_like of bool\n        The mask of columns of `blocks` we should keep.\n    \"\"\"\n    new_values, mask = unstacker.get_new_values(\n        self.values.T, fill_value=fill_value\n    )\n\n    mask = mask.any(0)\n    # TODO: in all tests we have mask.all(); can we rely on that?\n\n    new_values = new_values.T[mask]\n    new_placement = new_placement[mask]\n\n    blocks = [self.make_block_same_class(new_values, placement=new_placement)]\n    return blocks, mask",
                "def quantile(self, qs, interpolation=\"linear\", axis: int = 0):\n    \"\"\"\n    compute the quantiles of the\n\n    Parameters\n    ----------\n    qs: a scalar or list of the quantiles to be computed\n    interpolation: type of interpolation, default 'linear'\n    axis: axis to compute, default 0\n\n    Returns\n    -------\n    Block\n    \"\"\"\n    # We should always have ndim == 2 because Series dispatches to DataFrame\n    assert self.ndim == 2\n\n    values = self.get_values()\n\n    is_empty = values.shape[axis] == 0\n    orig_scalar = not is_list_like(qs)\n    if orig_scalar:\n        # make list-like, unpack later\n        qs = [qs]\n\n    if is_empty:\n        # create the array of na_values\n        # 2d len(values) * len(qs)\n        result = np.repeat(\n            np.array([self.fill_value] * len(qs)), len(values)\n        ).reshape(len(values), len(qs))\n    else:\n        # asarray needed for Sparse, see GH#24600\n        mask = np.asarray(isna(values))\n        result = nanpercentile(\n            values,\n            np.array(qs) * 100,\n            axis=axis,\n            na_value=self.fill_value,\n            mask=mask,\n            ndim=values.ndim,\n            interpolation=interpolation,\n        )\n\n        result = np.array(result, copy=False)\n        result = result.T\n\n    if orig_scalar and not lib.is_scalar(result):\n        # result could be scalar in case with is_empty and self.ndim == 1\n        assert result.shape[-1] == 1, result.shape\n        result = result[..., 0]\n        result = lib.item_from_zerodim(result)\n\n    ndim = np.ndim(result)\n    return make_block(result, placement=np.arange(len(result)), ndim=ndim)",
                "def _replace_coerce(\n    self,\n    to_replace,\n    value,\n    inplace: bool = True,\n    regex: bool = False,\n    convert: bool = False,\n    mask=None,\n):\n    \"\"\"\n    Replace value corresponding to the given boolean array with another\n    value.\n\n    Parameters\n    ----------\n    to_replace : object or pattern\n        Scalar to replace or regular expression to match.\n    value : object\n        Replacement object.\n    inplace : bool, default True\n        Perform inplace modification.\n    regex : bool, default False\n        If true, perform regular expression substitution.\n    convert : bool, default True\n        If true, try to coerce any object types to better types.\n    mask : array-like of bool, optional\n        True indicate corresponding element is ignored.\n\n    Returns\n    -------\n    A new block if there is anything to replace or the original block.\n    \"\"\"\n    if mask.any():\n        if not regex:\n            self = self.coerce_to_target_dtype(value)\n            return self.putmask(mask, value, inplace=inplace)\n        else:\n            return self._replace_single(\n                to_replace,\n                value,\n                inplace=inplace,\n                regex=regex,\n                convert=convert,\n                mask=mask,\n            )\n    return self",
                "def __init__(self, values, placement, ndim=None):\n    \"\"\"\n    Initialize a non-consolidatable block.\n\n    'ndim' may be inferred from 'placement'.\n\n    This will call continue to call __init__ for the other base\n    classes mixed in with this Mixin.\n    \"\"\"\n    values = self._maybe_coerce_values(values)\n\n    # Placement must be converted to BlockPlacement so that we can check\n    # its length\n    if not isinstance(placement, libinternals.BlockPlacement):\n        placement = libinternals.BlockPlacement(placement)\n\n    # Maybe infer ndim from placement\n    if ndim is None:\n        if len(placement) != 1:\n            ndim = 1\n        else:\n            ndim = 2\n    super().__init__(values, placement, ndim=ndim)\n\n    if self.ndim == 2 and len(self.mgr_locs) != 1:\n        # TODO(EA2D): check unnecessary with 2D EAs\n        raise AssertionError(\"block.size != values.size\")",
                "@property\ndef shape(self):\n    # TODO(EA2D): override unnecessary with 2D EAs\n    if self.ndim == 1:\n        return ((len(self.values)),)\n    return (len(self.mgr_locs), len(self.values))",
                "def iget(self, col):\n\n    if self.ndim == 2 and isinstance(col, tuple):\n        # TODO(EA2D): unnecessary with 2D EAs\n        col, loc = col\n        if not com.is_null_slice(col) and col != 0:\n            raise IndexError(f\"{self} only contains one item\")\n        elif isinstance(col, slice):\n            if col != slice(None):\n                raise NotImplementedError(col)\n            return self.values[[loc]]\n        return self.values[loc]\n    else:\n        if col != 0:\n            raise IndexError(f\"{self} only contains one item\")\n        return self.values",
                "def should_store(self, value: ArrayLike) -> bool:\n    \"\"\"\n    Can we set the given array-like value inplace?\n    \"\"\"\n    return isinstance(value, self._holder)",
                "def set(self, locs, values):\n    assert locs.tolist() == [0]\n    self.values[:] = values",
                "def putmask(\n    self, mask, new, inplace: bool = False, axis: int = 0, transpose: bool = False,\n) -> List[\"Block\"]:\n    \"\"\"\n    See Block.putmask.__doc__\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    mask = _extract_bool_array(mask)\n\n    new_values = self.values if inplace else self.values.copy()\n\n    if isinstance(new, np.ndarray) and len(new) == len(mask):\n        new = new[mask]\n\n    mask = _safe_reshape(mask, new_values.shape)\n\n    new_values[mask] = new\n    return [self.make_block(values=new_values)]",
                "def _maybe_coerce_values(self, values):\n    \"\"\"\n    Unbox to an extension array.\n\n    This will unbox an ExtensionArray stored in an Index or Series.\n    ExtensionArrays pass through. No dtype coercion is done.\n\n    Parameters\n    ----------\n    values : Index, Series, ExtensionArray\n\n    Returns\n    -------\n    ExtensionArray\n    \"\"\"\n    return extract_array(values)",
                "@property\ndef _holder(self):\n    # For extension blocks, the holder is values-dependent.\n    return type(self.values)",
                "@property\ndef fill_value(self):\n    # Used in reindex_indexer\n    return self.values.dtype.na_value",
                "@property\ndef _can_hold_na(self):\n    # The default ExtensionArray._can_hold_na is True\n    return self._holder._can_hold_na",
                "@property\ndef is_view(self) -> bool:\n    \"\"\"Extension arrays are never treated as views.\"\"\"\n    return False",
                "@property\ndef is_numeric(self):\n    return self.values.dtype._is_numeric",
                "def setitem(self, indexer, value):\n    \"\"\"\n    Attempt self.values[indexer] = value, possibly creating a new array.\n\n    This differs from Block.setitem by not allowing setitem to change\n    the dtype of the Block.\n\n    Parameters\n    ----------\n    indexer : tuple, list-like, array-like, slice\n        The subset of self.values to set\n    value : object\n        The value being set\n\n    Returns\n    -------\n    Block\n\n    Notes\n    -----\n    `indexer` is a direct slice/positional indexer. `value` must\n    be a compatible shape.\n    \"\"\"\n    if isinstance(indexer, tuple):\n        # TODO(EA2D): not needed with 2D EAs\n        # we are always 1-D\n        indexer = indexer[0]\n\n    check_setitem_lengths(indexer, value, self.values)\n    self.values[indexer] = value\n    return self",
                "def get_values(self, dtype=None):\n    # ExtensionArrays must be iterable, so this works.\n    # TODO(EA2D): reshape not needed with 2D EAs\n    return np.asarray(self.values).reshape(self.shape)",
                "def array_values(self) -> ExtensionArray:\n    return self.values",
                "def to_native_types(self, na_rep=\"nan\", quoting=None, **kwargs):\n    \"\"\"override to use ExtensionArray astype for the conversion\"\"\"\n    values = self.values\n    mask = isna(values)\n\n    values = np.asarray(values.astype(object))\n    values[mask] = na_rep\n\n    # TODO(EA2D): reshape not needed with 2D EAs\n    # we are expected to return a 2-d ndarray\n    return values.reshape(1, len(values))",
                "def take_nd(\n    self, indexer, axis: int = 0, new_mgr_locs=None, fill_value=lib.no_default\n):\n    \"\"\"\n    Take values according to indexer and return them as a block.\n    \"\"\"\n    if fill_value is lib.no_default:\n        fill_value = None\n\n    # TODO(EA2D): special case not needed with 2D EAs\n    # axis doesn't matter; we are really a single-dim object\n    # but are passed the axis depending on the calling routing\n    # if its REALLY axis 0, then this will be a reindex and not a take\n    new_values = self.values.take(indexer, fill_value=fill_value, allow_fill=True)\n\n    # Called from three places in managers, all of which satisfy\n    #  this assertion\n    assert not (self.ndim == 1 and new_mgr_locs is None)\n    if new_mgr_locs is None:\n        new_mgr_locs = self.mgr_locs\n\n    return self.make_block_same_class(new_values, new_mgr_locs)",
                "def _can_hold_element(self, element: Any) -> bool:\n    # TODO: We may need to think about pushing this onto the array.\n    # We're doing the same as CategoricalBlock here.\n    return True",
                "def _slice(self, slicer):\n    \"\"\"\n    Return a slice of my values.\n\n    Parameters\n    ----------\n    slicer : slice, ndarray[int], or a tuple of these\n        Valid (non-reducing) indexer for self.values.\n\n    Returns\n    -------\n    np.ndarray or ExtensionArray\n    \"\"\"\n    # return same dims as we currently have\n    if not isinstance(slicer, tuple) and self.ndim == 2:\n        # reached via getitem_block via _slice_take_blocks_ax0\n        # TODO(EA2D): wont be necessary with 2D EAs\n        slicer = (slicer, slice(None))\n\n    if isinstance(slicer, tuple) and len(slicer) == 2:\n        first = slicer[0]\n        if not isinstance(first, slice):\n            raise AssertionError(\n                \"invalid slicing for a 1-ndim ExtensionArray\", first\n            )\n        # GH#32959 only full-slicers along fake-dim0 are valid\n        # TODO(EA2D): wont be necessary with 2D EAs\n        new_locs = self.mgr_locs[first]\n        if len(new_locs):\n            # effectively slice(None)\n            slicer = slicer[1]\n        else:\n            raise AssertionError(\n                \"invalid slicing for a 1-ndim ExtensionArray\", slicer\n            )\n\n    return self.values[slicer]",
                "def fillna(self, value, limit=None, inplace=False, downcast=None):\n    values = self.values if inplace else self.values.copy()\n    values = values.fillna(value=value, limit=limit)\n    return [\n        self.make_block_same_class(\n            values=values, placement=self.mgr_locs, ndim=self.ndim\n        )\n    ]",
                "def interpolate(\n    self, method=\"pad\", axis=0, inplace=False, limit=None, fill_value=None, **kwargs\n):\n\n    values = self.values if inplace else self.values.copy()\n    return self.make_block_same_class(\n        values=values.fillna(value=fill_value, method=method, limit=limit),\n        placement=self.mgr_locs,\n    )",
                "def diff(self, n: int, axis: int = 1) -> List[\"Block\"]:\n    if axis == 0 and n != 0:\n        # n==0 case will be a no-op so let is fall through\n        # Since we only have one column, the result will be all-NA.\n        #  Create this result by shifting along axis=0 past the length of\n        #  our values.\n        return super().diff(len(self.values), axis=0)\n    if axis == 1:\n        # TODO(EA2D): unnecessary with 2D EAs\n        # we are by definition 1D.\n        axis = 0\n    return super().diff(n, axis)",
                "def shift(\n    self, periods: int, axis: int = 0, fill_value: Any = None,\n) -> List[\"ExtensionBlock\"]:\n    \"\"\"\n    Shift the block by `periods`.\n\n    Dispatches to underlying ExtensionArray and re-boxes in an\n    ExtensionBlock.\n    \"\"\"\n    return [\n        self.make_block_same_class(\n            self.values.shift(periods=periods, fill_value=fill_value),\n            placement=self.mgr_locs,\n            ndim=self.ndim,\n        )\n    ]",
                "def where(\n    self, other, cond, errors=\"raise\", try_cast: bool = False, axis: int = 0,\n) -> List[\"Block\"]:\n\n    cond = _extract_bool_array(cond)\n    assert not isinstance(other, (ABCIndexClass, ABCSeries, ABCDataFrame))\n\n    if isinstance(other, np.ndarray) and other.ndim == 2:\n        # TODO(EA2D): unnecessary with 2D EAs\n        assert other.shape[1] == 1\n        other = other[:, 0]\n\n    if isinstance(cond, np.ndarray) and cond.ndim == 2:\n        # TODO(EA2D): unnecessary with 2D EAs\n        assert cond.shape[1] == 1\n        cond = cond[:, 0]\n\n    if lib.is_scalar(other) and isna(other):\n        # The default `other` for Series / Frame is np.nan\n        # we want to replace that with the correct NA value\n        # for the type\n        other = self.dtype.na_value\n\n    if is_sparse(self.values):\n        # TODO(SparseArray.__setitem__): remove this if condition\n        # We need to re-infer the type of the data after doing the\n        # where, for cases where the subtypes don't match\n        dtype = None\n    else:\n        dtype = self.dtype\n\n    result = self.values.copy()\n    icond = ~cond\n    if lib.is_scalar(other):\n        set_other = other\n    else:\n        set_other = other[icond]\n    try:\n        result[icond] = set_other\n    except (NotImplementedError, TypeError):\n        # NotImplementedError for class not implementing `__setitem__`\n        # TypeError for SparseArray, which implements just to raise\n        # a TypeError\n        result = self._holder._from_sequence(\n            np.where(cond, self.values, other), dtype=dtype\n        )\n\n    return [self.make_block_same_class(result, placement=self.mgr_locs)]",
                "def _unstack(self, unstacker, fill_value, new_placement):\n    # ExtensionArray-safe unstack.\n    # We override ObjectBlock._unstack, which unstacks directly on the\n    # values of the array. For EA-backed blocks, this would require\n    # converting to a 2-D ndarray of objects.\n    # Instead, we unstack an ndarray of integer positions, followed by\n    # a `take` on the actual values.\n    n_rows = self.shape[-1]\n    dummy_arr = np.arange(n_rows)\n\n    new_values, mask = unstacker.get_new_values(dummy_arr, fill_value=-1)\n    mask = mask.any(0)\n    # TODO: in all tests we have mask.all(); can we rely on that?\n\n    blocks = [\n        self.make_block_same_class(\n            self.values.take(indices, allow_fill=True, fill_value=fill_value),\n            [place],\n        )\n        for indices, place in zip(new_values.T, new_placement)\n    ]\n    return blocks, mask",
                "def external_values(self):\n    return self.values.astype(object)",
                "def equals(self, other) -> bool:\n    if self.dtype != other.dtype or self.shape != other.shape:\n        return False\n    left, right = self.values, other.values\n    return ((left == right) | (np.isnan(left) & np.isnan(right))).all()",
                "def _can_hold_element(self, element: Any) -> bool:\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        return issubclass(tipo.type, (np.floating, np.integer)) and not issubclass(\n            tipo.type, (np.datetime64, np.timedelta64)\n        )\n    return isinstance(\n        element, (float, int, np.floating, np.int_)\n    ) and not isinstance(\n        element,\n        (bool, np.bool_, datetime, timedelta, np.datetime64, np.timedelta64),\n    )",
                "def to_native_types(\n    self, na_rep=\"\", float_format=None, decimal=\".\", quoting=None, **kwargs,\n):\n    \"\"\" convert to our native types format \"\"\"\n    values = self.values\n\n    # see gh-13418: no special formatting is desired at the\n    # output (important for appropriate 'quoting' behaviour),\n    # so do not pass it through the FloatArrayFormatter\n    if float_format is None and decimal == \".\":\n        mask = isna(values)\n\n        if not quoting:\n            values = values.astype(str)\n        else:\n            values = np.array(values, dtype=\"object\")\n\n        values[mask] = na_rep\n        return values\n\n    from pandas.io.formats.format import FloatArrayFormatter\n\n    formatter = FloatArrayFormatter(\n        values,\n        na_rep=na_rep,\n        float_format=float_format,\n        decimal=decimal,\n        quoting=quoting,\n        fixed_width=False,\n    )\n    return formatter.get_result_as_array()",
                "def _can_hold_element(self, element: Any) -> bool:\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        return issubclass(tipo.type, (np.floating, np.integer, np.complexfloating))\n    return isinstance(\n        element, (float, int, complex, np.float_, np.int_)\n    ) and not isinstance(element, (bool, np.bool_))",
                "def should_store(self, value: ArrayLike) -> bool:\n    return issubclass(value.dtype.type, np.complexfloating)",
                "def _can_hold_element(self, element: Any) -> bool:\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        return (\n            issubclass(tipo.type, np.integer)\n            and not issubclass(tipo.type, (np.datetime64, np.timedelta64))\n            and self.dtype.itemsize >= tipo.itemsize\n        )\n    return is_integer(element)",
                "@property\ndef _holder(self):\n    return DatetimeArray",
                "@property\ndef fill_value(self):\n    return np.datetime64(\"NaT\", \"ns\")",
                "def get_values(self, dtype=None):\n    \"\"\"\n    return object dtype as boxed values, such as Timestamps/Timedelta\n    \"\"\"\n    if is_object_dtype(dtype):\n        # DTA/TDA constructor and astype can handle 2D\n        return self._holder(self.values).astype(object)\n    return self.values",
                "def internal_values(self):\n    # Override to return DatetimeArray and TimedeltaArray\n    return self.array_values()",
                "def array_values(self):\n    return self._holder._simple_new(self.values)",
                "def iget(self, key):\n    # GH#31649 we need to wrap scalars in Timestamp/Timedelta\n    # TODO(EA2D): this can be removed if we ever have 2D EA\n    return self.array_values().reshape(self.shape)[key]",
                "def shift(self, periods, axis=0, fill_value=None):\n    # TODO(EA2D) this is unnecessary if these blocks are backed by 2D EAs\n    values = self.array_values()\n    new_values = values.shift(periods, fill_value=fill_value, axis=axis)\n    return self.make_block_same_class(new_values)",
                "def __init__(self, values, placement, ndim=None):\n    values = self._maybe_coerce_values(values)\n    super().__init__(values, placement=placement, ndim=ndim)",
                "@property\ndef _can_hold_na(self):\n    return True",
                "def _maybe_coerce_values(self, values):\n    \"\"\"\n    Input validation for values passed to __init__. Ensure that\n    we have datetime64ns, coercing if necessary.\n\n    Parameters\n    ----------\n    values : array-like\n        Must be convertible to datetime64\n\n    Returns\n    -------\n    values : ndarray[datetime64ns]\n\n    Overridden by DatetimeTZBlock.\n    \"\"\"\n    if values.dtype != DT64NS_DTYPE:\n        values = conversion.ensure_datetime64ns(values)\n\n    if isinstance(values, DatetimeArray):\n        values = values._data\n\n    assert isinstance(values, np.ndarray), type(values)\n    return values",
                "def astype(self, dtype, copy: bool = False, errors: str = \"raise\"):\n    \"\"\"\n    these automatically copy, so copy=True has no effect\n    raise on an except if raise == True\n    \"\"\"\n    dtype = pandas_dtype(dtype)\n\n    # if we are passed a datetime64[ns, tz]\n    if is_datetime64tz_dtype(dtype):\n        values = self.values\n        if copy:\n            # this should be the only copy\n            values = values.copy()\n        if getattr(values, \"tz\", None) is None:\n            values = DatetimeArray(values).tz_localize(\"UTC\")\n        values = values.tz_convert(dtype.tz)\n        return self.make_block(values)\n\n    # delegate\n    return super().astype(dtype=dtype, copy=copy, errors=errors)",
                "def _can_hold_element(self, element: Any) -> bool:\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        if self.is_datetimetz:\n            # require exact match, since non-nano does not exist\n            return is_dtype_equal(tipo, self.dtype) or is_valid_nat_for_dtype(\n                element, self.dtype\n            )\n\n        # GH#27419 if we get a non-nano datetime64 object\n        return is_datetime64_dtype(tipo)\n    elif element is NaT:\n        return True\n    elif isinstance(element, datetime):\n        if self.is_datetimetz:\n            return tz_compare(element.tzinfo, self.dtype.tz)\n        return element.tzinfo is None\n\n    return is_valid_nat_for_dtype(element, self.dtype)",
                "def to_native_types(self, na_rep=\"NaT\", date_format=None, **kwargs):\n    \"\"\" convert to our native types format \"\"\"\n    dta = self.array_values()\n\n    result = dta._format_native_types(\n        na_rep=na_rep, date_format=date_format, **kwargs\n    )\n    return np.atleast_2d(result)",
                "def set(self, locs, values):\n    \"\"\"\n    See Block.set.__doc__\n    \"\"\"\n    values = conversion.ensure_datetime64ns(values, copy=False)\n\n    self.values[locs] = values",
                "@property\ndef _holder(self):\n    return DatetimeArray",
                "def _maybe_coerce_values(self, values):\n    \"\"\"\n    Input validation for values passed to __init__. Ensure that\n    we have datetime64TZ, coercing if necessary.\n\n    Parameters\n    ----------\n    values : array-like\n        Must be convertible to datetime64\n\n    Returns\n    -------\n    values : DatetimeArray\n    \"\"\"\n    if not isinstance(values, self._holder):\n        values = self._holder(values)\n\n    if values.tz is None:\n        raise ValueError(\"cannot create a DatetimeTZBlock without a tz\")\n\n    return values",
                "@property\ndef is_view(self) -> bool:\n    \"\"\" return a boolean if I am possibly a view \"\"\"\n    # check the ndarray values of the DatetimeIndex values\n    return self.values._data.base is not None",
                "def get_values(self, dtype=None):\n    \"\"\"\n    Returns an ndarray of values.\n\n    Parameters\n    ----------\n    dtype : np.dtype\n        Only `object`-like dtypes are respected here (not sure\n        why).\n\n    Returns\n    -------\n    values : ndarray\n        When ``dtype=object``, then and object-dtype ndarray of\n        boxed values is returned. Otherwise, an M8[ns] ndarray\n        is returned.\n\n        DatetimeArray is always 1-d. ``get_values`` will reshape\n        the return value to be the same dimensionality as the\n        block.\n    \"\"\"\n    values = self.values\n    if is_object_dtype(dtype):\n        values = values.astype(object)\n\n    # TODO(EA2D): reshape unnecessary with 2D EAs\n    # Ensure that our shape is correct for DataFrame.\n    # ExtensionArrays are always 1-D, even in a DataFrame when\n    # the analogous NumPy-backed column would be a 2-D ndarray.\n    return np.asarray(values).reshape(self.shape)",
                "def external_values(self):\n    # NB: this is different from np.asarray(self.values), since that\n    #  return an object-dtype ndarray of Timestamps.\n    return np.asarray(self.values.astype(\"datetime64[ns]\", copy=False))",
                "def diff(self, n: int, axis: int = 0) -> List[\"Block\"]:\n    \"\"\"\n    1st discrete difference.\n\n    Parameters\n    ----------\n    n : int\n        Number of periods to diff.\n    axis : int, default 0\n        Axis to diff upon.\n\n    Returns\n    -------\n    A list with a new TimeDeltaBlock.\n\n    Notes\n    -----\n    The arguments here are mimicking shift so they are called correctly\n    by apply.\n    \"\"\"\n    if axis == 0:\n        # TODO(EA2D): special case not needed with 2D EAs\n        # Cannot currently calculate diff across multiple blocks since this\n        # function is invoked via apply\n        raise NotImplementedError\n\n    if n == 0:\n        # Fastpath avoids making a copy in `shift`\n        new_values = np.zeros(self.values.shape, dtype=np.int64)\n    else:\n        new_values = (self.values - self.shift(n, axis=axis)[0].values).asi8\n\n    # Reshape the new_values like how algos.diff does for timedelta data\n    new_values = new_values.reshape(1, len(new_values))\n    new_values = new_values.astype(\"timedelta64[ns]\")\n    return [TimeDeltaBlock(new_values, placement=self.mgr_locs.indexer)]",
                "def fillna(self, value, limit=None, inplace=False, downcast=None):\n    # We support filling a DatetimeTZ with a `value` whose timezone\n    # is different by coercing to object.\n    if self._can_hold_element(value):\n        return super().fillna(value, limit, inplace, downcast)\n\n    # different timezones, or a non-tz\n    return self.astype(object).fillna(\n        value, limit=limit, inplace=inplace, downcast=downcast\n    )",
                "def setitem(self, indexer, value):\n    # https://github.com/pandas-dev/pandas/issues/24020\n    # Need a dedicated setitem until #24020 (type promotion in setitem\n    # for extension arrays) is designed and implemented.\n    if self._can_hold_element(value) or (\n        isinstance(indexer, np.ndarray) and indexer.size == 0\n    ):\n        return super().setitem(indexer, value)\n\n    obj_vals = self.values.astype(object)\n    newb = make_block(\n        obj_vals, placement=self.mgr_locs, klass=ObjectBlock, ndim=self.ndim\n    )\n    return newb.setitem(indexer, value)",
                "def equals(self, other) -> bool:\n    # override for significant performance improvement\n    if self.dtype != other.dtype or self.shape != other.shape:\n        return False\n    return (self.values.view(\"i8\") == other.values.view(\"i8\")).all()",
                "def quantile(self, qs, interpolation=\"linear\", axis=0):\n    naive = self.values.view(\"M8[ns]\")\n\n    # TODO(EA2D): kludge for 2D block with 1D values\n    naive = naive.reshape(self.shape)\n\n    blk = self.make_block(naive)\n    res_blk = blk.quantile(qs, interpolation=interpolation, axis=axis)\n\n    # TODO(EA2D): ravel is kludge for 2D block with 1D values, assumes column-like\n    aware = self._holder(res_blk.values.ravel(), dtype=self.dtype)\n    return self.make_block_same_class(aware, ndim=res_blk.ndim)",
                "def __init__(self, values, placement, ndim=None):\n    if values.dtype != TD64NS_DTYPE:\n        values = conversion.ensure_timedelta64ns(values)\n    if isinstance(values, TimedeltaArray):\n        values = values._data\n    assert isinstance(values, np.ndarray), type(values)\n    super().__init__(values, placement=placement, ndim=ndim)",
                "@property\ndef _holder(self):\n    return TimedeltaArray",
                "def _can_hold_element(self, element: Any) -> bool:\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        return issubclass(tipo.type, np.timedelta64)\n    elif element is NaT:\n        return True\n    elif isinstance(element, (timedelta, np.timedelta64)):\n        return True\n    return is_valid_nat_for_dtype(element, self.dtype)",
                "def fillna(self, value, **kwargs):\n\n    # allow filling with integers to be\n    # interpreted as nanoseconds\n    if is_integer(value):\n        # Deprecation GH#24694, GH#19233\n        raise TypeError(\n            \"Passing integers to fillna for timedelta64[ns] dtype is no \"\n            \"longer supported.  To obtain the old behavior, pass \"\n            \"`pd.Timedelta(seconds=n)` instead.\"\n        )\n    return super().fillna(value, **kwargs)",
                "def to_native_types(self, na_rep=\"NaT\", **kwargs):\n    \"\"\" convert to our native types format \"\"\"\n    tda = self.array_values()\n    return tda._format_native_types(na_rep, **kwargs)",
                "def _can_hold_element(self, element: Any) -> bool:\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        return issubclass(tipo.type, np.bool_)\n    return isinstance(element, (bool, np.bool_))",
                "def replace(self, to_replace, value, inplace=False, regex=False, convert=True):\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    to_replace_values = np.atleast_1d(to_replace)\n    if not np.can_cast(to_replace_values, bool):\n        return self\n    return super().replace(\n        to_replace, value, inplace=inplace, regex=regex, convert=convert,\n    )",
                "def __init__(self, values, placement=None, ndim=2):\n    if issubclass(values.dtype.type, str):\n        values = np.array(values, dtype=object)\n\n    super().__init__(values, ndim=ndim, placement=placement)",
                "@property\ndef is_bool(self):\n    \"\"\"\n    we can be a bool if we have only bool values but are of type\n    object\n    \"\"\"\n    return lib.is_bool_array(self.values.ravel())",
                "def convert(\n    self,\n    copy: bool = True,\n    datetime: bool = True,\n    numeric: bool = True,\n    timedelta: bool = True,\n    coerce: bool = False,\n):\n    \"\"\"\n    attempt to coerce any object types to better types return a copy of\n    the block (if copy = True) by definition we ARE an ObjectBlock!!!!!\n\n    can return multiple blocks!\n    \"\"\"\n    # operate column-by-column\n    def f(mask, val, idx):\n        shape = val.shape\n        values = soft_convert_objects(\n            val.ravel(),\n            datetime=datetime,\n            numeric=numeric,\n            timedelta=timedelta,\n            coerce=coerce,\n            copy=copy,\n        )\n        if isinstance(values, np.ndarray):\n            # TODO(EA2D): allow EA once reshape is supported\n            values = values.reshape(shape)\n\n        return values\n\n    if self.ndim == 2:\n        blocks = self.split_and_operate(None, f, False)\n    else:\n        values = f(None, self.values.ravel(), None)\n        blocks = [make_block(values, ndim=self.ndim, placement=self.mgr_locs)]\n\n    return blocks",
                "def _maybe_downcast(self, blocks: List[\"Block\"], downcast=None) -> List[\"Block\"]:\n\n    if downcast is not None:\n        return blocks\n\n    # split and convert the blocks\n    return _extend_blocks([b.convert(datetime=True, numeric=False) for b in blocks])",
                "def _can_hold_element(self, element: Any) -> bool:\n    return True",
                "def replace(self, to_replace, value, inplace=False, regex=False, convert=True):\n    to_rep_is_list = is_list_like(to_replace)\n    value_is_list = is_list_like(value)\n    both_lists = to_rep_is_list and value_is_list\n    either_list = to_rep_is_list or value_is_list\n\n    result_blocks = []\n    blocks = [self]\n\n    if not either_list and is_re(to_replace):\n        return self._replace_single(\n            to_replace, value, inplace=inplace, regex=True, convert=convert,\n        )\n    elif not (either_list or regex):\n        return super().replace(\n            to_replace, value, inplace=inplace, regex=regex, convert=convert,\n        )\n    elif both_lists:\n        for to_rep, v in zip(to_replace, value):\n            result_blocks = []\n            for b in blocks:\n                result = b._replace_single(\n                    to_rep, v, inplace=inplace, regex=regex, convert=convert,\n                )\n                result_blocks = _extend_blocks(result, result_blocks)\n            blocks = result_blocks\n        return result_blocks\n\n    elif to_rep_is_list and regex:\n        for to_rep in to_replace:\n            result_blocks = []\n            for b in blocks:\n                result = b._replace_single(\n                    to_rep, value, inplace=inplace, regex=regex, convert=convert,\n                )\n                result_blocks = _extend_blocks(result, result_blocks)\n            blocks = result_blocks\n        return result_blocks\n\n    return self._replace_single(\n        to_replace, value, inplace=inplace, convert=convert, regex=regex,\n    )",
                "def _replace_single(\n    self, to_replace, value, inplace=False, regex=False, convert=True, mask=None,\n):\n    \"\"\"\n    Replace elements by the given value.\n\n    Parameters\n    ----------\n    to_replace : object or pattern\n        Scalar to replace or regular expression to match.\n    value : object\n        Replacement object.\n    inplace : bool, default False\n        Perform inplace modification.\n    regex : bool, default False\n        If true, perform regular expression substitution.\n    convert : bool, default True\n        If true, try to coerce any object types to better types.\n    mask : array-like of bool, optional\n        True indicate corresponding element is ignored.\n\n    Returns\n    -------\n    a new block, the result after replacing\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    # to_replace is regex compilable\n    to_rep_re = regex and is_re_compilable(to_replace)\n\n    # regex is regex compilable\n    regex_re = is_re_compilable(regex)\n\n    # only one will survive\n    if to_rep_re and regex_re:\n        raise AssertionError(\n            \"only one of to_replace and regex can be regex compilable\"\n        )\n\n    # if regex was passed as something that can be a regex (rather than a\n    # boolean)\n    if regex_re:\n        to_replace = regex\n\n    regex = regex_re or to_rep_re\n\n    # try to get the pattern attribute (compiled re) or it's a string\n    if is_re(to_replace):\n        pattern = to_replace.pattern\n    else:\n        pattern = to_replace\n\n    # if the pattern is not empty and to_replace is either a string or a\n    # regex\n    if regex and pattern:\n        rx = re.compile(to_replace)\n    else:\n        # if the thing to replace is not a string or compiled regex call\n        # the superclass method -> to_replace is some kind of object\n        return super().replace(to_replace, value, inplace=inplace, regex=regex)\n\n    new_values = self.values if inplace else self.values.copy()\n\n    # deal with replacing values with objects (strings) that match but\n    # whose replacement is not a string (numeric, nan, object)\n    if isna(value) or not isinstance(value, str):\n\n        def re_replacer(s):\n            if is_re(rx) and isinstance(s, str):\n                return value if rx.search(s) is not None else s\n            else:\n                return s\n\n    else:\n        # value is guaranteed to be a string here, s can be either a string\n        # or null if it's null it gets returned\n        def re_replacer(s):\n            if is_re(rx) and isinstance(s, str):\n                return rx.sub(value, s)\n            else:\n                return s\n\n    f = np.vectorize(re_replacer, otypes=[self.dtype])\n\n    if mask is None:\n        new_values[:] = f(new_values)\n    else:\n        new_values[mask] = f(new_values[mask])\n\n    # convert\n    block = self.make_block(new_values)\n    if convert:\n        block = block.convert(numeric=False)\n    return block",
                "def _replace_coerce(\n    self, to_replace, value, inplace=True, regex=False, convert=False, mask=None\n):\n    \"\"\"\n    Replace value corresponding to the given boolean array with another\n    value.\n\n    Parameters\n    ----------\n    to_replace : object or pattern\n        Scalar to replace or regular expression to match.\n    value : object\n        Replacement object.\n    inplace : bool, default False\n        Perform inplace modification.\n    regex : bool, default False\n        If true, perform regular expression substitution.\n    convert : bool, default True\n        If true, try to coerce any object types to better types.\n    mask : array-like of bool, optional\n        True indicate corresponding element is ignored.\n\n    Returns\n    -------\n    A new block if there is anything to replace or the original block.\n    \"\"\"\n    if mask.any():\n        block = super()._replace_coerce(\n            to_replace=to_replace,\n            value=value,\n            inplace=inplace,\n            regex=regex,\n            convert=convert,\n            mask=mask,\n        )\n        if convert:\n            block = [b.convert(numeric=False, copy=True) for b in block]\n        return block\n    if convert:\n        return [self.convert(numeric=False, copy=True)]\n    return self",
                "def __init__(self, values, placement, ndim=None):\n    # coerce to categorical if we can\n    values = extract_array(values)\n    assert isinstance(values, Categorical), type(values)\n    super().__init__(values, placement=placement, ndim=ndim)",
                "@property\ndef _holder(self):\n    return Categorical",
                "def replace(\n    self,\n    to_replace,\n    value,\n    inplace: bool = False,\n    regex: bool = False,\n    convert: bool = True,\n):\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    result = self if inplace else self.copy()\n\n    result.values.replace(to_replace, value, inplace=True)\n    return result",
                "def _putmask_preserve(nv, n):\n    try:\n        nv[mask] = n[mask]\n    except (IndexError, ValueError):\n        nv[mask] = n\n    return nv",
                "def f(mask, val, idx):\n    block = self.coerce_to_target_dtype(value)\n\n    # slice out our block\n    if idx is not None:\n        # i.e. self.ndim == 2\n        block = block.getitem_block(slice(idx, idx + 1))\n    return block.fillna(value, limit=limit, inplace=inplace, downcast=None)",
                "def make_a_block(nv, ref_loc):\n    if isinstance(nv, list):\n        assert len(nv) == 1, nv\n        assert isinstance(nv[0], Block)\n        block = nv[0]\n    else:\n        # Put back the dimension that was taken from it and make\n        # a block out of the result.\n        nv = _block_shape(nv, ndim=self.ndim)\n        block = self.make_block(values=nv, placement=ref_loc)\n    return block",
                "def f(mask, val, idx):\n    val = maybe_downcast_to_dtype(val, dtype=\"infer\")\n    return val",
                "def check_int_bool(self, inplace):\n    # Only FloatBlocks will contain NaNs.\n    # timedelta subclasses IntBlock\n    if (self.is_bool or self.is_integer) and not self.is_timedelta:\n        if inplace:\n            return self\n        else:\n            return self.copy()",
                "def func(x):\n\n    # process a 1-d slice, returning it\n    # should the axis argument be handled below in apply_along_axis?\n    # i.e. not an arg to missing.interpolate_1d\n    return missing.interpolate_1d(\n        index,\n        x,\n        method=method,\n        limit=limit,\n        limit_direction=limit_direction,\n        limit_area=limit_area,\n        fill_value=fill_value,\n        bounds_error=False,\n        **kwargs,\n    )",
                "def where_func(cond, values, other):\n\n    if not (\n        (self.is_integer or self.is_bool)\n        and lib.is_float(other)\n        and np.isnan(other)\n    ):\n        # np.where will cast integer array to floats in this case\n        if not self._can_hold_element(other):\n            raise TypeError\n        if lib.is_scalar(other) and isinstance(values, np.ndarray):\n            # convert datetime to datetime64, timedelta to timedelta64\n            other = convert_scalar_for_putitemlike(other, values.dtype)\n\n    # By the time we get here, we should have all Series/Index\n    #  args extracted to  ndarray\n    fastres = expressions.where(cond, values, other)\n    return fastres",
                "def f(mask, val, idx):\n    shape = val.shape\n    values = soft_convert_objects(\n        val.ravel(),\n        datetime=datetime,\n        numeric=numeric,\n        timedelta=timedelta,\n        coerce=coerce,\n        copy=copy,\n    )\n    if isinstance(values, np.ndarray):\n        # TODO(EA2D): allow EA once reshape is supported\n        values = values.reshape(shape)\n\n    return values",
                "def re_replacer(s):\n    if is_re(rx) and isinstance(s, str):\n        return value if rx.search(s) is not None else s\n    else:\n        return s",
                "def re_replacer(s):\n    if is_re(rx) and isinstance(s, str):\n        return rx.sub(value, s)\n    else:\n        return s",
                "def f(mask, val, idx):\n\n    if idx is None:\n        # ndim==1 case.\n        n = new\n    else:\n\n        if isinstance(new, np.ndarray):\n            n = np.squeeze(new[idx % new.shape[0]])\n        else:\n            n = np.array(new)\n\n        # type of the new block\n        dtype, _ = maybe_promote(n.dtype)\n\n        # we need to explicitly astype here to make a copy\n        n = n.astype(dtype)\n\n    nv = _putmask_smart(val, mask, n)\n    return nv"
            ],
            "inscope_function_signatures": [
                "get_block_type(values, dtype=None)",
                "make_block(values, placement, klass=None, ndim=None, dtype=None)",
                "_extend_blocks(result, blocks=None)",
                "_block_shape(values: ArrayLike, ndim: int=1) -> ArrayLike",
                "_safe_reshape(arr, new_shape)",
                "_putmask_smart(v: np.ndarray, mask: np.ndarray, n) -> np.ndarray",
                "_extract_bool_array(mask: ArrayLike) -> np.ndarray",
                "__init__(self, values, placement, ndim=None)",
                "_check_ndim(self, values, ndim)",
                "_holder(self)",
                "_consolidate_key(self)",
                "_is_single_block(self) -> bool",
                "is_view(self) -> bool",
                "is_datelike(self) -> bool",
                "external_values(self)",
                "internal_values(self)",
                "array_values(self) -> ExtensionArray",
                "get_values(self, dtype=None)",
                "get_block_values_for_json(self) -> np.ndarray",
                "fill_value(self)",
                "mgr_locs(self)",
                "mgr_locs(self, new_mgr_locs)",
                "make_block(self, values, placement=None) -> 'Block'",
                "make_block_same_class(self, values, placement=None, ndim=None)",
                "__repr__(self) -> str",
                "__len__(self) -> int",
                "__getstate__(self)",
                "__setstate__(self, state)",
                "_slice(self, slicer)",
                "getitem_block(self, slicer, new_mgr_locs=None)",
                "shape(self)",
                "dtype(self)",
                "iget(self, i)",
                "set(self, locs, values)",
                "delete(self, loc) -> None",
                "apply(self, func, **kwargs) -> List['Block']",
                "_split_op_result(self, result) -> List['Block']",
                "fillna(self, value, limit=None, inplace: bool=False, downcast=None) -> List['Block']",
                "split_and_operate(self, mask, f, inplace: bool) -> List['Block']",
                "_maybe_downcast(self, blocks: List['Block'], downcast=None) -> List['Block']",
                "downcast(self, dtypes=None)",
                "astype(self, dtype, copy: bool=False, errors: str='raise')",
                "convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
                "_can_hold_element(self, element: Any) -> bool",
                "should_store(self, value: ArrayLike) -> bool",
                "to_native_types(self, na_rep='nan', quoting=None, **kwargs)",
                "copy(self, deep: bool=True)",
                "replace(self, to_replace, value, inplace: bool=False, regex: bool=False, convert: bool=True)",
                "_replace_single(self, *args, **kwargs)",
                "setitem(self, indexer, value)",
                "putmask(self, mask, new, inplace: bool=False, axis: int=0, transpose: bool=False) -> List['Block']",
                "coerce_to_target_dtype(self, other)",
                "interpolate(self, method='pad', axis=0, index=None, inplace=False, limit=None, limit_direction='forward', limit_area=None, fill_value=None, coerce=False, downcast=None, **kwargs)",
                "_interpolate_with_fill(self, method='pad', axis=0, inplace=False, limit=None, fill_value=None, coerce=False, downcast=None) -> List['Block']",
                "_interpolate(self, method=None, index=None, fill_value=None, axis=0, limit=None, limit_direction='forward', limit_area=None, inplace=False, downcast=None, **kwargs) -> List['Block']",
                "take_nd(self, indexer, axis: int, new_mgr_locs=None, fill_value=lib.no_default)",
                "diff(self, n: int, axis: int=1) -> List['Block']",
                "shift(self, periods: int, axis: int=0, fill_value=None)",
                "where(self, other, cond, errors='raise', try_cast: bool=False, axis: int=0) -> List['Block']",
                "equals(self, other) -> bool",
                "_unstack(self, unstacker, fill_value, new_placement)",
                "quantile(self, qs, interpolation='linear', axis: int=0)",
                "_replace_coerce(self, to_replace, value, inplace: bool=True, regex: bool=False, convert: bool=False, mask=None)",
                "__init__(self, values, placement, ndim=None)",
                "shape(self)",
                "iget(self, col)",
                "should_store(self, value: ArrayLike) -> bool",
                "set(self, locs, values)",
                "putmask(self, mask, new, inplace: bool=False, axis: int=0, transpose: bool=False) -> List['Block']",
                "_maybe_coerce_values(self, values)",
                "_holder(self)",
                "fill_value(self)",
                "_can_hold_na(self)",
                "is_view(self) -> bool",
                "is_numeric(self)",
                "setitem(self, indexer, value)",
                "get_values(self, dtype=None)",
                "array_values(self) -> ExtensionArray",
                "to_native_types(self, na_rep='nan', quoting=None, **kwargs)",
                "take_nd(self, indexer, axis: int=0, new_mgr_locs=None, fill_value=lib.no_default)",
                "_can_hold_element(self, element: Any) -> bool",
                "_slice(self, slicer)",
                "fillna(self, value, limit=None, inplace=False, downcast=None)",
                "interpolate(self, method='pad', axis=0, inplace=False, limit=None, fill_value=None, **kwargs)",
                "diff(self, n: int, axis: int=1) -> List['Block']",
                "shift(self, periods: int, axis: int=0, fill_value: Any=None) -> List['ExtensionBlock']",
                "where(self, other, cond, errors='raise', try_cast: bool=False, axis: int=0) -> List['Block']",
                "_unstack(self, unstacker, fill_value, new_placement)",
                "external_values(self)",
                "equals(self, other) -> bool",
                "_can_hold_element(self, element: Any) -> bool",
                "to_native_types(self, na_rep='', float_format=None, decimal='.', quoting=None, **kwargs)",
                "_can_hold_element(self, element: Any) -> bool",
                "should_store(self, value: ArrayLike) -> bool",
                "_can_hold_element(self, element: Any) -> bool",
                "_holder(self)",
                "fill_value(self)",
                "get_values(self, dtype=None)",
                "internal_values(self)",
                "array_values(self)",
                "iget(self, key)",
                "shift(self, periods, axis=0, fill_value=None)",
                "__init__(self, values, placement, ndim=None)",
                "_can_hold_na(self)",
                "_maybe_coerce_values(self, values)",
                "astype(self, dtype, copy: bool=False, errors: str='raise')",
                "_can_hold_element(self, element: Any) -> bool",
                "to_native_types(self, na_rep='NaT', date_format=None, **kwargs)",
                "set(self, locs, values)",
                "_holder(self)",
                "_maybe_coerce_values(self, values)",
                "is_view(self) -> bool",
                "get_values(self, dtype=None)",
                "external_values(self)",
                "diff(self, n: int, axis: int=0) -> List['Block']",
                "fillna(self, value, limit=None, inplace=False, downcast=None)",
                "setitem(self, indexer, value)",
                "equals(self, other) -> bool",
                "quantile(self, qs, interpolation='linear', axis=0)",
                "__init__(self, values, placement, ndim=None)",
                "_holder(self)",
                "_can_hold_element(self, element: Any) -> bool",
                "fillna(self, value, **kwargs)",
                "to_native_types(self, na_rep='NaT', **kwargs)",
                "_can_hold_element(self, element: Any) -> bool",
                "replace(self, to_replace, value, inplace=False, regex=False, convert=True)",
                "__init__(self, values, placement=None, ndim=2)",
                "is_bool(self)",
                "convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
                "_maybe_downcast(self, blocks: List['Block'], downcast=None) -> List['Block']",
                "_can_hold_element(self, element: Any) -> bool",
                "replace(self, to_replace, value, inplace=False, regex=False, convert=True)",
                "_replace_single(self, to_replace, value, inplace=False, regex=False, convert=True, mask=None)",
                "_replace_coerce(self, to_replace, value, inplace=True, regex=False, convert=False, mask=None)",
                "__init__(self, values, placement, ndim=None)",
                "_holder(self)",
                "replace(self, to_replace, value, inplace: bool=False, regex: bool=False, convert: bool=True)",
                "_putmask_preserve(nv, n)",
                "f(mask, val, idx)",
                "make_a_block(nv, ref_loc)",
                "f(mask, val, idx)",
                "check_int_bool(self, inplace)",
                "func(x)",
                "where_func(cond, values, other)",
                "f(mask, val, idx)",
                "re_replacer(s)",
                "re_replacer(s)",
                "f(mask, val, idx)"
            ],
            "variables_in_file": {
                "PandasObject": [
                    87
                ],
                "__slots__": [
                    1920,
                    1986,
                    2371,
                    2350,
                    1904,
                    1970,
                    1910,
                    2041,
                    2139,
                    2621,
                    2302,
                    95
                ],
                "is_numeric": [
                    96,
                    1905,
                    2305
                ],
                "is_float": [
                    97,
                    1921
                ],
                "is_integer": [
                    98,
                    1987,
                    1998,
                    2334
                ],
                "is_complex": [
                    99,
                    1971
                ],
                "is_datetime": [
                    2042,
                    100
                ],
                "is_datetimetz": [
                    2140,
                    101
                ],
                "is_timedelta": [
                    102,
                    2303
                ],
                "is_bool": [
                    2351,
                    103
                ],
                "is_object": [
                    104,
                    2372
                ],
                "is_categorical": [
                    105,
                    2622
                ],
                "is_extension": [
                    106,
                    2141,
                    1526
                ],
                "_can_hold_na": [
                    2304,
                    2624,
                    1988,
                    2373,
                    107,
                    2352,
                    1906
                ],
                "_can_consolidate": [
                    1523,
                    108
                ],
                "_verify_integrity": [
                    1524,
                    109,
                    2623
                ],
                "_validate_ndim": [
                    1525,
                    110
                ],
                "self.ndim": [
                    1165,
                    1422,
                    1296,
                    1552,
                    277,
                    789,
                    791,
                    792,
                    1559,
                    666,
                    923,
                    1308,
                    1565,
                    1814,
                    296,
                    170,
                    427,
                    432,
                    1720,
                    964,
                    1350,
                    1745,
                    594,
                    850,
                    2277,
                    1774,
                    113,
                    369,
                    244,
                    117,
                    246,
                    2420,
                    2424,
                    253
                ],
                "self": [
                    2086,
                    2093,
                    2101,
                    2103,
                    2104,
                    2112,
                    2113,
                    2116,
                    2120,
                    2133,
                    113,
                    114,
                    115,
                    117,
                    119,
                    120,
                    2168,
                    2169,
                    2180,
                    147,
                    2203,
                    2211,
                    166,
                    2216,
                    170,
                    175,
                    180,
                    191,
                    197,
                    2246,
                    2248,
                    203,
                    2253,
                    2258,
                    211,
                    212,
                    2262,
                    219,
                    2270,
                    227,
                    2275,
                    2277,
                    234,
                    2283,
                    2285,
                    2288,
                    242,
                    243,
                    244,
                    2291,
                    246,
                    2293,
                    2297,
                    2298,
                    251,
                    253,
                    254,
                    258,
                    259,
                    260,
                    263,
                    264,
                    269,
                    272,
                    275,
                    276,
                    277,
                    2328,
                    282,
                    292,
                    294,
                    296,
                    2345,
                    299,
                    303,
                    307,
                    310,
                    2364,
                    321,
                    327,
                    328,
                    336,
                    338,
                    2387,
                    346,
                    348,
                    353,
                    366,
                    369,
                    371,
                    2420,
                    373,
                    2421,
                    375,
                    2423,
                    377,
                    2424,
                    379,
                    380,
                    384,
                    388,
                    396,
                    2446,
                    2449,
                    415,
                    417,
                    427,
                    428,
                    2478,
                    432,
                    437,
                    442,
                    462,
                    472,
                    474,
                    477,
                    484,
                    488,
                    2543,
                    503,
                    2564,
                    2572,
                    544,
                    546,
                    548,
                    553,
                    555,
                    556,
                    559,
                    561,
                    566,
                    567,
                    2616,
                    2617,
                    573,
                    576,
                    587,
                    592,
                    594,
                    596,
                    597,
                    2647,
                    600,
                    618,
                    622,
                    640,
                    644,
                    649,
                    663,
                    666,
                    686,
                    689,
                    690,
                    692,
                    697,
                    698,
                    703,
                    709,
                    713,
                    722,
                    733,
                    734,
                    737,
                    747,
                    750,
                    753,
                    767,
                    789,
                    791,
                    792,
                    796,
                    800,
                    801,
                    820,
                    823,
                    826,
                    850,
                    859,
                    875,
                    904,
                    907,
                    909,
                    911,
                    923,
                    924,
                    964,
                    991,
                    995,
                    1000,
                    1013,
                    1014,
                    1016,
                    1018,
                    1020,
                    1024,
                    1027,
                    1035,
                    1037,
                    1040,
                    1044,
                    1047,
                    1050,
                    1053,
                    1054,
                    1057,
                    1061,
                    1063,
                    1085,
                    1087,
                    1089,
                    1098,
                    1101,
                    1113,
                    1116,
                    1145,
                    1147,
                    1149,
                    1151,
                    1154,
                    1162,
                    1165,
                    1166,
                    1183,
                    1186,
                    1187,
                    1188,
                    1192,
                    1221,
                    1222,
                    1233,
                    1236,
                    1249,
                    1251,
                    1252,
                    1254,
                    1258,
                    1259,
                    1265,
                    1269,
                    1296,
                    1298,
                    1308,
                    1317,
                    1322,
                    1344,
                    1348,
                    1350,
                    1355,
                    1366,
                    1367,
                    1373,
                    1375,
                    1395,
                    1404,
                    1422,
                    1424,
                    1436,
                    1445,
                    1497,
                    1498,
                    1500,
                    1508,
                    1537,
                    1552,
                    1559,
                    1560,
                    1561,
                    1565,
                    1569,
                    1573,
                    1574,
                    1577,
                    1578,
                    1584,
                    1588,
                    1600,
                    1608,
                    1630,
                    1635,
                    1640,
                    1649,
                    1679,
                    1680,
                    1681,
                    1686,
                    1689,
                    1693,
                    1716,
                    1720,
                    1722,
                    1724,
                    1745,
                    1758,
                    1767,
                    1770,
                    1773,
                    1774,
                    1782,
                    1783,
                    1785,
                    1794,
                    1811,
                    1812,
                    1813,
                    1814,
                    1839,
                    1841,
                    1847,
                    1849,
                    1861,
                    1862,
                    1865,
                    1874,
                    1882,
                    1883,
                    1900,
                    1913,
                    1915,
                    1940,
                    1996,
                    2018,
                    2019,
                    2023,
                    2026,
                    2031,
                    2035,
                    2037,
                    2045
                ],
                "self._check_ndim": [
                    113
                ],
                "values": [
                    1537,
                    1550,
                    2068,
                    2069,
                    2071,
                    2072,
                    2074,
                    2075,
                    2086,
                    2089,
                    2090,
                    2091,
                    2092,
                    2093,
                    561,
                    1588,
                    567,
                    573,
                    576,
                    579,
                    581,
                    2630,
                    2631,
                    2632,
                    591,
                    592,
                    594,
                    2131,
                    2133,
                    1625,
                    2670,
                    113,
                    115,
                    2676,
                    2679,
                    2168,
                    2169,
                    2681,
                    2171,
                    2685,
                    2174,
                    1151,
                    644,
                    1156,
                    646,
                    1157,
                    650,
                    651,
                    653,
                    1165,
                    655,
                    145,
                    657,
                    147,
                    658,
                    2706,
                    150,
                    663,
                    2707,
                    665,
                    666,
                    2203,
                    2710,
                    1693,
                    1694,
                    2205,
                    1696,
                    1697,
                    2716,
                    2211,
                    2717,
                    1701,
                    2719,
                    2722,
                    2724,
                    2748,
                    2749,
                    2750,
                    2754,
                    2755,
                    2248,
                    1233,
                    722,
                    723,
                    727,
                    729,
                    1242,
                    1770,
                    1771,
                    1774,
                    244,
                    246,
                    1782,
                    1784,
                    254,
                    2309,
                    2310,
                    2311,
                    2312,
                    2313,
                    2314,
                    1298,
                    1301,
                    1306,
                    1308,
                    800,
                    805,
                    1324,
                    1326,
                    1330,
                    822,
                    1334,
                    1339,
                    321,
                    837,
                    840,
                    2376,
                    2377,
                    843,
                    844,
                    2379,
                    853,
                    858,
                    865,
                    867,
                    2406,
                    871,
                    874,
                    875,
                    2414,
                    2416,
                    2418,
                    2423,
                    2424,
                    1424,
                    1426,
                    1940,
                    1946,
                    1436,
                    1437,
                    1949,
                    1951,
                    1440,
                    1953,
                    1442,
                    1954,
                    1447,
                    1959,
                    474,
                    483,
                    2035,
                    2036,
                    2045,
                    2046
                ],
                "ndim": [
                    1545,
                    2314,
                    1547,
                    1549,
                    1550,
                    144,
                    145,
                    147,
                    2708,
                    150,
                    152,
                    2724,
                    1460,
                    1461,
                    2748,
                    2632,
                    2379,
                    113,
                    254,
                    252,
                    253,
                    2046
                ],
                "self.mgr_locs": [
                    264,
                    272,
                    1552,
                    275,
                    1813,
                    1561,
                    292,
                    2424,
                    437,
                    1722,
                    442,
                    328,
                    1865,
                    2253,
                    594,
                    1367,
                    346,
                    1758,
                    1249,
                    2277,
                    1774,
                    114,
                    242,
                    117,
                    120,
                    1785,
                    251
                ],
                "placement": [
                    2724,
                    1541,
                    1542,
                    2632,
                    1546,
                    2314,
                    2379,
                    1550,
                    241,
                    114,
                    242,
                    246,
                    2046,
                    250,
                    251,
                    254
                ],
                "self.values": [
                    1560,
                    1561,
                    544,
                    546,
                    548,
                    1573,
                    1574,
                    2086,
                    1578,
                    561,
                    1588,
                    573,
                    1600,
                    2133,
                    1630,
                    1635,
                    622,
                    1649,
                    115,
                    117,
                    119,
                    1151,
                    1154,
                    644,
                    2180,
                    1679,
                    1680,
                    1686,
                    663,
                    1689,
                    2203,
                    1693,
                    1183,
                    2216,
                    175,
                    1716,
                    191,
                    197,
                    2246,
                    2248,
                    203,
                    1233,
                    722,
                    211,
                    212,
                    219,
                    2275,
                    1767,
                    1258,
                    1770,
                    2285,
                    2288,
                    1265,
                    1782,
                    1794,
                    269,
                    272,
                    1298,
                    276,
                    277,
                    1812,
                    282,
                    800,
                    303,
                    1841,
                    307,
                    310,
                    1849,
                    321,
                    1862,
                    327,
                    336,
                    2387,
                    859,
                    1883,
                    1375,
                    1900,
                    366,
                    1395,
                    2423,
                    1915,
                    904,
                    1940,
                    417,
                    474,
                    2018,
                    2019,
                    2026,
                    2543
                ],
                "self._validate_ndim": [
                    296,
                    147,
                    117
                ],
                "len": [
                    1794,
                    260,
                    1546,
                    269,
                    1552,
                    1560,
                    1561,
                    1436,
                    1437,
                    421,
                    1701,
                    939,
                    2808,
                    947,
                    693,
                    1461,
                    700,
                    1602,
                    842,
                    2251,
                    1750,
                    1759,
                    117,
                    119,
                    120
                ],
                "ValueError": [
                    1312,
                    582,
                    1062,
                    744,
                    297,
                    1094,
                    491,
                    1196,
                    529,
                    148,
                    118,
                    950,
                    792,
                    2172,
                    2846
                ],
                "values.ndim": [
                    2748,
                    1447,
                    145,
                    147,
                    150,
                    1306,
                    1308
                ],
                "property": [
                    2048,
                    2176,
                    2316,
                    1556,
                    154,
                    164,
                    168,
                    172,
                    301,
                    177,
                    305,
                    2634,
                    2381,
                    2004,
                    2008,
                    1627,
                    221,
                    1632,
                    225,
                    1637,
                    2150,
                    1642,
                    1647
                ],
                "self._can_consolidate": [
                    166
                ],
                "self.dtype.name": [
                    600,
                    166
                ],
                "self.dtype": [
                    640,
                    260,
                    2564,
                    264,
                    1162,
                    1040,
                    2328,
                    2297,
                    166,
                    553,
                    1839,
                    1847,
                    2104,
                    823,
                    2103,
                    2113,
                    2116,
                    1996,
                    1366,
                    600,
                    1373,
                    1251,
                    2283,
                    1013,
                    1913
                ],
                "bool": [
                    2177,
                    1923,
                    2436,
                    1933,
                    398,
                    2320,
                    1912,
                    661,
                    1819,
                    2077,
                    672,
                    673,
                    674,
                    169,
                    1580,
                    173,
                    178,
                    2098,
                    2354,
                    1973,
                    2358,
                    1591,
                    2871,
                    1467,
                    1468,
                    1469,
                    1726,
                    1979,
                    1981,
                    2363,
                    1990,
                    1360,
                    2642,
                    2643,
                    2644,
                    2391,
                    2392,
                    2393,
                    2394,
                    2395,
                    1372,
                    607,
                    608,
                    609,
                    610,
                    611,
                    358,
                    2281,
                    1643,
                    620,
                    879,
                    628,
                    1272,
                    505
                ],
                "self.values.base": [
                    175
                ],
                "self.is_datetime": [
                    1035,
                    1027,
                    180,
                    462
                ],
                "self.is_timedelta": [
                    462,
                    1053,
                    180,
                    1050,
                    1085
                ],
                "PandasArray": [
                    203
                ],
                "ExtensionArray": [
                    1688,
                    2866,
                    199
                ],
                "is_object_dtype": [
                    2016,
                    709,
                    747,
                    210,
                    1016,
                    2204
                ],
                "dtype": [
                    1028,
                    1029,
                    2696,
                    1034,
                    1041,
                    531,
                    533,
                    2712,
                    2713,
                    538,
                    539,
                    1050,
                    1053,
                    542,
                    2204,
                    2716,
                    2717,
                    546,
                    2082,
                    548,
                    1061,
                    550,
                    2085,
                    2722,
                    553,
                    2855,
                    811,
                    2092,
                    2857,
                    814,
                    2096,
                    561,
                    563,
                    819,
                    820,
                    822,
                    823,
                    1845,
                    1847,
                    826,
                    576,
                    581,
                    1862,
                    210,
                    983,
                    986,
                    2016,
                    622,
                    2670,
                    2671,
                    625,
                    626,
                    1011,
                    2673,
                    1013,
                    1016,
                    2683,
                    1021
                ],
                "self.values.astype": [
                    546,
                    2275,
                    2216,
                    1900,
                    561,
                    211
                ],
                "object": [
                    1696,
                    2018,
                    2275,
                    1063,
                    713,
                    2377,
                    1900,
                    1037,
                    753,
                    211,
                    1044,
                    2262,
                    1018,
                    2205,
                    1054
                ],
                "reshape": [
                    2211,
                    2031,
                    1435,
                    1686,
                    2778,
                    219,
                    924
                ],
                "np.asarray": [
                    1440,
                    1696,
                    2211,
                    2216,
                    2868,
                    1686,
                    2841,
                    2778,
                    219
                ],
                "np": [
                    2564,
                    2074,
                    1602,
                    2125,
                    591,
                    2146,
                    2678,
                    2687,
                    2689,
                    2690,
                    2692,
                    2694,
                    2696,
                    651,
                    655,
                    1686,
                    2710,
                    1696,
                    2211,
                    1189,
                    2216,
                    1219,
                    2246,
                    723,
                    214,
                    2778,
                    219,
                    2782,
                    223,
                    2271,
                    2808,
                    2306,
                    2313,
                    2832,
                    2323,
                    2326,
                    791,
                    2841,
                    797,
                    1825,
                    1830,
                    1319,
                    1324,
                    2862,
                    819,
                    2868,
                    2357,
                    2358,
                    2870,
                    2362,
                    2363,
                    834,
                    1862,
                    327,
                    2377,
                    335,
                    1360,
                    1875,
                    2414,
                    1916,
                    1926,
                    1927,
                    1930,
                    1933,
                    1435,
                    924,
                    1436,
                    415,
                    1440,
                    1951,
                    1443,
                    936,
                    1451,
                    946,
                    948,
                    1460,
                    1461,
                    952,
                    1976,
                    1978,
                    1979,
                    958,
                    1982,
                    1994,
                    1995,
                    977,
                    978,
                    980,
                    2010
                ],
                "self.shape": [
                    2211,
                    263,
                    2283,
                    2031,
                    592,
                    1874,
                    2291,
                    597,
                    1686,
                    600,
                    1913,
                    219,
                    924,
                    1373,
                    415
                ],
                "np.ndarray": [
                    1825,
                    1602,
                    1830,
                    2313,
                    1324,
                    2782,
                    2414,
                    591,
                    2862,
                    977,
                    723,
                    214,
                    791,
                    2870,
                    2074,
                    958,
                    2271
                ],
                "np.nan": [
                    797,
                    223
                ],
                "self._mgr_locs": [
                    234,
                    227
                ],
                "isinstance": [
                    1541,
                    902,
                    2311,
                    1929,
                    1674,
                    1931,
                    2313,
                    1293,
                    2706,
                    2326,
                    791,
                    2071,
                    2712,
                    2074,
                    1565,
                    1823,
                    1825,
                    1570,
                    291,
                    420,
                    422,
                    1830,
                    1324,
                    2734,
                    687,
                    1584,
                    2736,
                    2866,
                    2741,
                    2358,
                    2870,
                    1977,
                    1979,
                    958,
                    2111,
                    1602,
                    2631,
                    591,
                    977,
                    1745,
                    723,
                    2773,
                    1750,
                    1752,
                    2271,
                    352,
                    231,
                    490,
                    2414,
                    626,
                    2547,
                    2550,
                    2168,
                    2559
                ],
                "new_mgr_locs": [
                    1248,
                    1249,
                    290,
                    292,
                    1252,
                    1254,
                    231,
                    232,
                    234,
                    299,
                    1720,
                    1721,
                    1722,
                    1724,
                    1247
                ],
                "libinternals.BlockPlacement": [
                    1541,
                    1542,
                    231,
                    232,
                    275
                ],
                "libinternals": [
                    1541,
                    1542,
                    231,
                    232,
                    275
                ],
                "mgr_locs.setter": [
                    229
                ],
                "mgr_locs": [
                    229
                ],
                "self.is_extension": [
                    243,
                    559
                ],
                "_block_shape": [
                    427,
                    244
                ],
                "make_block": [
                    2276,
                    594,
                    1461,
                    246,
                    2424,
                    254
                ],
                "type": [
                    258,
                    2631,
                    2313,
                    2741,
                    2870,
                    254,
                    2074,
                    1630
                ],
                "name": [
                    264,
                    258,
                    260
                ],
                "__name__": [
                    258
                ],
                "self._is_single_block": [
                    259,
                    477
                ],
                "result": [
                    260,
                    264,
                    266,
                    1435,
                    2460,
                    2463,
                    1441,
                    2471,
                    2474,
                    1451,
                    1452,
                    1454,
                    2734,
                    1456,
                    1457,
                    1458,
                    2735,
                    1460,
                    1461,
                    1334,
                    2741,
                    2742,
                    1849,
                    1339,
                    1856,
                    1861,
                    1353,
                    1865,
                    1355,
                    2122,
                    2125,
                    336,
                    338,
                    1365,
                    342,
                    2647,
                    2649,
                    2650,
                    347,
                    352,
                    353,
                    355
                ],
                "shape": [
                    2754,
                    2405,
                    263,
                    264,
                    939,
                    2416,
                    2749
                ],
                "join": [
                    263
                ],
                "str": [
                    256,
                    263,
                    2376,
                    650,
                    2077,
                    563,
                    2547,
                    2550,
                    505,
                    1949,
                    2559
                ],
                "s": [
                    2560,
                    2562,
                    263,
                    2550,
                    2551,
                    2553,
                    2559
                ],
                "self.mgr_locs.indexer": [
                    264,
                    272,
                    2253
                ],
                "int": [
                    1224,
                    1256,
                    1704,
                    1802,
                    268,
                    1261,
                    1930,
                    879,
                    2218,
                    2746,
                    1591,
                    1272,
                    1978,
                    1819,
                    1788,
                    1407
                ],
                "state": [
                    275,
                    276
                ],
                "self.values.ndim": [
                    277
                ],
                "slicer": [
                    1761,
                    291,
                    1764,
                    294,
                    1767,
                    1745,
                    1748,
                    1750,
                    1751,
                    282
                ],
                "axis0_slicer": [
                    291,
                    292
                ],
                "tuple": [
                    2754,
                    291,
                    967,
                    1674,
                    1745,
                    1750,
                    1307,
                    1565
                ],
                "new_values": [
                    2567,
                    904,
                    2569,
                    2572,
                    915,
                    918,
                    924,
                    925,
                    417,
                    294,
                    296,
                    299,
                    434,
                    946,
                    436,
                    948,
                    1716,
                    952,
                    444,
                    1724,
                    960,
                    1600,
                    1605,
                    2246,
                    1607,
                    1608,
                    2248,
                    2251,
                    2252,
                    2253,
                    1877,
                    1241,
                    1886,
                    1251,
                    1252,
                    998,
                    1254,
                    1000,
                    1258,
                    1259,
                    2543,
                    1265,
                    1394,
                    1267,
                    2036,
                    1269,
                    2037,
                    1401,
                    1404
                ],
                "self._slice": [
                    294
                ],
                "new_values.ndim": [
                    296,
                    960
                ],
                "self.make_block_same_class": [
                    1724,
                    1221,
                    1254,
                    1865,
                    2298,
                    299,
                    1165,
                    1773,
                    1811,
                    2037,
                    1783,
                    666,
                    1404,
                    1882
                ],
                "self.values.shape": [
                    2246,
                    303
                ],
                "self.values.dtype": [
                    544,
                    1154,
                    1635,
                    622,
                    1649,
                    307
                ],
                "i": [
                    448,
                    346,
                    1360,
                    443,
                    310,
                    442,
                    347,
                    444
                ],
                "locs": [
                    321,
                    1587,
                    2133
                ],
                "np.delete": [
                    327
                ],
                "loc": [
                    1573,
                    1574,
                    327,
                    328,
                    346,
                    348,
                    1567
                ],
                "self.mgr_locs.delete": [
                    328
                ],
                "np.errstate": [
                    335
                ],
                "func": [
                    336,
                    1219
                ],
                "kwargs": [
                    2341,
                    1126,
                    2346,
                    2123,
                    336,
                    767,
                    1111,
                    1215
                ],
                "self._split_op_result": [
                    338
                ],
                "List": [
                    1788,
                    1820,
                    359,
                    1256,
                    457,
                    330,
                    1803,
                    2218,
                    398,
                    880,
                    1138,
                    340,
                    1592,
                    1273,
                    2428,
                    1180
                ],
                "is_extension_array_dtype": [
                    829,
                    342,
                    2775,
                    2685,
                    2750
                ],
                "result.ndim": [
                    342
                ],
                "nbs": [
                    345,
                    349,
                    350
                ],
                "enumerate": [
                    442,
                    346
                ],
                "vals": [
                    347,
                    348
                ],
                "block": [
                    388,
                    393,
                    394,
                    2572,
                    2574,
                    2575,
                    423,
                    428,
                    429,
                    2604,
                    437,
                    438,
                    2613,
                    2614,
                    1344,
                    1345,
                    452,
                    453,
                    713,
                    714,
                    348,
                    349,
                    875,
                    876,
                    753,
                    754
                ],
                "self.make_block": [
                    353,
                    546,
                    484,
                    548,
                    1252,
                    1000,
                    1608,
                    875,
                    428,
                    1259,
                    1355,
                    2093,
                    2572,
                    1269,
                    2293,
                    1367,
                    859,
                    348
                ],
                "nbs.append": [
                    349
                ],
                "Block": [
                    352,
                    2370,
                    2147,
                    2626,
                    422,
                    1511,
                    1903,
                    2741,
                    2040,
                    2143
                ],
                "inplace": [
                    384,
                    1146,
                    904,
                    394,
                    396,
                    2450,
                    2454,
                    2461,
                    1182,
                    1183,
                    2472,
                    681,
                    2479,
                    688,
                    2607,
                    436,
                    696,
                    1080,
                    2361,
                    1596,
                    1086,
                    2366,
                    704,
                    1600,
                    450,
                    1098,
                    2507,
                    717,
                    1104,
                    2259,
                    2646,
                    2263,
                    2647,
                    1113,
                    1498,
                    732,
                    991,
                    1503,
                    737,
                    994,
                    1124,
                    1770,
                    364,
                    2541,
                    2543,
                    372,
                    757,
                    1140,
                    1782,
                    762,
                    379,
                    1151
                ],
                "validate_bool_kwarg": [
                    681,
                    2507,
                    364,
                    1140,
                    2646,
                    1080,
                    2361,
                    1596,
                    1182
                ],
                "mask": [
                    901,
                    646,
                    2566,
                    2569,
                    657,
                    2838,
                    1946,
                    2845,
                    414,
                    415,
                    1440,
                    1694,
                    1697,
                    1953,
                    2847,
                    1446,
                    936,
                    939,
                    2603,
                    433,
                    434,
                    946,
                    947,
                    948,
                    2610,
                    2866,
                    952,
                    2868,
                    2870,
                    443,
                    955,
                    957,
                    1598,
                    2871,
                    2872,
                    1602,
                    1603,
                    1605,
                    1607,
                    2813,
                    1360,
                    1363,
                    1877,
                    1878,
                    1495,
                    729,
                    1498,
                    731,
                    988,
                    991,
                    1888,
                    737,
                    1506,
                    366,
                    369,
                    1394,
                    1398,
                    2808,
                    1401,
                    1402,
                    379,
                    1405,
                    383
                ],
                "isna": [
                    1440,
                    646,
                    907,
                    1835,
                    813,
                    366,
                    2547,
                    1946,
                    1694
                ],
                "limit": [
                    1120,
                    1160,
                    394,
                    1771,
                    367,
                    368,
                    369,
                    1105,
                    2259,
                    2263,
                    1784,
                    1210
                ],
                "libalgos._validate_limit": [
                    368
                ],
                "libalgos": [
                    368
                ],
                "mask.cumsum": [
                    369
                ],
                "self._can_hold_na": [
                    1145,
                    371,
                    1350
                ],
                "self.copy": [
                    384,
                    1089,
                    2647,
                    618,
                    587,
                    555,
                    690,
                    375,
                    698,
                    1149,
                    734,
                    767
                ],
                "self._can_hold_element": [
                    801,
                    1322,
                    686,
                    750,
                    911,
                    2258,
                    692,
                    377,
                    2270
                ],
                "value": [
                    640,
                    2560,
                    388,
                    2441,
                    394,
                    1679,
                    1680,
                    2450,
                    2454,
                    2457,
                    795,
                    797,
                    2334,
                    801,
                    804,
                    805,
                    2341,
                    2472,
                    810,
                    811,
                    813,
                    814,
                    2479,
                    1584,
                    2606,
                    819,
                    820,
                    826,
                    829,
                    1982,
                    2366,
                    704,
                    832,
                    834,
                    840,
                    716,
                    2258,
                    2259,
                    853,
                    2263,
                    1497,
                    858,
                    1498,
                    2649,
                    1502,
                    2270,
                    737,
                    865,
                    2273,
                    871,
                    2279,
                    1771,
                    2541,
                    750,
                    2547,
                    756,
                    2551,
                    377,
                    379
                ],
                "blocks": [
                    2434,
                    1165,
                    1166,
                    2446,
                    2459,
                    2464,
                    2470,
                    2475,
                    2732,
                    2733,
                    2426,
                    2737,
                    2739,
                    2742,
                    2743,
                    1345,
                    1348,
                    1221,
                    1222,
                    2431,
                    464,
                    466,
                    1881,
                    380,
                    1888,
                    737,
                    2421,
                    2424,
                    762,
                    379,
                    1404,
                    1405,
                    763
                ],
                "self.putmask": [
                    737,
                    1498,
                    379
                ],
                "self._maybe_downcast": [
                    380,
                    1222,
                    1166,
                    1348
                ],
                "downcast": [
                    1125,
                    1222,
                    461,
                    1166,
                    466,
                    2259,
                    1108,
                    2263,
                    380,
                    2430
                ],
                "mask.any": [
                    955,
                    2603,
                    433,
                    1398,
                    1495,
                    1878,
                    731,
                    383
                ],
                "self.coerce_to_target_dtype": [
                    1344,
                    1497,
                    388
                ],
                "idx": [
                    393,
                    978,
                    972,
                    391
                ],
                "block.getitem_block": [
                    393
                ],
                "slice": [
                    1570,
                    1571,
                    393,
                    1748,
                    1752
                ],
                "block.fillna": [
                    394
                ],
                "self.split_and_operate": [
                    991,
                    396,
                    2421,
                    503
                ],
                "f": [
                    448,
                    2564,
                    2567,
                    2569,
                    396,
                    434,
                    2421,
                    503,
                    2423,
                    991
                ],
                "np.broadcast_to": [
                    415
                ],
                "nv": [
                    2837,
                    2838,
                    2839,
                    2845,
                    2847,
                    2848,
                    420,
                    421,
                    422,
                    423,
                    427,
                    428,
                    434,
                    436,
                    437,
                    448,
                    450,
                    452,
                    988,
                    989,
                    483,
                    484
                ],
                "list": [
                    420,
                    965,
                    2734,
                    687,
                    527,
                    2736
                ],
                "ref_loc": [
                    442,
                    452,
                    428
                ],
                "new_values.copy": [
                    436
                ],
                "make_a_block": [
                    452,
                    437
                ],
                "new_blocks": [
                    992,
                    453,
                    455,
                    441,
                    991
                ],
                "m": [
                    448,
                    1093,
                    1095,
                    1097,
                    1102,
                    1363,
                    1364,
                    1365,
                    1111,
                    443,
                    1117,
                    1367,
                    447
                ],
                "v": [
                    448,
                    450,
                    2851,
                    2820,
                    2852,
                    2825,
                    2857,
                    2859,
                    2833,
                    2837,
                    2457,
                    444,
                    2461
                ],
                "m.any": [
                    1364,
                    447
                ],
                "v.copy": [
                    450,
                    2837
                ],
                "new_blocks.append": [
                    453
                ],
                "self.is_float": [
                    1186,
                    1020,
                    462
                ],
                "_extend_blocks": [
                    2463,
                    466,
                    2474,
                    2434
                ],
                "b.downcast": [
                    466
                ],
                "b": [
                    2434,
                    2470,
                    2471,
                    466,
                    2613,
                    762,
                    2459,
                    2460
                ],
                "dtypes": [
                    480,
                    481,
                    483,
                    487,
                    490,
                    494,
                    471
                ],
                "maybe_downcast_to_dtype": [
                    483,
                    500
                ],
                "dict": [
                    490
                ],
                "AssertionError": [
                    1056,
                    1763,
                    710,
                    495,
                    1554,
                    2517,
                    1046,
                    1753
                ],
                "val": [
                    2405,
                    2407,
                    500,
                    501,
                    988
                ],
                "errors_legal_values": [
                    522,
                    524,
                    527
                ],
                "errors": [
                    1346,
                    585,
                    524,
                    1295,
                    527,
                    2096
                ],
                "invalid_arg": [
                    529,
                    525
                ],
                "inspect.isclass": [
                    531
                ],
                "inspect": [
                    531
                ],
                "issubclass": [
                    2689,
                    2690,
                    2692,
                    1926,
                    2694,
                    2376,
                    1994,
                    1995,
                    625,
                    563,
                    531,
                    2323,
                    2357,
                    2678,
                    1976,
                    1982,
                    2687
                ],
                "ExtensionDtype": [
                    531
                ],
                "msg": [
                    536,
                    532
                ],
                "dtype.__name__": [
                    533
                ],
                "TypeError": [
                    2336,
                    1857,
                    1062,
                    582,
                    744,
                    1323,
                    598,
                    536,
                    1340,
                    2814
                ],
                "pandas_dtype": [
                    2082,
                    539,
                    550
                ],
                "is_categorical_dtype": [
                    544,
                    2676,
                    542,
                    855
                ],
                "copy": [
                    546,
                    2087,
                    554,
                    587,
                    618,
                    2412,
                    2096,
                    599
                ],
                "Categorical": [
                    859,
                    548,
                    2636,
                    2631
                ],
                "is_dtype_equal": [
                    640,
                    1251,
                    553,
                    1013,
                    2103,
                    823
                ],
                "dtype.type": [
                    563,
                    2671
                ],
                "self.is_datelike": [
                    566
                ],
                "self.to_native_types": [
                    567
                ],
                "self.get_values": [
                    576,
                    1424
                ],
                "vals1d": [
                    579,
                    581
                ],
                "values.ravel": [
                    579
                ],
                "astype_nansafe": [
                    581
                ],
                "newb": [
                    2276,
                    2279,
                    587,
                    588,
                    594,
                    596,
                    597,
                    601,
                    603
                ],
                "values.reshape": [
                    592,
                    2754,
                    2416,
                    1701
                ],
                "newb.is_numeric": [
                    596
                ],
                "self.is_numeric": [
                    596,
                    796
                ],
                "newb.shape": [
                    601,
                    597
                ],
                "newb.dtype.name": [
                    601
                ],
                "newb.dtype": [
                    601
                ],
                "Any": [
                    1923,
                    2436,
                    1990,
                    1802,
                    620,
                    2320,
                    2098,
                    2354,
                    1973,
                    1726
                ],
                "self.values.dtype.type": [
                    622
                ],
                "tipo": [
                    1924,
                    1925,
                    1926,
                    1927,
                    2321,
                    2322,
                    2323,
                    2099,
                    2100,
                    2355,
                    1974,
                    2103,
                    1975,
                    1976,
                    2356,
                    2357,
                    2108,
                    1991,
                    1992,
                    1994,
                    1995,
                    1996,
                    623,
                    624,
                    625
                ],
                "maybe_infer_dtype_type": [
                    1924,
                    1991,
                    623,
                    2321,
                    2099,
                    2355,
                    1974
                ],
                "element": [
                    1924,
                    1930,
                    1932,
                    2321,
                    2324,
                    2326,
                    2328,
                    2099,
                    2355,
                    1974,
                    2358,
                    2104,
                    1978,
                    1979,
                    2109,
                    2111,
                    2113,
                    2114,
                    2116,
                    1991,
                    1998,
                    623,
                    626
                ],
                "tipo.type": [
                    1926,
                    1927,
                    1994,
                    1995,
                    625,
                    2323,
                    2357,
                    1976
                ],
                "ArrayLike": [
                    1580,
                    2862,
                    628,
                    2746,
                    1981
                ],
                "value.dtype": [
                    640,
                    811,
                    1982
                ],
                "itemsize": [
                    649,
                    651,
                    653,
                    647
                ],
                "writers.word_len": [
                    647
                ],
                "writers": [
                    647
                ],
                "na_rep": [
                    1697,
                    1953,
                    647,
                    1960,
                    2346,
                    2123,
                    657
                ],
                "self.is_object": [
                    649,
                    907
                ],
                "quoting": [
                    649,
                    1963,
                    1948
                ],
                "values.astype": [
                    1696,
                    867,
                    650,
                    653,
                    2205,
                    1949
                ],
                "values.dtype.itemsize": [
                    651
                ],
                "values.dtype": [
                    805,
                    2309,
                    2679,
                    2376,
                    651,
                    1326,
                    2670,
                    2068,
                    2676,
                    822,
                    727,
                    2681,
                    2716,
                    2685,
                    2750
                ],
                "np.dtype": [
                    651
                ],
                "np.array": [
                    834,
                    1443,
                    2377,
                    1451,
                    655,
                    1360,
                    819,
                    980,
                    1436,
                    1951
                ],
                "deep": [
                    664
                ],
                "values.copy": [
                    665,
                    2089
                ],
                "original_to_replace": [
                    682,
                    755
                ],
                "to_replace": [
                    2440,
                    2448,
                    2450,
                    2454,
                    2457,
                    2468,
                    682,
                    2605,
                    686,
                    687,
                    2479,
                    692,
                    693,
                    2362,
                    700,
                    2366,
                    704,
                    715,
                    2510,
                    723,
                    727,
                    729,
                    2649,
                    2524,
                    1501,
                    2529,
                    2530,
                    2532,
                    2537,
                    2541
                ],
                "x": [
                    1208,
                    692
                ],
                "self.replace": [
                    703
                ],
                "regex": [
                    2452,
                    2454,
                    2461,
                    2467,
                    2472,
                    2479,
                    2608,
                    2366,
                    704,
                    718,
                    2510,
                    2513,
                    1496,
                    2524,
                    2526,
                    1504,
                    2536,
                    2541,
                    758
                ],
                "convert": [
                    704,
                    1505,
                    2615,
                    2472,
                    2573,
                    719,
                    2479,
                    2609,
                    2450,
                    2612,
                    2454,
                    759,
                    761,
                    2461,
                    2366
                ],
                "self.astype": [
                    1018,
                    1061,
                    1063,
                    713,
                    1037,
                    753,
                    820,
                    1044,
                    2262,
                    826,
                    1054
                ],
                "block.replace": [
                    714,
                    754
                ],
                "lib.is_scalar": [
                    804,
                    1835,
                    1324,
                    813,
                    1454,
                    914,
                    723,
                    1851
                ],
                "lib": [
                    804,
                    1318,
                    1224,
                    1704,
                    1835,
                    1324,
                    813,
                    1454,
                    1709,
                    914,
                    723,
                    1235,
                    1458,
                    2387,
                    1851
                ],
                "convert_scalar_for_putitemlike": [
                    1154,
                    805,
                    1326,
                    915,
                    727
                ],
                "missing.mask_missing": [
                    729
                ],
                "missing": [
                    1156,
                    1093,
                    1206,
                    1111,
                    729
                ],
                "b.convert": [
                    762,
                    2613,
                    2434
                ],
                "transpose": [
                    836,
                    997,
                    1352,
                    873,
                    1296,
                    1300,
                    789,
                    917,
                    1308,
                    956
                ],
                "indexer": [
                    1674,
                    1677,
                    1679,
                    1680,
                    791,
                    820,
                    1716,
                    826,
                    840,
                    846,
                    850,
                    853,
                    1242,
                    858,
                    2271,
                    865,
                    2273,
                    871,
                    2279
                ],
                "indexer.ndim": [
                    791
                ],
                "hasattr": [
                    810,
                    1311
                ],
                "_": [
                    2855,
                    814,
                    819,
                    1011,
                    983
                ],
                "infer_dtype_from_scalar": [
                    814
                ],
                "maybe_promote": [
                    819,
                    2855,
                    983
                ],
                "setitem": [
                    2273,
                    826,
                    820
                ],
                "find_common_type": [
                    822
                ],
                "getattr": [
                    963,
                    937,
                    2090,
                    1040,
                    1041,
                    1305,
                    922,
                    829
                ],
                "arr_value": [
                    832,
                    834,
                    867,
                    842,
                    843,
                    844,
                    846,
                    855,
                    859
                ],
                "values.T": [
                    874,
                    1301,
                    837
                ],
                "check_setitem_lengths": [
                    840,
                    1679
                ],
                "exact_match": [
                    841,
                    863,
                    855
                ],
                "arr_value.shape": [
                    842,
                    843
                ],
                "values.shape": [
                    1426,
                    843,
                    2749
                ],
                "arr_value.size": [
                    844
                ],
                "values.size": [
                    844
                ],
                "is_empty_indexer": [
                    846
                ],
                "is_scalar_indexer": [
                    850
                ],
                "arr_value.dtype": [
                    867,
                    859,
                    855
                ],
                "_extract_bool_array": [
                    1292,
                    901,
                    1598,
                    1822
                ],
                "new": [
                    902,
                    907,
                    909,
                    911,
                    914,
                    915,
                    922,
                    923,
                    924,
                    925,
                    935,
                    937,
                    939,
                    946,
                    947,
                    948,
                    952,
                    958,
                    959,
                    1602,
                    963,
                    964,
                    965,
                    1603,
                    967,
                    1607,
                    974,
                    977,
                    978,
                    980
                ],
                "ABCIndexClass": [
                    1293,
                    902,
                    1823
                ],
                "ABCSeries": [
                    2773,
                    1293,
                    902,
                    1823
                ],
                "ABCDataFrame": [
                    1293,
                    902,
                    1823
                ],
                "self.values.copy": [
                    1600,
                    904,
                    1770,
                    2543,
                    1782,
                    1849,
                    1151,
                    1183
                ],
                "is_list_like": [
                    935,
                    2440,
                    2441,
                    907,
                    1427,
                    2836,
                    2807
                ],
                "self.fill_value": [
                    1445,
                    1192,
                    909,
                    1236,
                    1436
                ],
                "new_values.dtype": [
                    915,
                    925,
                    1251
                ],
                "new_values.T": [
                    1401,
                    1886,
                    918,
                    998
                ],
                "new.ndim": [
                    923,
                    964
                ],
                "axis": [
                    1795,
                    1798,
                    1159,
                    1799,
                    1426,
                    1306,
                    923,
                    1444,
                    2238,
                    960,
                    1346,
                    1219,
                    966,
                    2248,
                    1358,
                    1103,
                    1359,
                    1365,
                    1242,
                    1247,
                    1119,
                    1258,
                    1267,
                    2036,
                    2294,
                    1789
                ],
                "np.repeat": [
                    2808,
                    1435,
                    924
                ],
                "new_values.shape": [
                    924,
                    1605
                ],
                "new.astype": [
                    925
                ],
                "np.any": [
                    936
                ],
                "np.place": [
                    946
                ],
                "mask.shape": [
                    947
                ],
                "np.putmask": [
                    952,
                    948
                ],
                "mask.T": [
                    957
                ],
                "new.T": [
                    959
                ],
                "new_shape": [
                    2778,
                    965,
                    966,
                    967
                ],
                "new.shape": [
                    978,
                    965
                ],
                "new_shape.insert": [
                    966
                ],
                "new.reshape": [
                    967
                ],
                "n": [
                    1799,
                    2841,
                    2845,
                    2847,
                    2851,
                    2852,
                    2855,
                    1789,
                    2859,
                    2244,
                    2248,
                    974,
                    978,
                    980,
                    983,
                    986,
                    988,
                    1258,
                    2807,
                    2808,
                    2813
                ],
                "np.squeeze": [
                    978
                ],
                "n.dtype": [
                    2851,
                    2855,
                    983
                ],
                "n.astype": [
                    986
                ],
                "_putmask_smart": [
                    988
                ],
                "infer_dtype_from": [
                    1011
                ],
                "other": [
                    1293,
                    1299,
                    1047,
                    1305,
                    1306,
                    1307,
                    1823,
                    1057,
                    1825,
                    1827,
                    1828,
                    1318,
                    1319,
                    1322,
                    1835,
                    1324,
                    1326,
                    1839,
                    1330,
                    1339,
                    1851,
                    1852,
                    1854,
                    1344,
                    1862,
                    1373,
                    1375,
                    2283,
                    2285,
                    1011,
                    1913,
                    1915
                ],
                "self.is_bool": [
                    1016,
                    1317,
                    1085
                ],
                "is_bool_dtype": [
                    1016
                ],
                "self.is_complex": [
                    1020
                ],
                "is_integer_dtype": [
                    2825,
                    1021,
                    2822
                ],
                "is_float_dtype": [
                    2825,
                    1021,
                    2822
                ],
                "is_datetime64_dtype": [
                    1034,
                    1028,
                    2108
                ],
                "is_datetime64tz_dtype": [
                    2085,
                    1029,
                    1034,
                    2679,
                    2681,
                    2719
                ],
                "mytz": [
                    1040,
                    1043
                ],
                "othertz": [
                    1041,
                    1043
                ],
                "tz_compare": [
                    2113,
                    1043
                ],
                "is_timedelta64_dtype": [
                    1050,
                    1053
                ],
                "OverflowError": [
                    1062
                ],
                "self.is_integer": [
                    1317,
                    1187,
                    1085
                ],
                "missing.clean_fill_method": [
                    1093
                ],
                "method": [
                    1093,
                    1158,
                    1194,
                    1197,
                    1111,
                    1784,
                    1209
                ],
                "r": [
                    1098,
                    1099,
                    1100,
                    2735,
                    2736,
                    2737,
                    2739,
                    1366,
                    1367,
                    1113,
                    1114,
                    1115
                ],
                "check_int_bool": [
                    1113,
                    1098
                ],
                "self._interpolate_with_fill": [
                    1101
                ],
                "fill_value": [
                    1154,
                    2306,
                    1161,
                    1812,
                    1191,
                    1192,
                    1709,
                    1710,
                    1716,
                    1213,
                    1106,
                    1235,
                    1236,
                    1242,
                    1883,
                    2146,
                    1123,
                    1265,
                    1267,
                    1395,
                    2036,
                    1784
                ],
                "coerce": [
                    1144,
                    2411,
                    1107
                ],
                "missing.clean_interp_method": [
                    1111
                ],
                "self._interpolate": [
                    1116
                ],
                "index": [
                    1195,
                    1118,
                    1207
                ],
                "limit_direction": [
                    1121,
                    1211
                ],
                "limit_area": [
                    1122,
                    1212
                ],
                "missing.interpolate_2d": [
                    1156
                ],
                "data": [
                    1219,
                    1189,
                    1183
                ],
                "data.astype": [
                    1189
                ],
                "np.float64": [
                    1189
                ],
                "index.is_monotonic": [
                    1195
                ],
                "missing.interpolate_1d": [
                    1206
                ],
                "interp_values": [
                    1219,
                    1221
                ],
                "np.apply_along_axis": [
                    1219
                ],
                "lib.no_default": [
                    1224,
                    1235,
                    1709,
                    1704
                ],
                "allow_fill": [
                    1242,
                    1237,
                    1239
                ],
                "algos.take_nd": [
                    1241
                ],
                "algos": [
                    1241,
                    1258
                ],
                "algos.diff": [
                    1258
                ],
                "maybe_upcast": [
                    1265
                ],
                "shift": [
                    1267
                ],
                "periods": [
                    1267,
                    1812,
                    2036
                ],
                "cond": [
                    1346,
                    1830,
                    1862,
                    1832,
                    1833,
                    1292,
                    1358,
                    1359,
                    1360,
                    1330,
                    1333,
                    1850,
                    1339,
                    1309,
                    1822,
                    1311
                ],
                "orig_other": [
                    1346,
                    1299
                ],
                "other.ndim": [
                    1825,
                    1306
                ],
                "other.reshape": [
                    1307
                ],
                "other.shape": [
                    1827,
                    2283,
                    1913,
                    1307,
                    1373
                ],
                "cond.T": [
                    1309
                ],
                "lib.is_float": [
                    1318
                ],
                "np.isnan": [
                    1916,
                    1319
                ],
                "fastres": [
                    1330,
                    1331
                ],
                "expressions.where": [
                    1330
                ],
                "expressions": [
                    1330
                ],
                "all": [
                    1360,
                    2285,
                    1916,
                    1333
                ],
                "cond.ravel": [
                    1333
                ],
                "where_func": [
                    1339
                ],
                "block.where": [
                    1345
                ],
                "try_cast": [
                    1346
                ],
                "result.T": [
                    1353,
                    1452
                ],
                "cond.ndim": [
                    1830,
                    1358
                ],
                "cond.swapaxes": [
                    1359
                ],
                "range": [
                    1360
                ],
                "cond.shape": [
                    1360,
                    1832
                ],
                "result_blocks": [
                    2464,
                    2465,
                    2469,
                    2474,
                    2475,
                    2476,
                    2445,
                    2458,
                    1362,
                    1368,
                    1370,
                    2463
                ],
                "taken": [
                    1365,
                    1366
                ],
                "result.take": [
                    1365
                ],
                "m.nonzero": [
                    1365
                ],
                "maybe_downcast_numeric": [
                    1366
                ],
                "nb": [
                    1368,
                    1367
                ],
                "r.T": [
                    1367
                ],
                "result_blocks.append": [
                    1368
                ],
                "other.dtype": [
                    1913,
                    2283,
                    1373
                ],
                "array_equivalent": [
                    1375
                ],
                "other.values": [
                    1915,
                    2285,
                    1375
                ],
                "unstacker.get_new_values": [
                    1394,
                    1877
                ],
                "unstacker": [
                    1394,
                    1877
                ],
                "self.values.T": [
                    1395
                ],
                "new_placement": [
                    1402,
                    1404,
                    1886
                ],
                "is_empty": [
                    1432,
                    1426
                ],
                "orig_scalar": [
                    1427,
                    1428,
                    1454
                ],
                "qs": [
                    1443,
                    1427,
                    1430,
                    2294,
                    1436,
                    1437
                ],
                "nanpercentile": [
                    1441
                ],
                "interpolation": [
                    1448,
                    2294
                ],
                "result.shape": [
                    1456
                ],
                "lib.item_from_zerodim": [
                    1458
                ],
                "np.ndim": [
                    1460
                ],
                "np.arange": [
                    1875,
                    1461
                ],
                "self._replace_single": [
                    2449,
                    1500,
                    2478
                ],
                "self._maybe_coerce_values": [
                    1537,
                    2045
                ],
                "__init__": [
                    2632,
                    2314,
                    2379,
                    1550,
                    2046
                ],
                "super": [
                    2273,
                    1794,
                    2341,
                    1799,
                    2632,
                    2314,
                    2379,
                    2604,
                    2541,
                    1550,
                    2096,
                    2259,
                    2453,
                    2365,
                    2046
                ],
                "col": [
                    1568,
                    1570,
                    1571,
                    1572,
                    1576,
                    1565,
                    1567
                ],
                "com.is_null_slice": [
                    1568
                ],
                "com": [
                    1568
                ],
                "IndexError": [
                    1569,
                    2846,
                    1577
                ],
                "NotImplementedError": [
                    1857,
                    2242,
                    1572
                ],
                "self._holder": [
                    2018,
                    1861,
                    2297,
                    1640,
                    2026,
                    1584,
                    2168,
                    2169
                ],
                "locs.tolist": [
                    1587
                ],
                "_safe_reshape": [
                    1605
                ],
                "extract_array": [
                    1625,
                    2630
                ],
                "self.values.dtype.na_value": [
                    1635
                ],
                "self._holder._can_hold_na": [
                    1640
                ],
                "self.values.dtype._is_numeric": [
                    1649
                ],
                "self.values.take": [
                    1883,
                    1716
                ],
                "first": [
                    1752,
                    1754,
                    1758,
                    1751
                ],
                "new_locs": [
                    1758,
                    1759
                ],
                "values.fillna": [
                    1784,
                    1771
                ],
                "diff": [
                    1794,
                    1799
                ],
                "self.values.shift": [
                    1812
                ],
                "self.dtype.na_value": [
                    1839
                ],
                "is_sparse": [
                    2673,
                    1841
                ],
                "icond": [
                    1856,
                    1850,
                    1854
                ],
                "set_other": [
                    1856,
                    1852,
                    1854
                ],
                "self._holder._from_sequence": [
                    1861
                ],
                "np.where": [
                    1862
                ],
                "n_rows": [
                    1874,
                    1875
                ],
                "dummy_arr": [
                    1875,
                    1877
                ],
                "indices": [
                    1883,
                    1886
                ],
                "place": [
                    1884,
                    1886
                ],
                "zip": [
                    2457,
                    1886
                ],
                "ExtensionBlock": [
                    1891,
                    2148,
                    2675,
                    2136,
                    2620,
                    2686
                ],
                "NumericBlock": [
                    1985,
                    2349,
                    1909
                ],
                "left": [
                    1915,
                    1916
                ],
                "right": [
                    1915,
                    1916
                ],
                "FloatOrComplexBlock": [
                    1969,
                    1919
                ],
                "np.floating": [
                    1976,
                    1930,
                    1926,
                    2687
                ],
                "np.integer": [
                    2690,
                    2694,
                    1926,
                    1994,
                    1976
                ],
                "np.datetime64": [
                    2146,
                    1927,
                    1995,
                    1933,
                    2678,
                    2010
                ],
                "np.timedelta64": [
                    2689,
                    2306,
                    1927,
                    1995,
                    1933,
                    2323,
                    2326
                ],
                "float": [
                    1978,
                    1930
                ],
                "np.int_": [
                    1978,
                    1930
                ],
                "np.bool_": [
                    2696,
                    1933,
                    2868,
                    2357,
                    2358,
                    1979
                ],
                "datetime": [
                    2408,
                    1933,
                    2111
                ],
                "timedelta": [
                    2410,
                    1933,
                    2326
                ],
                "float_format": [
                    1945,
                    1961
                ],
                "decimal": [
                    1945,
                    1962
                ],
                "formatter": [
                    1966,
                    1958
                ],
                "FloatArrayFormatter": [
                    1958
                ],
                "formatter.get_result_as_array": [
                    1966
                ],
                "np.complexfloating": [
                    1976,
                    2692,
                    1982
                ],
                "complex": [
                    1978
                ],
                "np.float_": [
                    1978
                ],
                "value.dtype.type": [
                    1982
                ],
                "self.dtype.itemsize": [
                    1996
                ],
                "tipo.itemsize": [
                    1996
                ],
                "DatetimeArray": [
                    2722,
                    2152,
                    2091,
                    2006,
                    2071
                ],
                "astype": [
                    2096,
                    2018
                ],
                "self.array_values": [
                    2023,
                    2120,
                    2345,
                    2031,
                    2035
                ],
                "self._holder._simple_new": [
                    2026
                ],
                "key": [
                    2031
                ],
                "values.shift": [
                    2036
                ],
                "DatetimeLikeBlockMixin": [
                    2040,
                    2301
                ],
                "DT64NS_DTYPE": [
                    2068
                ],
                "conversion.ensure_datetime64ns": [
                    2131,
                    2069
                ],
                "conversion": [
                    2131,
                    2069,
                    2310
                ],
                "values._data": [
                    2072,
                    2312
                ],
                "tz_localize": [
                    2091
                ],
                "values.tz_convert": [
                    2092
                ],
                "dtype.tz": [
                    2092
                ],
                "self.is_datetimetz": [
                    2112,
                    2101
                ],
                "is_valid_nat_for_dtype": [
                    2328,
                    2116,
                    2103
                ],
                "NaT": [
                    2324,
                    2109
                ],
                "element.tzinfo": [
                    2113,
                    2114
                ],
                "self.dtype.tz": [
                    2113
                ],
                "dta": [
                    2120,
                    2122
                ],
                "dta._format_native_types": [
                    2122
                ],
                "date_format": [
                    2123
                ],
                "np.atleast_2d": [
                    2125,
                    2710
                ],
                "DatetimeBlock": [
                    2136,
                    2145,
                    2144,
                    2680
                ],
                "internal_values": [
                    2143
                ],
                "Block.internal_values": [
                    2143
                ],
                "_can_hold_element": [
                    2144
                ],
                "DatetimeBlock._can_hold_element": [
                    2144
                ],
                "to_native_types": [
                    2145
                ],
                "DatetimeBlock.to_native_types": [
                    2145
                ],
                "should_store": [
                    2626,
                    2147
                ],
                "Block.should_store": [
                    2626,
                    2147
                ],
                "array_values": [
                    2148
                ],
                "ExtensionBlock.array_values": [
                    2148
                ],
                "values.tz": [
                    2171
                ],
                "self.values._data.base": [
                    2180
                ],
                "self.values._data": [
                    2180
                ],
                "np.zeros": [
                    2246
                ],
                "np.int64": [
                    2246
                ],
                "asi8": [
                    2248
                ],
                "self.shift": [
                    2248
                ],
                "new_values.reshape": [
                    2251
                ],
                "new_values.astype": [
                    2252
                ],
                "TimeDeltaBlock": [
                    2691,
                    2253
                ],
                "fillna": [
                    2259,
                    2341,
                    2262
                ],
                "indexer.size": [
                    2271
                ],
                "obj_vals": [
                    2275,
                    2277
                ],
                "ObjectBlock": [
                    2699,
                    2277
                ],
                "newb.setitem": [
                    2279
                ],
                "self.values.view": [
                    2288,
                    2285
                ],
                "other.values.view": [
                    2285
                ],
                "naive": [
                    2288,
                    2291,
                    2293
                ],
                "naive.reshape": [
                    2291
                ],
                "blk": [
                    2293,
                    2294
                ],
                "res_blk": [
                    2297,
                    2298,
                    2294
                ],
                "blk.quantile": [
                    2294
                ],
                "aware": [
                    2297,
                    2298
                ],
                "res_blk.values.ravel": [
                    2297
                ],
                "res_blk.values": [
                    2297
                ],
                "res_blk.ndim": [
                    2298
                ],
                "IntBlock": [
                    2301,
                    2695
                ],
                "TD64NS_DTYPE": [
                    2309
                ],
                "conversion.ensure_timedelta64ns": [
                    2310
                ],
                "TimedeltaArray": [
                    2318,
                    2311
                ],
                "tda": [
                    2345,
                    2346
                ],
                "tda._format_native_types": [
                    2346
                ],
                "to_replace_values": [
                    2362,
                    2363
                ],
                "np.atleast_1d": [
                    2362
                ],
                "np.can_cast": [
                    2363
                ],
                "replace": [
                    2541,
                    2365,
                    2453
                ],
                "values.dtype.type": [
                    2376
                ],
                "lib.is_bool_array": [
                    2387
                ],
                "self.values.ravel": [
                    2387,
                    2423
                ],
                "val.shape": [
                    2405
                ],
                "soft_convert_objects": [
                    2406
                ],
                "val.ravel": [
                    2407
                ],
                "numeric": [
                    2409
                ],
                "to_rep_is_list": [
                    2440,
                    2442,
                    2443,
                    2467
                ],
                "value_is_list": [
                    2441,
                    2442,
                    2443
                ],
                "both_lists": [
                    2456,
                    2442
                ],
                "either_list": [
                    2448,
                    2443,
                    2452
                ],
                "is_re": [
                    2448,
                    2529,
                    2550,
                    2559
                ],
                "to_rep": [
                    2472,
                    2457,
                    2468,
                    2461
                ],
                "b._replace_single": [
                    2460,
                    2471
                ],
                "to_rep_re": [
                    2516,
                    2526,
                    2510
                ],
                "is_re_compilable": [
                    2513,
                    2510
                ],
                "regex_re": [
                    2513,
                    2523,
                    2516,
                    2526
                ],
                "pattern": [
                    2536,
                    2530,
                    2532
                ],
                "to_replace.pattern": [
                    2530
                ],
                "rx": [
                    2560,
                    2537,
                    2550,
                    2551,
                    2559
                ],
                "re.compile": [
                    2537
                ],
                "re": [
                    2537
                ],
                "rx.search": [
                    2551
                ],
                "rx.sub": [
                    2560
                ],
                "np.vectorize": [
                    2564
                ],
                "re_replacer": [
                    2564
                ],
                "block.convert": [
                    2574
                ],
                "_replace_coerce": [
                    2604
                ],
                "self.convert": [
                    2616
                ],
                "result.values.replace": [
                    2649
                ],
                "result.values": [
                    2649
                ],
                "vtype": [
                    2689,
                    2690,
                    2692,
                    2694,
                    2671,
                    2678,
                    2687
                ],
                "cls": [
                    2688,
                    2691,
                    2693,
                    2695,
                    2697,
                    2699,
                    2700,
                    2675,
                    2677,
                    2680,
                    2682,
                    2684,
                    2686
                ],
                "CategoricalBlock": [
                    2677
                ],
                "DatetimeTZBlock": [
                    2682,
                    2719
                ],
                "is_interval_dtype": [
                    2683
                ],
                "is_period_dtype": [
                    2683
                ],
                "ObjectValuesExtensionBlock": [
                    2684
                ],
                "FloatBlock": [
                    2688
                ],
                "ComplexBlock": [
                    2693
                ],
                "BoolBlock": [
                    2697
                ],
                "ABCPandasArray": [
                    2706
                ],
                "values.to_numpy": [
                    2707
                ],
                "PandasDtype": [
                    2712
                ],
                "dtype.numpy_dtype": [
                    2713
                ],
                "klass": [
                    2715,
                    2724,
                    2717,
                    2719
                ],
                "get_block_type": [
                    2717
                ],
                "DatetimeArray._simple_new": [
                    2722
                ],
                "blocks.extend": [
                    2737
                ],
                "blocks.append": [
                    2739,
                    2742
                ],
                "arr": [
                    2773,
                    2774,
                    2775,
                    2778,
                    2779
                ],
                "arr._values": [
                    2774
                ],
                "arr.dtype": [
                    2775
                ],
                "nn": [
                    2820,
                    2822,
                    2833,
                    2835,
                    2813
                ],
                "_isna_compat": [
                    2820
                ],
                "nn.dtype": [
                    2822
                ],
                "v.dtype": [
                    2825,
                    2851,
                    2833
                ],
                "warnings.catch_warnings": [
                    2831
                ],
                "warnings": [
                    2832,
                    2831
                ],
                "warnings.simplefilter": [
                    2832
                ],
                "np.ComplexWarning": [
                    2832
                ],
                "nn_at": [
                    2833,
                    2835,
                    2838
                ],
                "nn.astype": [
                    2833
                ],
                "comp": [
                    2835,
                    2836
                ],
                "comp.all": [
                    2836
                ],
                "v.dtype.kind": [
                    2851
                ],
                "n.dtype.kind": [
                    2851
                ],
                "_putmask_preserve": [
                    2859,
                    2852
                ],
                "v.astype": [
                    2857
                ],
                "mask.dtype": [
                    2871
                ]
            },
            "filtered_variables_in_file": {
                "PandasObject": [
                    87
                ],
                "__slots__": [
                    1920,
                    1986,
                    2371,
                    2350,
                    1904,
                    1970,
                    1910,
                    2041,
                    2139,
                    2621,
                    2302,
                    95
                ],
                "is_numeric": [
                    96,
                    1905,
                    2305
                ],
                "is_float": [
                    97,
                    1921
                ],
                "is_integer": [
                    98,
                    1987,
                    1998,
                    2334
                ],
                "is_complex": [
                    99,
                    1971
                ],
                "is_datetime": [
                    2042,
                    100
                ],
                "is_datetimetz": [
                    2140,
                    101
                ],
                "is_timedelta": [
                    102,
                    2303
                ],
                "is_bool": [
                    2351,
                    103
                ],
                "is_object": [
                    104,
                    2372
                ],
                "is_categorical": [
                    105,
                    2622
                ],
                "is_extension": [
                    106,
                    2141,
                    1526
                ],
                "_can_hold_na": [
                    2304,
                    2624,
                    1988,
                    2373,
                    107,
                    2352,
                    1906
                ],
                "_can_consolidate": [
                    1523,
                    108
                ],
                "_verify_integrity": [
                    1524,
                    109,
                    2623
                ],
                "_validate_ndim": [
                    1525,
                    110
                ],
                "self.ndim": [
                    1165,
                    1422,
                    1296,
                    1552,
                    277,
                    789,
                    791,
                    792,
                    1559,
                    666,
                    923,
                    1308,
                    1565,
                    1814,
                    296,
                    170,
                    427,
                    432,
                    1720,
                    964,
                    1350,
                    1745,
                    594,
                    850,
                    2277,
                    1774,
                    113,
                    369,
                    244,
                    117,
                    246,
                    2420,
                    2424,
                    253
                ],
                "self": [
                    2086,
                    2093,
                    2101,
                    2103,
                    2104,
                    2112,
                    2113,
                    2116,
                    2120,
                    2133,
                    113,
                    114,
                    115,
                    117,
                    119,
                    120,
                    2168,
                    2169,
                    2180,
                    147,
                    2203,
                    2211,
                    166,
                    2216,
                    170,
                    175,
                    180,
                    191,
                    197,
                    2246,
                    2248,
                    203,
                    2253,
                    2258,
                    211,
                    212,
                    2262,
                    219,
                    2270,
                    227,
                    2275,
                    2277,
                    234,
                    2283,
                    2285,
                    2288,
                    242,
                    243,
                    244,
                    2291,
                    246,
                    2293,
                    2297,
                    2298,
                    251,
                    253,
                    254,
                    258,
                    259,
                    260,
                    263,
                    264,
                    269,
                    272,
                    275,
                    276,
                    277,
                    2328,
                    282,
                    292,
                    294,
                    296,
                    2345,
                    299,
                    303,
                    307,
                    310,
                    2364,
                    321,
                    327,
                    328,
                    336,
                    338,
                    2387,
                    346,
                    348,
                    353,
                    366,
                    369,
                    371,
                    2420,
                    373,
                    2421,
                    375,
                    2423,
                    377,
                    2424,
                    379,
                    380,
                    384,
                    388,
                    396,
                    2446,
                    2449,
                    415,
                    417,
                    427,
                    428,
                    2478,
                    432,
                    437,
                    442,
                    462,
                    472,
                    474,
                    477,
                    484,
                    488,
                    2543,
                    503,
                    2564,
                    2572,
                    544,
                    546,
                    548,
                    553,
                    555,
                    556,
                    559,
                    561,
                    566,
                    567,
                    2616,
                    2617,
                    573,
                    576,
                    587,
                    592,
                    594,
                    596,
                    597,
                    2647,
                    600,
                    618,
                    622,
                    640,
                    644,
                    649,
                    663,
                    666,
                    686,
                    689,
                    690,
                    692,
                    697,
                    698,
                    703,
                    709,
                    713,
                    722,
                    733,
                    734,
                    737,
                    747,
                    750,
                    753,
                    767,
                    789,
                    791,
                    792,
                    796,
                    800,
                    801,
                    820,
                    823,
                    826,
                    850,
                    859,
                    875,
                    904,
                    907,
                    909,
                    911,
                    923,
                    924,
                    964,
                    991,
                    995,
                    1000,
                    1013,
                    1014,
                    1016,
                    1018,
                    1020,
                    1024,
                    1027,
                    1035,
                    1037,
                    1040,
                    1044,
                    1047,
                    1050,
                    1053,
                    1054,
                    1057,
                    1061,
                    1063,
                    1085,
                    1087,
                    1089,
                    1098,
                    1101,
                    1113,
                    1116,
                    1145,
                    1147,
                    1149,
                    1151,
                    1154,
                    1162,
                    1165,
                    1166,
                    1183,
                    1186,
                    1187,
                    1188,
                    1192,
                    1221,
                    1222,
                    1233,
                    1236,
                    1249,
                    1251,
                    1252,
                    1254,
                    1258,
                    1259,
                    1265,
                    1269,
                    1296,
                    1298,
                    1308,
                    1317,
                    1322,
                    1344,
                    1348,
                    1350,
                    1355,
                    1366,
                    1367,
                    1373,
                    1375,
                    1395,
                    1404,
                    1422,
                    1424,
                    1436,
                    1445,
                    1497,
                    1498,
                    1500,
                    1508,
                    1537,
                    1552,
                    1559,
                    1560,
                    1561,
                    1565,
                    1569,
                    1573,
                    1574,
                    1577,
                    1578,
                    1584,
                    1588,
                    1600,
                    1608,
                    1630,
                    1635,
                    1640,
                    1649,
                    1679,
                    1680,
                    1681,
                    1686,
                    1689,
                    1693,
                    1716,
                    1720,
                    1722,
                    1724,
                    1745,
                    1758,
                    1767,
                    1770,
                    1773,
                    1774,
                    1782,
                    1783,
                    1785,
                    1794,
                    1811,
                    1812,
                    1813,
                    1814,
                    1839,
                    1841,
                    1847,
                    1849,
                    1861,
                    1862,
                    1865,
                    1874,
                    1882,
                    1883,
                    1900,
                    1913,
                    1915,
                    1940,
                    1996,
                    2018,
                    2019,
                    2023,
                    2026,
                    2031,
                    2035,
                    2037,
                    2045
                ],
                "self._check_ndim": [
                    113
                ],
                "values": [
                    1537,
                    1550,
                    2068,
                    2069,
                    2071,
                    2072,
                    2074,
                    2075,
                    2086,
                    2089,
                    2090,
                    2091,
                    2092,
                    2093,
                    561,
                    1588,
                    567,
                    573,
                    576,
                    579,
                    581,
                    2630,
                    2631,
                    2632,
                    591,
                    592,
                    594,
                    2131,
                    2133,
                    1625,
                    2670,
                    113,
                    115,
                    2676,
                    2679,
                    2168,
                    2169,
                    2681,
                    2171,
                    2685,
                    2174,
                    1151,
                    644,
                    1156,
                    646,
                    1157,
                    650,
                    651,
                    653,
                    1165,
                    655,
                    145,
                    657,
                    147,
                    658,
                    2706,
                    150,
                    663,
                    2707,
                    665,
                    666,
                    2203,
                    2710,
                    1693,
                    1694,
                    2205,
                    1696,
                    1697,
                    2716,
                    2211,
                    2717,
                    1701,
                    2719,
                    2722,
                    2724,
                    2748,
                    2749,
                    2750,
                    2754,
                    2755,
                    2248,
                    1233,
                    722,
                    723,
                    727,
                    729,
                    1242,
                    1770,
                    1771,
                    1774,
                    244,
                    246,
                    1782,
                    1784,
                    254,
                    2309,
                    2310,
                    2311,
                    2312,
                    2313,
                    2314,
                    1298,
                    1301,
                    1306,
                    1308,
                    800,
                    805,
                    1324,
                    1326,
                    1330,
                    822,
                    1334,
                    1339,
                    321,
                    837,
                    840,
                    2376,
                    2377,
                    843,
                    844,
                    2379,
                    853,
                    858,
                    865,
                    867,
                    2406,
                    871,
                    874,
                    875,
                    2414,
                    2416,
                    2418,
                    2423,
                    2424,
                    1424,
                    1426,
                    1940,
                    1946,
                    1436,
                    1437,
                    1949,
                    1951,
                    1440,
                    1953,
                    1442,
                    1954,
                    1447,
                    1959,
                    474,
                    483,
                    2035,
                    2036,
                    2045,
                    2046
                ],
                "ndim": [
                    1545,
                    2314,
                    1547,
                    1549,
                    1550,
                    144,
                    145,
                    147,
                    2708,
                    150,
                    152,
                    2724,
                    1460,
                    1461,
                    2748,
                    2632,
                    2379,
                    113,
                    254,
                    252,
                    253,
                    2046
                ],
                "self.mgr_locs": [
                    264,
                    272,
                    1552,
                    275,
                    1813,
                    1561,
                    292,
                    2424,
                    437,
                    1722,
                    442,
                    328,
                    1865,
                    2253,
                    594,
                    1367,
                    346,
                    1758,
                    1249,
                    2277,
                    1774,
                    114,
                    242,
                    117,
                    120,
                    1785,
                    251
                ],
                "placement": [
                    2724,
                    1541,
                    1542,
                    2632,
                    1546,
                    2314,
                    2379,
                    1550,
                    241,
                    114,
                    242,
                    246,
                    2046,
                    250,
                    251,
                    254
                ],
                "self.values": [
                    1560,
                    1561,
                    544,
                    546,
                    548,
                    1573,
                    1574,
                    2086,
                    1578,
                    561,
                    1588,
                    573,
                    1600,
                    2133,
                    1630,
                    1635,
                    622,
                    1649,
                    115,
                    117,
                    119,
                    1151,
                    1154,
                    644,
                    2180,
                    1679,
                    1680,
                    1686,
                    663,
                    1689,
                    2203,
                    1693,
                    1183,
                    2216,
                    175,
                    1716,
                    191,
                    197,
                    2246,
                    2248,
                    203,
                    1233,
                    722,
                    211,
                    212,
                    219,
                    2275,
                    1767,
                    1258,
                    1770,
                    2285,
                    2288,
                    1265,
                    1782,
                    1794,
                    269,
                    272,
                    1298,
                    276,
                    277,
                    1812,
                    282,
                    800,
                    303,
                    1841,
                    307,
                    310,
                    1849,
                    321,
                    1862,
                    327,
                    336,
                    2387,
                    859,
                    1883,
                    1375,
                    1900,
                    366,
                    1395,
                    2423,
                    1915,
                    904,
                    1940,
                    417,
                    474,
                    2018,
                    2019,
                    2026,
                    2543
                ],
                "self._validate_ndim": [
                    296,
                    147,
                    117
                ],
                "values.ndim": [
                    2748,
                    1447,
                    145,
                    147,
                    150,
                    1306,
                    1308
                ],
                "self._can_consolidate": [
                    166
                ],
                "self.dtype.name": [
                    600,
                    166
                ],
                "self.dtype": [
                    640,
                    260,
                    2564,
                    264,
                    1162,
                    1040,
                    2328,
                    2297,
                    166,
                    553,
                    1839,
                    1847,
                    2104,
                    823,
                    2103,
                    2113,
                    2116,
                    1996,
                    1366,
                    600,
                    1373,
                    1251,
                    2283,
                    1013,
                    1913
                ],
                "self.values.base": [
                    175
                ],
                "self.is_datetime": [
                    1035,
                    1027,
                    180,
                    462
                ],
                "self.is_timedelta": [
                    462,
                    1053,
                    180,
                    1050,
                    1085
                ],
                "PandasArray": [
                    203
                ],
                "ExtensionArray": [
                    1688,
                    2866,
                    199
                ],
                "is_object_dtype": [
                    2016,
                    709,
                    747,
                    210,
                    1016,
                    2204
                ],
                "dtype": [
                    1028,
                    1029,
                    2696,
                    1034,
                    1041,
                    531,
                    533,
                    2712,
                    2713,
                    538,
                    539,
                    1050,
                    1053,
                    542,
                    2204,
                    2716,
                    2717,
                    546,
                    2082,
                    548,
                    1061,
                    550,
                    2085,
                    2722,
                    553,
                    2855,
                    811,
                    2092,
                    2857,
                    814,
                    2096,
                    561,
                    563,
                    819,
                    820,
                    822,
                    823,
                    1845,
                    1847,
                    826,
                    576,
                    581,
                    1862,
                    210,
                    983,
                    986,
                    2016,
                    622,
                    2670,
                    2671,
                    625,
                    626,
                    1011,
                    2673,
                    1013,
                    1016,
                    2683,
                    1021
                ],
                "self.values.astype": [
                    546,
                    2275,
                    2216,
                    1900,
                    561,
                    211
                ],
                "reshape": [
                    2211,
                    2031,
                    1435,
                    1686,
                    2778,
                    219,
                    924
                ],
                "np.asarray": [
                    1440,
                    1696,
                    2211,
                    2216,
                    2868,
                    1686,
                    2841,
                    2778,
                    219
                ],
                "np": [
                    2564,
                    2074,
                    1602,
                    2125,
                    591,
                    2146,
                    2678,
                    2687,
                    2689,
                    2690,
                    2692,
                    2694,
                    2696,
                    651,
                    655,
                    1686,
                    2710,
                    1696,
                    2211,
                    1189,
                    2216,
                    1219,
                    2246,
                    723,
                    214,
                    2778,
                    219,
                    2782,
                    223,
                    2271,
                    2808,
                    2306,
                    2313,
                    2832,
                    2323,
                    2326,
                    791,
                    2841,
                    797,
                    1825,
                    1830,
                    1319,
                    1324,
                    2862,
                    819,
                    2868,
                    2357,
                    2358,
                    2870,
                    2362,
                    2363,
                    834,
                    1862,
                    327,
                    2377,
                    335,
                    1360,
                    1875,
                    2414,
                    1916,
                    1926,
                    1927,
                    1930,
                    1933,
                    1435,
                    924,
                    1436,
                    415,
                    1440,
                    1951,
                    1443,
                    936,
                    1451,
                    946,
                    948,
                    1460,
                    1461,
                    952,
                    1976,
                    1978,
                    1979,
                    958,
                    1982,
                    1994,
                    1995,
                    977,
                    978,
                    980,
                    2010
                ],
                "self.shape": [
                    2211,
                    263,
                    2283,
                    2031,
                    592,
                    1874,
                    2291,
                    597,
                    1686,
                    600,
                    1913,
                    219,
                    924,
                    1373,
                    415
                ],
                "np.ndarray": [
                    1825,
                    1602,
                    1830,
                    2313,
                    1324,
                    2782,
                    2414,
                    591,
                    2862,
                    977,
                    723,
                    214,
                    791,
                    2870,
                    2074,
                    958,
                    2271
                ],
                "np.nan": [
                    797,
                    223
                ],
                "self._mgr_locs": [
                    234,
                    227
                ],
                "new_mgr_locs": [
                    1248,
                    1249,
                    290,
                    292,
                    1252,
                    1254,
                    231,
                    232,
                    234,
                    299,
                    1720,
                    1721,
                    1722,
                    1724,
                    1247
                ],
                "libinternals.BlockPlacement": [
                    1541,
                    1542,
                    231,
                    232,
                    275
                ],
                "libinternals": [
                    1541,
                    1542,
                    231,
                    232,
                    275
                ],
                "mgr_locs.setter": [
                    229
                ],
                "mgr_locs": [
                    229
                ],
                "self.is_extension": [
                    243,
                    559
                ],
                "_block_shape": [
                    427,
                    244
                ],
                "make_block": [
                    2276,
                    594,
                    1461,
                    246,
                    2424,
                    254
                ],
                "name": [
                    264,
                    258,
                    260
                ],
                "self._is_single_block": [
                    259,
                    477
                ],
                "result": [
                    260,
                    264,
                    266,
                    1435,
                    2460,
                    2463,
                    1441,
                    2471,
                    2474,
                    1451,
                    1452,
                    1454,
                    2734,
                    1456,
                    1457,
                    1458,
                    2735,
                    1460,
                    1461,
                    1334,
                    2741,
                    2742,
                    1849,
                    1339,
                    1856,
                    1861,
                    1353,
                    1865,
                    1355,
                    2122,
                    2125,
                    336,
                    338,
                    1365,
                    342,
                    2647,
                    2649,
                    2650,
                    347,
                    352,
                    353,
                    355
                ],
                "shape": [
                    2754,
                    2405,
                    263,
                    264,
                    939,
                    2416,
                    2749
                ],
                "join": [
                    263
                ],
                "s": [
                    2560,
                    2562,
                    263,
                    2550,
                    2551,
                    2553,
                    2559
                ],
                "self.mgr_locs.indexer": [
                    264,
                    272,
                    2253
                ],
                "state": [
                    275,
                    276
                ],
                "self.values.ndim": [
                    277
                ],
                "slicer": [
                    1761,
                    291,
                    1764,
                    294,
                    1767,
                    1745,
                    1748,
                    1750,
                    1751,
                    282
                ],
                "axis0_slicer": [
                    291,
                    292
                ],
                "new_values": [
                    2567,
                    904,
                    2569,
                    2572,
                    915,
                    918,
                    924,
                    925,
                    417,
                    294,
                    296,
                    299,
                    434,
                    946,
                    436,
                    948,
                    1716,
                    952,
                    444,
                    1724,
                    960,
                    1600,
                    1605,
                    2246,
                    1607,
                    1608,
                    2248,
                    2251,
                    2252,
                    2253,
                    1877,
                    1241,
                    1886,
                    1251,
                    1252,
                    998,
                    1254,
                    1000,
                    1258,
                    1259,
                    2543,
                    1265,
                    1394,
                    1267,
                    2036,
                    1269,
                    2037,
                    1401,
                    1404
                ],
                "self._slice": [
                    294
                ],
                "new_values.ndim": [
                    296,
                    960
                ],
                "self.make_block_same_class": [
                    1724,
                    1221,
                    1254,
                    1865,
                    2298,
                    299,
                    1165,
                    1773,
                    1811,
                    2037,
                    1783,
                    666,
                    1404,
                    1882
                ],
                "self.values.shape": [
                    2246,
                    303
                ],
                "self.values.dtype": [
                    544,
                    1154,
                    1635,
                    622,
                    1649,
                    307
                ],
                "i": [
                    448,
                    346,
                    1360,
                    443,
                    310,
                    442,
                    347,
                    444
                ],
                "locs": [
                    321,
                    1587,
                    2133
                ],
                "np.delete": [
                    327
                ],
                "loc": [
                    1573,
                    1574,
                    327,
                    328,
                    346,
                    348,
                    1567
                ],
                "self.mgr_locs.delete": [
                    328
                ],
                "np.errstate": [
                    335
                ],
                "func": [
                    336,
                    1219
                ],
                "kwargs": [
                    2341,
                    1126,
                    2346,
                    2123,
                    336,
                    767,
                    1111,
                    1215
                ],
                "self._split_op_result": [
                    338
                ],
                "List": [
                    1788,
                    1820,
                    359,
                    1256,
                    457,
                    330,
                    1803,
                    2218,
                    398,
                    880,
                    1138,
                    340,
                    1592,
                    1273,
                    2428,
                    1180
                ],
                "is_extension_array_dtype": [
                    829,
                    342,
                    2775,
                    2685,
                    2750
                ],
                "result.ndim": [
                    342
                ],
                "nbs": [
                    345,
                    349,
                    350
                ],
                "vals": [
                    347,
                    348
                ],
                "block": [
                    388,
                    393,
                    394,
                    2572,
                    2574,
                    2575,
                    423,
                    428,
                    429,
                    2604,
                    437,
                    438,
                    2613,
                    2614,
                    1344,
                    1345,
                    452,
                    453,
                    713,
                    714,
                    348,
                    349,
                    875,
                    876,
                    753,
                    754
                ],
                "self.make_block": [
                    353,
                    546,
                    484,
                    548,
                    1252,
                    1000,
                    1608,
                    875,
                    428,
                    1259,
                    1355,
                    2093,
                    2572,
                    1269,
                    2293,
                    1367,
                    859,
                    348
                ],
                "nbs.append": [
                    349
                ],
                "Block": [
                    352,
                    2370,
                    2147,
                    2626,
                    422,
                    1511,
                    1903,
                    2741,
                    2040,
                    2143
                ],
                "inplace": [
                    384,
                    1146,
                    904,
                    394,
                    396,
                    2450,
                    2454,
                    2461,
                    1182,
                    1183,
                    2472,
                    681,
                    2479,
                    688,
                    2607,
                    436,
                    696,
                    1080,
                    2361,
                    1596,
                    1086,
                    2366,
                    704,
                    1600,
                    450,
                    1098,
                    2507,
                    717,
                    1104,
                    2259,
                    2646,
                    2263,
                    2647,
                    1113,
                    1498,
                    732,
                    991,
                    1503,
                    737,
                    994,
                    1124,
                    1770,
                    364,
                    2541,
                    2543,
                    372,
                    757,
                    1140,
                    1782,
                    762,
                    379,
                    1151
                ],
                "validate_bool_kwarg": [
                    681,
                    2507,
                    364,
                    1140,
                    2646,
                    1080,
                    2361,
                    1596,
                    1182
                ],
                "mask": [
                    901,
                    646,
                    2566,
                    2569,
                    657,
                    2838,
                    1946,
                    2845,
                    414,
                    415,
                    1440,
                    1694,
                    1697,
                    1953,
                    2847,
                    1446,
                    936,
                    939,
                    2603,
                    433,
                    434,
                    946,
                    947,
                    948,
                    2610,
                    2866,
                    952,
                    2868,
                    2870,
                    443,
                    955,
                    957,
                    1598,
                    2871,
                    2872,
                    1602,
                    1603,
                    1605,
                    1607,
                    2813,
                    1360,
                    1363,
                    1877,
                    1878,
                    1495,
                    729,
                    1498,
                    731,
                    988,
                    991,
                    1888,
                    737,
                    1506,
                    366,
                    369,
                    1394,
                    1398,
                    2808,
                    1401,
                    1402,
                    379,
                    1405,
                    383
                ],
                "isna": [
                    1440,
                    646,
                    907,
                    1835,
                    813,
                    366,
                    2547,
                    1946,
                    1694
                ],
                "limit": [
                    1120,
                    1160,
                    394,
                    1771,
                    367,
                    368,
                    369,
                    1105,
                    2259,
                    2263,
                    1784,
                    1210
                ],
                "libalgos._validate_limit": [
                    368
                ],
                "libalgos": [
                    368
                ],
                "mask.cumsum": [
                    369
                ],
                "self._can_hold_na": [
                    1145,
                    371,
                    1350
                ],
                "self.copy": [
                    384,
                    1089,
                    2647,
                    618,
                    587,
                    555,
                    690,
                    375,
                    698,
                    1149,
                    734,
                    767
                ],
                "self._can_hold_element": [
                    801,
                    1322,
                    686,
                    750,
                    911,
                    2258,
                    692,
                    377,
                    2270
                ],
                "value": [
                    640,
                    2560,
                    388,
                    2441,
                    394,
                    1679,
                    1680,
                    2450,
                    2454,
                    2457,
                    795,
                    797,
                    2334,
                    801,
                    804,
                    805,
                    2341,
                    2472,
                    810,
                    811,
                    813,
                    814,
                    2479,
                    1584,
                    2606,
                    819,
                    820,
                    826,
                    829,
                    1982,
                    2366,
                    704,
                    832,
                    834,
                    840,
                    716,
                    2258,
                    2259,
                    853,
                    2263,
                    1497,
                    858,
                    1498,
                    2649,
                    1502,
                    2270,
                    737,
                    865,
                    2273,
                    871,
                    2279,
                    1771,
                    2541,
                    750,
                    2547,
                    756,
                    2551,
                    377,
                    379
                ],
                "blocks": [
                    2434,
                    1165,
                    1166,
                    2446,
                    2459,
                    2464,
                    2470,
                    2475,
                    2732,
                    2733,
                    2426,
                    2737,
                    2739,
                    2742,
                    2743,
                    1345,
                    1348,
                    1221,
                    1222,
                    2431,
                    464,
                    466,
                    1881,
                    380,
                    1888,
                    737,
                    2421,
                    2424,
                    762,
                    379,
                    1404,
                    1405,
                    763
                ],
                "self.putmask": [
                    737,
                    1498,
                    379
                ],
                "self._maybe_downcast": [
                    380,
                    1222,
                    1166,
                    1348
                ],
                "downcast": [
                    1125,
                    1222,
                    461,
                    1166,
                    466,
                    2259,
                    1108,
                    2263,
                    380,
                    2430
                ],
                "mask.any": [
                    955,
                    2603,
                    433,
                    1398,
                    1495,
                    1878,
                    731,
                    383
                ],
                "self.coerce_to_target_dtype": [
                    1344,
                    1497,
                    388
                ],
                "idx": [
                    393,
                    978,
                    972,
                    391
                ],
                "block.getitem_block": [
                    393
                ],
                "block.fillna": [
                    394
                ],
                "self.split_and_operate": [
                    991,
                    396,
                    2421,
                    503
                ],
                "f": [
                    448,
                    2564,
                    2567,
                    2569,
                    396,
                    434,
                    2421,
                    503,
                    2423,
                    991
                ],
                "np.broadcast_to": [
                    415
                ],
                "nv": [
                    2837,
                    2838,
                    2839,
                    2845,
                    2847,
                    2848,
                    420,
                    421,
                    422,
                    423,
                    427,
                    428,
                    434,
                    436,
                    437,
                    448,
                    450,
                    452,
                    988,
                    989,
                    483,
                    484
                ],
                "ref_loc": [
                    442,
                    452,
                    428
                ],
                "new_values.copy": [
                    436
                ],
                "make_a_block": [
                    452,
                    437
                ],
                "new_blocks": [
                    992,
                    453,
                    455,
                    441,
                    991
                ],
                "m": [
                    448,
                    1093,
                    1095,
                    1097,
                    1102,
                    1363,
                    1364,
                    1365,
                    1111,
                    443,
                    1117,
                    1367,
                    447
                ],
                "v": [
                    448,
                    450,
                    2851,
                    2820,
                    2852,
                    2825,
                    2857,
                    2859,
                    2833,
                    2837,
                    2457,
                    444,
                    2461
                ],
                "m.any": [
                    1364,
                    447
                ],
                "v.copy": [
                    450,
                    2837
                ],
                "new_blocks.append": [
                    453
                ],
                "self.is_float": [
                    1186,
                    1020,
                    462
                ],
                "_extend_blocks": [
                    2463,
                    466,
                    2474,
                    2434
                ],
                "b.downcast": [
                    466
                ],
                "b": [
                    2434,
                    2470,
                    2471,
                    466,
                    2613,
                    762,
                    2459,
                    2460
                ],
                "dtypes": [
                    480,
                    481,
                    483,
                    487,
                    490,
                    494,
                    471
                ],
                "maybe_downcast_to_dtype": [
                    483,
                    500
                ],
                "val": [
                    2405,
                    2407,
                    500,
                    501,
                    988
                ],
                "errors_legal_values": [
                    522,
                    524,
                    527
                ],
                "errors": [
                    1346,
                    585,
                    524,
                    1295,
                    527,
                    2096
                ],
                "invalid_arg": [
                    529,
                    525
                ],
                "inspect.isclass": [
                    531
                ],
                "inspect": [
                    531
                ],
                "ExtensionDtype": [
                    531
                ],
                "msg": [
                    536,
                    532
                ],
                "dtype.__name__": [
                    533
                ],
                "pandas_dtype": [
                    2082,
                    539,
                    550
                ],
                "is_categorical_dtype": [
                    544,
                    2676,
                    542,
                    855
                ],
                "copy": [
                    546,
                    2087,
                    554,
                    587,
                    618,
                    2412,
                    2096,
                    599
                ],
                "Categorical": [
                    859,
                    548,
                    2636,
                    2631
                ],
                "is_dtype_equal": [
                    640,
                    1251,
                    553,
                    1013,
                    2103,
                    823
                ],
                "dtype.type": [
                    563,
                    2671
                ],
                "self.is_datelike": [
                    566
                ],
                "self.to_native_types": [
                    567
                ],
                "self.get_values": [
                    576,
                    1424
                ],
                "vals1d": [
                    579,
                    581
                ],
                "values.ravel": [
                    579
                ],
                "astype_nansafe": [
                    581
                ],
                "newb": [
                    2276,
                    2279,
                    587,
                    588,
                    594,
                    596,
                    597,
                    601,
                    603
                ],
                "values.reshape": [
                    592,
                    2754,
                    2416,
                    1701
                ],
                "newb.is_numeric": [
                    596
                ],
                "self.is_numeric": [
                    596,
                    796
                ],
                "newb.shape": [
                    601,
                    597
                ],
                "newb.dtype.name": [
                    601
                ],
                "newb.dtype": [
                    601
                ],
                "Any": [
                    1923,
                    2436,
                    1990,
                    1802,
                    620,
                    2320,
                    2098,
                    2354,
                    1973,
                    1726
                ],
                "self.values.dtype.type": [
                    622
                ],
                "tipo": [
                    1924,
                    1925,
                    1926,
                    1927,
                    2321,
                    2322,
                    2323,
                    2099,
                    2100,
                    2355,
                    1974,
                    2103,
                    1975,
                    1976,
                    2356,
                    2357,
                    2108,
                    1991,
                    1992,
                    1994,
                    1995,
                    1996,
                    623,
                    624,
                    625
                ],
                "maybe_infer_dtype_type": [
                    1924,
                    1991,
                    623,
                    2321,
                    2099,
                    2355,
                    1974
                ],
                "element": [
                    1924,
                    1930,
                    1932,
                    2321,
                    2324,
                    2326,
                    2328,
                    2099,
                    2355,
                    1974,
                    2358,
                    2104,
                    1978,
                    1979,
                    2109,
                    2111,
                    2113,
                    2114,
                    2116,
                    1991,
                    1998,
                    623,
                    626
                ],
                "tipo.type": [
                    1926,
                    1927,
                    1994,
                    1995,
                    625,
                    2323,
                    2357,
                    1976
                ],
                "ArrayLike": [
                    1580,
                    2862,
                    628,
                    2746,
                    1981
                ],
                "value.dtype": [
                    640,
                    811,
                    1982
                ],
                "itemsize": [
                    649,
                    651,
                    653,
                    647
                ],
                "writers.word_len": [
                    647
                ],
                "writers": [
                    647
                ],
                "na_rep": [
                    1697,
                    1953,
                    647,
                    1960,
                    2346,
                    2123,
                    657
                ],
                "self.is_object": [
                    649,
                    907
                ],
                "quoting": [
                    649,
                    1963,
                    1948
                ],
                "values.astype": [
                    1696,
                    867,
                    650,
                    653,
                    2205,
                    1949
                ],
                "values.dtype.itemsize": [
                    651
                ],
                "values.dtype": [
                    805,
                    2309,
                    2679,
                    2376,
                    651,
                    1326,
                    2670,
                    2068,
                    2676,
                    822,
                    727,
                    2681,
                    2716,
                    2685,
                    2750
                ],
                "np.dtype": [
                    651
                ],
                "np.array": [
                    834,
                    1443,
                    2377,
                    1451,
                    655,
                    1360,
                    819,
                    980,
                    1436,
                    1951
                ],
                "deep": [
                    664
                ],
                "values.copy": [
                    665,
                    2089
                ],
                "original_to_replace": [
                    682,
                    755
                ],
                "to_replace": [
                    2440,
                    2448,
                    2450,
                    2454,
                    2457,
                    2468,
                    682,
                    2605,
                    686,
                    687,
                    2479,
                    692,
                    693,
                    2362,
                    700,
                    2366,
                    704,
                    715,
                    2510,
                    723,
                    727,
                    729,
                    2649,
                    2524,
                    1501,
                    2529,
                    2530,
                    2532,
                    2537,
                    2541
                ],
                "x": [
                    1208,
                    692
                ],
                "self.replace": [
                    703
                ],
                "regex": [
                    2452,
                    2454,
                    2461,
                    2467,
                    2472,
                    2479,
                    2608,
                    2366,
                    704,
                    718,
                    2510,
                    2513,
                    1496,
                    2524,
                    2526,
                    1504,
                    2536,
                    2541,
                    758
                ],
                "convert": [
                    704,
                    1505,
                    2615,
                    2472,
                    2573,
                    719,
                    2479,
                    2609,
                    2450,
                    2612,
                    2454,
                    759,
                    761,
                    2461,
                    2366
                ],
                "self.astype": [
                    1018,
                    1061,
                    1063,
                    713,
                    1037,
                    753,
                    820,
                    1044,
                    2262,
                    826,
                    1054
                ],
                "block.replace": [
                    714,
                    754
                ],
                "lib.is_scalar": [
                    804,
                    1835,
                    1324,
                    813,
                    1454,
                    914,
                    723,
                    1851
                ],
                "lib": [
                    804,
                    1318,
                    1224,
                    1704,
                    1835,
                    1324,
                    813,
                    1454,
                    1709,
                    914,
                    723,
                    1235,
                    1458,
                    2387,
                    1851
                ],
                "convert_scalar_for_putitemlike": [
                    1154,
                    805,
                    1326,
                    915,
                    727
                ],
                "missing.mask_missing": [
                    729
                ],
                "missing": [
                    1156,
                    1093,
                    1206,
                    1111,
                    729
                ],
                "b.convert": [
                    762,
                    2613,
                    2434
                ],
                "transpose": [
                    836,
                    997,
                    1352,
                    873,
                    1296,
                    1300,
                    789,
                    917,
                    1308,
                    956
                ],
                "indexer": [
                    1674,
                    1677,
                    1679,
                    1680,
                    791,
                    820,
                    1716,
                    826,
                    840,
                    846,
                    850,
                    853,
                    1242,
                    858,
                    2271,
                    865,
                    2273,
                    871,
                    2279
                ],
                "indexer.ndim": [
                    791
                ],
                "_": [
                    2855,
                    814,
                    819,
                    1011,
                    983
                ],
                "infer_dtype_from_scalar": [
                    814
                ],
                "maybe_promote": [
                    819,
                    2855,
                    983
                ],
                "setitem": [
                    2273,
                    826,
                    820
                ],
                "find_common_type": [
                    822
                ],
                "arr_value": [
                    832,
                    834,
                    867,
                    842,
                    843,
                    844,
                    846,
                    855,
                    859
                ],
                "values.T": [
                    874,
                    1301,
                    837
                ],
                "check_setitem_lengths": [
                    840,
                    1679
                ],
                "exact_match": [
                    841,
                    863,
                    855
                ],
                "arr_value.shape": [
                    842,
                    843
                ],
                "values.shape": [
                    1426,
                    843,
                    2749
                ],
                "arr_value.size": [
                    844
                ],
                "values.size": [
                    844
                ],
                "is_empty_indexer": [
                    846
                ],
                "is_scalar_indexer": [
                    850
                ],
                "arr_value.dtype": [
                    867,
                    859,
                    855
                ],
                "_extract_bool_array": [
                    1292,
                    901,
                    1598,
                    1822
                ],
                "new": [
                    902,
                    907,
                    909,
                    911,
                    914,
                    915,
                    922,
                    923,
                    924,
                    925,
                    935,
                    937,
                    939,
                    946,
                    947,
                    948,
                    952,
                    958,
                    959,
                    1602,
                    963,
                    964,
                    965,
                    1603,
                    967,
                    1607,
                    974,
                    977,
                    978,
                    980
                ],
                "ABCIndexClass": [
                    1293,
                    902,
                    1823
                ],
                "ABCSeries": [
                    2773,
                    1293,
                    902,
                    1823
                ],
                "ABCDataFrame": [
                    1293,
                    902,
                    1823
                ],
                "self.values.copy": [
                    1600,
                    904,
                    1770,
                    2543,
                    1782,
                    1849,
                    1151,
                    1183
                ],
                "is_list_like": [
                    935,
                    2440,
                    2441,
                    907,
                    1427,
                    2836,
                    2807
                ],
                "self.fill_value": [
                    1445,
                    1192,
                    909,
                    1236,
                    1436
                ],
                "new_values.dtype": [
                    915,
                    925,
                    1251
                ],
                "new_values.T": [
                    1401,
                    1886,
                    918,
                    998
                ],
                "new.ndim": [
                    923,
                    964
                ],
                "axis": [
                    1795,
                    1798,
                    1159,
                    1799,
                    1426,
                    1306,
                    923,
                    1444,
                    2238,
                    960,
                    1346,
                    1219,
                    966,
                    2248,
                    1358,
                    1103,
                    1359,
                    1365,
                    1242,
                    1247,
                    1119,
                    1258,
                    1267,
                    2036,
                    2294,
                    1789
                ],
                "np.repeat": [
                    2808,
                    1435,
                    924
                ],
                "new_values.shape": [
                    924,
                    1605
                ],
                "new.astype": [
                    925
                ],
                "np.any": [
                    936
                ],
                "np.place": [
                    946
                ],
                "mask.shape": [
                    947
                ],
                "np.putmask": [
                    952,
                    948
                ],
                "mask.T": [
                    957
                ],
                "new.T": [
                    959
                ],
                "new_shape": [
                    2778,
                    965,
                    966,
                    967
                ],
                "new.shape": [
                    978,
                    965
                ],
                "new_shape.insert": [
                    966
                ],
                "new.reshape": [
                    967
                ],
                "n": [
                    1799,
                    2841,
                    2845,
                    2847,
                    2851,
                    2852,
                    2855,
                    1789,
                    2859,
                    2244,
                    2248,
                    974,
                    978,
                    980,
                    983,
                    986,
                    988,
                    1258,
                    2807,
                    2808,
                    2813
                ],
                "np.squeeze": [
                    978
                ],
                "n.dtype": [
                    2851,
                    2855,
                    983
                ],
                "n.astype": [
                    986
                ],
                "_putmask_smart": [
                    988
                ],
                "infer_dtype_from": [
                    1011
                ],
                "other": [
                    1293,
                    1299,
                    1047,
                    1305,
                    1306,
                    1307,
                    1823,
                    1057,
                    1825,
                    1827,
                    1828,
                    1318,
                    1319,
                    1322,
                    1835,
                    1324,
                    1326,
                    1839,
                    1330,
                    1339,
                    1851,
                    1852,
                    1854,
                    1344,
                    1862,
                    1373,
                    1375,
                    2283,
                    2285,
                    1011,
                    1913,
                    1915
                ],
                "self.is_bool": [
                    1016,
                    1317,
                    1085
                ],
                "is_bool_dtype": [
                    1016
                ],
                "self.is_complex": [
                    1020
                ],
                "is_integer_dtype": [
                    2825,
                    1021,
                    2822
                ],
                "is_float_dtype": [
                    2825,
                    1021,
                    2822
                ],
                "is_datetime64_dtype": [
                    1034,
                    1028,
                    2108
                ],
                "is_datetime64tz_dtype": [
                    2085,
                    1029,
                    1034,
                    2679,
                    2681,
                    2719
                ],
                "mytz": [
                    1040,
                    1043
                ],
                "othertz": [
                    1041,
                    1043
                ],
                "tz_compare": [
                    2113,
                    1043
                ],
                "is_timedelta64_dtype": [
                    1050,
                    1053
                ],
                "self.is_integer": [
                    1317,
                    1187,
                    1085
                ],
                "missing.clean_fill_method": [
                    1093
                ],
                "method": [
                    1093,
                    1158,
                    1194,
                    1197,
                    1111,
                    1784,
                    1209
                ],
                "r": [
                    1098,
                    1099,
                    1100,
                    2735,
                    2736,
                    2737,
                    2739,
                    1366,
                    1367,
                    1113,
                    1114,
                    1115
                ],
                "check_int_bool": [
                    1113,
                    1098
                ],
                "self._interpolate_with_fill": [
                    1101
                ],
                "fill_value": [
                    1154,
                    2306,
                    1161,
                    1812,
                    1191,
                    1192,
                    1709,
                    1710,
                    1716,
                    1213,
                    1106,
                    1235,
                    1236,
                    1242,
                    1883,
                    2146,
                    1123,
                    1265,
                    1267,
                    1395,
                    2036,
                    1784
                ],
                "coerce": [
                    1144,
                    2411,
                    1107
                ],
                "missing.clean_interp_method": [
                    1111
                ],
                "self._interpolate": [
                    1116
                ],
                "index": [
                    1195,
                    1118,
                    1207
                ],
                "limit_direction": [
                    1121,
                    1211
                ],
                "limit_area": [
                    1122,
                    1212
                ],
                "missing.interpolate_2d": [
                    1156
                ],
                "data": [
                    1219,
                    1189,
                    1183
                ],
                "data.astype": [
                    1189
                ],
                "np.float64": [
                    1189
                ],
                "index.is_monotonic": [
                    1195
                ],
                "missing.interpolate_1d": [
                    1206
                ],
                "interp_values": [
                    1219,
                    1221
                ],
                "np.apply_along_axis": [
                    1219
                ],
                "lib.no_default": [
                    1224,
                    1235,
                    1709,
                    1704
                ],
                "allow_fill": [
                    1242,
                    1237,
                    1239
                ],
                "algos.take_nd": [
                    1241
                ],
                "algos": [
                    1241,
                    1258
                ],
                "algos.diff": [
                    1258
                ],
                "maybe_upcast": [
                    1265
                ],
                "shift": [
                    1267
                ],
                "periods": [
                    1267,
                    1812,
                    2036
                ],
                "cond": [
                    1346,
                    1830,
                    1862,
                    1832,
                    1833,
                    1292,
                    1358,
                    1359,
                    1360,
                    1330,
                    1333,
                    1850,
                    1339,
                    1309,
                    1822,
                    1311
                ],
                "orig_other": [
                    1346,
                    1299
                ],
                "other.ndim": [
                    1825,
                    1306
                ],
                "other.reshape": [
                    1307
                ],
                "other.shape": [
                    1827,
                    2283,
                    1913,
                    1307,
                    1373
                ],
                "cond.T": [
                    1309
                ],
                "lib.is_float": [
                    1318
                ],
                "np.isnan": [
                    1916,
                    1319
                ],
                "fastres": [
                    1330,
                    1331
                ],
                "expressions.where": [
                    1330
                ],
                "expressions": [
                    1330
                ],
                "cond.ravel": [
                    1333
                ],
                "where_func": [
                    1339
                ],
                "block.where": [
                    1345
                ],
                "try_cast": [
                    1346
                ],
                "result.T": [
                    1353,
                    1452
                ],
                "cond.ndim": [
                    1830,
                    1358
                ],
                "cond.swapaxes": [
                    1359
                ],
                "cond.shape": [
                    1360,
                    1832
                ],
                "result_blocks": [
                    2464,
                    2465,
                    2469,
                    2474,
                    2475,
                    2476,
                    2445,
                    2458,
                    1362,
                    1368,
                    1370,
                    2463
                ],
                "taken": [
                    1365,
                    1366
                ],
                "result.take": [
                    1365
                ],
                "m.nonzero": [
                    1365
                ],
                "maybe_downcast_numeric": [
                    1366
                ],
                "nb": [
                    1368,
                    1367
                ],
                "r.T": [
                    1367
                ],
                "result_blocks.append": [
                    1368
                ],
                "other.dtype": [
                    1913,
                    2283,
                    1373
                ],
                "array_equivalent": [
                    1375
                ],
                "other.values": [
                    1915,
                    2285,
                    1375
                ],
                "unstacker.get_new_values": [
                    1394,
                    1877
                ],
                "unstacker": [
                    1394,
                    1877
                ],
                "self.values.T": [
                    1395
                ],
                "new_placement": [
                    1402,
                    1404,
                    1886
                ],
                "is_empty": [
                    1432,
                    1426
                ],
                "orig_scalar": [
                    1427,
                    1428,
                    1454
                ],
                "qs": [
                    1443,
                    1427,
                    1430,
                    2294,
                    1436,
                    1437
                ],
                "nanpercentile": [
                    1441
                ],
                "interpolation": [
                    1448,
                    2294
                ],
                "result.shape": [
                    1456
                ],
                "lib.item_from_zerodim": [
                    1458
                ],
                "np.ndim": [
                    1460
                ],
                "np.arange": [
                    1875,
                    1461
                ],
                "self._replace_single": [
                    2449,
                    1500,
                    2478
                ],
                "self._maybe_coerce_values": [
                    1537,
                    2045
                ],
                "__init__": [
                    2632,
                    2314,
                    2379,
                    1550,
                    2046
                ],
                "col": [
                    1568,
                    1570,
                    1571,
                    1572,
                    1576,
                    1565,
                    1567
                ],
                "com.is_null_slice": [
                    1568
                ],
                "com": [
                    1568
                ],
                "self._holder": [
                    2018,
                    1861,
                    2297,
                    1640,
                    2026,
                    1584,
                    2168,
                    2169
                ],
                "locs.tolist": [
                    1587
                ],
                "_safe_reshape": [
                    1605
                ],
                "extract_array": [
                    1625,
                    2630
                ],
                "self.values.dtype.na_value": [
                    1635
                ],
                "self._holder._can_hold_na": [
                    1640
                ],
                "self.values.dtype._is_numeric": [
                    1649
                ],
                "self.values.take": [
                    1883,
                    1716
                ],
                "first": [
                    1752,
                    1754,
                    1758,
                    1751
                ],
                "new_locs": [
                    1758,
                    1759
                ],
                "values.fillna": [
                    1784,
                    1771
                ],
                "diff": [
                    1794,
                    1799
                ],
                "self.values.shift": [
                    1812
                ],
                "self.dtype.na_value": [
                    1839
                ],
                "is_sparse": [
                    2673,
                    1841
                ],
                "icond": [
                    1856,
                    1850,
                    1854
                ],
                "set_other": [
                    1856,
                    1852,
                    1854
                ],
                "self._holder._from_sequence": [
                    1861
                ],
                "np.where": [
                    1862
                ],
                "n_rows": [
                    1874,
                    1875
                ],
                "dummy_arr": [
                    1875,
                    1877
                ],
                "indices": [
                    1883,
                    1886
                ],
                "place": [
                    1884,
                    1886
                ],
                "ExtensionBlock": [
                    1891,
                    2148,
                    2675,
                    2136,
                    2620,
                    2686
                ],
                "NumericBlock": [
                    1985,
                    2349,
                    1909
                ],
                "left": [
                    1915,
                    1916
                ],
                "right": [
                    1915,
                    1916
                ],
                "FloatOrComplexBlock": [
                    1969,
                    1919
                ],
                "np.floating": [
                    1976,
                    1930,
                    1926,
                    2687
                ],
                "np.integer": [
                    2690,
                    2694,
                    1926,
                    1994,
                    1976
                ],
                "np.datetime64": [
                    2146,
                    1927,
                    1995,
                    1933,
                    2678,
                    2010
                ],
                "np.timedelta64": [
                    2689,
                    2306,
                    1927,
                    1995,
                    1933,
                    2323,
                    2326
                ],
                "np.int_": [
                    1978,
                    1930
                ],
                "np.bool_": [
                    2696,
                    1933,
                    2868,
                    2357,
                    2358,
                    1979
                ],
                "datetime": [
                    2408,
                    1933,
                    2111
                ],
                "timedelta": [
                    2410,
                    1933,
                    2326
                ],
                "float_format": [
                    1945,
                    1961
                ],
                "decimal": [
                    1945,
                    1962
                ],
                "formatter": [
                    1966,
                    1958
                ],
                "FloatArrayFormatter": [
                    1958
                ],
                "formatter.get_result_as_array": [
                    1966
                ],
                "np.complexfloating": [
                    1976,
                    2692,
                    1982
                ],
                "np.float_": [
                    1978
                ],
                "value.dtype.type": [
                    1982
                ],
                "self.dtype.itemsize": [
                    1996
                ],
                "tipo.itemsize": [
                    1996
                ],
                "DatetimeArray": [
                    2722,
                    2152,
                    2091,
                    2006,
                    2071
                ],
                "astype": [
                    2096,
                    2018
                ],
                "self.array_values": [
                    2023,
                    2120,
                    2345,
                    2031,
                    2035
                ],
                "self._holder._simple_new": [
                    2026
                ],
                "key": [
                    2031
                ],
                "values.shift": [
                    2036
                ],
                "DatetimeLikeBlockMixin": [
                    2040,
                    2301
                ],
                "DT64NS_DTYPE": [
                    2068
                ],
                "conversion.ensure_datetime64ns": [
                    2131,
                    2069
                ],
                "conversion": [
                    2131,
                    2069,
                    2310
                ],
                "values._data": [
                    2072,
                    2312
                ],
                "tz_localize": [
                    2091
                ],
                "values.tz_convert": [
                    2092
                ],
                "dtype.tz": [
                    2092
                ],
                "self.is_datetimetz": [
                    2112,
                    2101
                ],
                "is_valid_nat_for_dtype": [
                    2328,
                    2116,
                    2103
                ],
                "NaT": [
                    2324,
                    2109
                ],
                "element.tzinfo": [
                    2113,
                    2114
                ],
                "self.dtype.tz": [
                    2113
                ],
                "dta": [
                    2120,
                    2122
                ],
                "dta._format_native_types": [
                    2122
                ],
                "date_format": [
                    2123
                ],
                "np.atleast_2d": [
                    2125,
                    2710
                ],
                "DatetimeBlock": [
                    2136,
                    2145,
                    2144,
                    2680
                ],
                "internal_values": [
                    2143
                ],
                "Block.internal_values": [
                    2143
                ],
                "_can_hold_element": [
                    2144
                ],
                "DatetimeBlock._can_hold_element": [
                    2144
                ],
                "to_native_types": [
                    2145
                ],
                "DatetimeBlock.to_native_types": [
                    2145
                ],
                "should_store": [
                    2626,
                    2147
                ],
                "Block.should_store": [
                    2626,
                    2147
                ],
                "array_values": [
                    2148
                ],
                "ExtensionBlock.array_values": [
                    2148
                ],
                "values.tz": [
                    2171
                ],
                "self.values._data.base": [
                    2180
                ],
                "self.values._data": [
                    2180
                ],
                "np.zeros": [
                    2246
                ],
                "np.int64": [
                    2246
                ],
                "asi8": [
                    2248
                ],
                "self.shift": [
                    2248
                ],
                "new_values.reshape": [
                    2251
                ],
                "new_values.astype": [
                    2252
                ],
                "TimeDeltaBlock": [
                    2691,
                    2253
                ],
                "fillna": [
                    2259,
                    2341,
                    2262
                ],
                "indexer.size": [
                    2271
                ],
                "obj_vals": [
                    2275,
                    2277
                ],
                "ObjectBlock": [
                    2699,
                    2277
                ],
                "newb.setitem": [
                    2279
                ],
                "self.values.view": [
                    2288,
                    2285
                ],
                "other.values.view": [
                    2285
                ],
                "naive": [
                    2288,
                    2291,
                    2293
                ],
                "naive.reshape": [
                    2291
                ],
                "blk": [
                    2293,
                    2294
                ],
                "res_blk": [
                    2297,
                    2298,
                    2294
                ],
                "blk.quantile": [
                    2294
                ],
                "aware": [
                    2297,
                    2298
                ],
                "res_blk.values.ravel": [
                    2297
                ],
                "res_blk.values": [
                    2297
                ],
                "res_blk.ndim": [
                    2298
                ],
                "IntBlock": [
                    2301,
                    2695
                ],
                "TD64NS_DTYPE": [
                    2309
                ],
                "conversion.ensure_timedelta64ns": [
                    2310
                ],
                "TimedeltaArray": [
                    2318,
                    2311
                ],
                "tda": [
                    2345,
                    2346
                ],
                "tda._format_native_types": [
                    2346
                ],
                "to_replace_values": [
                    2362,
                    2363
                ],
                "np.atleast_1d": [
                    2362
                ],
                "np.can_cast": [
                    2363
                ],
                "replace": [
                    2541,
                    2365,
                    2453
                ],
                "values.dtype.type": [
                    2376
                ],
                "lib.is_bool_array": [
                    2387
                ],
                "self.values.ravel": [
                    2387,
                    2423
                ],
                "val.shape": [
                    2405
                ],
                "soft_convert_objects": [
                    2406
                ],
                "val.ravel": [
                    2407
                ],
                "numeric": [
                    2409
                ],
                "to_rep_is_list": [
                    2440,
                    2442,
                    2443,
                    2467
                ],
                "value_is_list": [
                    2441,
                    2442,
                    2443
                ],
                "both_lists": [
                    2456,
                    2442
                ],
                "either_list": [
                    2448,
                    2443,
                    2452
                ],
                "is_re": [
                    2448,
                    2529,
                    2550,
                    2559
                ],
                "to_rep": [
                    2472,
                    2457,
                    2468,
                    2461
                ],
                "b._replace_single": [
                    2460,
                    2471
                ],
                "to_rep_re": [
                    2516,
                    2526,
                    2510
                ],
                "is_re_compilable": [
                    2513,
                    2510
                ],
                "regex_re": [
                    2513,
                    2523,
                    2516,
                    2526
                ],
                "pattern": [
                    2536,
                    2530,
                    2532
                ],
                "to_replace.pattern": [
                    2530
                ],
                "rx": [
                    2560,
                    2537,
                    2550,
                    2551,
                    2559
                ],
                "re.compile": [
                    2537
                ],
                "re": [
                    2537
                ],
                "rx.search": [
                    2551
                ],
                "rx.sub": [
                    2560
                ],
                "np.vectorize": [
                    2564
                ],
                "re_replacer": [
                    2564
                ],
                "block.convert": [
                    2574
                ],
                "_replace_coerce": [
                    2604
                ],
                "self.convert": [
                    2616
                ],
                "result.values.replace": [
                    2649
                ],
                "result.values": [
                    2649
                ],
                "vtype": [
                    2689,
                    2690,
                    2692,
                    2694,
                    2671,
                    2678,
                    2687
                ],
                "cls": [
                    2688,
                    2691,
                    2693,
                    2695,
                    2697,
                    2699,
                    2700,
                    2675,
                    2677,
                    2680,
                    2682,
                    2684,
                    2686
                ],
                "CategoricalBlock": [
                    2677
                ],
                "DatetimeTZBlock": [
                    2682,
                    2719
                ],
                "is_interval_dtype": [
                    2683
                ],
                "is_period_dtype": [
                    2683
                ],
                "ObjectValuesExtensionBlock": [
                    2684
                ],
                "FloatBlock": [
                    2688
                ],
                "ComplexBlock": [
                    2693
                ],
                "BoolBlock": [
                    2697
                ],
                "ABCPandasArray": [
                    2706
                ],
                "values.to_numpy": [
                    2707
                ],
                "PandasDtype": [
                    2712
                ],
                "dtype.numpy_dtype": [
                    2713
                ],
                "klass": [
                    2715,
                    2724,
                    2717,
                    2719
                ],
                "get_block_type": [
                    2717
                ],
                "DatetimeArray._simple_new": [
                    2722
                ],
                "blocks.extend": [
                    2737
                ],
                "blocks.append": [
                    2739,
                    2742
                ],
                "arr": [
                    2773,
                    2774,
                    2775,
                    2778,
                    2779
                ],
                "arr._values": [
                    2774
                ],
                "arr.dtype": [
                    2775
                ],
                "nn": [
                    2820,
                    2822,
                    2833,
                    2835,
                    2813
                ],
                "_isna_compat": [
                    2820
                ],
                "nn.dtype": [
                    2822
                ],
                "v.dtype": [
                    2825,
                    2851,
                    2833
                ],
                "warnings.catch_warnings": [
                    2831
                ],
                "warnings": [
                    2832,
                    2831
                ],
                "warnings.simplefilter": [
                    2832
                ],
                "np.ComplexWarning": [
                    2832
                ],
                "nn_at": [
                    2833,
                    2835,
                    2838
                ],
                "nn.astype": [
                    2833
                ],
                "comp": [
                    2835,
                    2836
                ],
                "comp.all": [
                    2836
                ],
                "v.dtype.kind": [
                    2851
                ],
                "n.dtype.kind": [
                    2851
                ],
                "_putmask_preserve": [
                    2859,
                    2852
                ],
                "v.astype": [
                    2857
                ],
                "mask.dtype": [
                    2871
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/pandas_10/pandas/tests/series/methods/test_update.py",
                "test_function": "test_update_extension_array_series",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"result, target, expected\",\n        [\n            (\n                Series([\"a\", None], dtype=\"string\"),\n                Series([None, \"b\"], dtype=\"string\"),\n                Series([\"a\", \"b\"], dtype=\"string\"),\n            ),\n            (\n                Series([1, None], dtype=\"Int64\"),\n                Series([None, 2], dtype=\"Int64\"),\n                Series([1, 2], dtype=\"Int64\"),\n            ),\n            (\n                Series([True, None], dtype=\"boolean\"),\n                Series([None, False], dtype=\"boolean\"),\n                Series([True, False], dtype=\"boolean\"),\n            ),\n        ],\n    )\n    def test_update_extension_array_series(self, result, target, expected):\n        result.update(target)\n        tm.assert_series_equal(result, expected)",
                "test_error": "ValueError: NumPy boolean array indexing assignment cannot assign 2 input values to the 1 output values where the mask is true",
                "full_test_error": "self = <pandas.tests.series.methods.test_update.TestUpdate object at 0x116a91070>\nresult = 0       a\n1    <NA>\ndtype: string\ntarget = 0    <NA>\n1       b\ndtype: string\nexpected = 0    a\n1    b\ndtype: string\n\n    @pytest.mark.parametrize(\n        \"result, target, expected\",\n        [\n            (\n                Series([\"a\", None], dtype=\"string\"),\n                Series([None, \"b\"], dtype=\"string\"),\n                Series([\"a\", \"b\"], dtype=\"string\"),\n            ),\n            (\n                Series([1, None], dtype=\"Int64\"),\n                Series([None, 2], dtype=\"Int64\"),\n                Series([1, 2], dtype=\"Int64\"),\n            ),\n            (\n                Series([True, None], dtype=\"boolean\"),\n                Series([None, False], dtype=\"boolean\"),\n                Series([True, False], dtype=\"boolean\"),\n            ),\n        ],\n    )\n    def test_update_extension_array_series(self, result, target, expected):\n>       result.update(target)\n\npandas/tests/series/methods/test_update.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/series.py:2855: in update\n    self._mgr = self._mgr.putmask(mask=mask, new=other)\npandas/core/internals/managers.py:544: in putmask\n    return self.apply(\npandas/core/internals/managers.py:397: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:1607: in putmask\n    new_values[mask] = new\npandas/core/arrays/string_.py:263: in __setitem__\n    super().__setitem__(key, value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <StringArray>\n['a', <NA>]\nLength: 2, dtype: string\nkey = array([False,  True]), value = array([<NA>, 'b'], dtype=object)\n\n    def __setitem__(self, key, value) -> None:\n        value = extract_array(value, extract_numpy=True)\n    \n        key = check_array_indexer(self, key)\n        scalar_value = lib.is_scalar(value)\n    \n        if not scalar_value:\n            value = np.asarray(value, dtype=self._ndarray.dtype)\n    \n>       self._ndarray[key] = value\nE       ValueError: NumPy boolean array indexing assignment cannot assign 2 input values to the 1 output values where the mask is true\n\npandas/core/arrays/numpy_.py:279: ValueError",
                "traceback": "pandas/core/series.py:2855: in update\n    self._mgr = self._mgr.putmask(mask=mask, new=other)\npandas/core/internals/managers.py:544: in putmask\n    return self.apply(\npandas/core/internals/managers.py:397: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:1607: in putmask\n    new_values[mask] = new\npandas/core/arrays/string_.py:263: in __setitem__\n    super().__setitem__(key, value)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <StringArray>\n['a', <NA>]\nLength: 2, dtype: string\nkey = array([False,  True]), value = array([<NA>, 'b'], dtype=object)\n\n    def __setitem__(self, key, value) -> None:\n        value = extract_array(value, extract_numpy=True)\n    \n        key = check_array_indexer(self, key)\n        scalar_value = lib.is_scalar(value)\n    \n        if not scalar_value:\n            value = np.asarray(value, dtype=self._ndarray.dtype)\n    \n>       self._ndarray[key] = value\nE       ValueError: NumPy boolean array indexing assignment cannot assign 2 input values to the 1 output values where the mask is true\n\npandas/core/arrays/numpy_.py:279: ValueError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('result, target, expected', [(Series(['a', None], dtype='string'), Series([None, 'b'], dtype='string'), Series(['a', 'b'], dtype='string')), (Series([1, None], dtype='Int64'), Series([None, 2], dtype='Int64'), Series([1, 2], dtype='Int64')), (Series([True, None], dtype='boolean'), Series([None, False], dtype='boolean'), Series([True, False], dtype='boolean'))])"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/pandas_10/pandas/tests/series/methods/test_update.py",
                "test_function": "test_update_extension_array_series",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"result, target, expected\",\n        [\n            (\n                Series([\"a\", None], dtype=\"string\"),\n                Series([None, \"b\"], dtype=\"string\"),\n                Series([\"a\", \"b\"], dtype=\"string\"),\n            ),\n            (\n                Series([1, None], dtype=\"Int64\"),\n                Series([None, 2], dtype=\"Int64\"),\n                Series([1, 2], dtype=\"Int64\"),\n            ),\n            (\n                Series([True, None], dtype=\"boolean\"),\n                Series([None, False], dtype=\"boolean\"),\n                Series([True, False], dtype=\"boolean\"),\n            ),\n        ],\n    )\n    def test_update_extension_array_series(self, result, target, expected):\n        result.update(target)\n        tm.assert_series_equal(result, expected)",
                "test_error": "ValueError: NumPy boolean array indexing assignment cannot assign 2 input values to the 1 output values where the mask is true",
                "full_test_error": "self = <pandas.tests.series.methods.test_update.TestUpdate object at 0x116eff1c0>\nresult = 0       1\n1    <NA>\ndtype: Int64\ntarget = 0    <NA>\n1       2\ndtype: Int64, expected = 0    1\n1    2\ndtype: Int64\n\n    @pytest.mark.parametrize(\n        \"result, target, expected\",\n        [\n            (\n                Series([\"a\", None], dtype=\"string\"),\n                Series([None, \"b\"], dtype=\"string\"),\n                Series([\"a\", \"b\"], dtype=\"string\"),\n            ),\n            (\n                Series([1, None], dtype=\"Int64\"),\n                Series([None, 2], dtype=\"Int64\"),\n                Series([1, 2], dtype=\"Int64\"),\n            ),\n            (\n                Series([True, None], dtype=\"boolean\"),\n                Series([None, False], dtype=\"boolean\"),\n                Series([True, False], dtype=\"boolean\"),\n            ),\n        ],\n    )\n    def test_update_extension_array_series(self, result, target, expected):\n>       result.update(target)\n\npandas/tests/series/methods/test_update.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/series.py:2855: in update\n    self._mgr = self._mgr.putmask(mask=mask, new=other)\npandas/core/internals/managers.py:544: in putmask\n    return self.apply(\npandas/core/internals/managers.py:397: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:1607: in putmask\n    new_values[mask] = new\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <IntegerArray>\n[1, <NA>]\nLength: 2, dtype: Int64\nkey = array([False,  True]), value = array([1, 2])\n\n    def __setitem__(self, key, value) -> None:\n        _is_scalar = is_scalar(value)\n        if _is_scalar:\n            value = [value]\n        value, mask = coerce_to_array(value, dtype=self.dtype)\n    \n        if _is_scalar:\n            value = value[0]\n            mask = mask[0]\n    \n        key = check_array_indexer(self, key)\n>       self._data[key] = value\nE       ValueError: NumPy boolean array indexing assignment cannot assign 2 input values to the 1 output values where the mask is true\n\npandas/core/arrays/integer.py:437: ValueError",
                "traceback": "pandas/core/series.py:2855: in update\n    self._mgr = self._mgr.putmask(mask=mask, new=other)\npandas/core/internals/managers.py:544: in putmask\n    return self.apply(\npandas/core/internals/managers.py:397: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:1607: in putmask\n    new_values[mask] = new",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <IntegerArray>\n[1, <NA>]\nLength: 2, dtype: Int64\nkey = array([False,  True]), value = array([1, 2])\n\n    def __setitem__(self, key, value) -> None:\n        _is_scalar = is_scalar(value)\n        if _is_scalar:\n            value = [value]\n        value, mask = coerce_to_array(value, dtype=self.dtype)\n    \n        if _is_scalar:\n            value = value[0]\n            mask = mask[0]\n    \n        key = check_array_indexer(self, key)\n>       self._data[key] = value\nE       ValueError: NumPy boolean array indexing assignment cannot assign 2 input values to the 1 output values where the mask is true\n\npandas/core/arrays/integer.py:437: ValueError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('result, target, expected', [(Series(['a', None], dtype='string'), Series([None, 'b'], dtype='string'), Series(['a', 'b'], dtype='string')), (Series([1, None], dtype='Int64'), Series([None, 2], dtype='Int64'), Series([1, 2], dtype='Int64')), (Series([True, None], dtype='boolean'), Series([None, False], dtype='boolean'), Series([True, False], dtype='boolean'))])"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/pandas_10/pandas/tests/series/methods/test_update.py",
                "test_function": "test_update_extension_array_series",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"result, target, expected\",\n        [\n            (\n                Series([\"a\", None], dtype=\"string\"),\n                Series([None, \"b\"], dtype=\"string\"),\n                Series([\"a\", \"b\"], dtype=\"string\"),\n            ),\n            (\n                Series([1, None], dtype=\"Int64\"),\n                Series([None, 2], dtype=\"Int64\"),\n                Series([1, 2], dtype=\"Int64\"),\n            ),\n            (\n                Series([True, None], dtype=\"boolean\"),\n                Series([None, False], dtype=\"boolean\"),\n                Series([True, False], dtype=\"boolean\"),\n            ),\n        ],\n    )\n    def test_update_extension_array_series(self, result, target, expected):\n        result.update(target)\n        tm.assert_series_equal(result, expected)",
                "test_error": "ValueError: NumPy boolean array indexing assignment cannot assign 2 input values to the 1 output values where the mask is true",
                "full_test_error": "self = <pandas.tests.series.methods.test_update.TestUpdate object at 0x1170cb220>\nresult = 0    True\n1    <NA>\ndtype: boolean\ntarget = 0     <NA>\n1    False\ndtype: boolean\nexpected = 0     True\n1    False\ndtype: boolean\n\n    @pytest.mark.parametrize(\n        \"result, target, expected\",\n        [\n            (\n                Series([\"a\", None], dtype=\"string\"),\n                Series([None, \"b\"], dtype=\"string\"),\n                Series([\"a\", \"b\"], dtype=\"string\"),\n            ),\n            (\n                Series([1, None], dtype=\"Int64\"),\n                Series([None, 2], dtype=\"Int64\"),\n                Series([1, 2], dtype=\"Int64\"),\n            ),\n            (\n                Series([True, None], dtype=\"boolean\"),\n                Series([None, False], dtype=\"boolean\"),\n                Series([True, False], dtype=\"boolean\"),\n            ),\n        ],\n    )\n    def test_update_extension_array_series(self, result, target, expected):\n>       result.update(target)\n\npandas/tests/series/methods/test_update.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/series.py:2855: in update\n    self._mgr = self._mgr.putmask(mask=mask, new=other)\npandas/core/internals/managers.py:544: in putmask\n    return self.apply(\npandas/core/internals/managers.py:397: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:1607: in putmask\n    new_values[mask] = new\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BooleanArray>\n[True, <NA>]\nLength: 2, dtype: boolean\nkey = array([False,  True]), value = array([False, False])\n\n    def __setitem__(self, key, value) -> None:\n        _is_scalar = is_scalar(value)\n        if _is_scalar:\n            value = [value]\n        value, mask = coerce_to_array(value)\n    \n        if _is_scalar:\n            value = value[0]\n            mask = mask[0]\n    \n        key = check_array_indexer(self, key)\n>       self._data[key] = value\nE       ValueError: NumPy boolean array indexing assignment cannot assign 2 input values to the 1 output values where the mask is true\n\npandas/core/arrays/boolean.py:374: ValueError",
                "traceback": "pandas/core/series.py:2855: in update\n    self._mgr = self._mgr.putmask(mask=mask, new=other)\npandas/core/internals/managers.py:544: in putmask\n    return self.apply(\npandas/core/internals/managers.py:397: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:1607: in putmask\n    new_values[mask] = new",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BooleanArray>\n[True, <NA>]\nLength: 2, dtype: boolean\nkey = array([False,  True]), value = array([False, False])\n\n    def __setitem__(self, key, value) -> None:\n        _is_scalar = is_scalar(value)\n        if _is_scalar:\n            value = [value]\n        value, mask = coerce_to_array(value)\n    \n        if _is_scalar:\n            value = value[0]\n            mask = mask[0]\n    \n        key = check_array_indexer(self, key)\n>       self._data[key] = value\nE       ValueError: NumPy boolean array indexing assignment cannot assign 2 input values to the 1 output values where the mask is true\n\npandas/core/arrays/boolean.py:374: ValueError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('result, target, expected', [(Series(['a', None], dtype='string'), Series([None, 'b'], dtype='string'), Series(['a', 'b'], dtype='string')), (Series([1, None], dtype='Int64'), Series([None, 2], dtype='Int64'), Series([1, 2], dtype='Int64')), (Series([True, None], dtype='boolean'), Series([None, False], dtype='boolean'), Series([True, False], dtype='boolean'))])"
                ]
            }
        ]
    }
}