{
    "pandas": [
        {
            "bugID": 39,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 72,
            "file_name": "pandas/core/ops/methods.py",
            "replace_code": "def add_special_arithmetic_methods(cls):\n    \"\"\"\n    Adds the full suite of special arithmetic methods (``__add__``,\n    ``__sub__``, etc.) to the class.\n\n    Parameters\n    ----------\n    cls : class\n        special methods will be defined and pinned to this class\n    \"\"\"\n    _base_s = cls._accessors\n    type_name = f\"{cls.__name__}Methods\"\n\n    # These are the shared objects, our methods are instances\n    _parent_class_middle = cls._accessors\n\n    class SpecialMethodsMixin(metaclass=ParentMethodsMixin):\n        _accessors = _base_s\n        _wrap_attrs = _shared_doc_kwargs\n\n        # omiited methods\n\n    arith_method, comp_method, bool_method = _get_method_wrappers(cls)\n\n    new_methods = _create_methods(\n        cls, arith_method, comp_method, bool_method, special=True\n    )\n\n    def _wrap_inplace_method(method):\n        \"\"\"\n        return an inplace wrapper for this method\n        \"\"\"\n\n        def f(self, other):\n            result = method(self, other)\n\n            # this makes sure that we are aligned like the input\n            # we are updating inplace so we want to ignore is_copy\n            self._update_inplace(\n                result.reindex_like(self, copy=False)._data, verify_is_copy=False\n            )\n\n            return self\n\n        name = method.__name__.strip(\"__\")\n        setattr(cls, f\"__i{name}__\", f)  # Set the wrapped inplace method directly on the class\n\n    for name, method in new_methods.items():\n        _wrap_inplace_method(method)\n\n    _add_methods(cls, new_methods=new_methods)",
            "import_list": []
        }
    ]
}