{
    "pandas": [
        {
            "bugID": 39,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 72,
            "file_name": "pandas/core/ops/methods.py",
            "replace_code": "def add_special_arithmetic_methods(cls):\n    \"\"\"\n    Adds the full suite of special arithmetic methods (``__add__``,\n    ``__sub__``, etc.) to the class.\n\n    Parameters\n    ----------\n    cls : class\n        special methods will be defined and pinned to this class\n    \"\"\"\n    _default_arith_method, _is_arithmetic, arith_method = _get_arithmetic_ops(cls)\n\n    new_methods = _create_methods(cls, _is_arithmetic, arith_method, special=True)\n    \n    new_methods.update(\n        {\n            \"__iadd__\": functools.partialmethod(_inplace_method_wrapper, op=\"__iadd__\"),\n            \"__isub__\": functools.partialmethod(_inplace_method_wrapper, op=\"__isub__\"),\n            \"__imul__\": functools.partialmethod(_inplace_method_wrapper, op=\"__imul__\"),\n            \"__itruediv__\": functools.partialmethod(_inplace_method_wrapper, op=\"__itruediv__\"),\n            \"__ifloordiv__\": functools.partialmethod(_inplace_method_wrapper, op=\"__ifloordiv__\"),\n            \"__imod__\": functools.partialmethod(_inplace_method_wrapper, op=\"__imod__\"),\n            \"__ipow__\": functools.partialmethod(_inplace_method_wrapper, op=\"__ipow__\"),\n            \"__iand__\": functools.partialmethod(_inplace_method_wrapper, op=\"__iand__\"),\n            \"__ior__\": functools.partialmethod(_inplace_method_wrapper, op=\"__ior__\"),\n            \"__ixor__\": functools.partialmethod(_inplace_method_wrapper, op=\"__ixor__\"),\n        }\n    )\n\n    _add_methods(cls, name=\"__add__\", method=arith_method)\n    _add_methods(cls, new_methods=new_methods)",
            "imports": []
        }
    ]
}