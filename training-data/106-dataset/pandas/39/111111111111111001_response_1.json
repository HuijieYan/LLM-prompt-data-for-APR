{
    "pandas": [
        {
            "bugID": 39,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 72,
            "file_name": "pandas/core/ops/methods.py",
            "replace_code": "def add_special_arithmetic_methods(cls):\n    _, _, arith_method, comp_method, bool_method = _get_method_wrappers(cls)\n    new_methods = _create_methods(cls, arith_method, comp_method, bool_method, special=True)\n\n    def _wrap_inplace_method(method):\n        \"\"\"\n        Return an inplace wrapper for this method\n        \"\"\"\n        def f(self, other):\n            result = method(self, other)\n            self._update_inplace(result.reindex_like(self, copy=False)._data, verify_is_copy=False)\n            return None  # Return None for inplace operation\n\n        name = method.__name__.strip(\"__\")\n        f.__name__ = f\"__i{name}__\"\n        return f\n\n    inplace_operations = [\"add\", \"sub\", \"mul\", \"truediv\", \"floordiv\", \"mod\", \"pow\", \"and\", \"or\", \"xor\"]\n    for operation in inplace_operations:\n        inplace_method = f\"__i{operation}__\"\n        new_methods[inplace_method] = _wrap_inplace_method(new_methods[f\"__{operation}__\"])\n\n    _add_methods(cls, new_methods=new_methods)",
            "import_list": []
        }
    ]
}