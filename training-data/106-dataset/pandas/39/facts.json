{
    "1.1.1": "def add_special_arithmetic_methods(cls):\n    \n    _, _, arith_method, comp_method, bool_method = _get_method_wrappers(cls)\n    new_methods = _create_methods(\n        cls, arith_method, comp_method, bool_method, special=True\n    )\n    # inplace operators (I feel like these should get passed an `inplace=True`\n    # or just be removed\n\n    def _wrap_inplace_method(method):\n        \n\n        def f(self, other):\n            result = method(self, other)\n\n            # this makes sure that we are aligned like the input\n            # we are updating inplace so we want to ignore is_copy\n            self._update_inplace(\n                result.reindex_like(self, copy=False)._data, verify_is_copy=False\n            )\n\n            return self\n\n        name = method.__name__.strip(\"__\")\n        f.__name__ = f\"__i{name}__\"\n        return f\n\n    new_methods.update(\n        dict(\n            __iadd__=_wrap_inplace_method(new_methods[\"__add__\"]),\n            __isub__=_wrap_inplace_method(new_methods[\"__sub__\"]),\n            __imul__=_wrap_inplace_method(new_methods[\"__mul__\"]),\n            __itruediv__=_wrap_inplace_method(new_methods[\"__truediv__\"]),\n            __ifloordiv__=_wrap_inplace_method(new_methods[\"__floordiv__\"]),\n            __imod__=_wrap_inplace_method(new_methods[\"__mod__\"]),\n            __ipow__=_wrap_inplace_method(new_methods[\"__pow__\"]),\n        )\n    )\n\n    new_methods.update(\n        dict(\n            __iand__=_wrap_inplace_method(new_methods[\"__and__\"]),\n            __ior__=_wrap_inplace_method(new_methods[\"__or__\"]),\n            __ixor__=_wrap_inplace_method(new_methods[\"__xor__\"]),\n        )\n    )\n\n    _add_methods(cls, new_methods=new_methods)\n",
    "1.1.2": "Adds the full suite of special arithmetic methods (``__add__``,\n``__sub__``, etc.) to the class.\n\nParameters\n----------\ncls : class\n    special methods will be defined and pinned to this class",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/pandas_39/pandas/core/ops/methods.py",
    "1.3.2": [
        "_get_method_wrappers(cls)",
        "_create_methods(cls, arith_method, comp_method, bool_method, special)",
        "_add_methods(cls, new_methods)",
        "_wrap_inplace_method(method)",
        "f(self, other)"
    ],
    "1.4.1": [
        "    @pytest.mark.parametrize(\n        \"operation\", [\"__iadd__\", \"__isub__\", \"__imul__\", \"__ipow__\"]\n    )\n    @pytest.mark.parametrize(\"inplace\", [False, True])\n    def test_inplace_drop_and_operation(self, operation, inplace):\n        # GH 30484\n        df = pd.DataFrame({\"x\": range(5)})\n        expected = df.copy()\n        df[\"y\"] = range(5)\n        y = df[\"y\"]\n\n        with tm.assert_produces_warning(None):\n            if inplace:\n                df.drop(\"y\", axis=1, inplace=inplace)\n            else:\n                df = df.drop(\"y\", axis=1, inplace=inplace)\n\n            # Perform operation and check result\n            getattr(y, operation)(1)\n            tm.assert_frame_equal(df, expected)",
        "    @pytest.mark.parametrize(\n        \"operation\", [\"__iadd__\", \"__isub__\", \"__imul__\", \"__ipow__\"]\n    )\n    @pytest.mark.parametrize(\"inplace\", [False, True])\n    def test_inplace_drop_and_operation(self, operation, inplace):\n        # GH 30484\n        df = pd.DataFrame({\"x\": range(5)})\n        expected = df.copy()\n        df[\"y\"] = range(5)\n        y = df[\"y\"]\n\n        with tm.assert_produces_warning(None):\n            if inplace:\n                df.drop(\"y\", axis=1, inplace=inplace)\n            else:\n                df = df.drop(\"y\", axis=1, inplace=inplace)\n\n            # Perform operation and check result\n            getattr(y, operation)(1)\n            tm.assert_frame_equal(df, expected)",
        "    @pytest.mark.parametrize(\n        \"operation\", [\"__iadd__\", \"__isub__\", \"__imul__\", \"__ipow__\"]\n    )\n    @pytest.mark.parametrize(\"inplace\", [False, True])\n    def test_inplace_drop_and_operation(self, operation, inplace):\n        # GH 30484\n        df = pd.DataFrame({\"x\": range(5)})\n        expected = df.copy()\n        df[\"y\"] = range(5)\n        y = df[\"y\"]\n\n        with tm.assert_produces_warning(None):\n            if inplace:\n                df.drop(\"y\", axis=1, inplace=inplace)\n            else:\n                df = df.drop(\"y\", axis=1, inplace=inplace)\n\n            # Perform operation and check result\n            getattr(y, operation)(1)\n            tm.assert_frame_equal(df, expected)",
        "    @pytest.mark.parametrize(\n        \"operation\", [\"__iadd__\", \"__isub__\", \"__imul__\", \"__ipow__\"]\n    )\n    @pytest.mark.parametrize(\"inplace\", [False, True])\n    def test_inplace_drop_and_operation(self, operation, inplace):\n        # GH 30484\n        df = pd.DataFrame({\"x\": range(5)})\n        expected = df.copy()\n        df[\"y\"] = range(5)\n        y = df[\"y\"]\n\n        with tm.assert_produces_warning(None):\n            if inplace:\n                df.drop(\"y\", axis=1, inplace=inplace)\n            else:\n                df = df.drop(\"y\", axis=1, inplace=inplace)\n\n            # Perform operation and check result\n            getattr(y, operation)(1)\n            tm.assert_frame_equal(df, expected)"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs/repos/pandas_39/pandas/tests/frame/test_axis_select_reindex.py",
        "/Volumes/SSD2T/bgp_envs/repos/pandas_39/pandas/tests/frame/test_axis_select_reindex.py",
        "/Volumes/SSD2T/bgp_envs/repos/pandas_39/pandas/tests/frame/test_axis_select_reindex.py",
        "/Volumes/SSD2T/bgp_envs/repos/pandas_39/pandas/tests/frame/test_axis_select_reindex.py"
    ],
    "2.1.1": [
        [
            "E           AssertionError: DataFrame are different\nE           \nE           DataFrame shape mismatch\nE           [left]:  (5, 2)\nE           [right]: (5, 1)"
        ],
        [
            "E           AssertionError: DataFrame are different\nE           \nE           DataFrame shape mismatch\nE           [left]:  (5, 2)\nE           [right]: (5, 1)"
        ],
        [
            "E           AssertionError: DataFrame are different\nE           \nE           DataFrame shape mismatch\nE           [left]:  (5, 2)\nE           [right]: (5, 1)"
        ],
        [
            "E           AssertionError: DataFrame are different\nE           \nE           DataFrame shape mismatch\nE           [left]:  (5, 2)\nE           [right]: (5, 1)"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex object at 0x10ffa4220>\noperation = '__iadd__', inplace = True\n\n    @pytest.mark.parametrize(\n        \"operation\", [\"__iadd__\", \"__isub__\", \"__imul__\", \"__ipow__\"]\n    )\n    @pytest.mark.parametrize(\"inplace\", [False, True])\n    def test_inplace_drop_and_operation(self, operation, inplace):\n        # GH 30484\n        df = pd.DataFrame({\"x\": range(5)})\n        expected = df.copy()\n        df[\"y\"] = range(5)\n        y = df[\"y\"]\n    \n        with tm.assert_produces_warning(None):\n            if inplace:\n                df.drop(\"y\", axis=1, inplace=inplace)\n            else:\n                df = df.drop(\"y\", axis=1, inplace=inplace)\n    \n            # Perform operation and check result\n            getattr(y, operation)(1)\n>           tm.assert_frame_equal(df, expected)",
            "\npandas/tests/frame/test_axis_select_reindex.py:739: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex object at 0x1101eee50>\noperation = '__isub__', inplace = True\n\n    @pytest.mark.parametrize(\n        \"operation\", [\"__iadd__\", \"__isub__\", \"__imul__\", \"__ipow__\"]\n    )\n    @pytest.mark.parametrize(\"inplace\", [False, True])\n    def test_inplace_drop_and_operation(self, operation, inplace):\n        # GH 30484\n        df = pd.DataFrame({\"x\": range(5)})\n        expected = df.copy()\n        df[\"y\"] = range(5)\n        y = df[\"y\"]\n    \n        with tm.assert_produces_warning(None):\n            if inplace:\n                df.drop(\"y\", axis=1, inplace=inplace)\n            else:\n                df = df.drop(\"y\", axis=1, inplace=inplace)\n    \n            # Perform operation and check result\n            getattr(y, operation)(1)\n>           tm.assert_frame_equal(df, expected)",
            "\npandas/tests/frame/test_axis_select_reindex.py:739: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex object at 0x11016fc10>\noperation = '__imul__', inplace = True\n\n    @pytest.mark.parametrize(\n        \"operation\", [\"__iadd__\", \"__isub__\", \"__imul__\", \"__ipow__\"]\n    )\n    @pytest.mark.parametrize(\"inplace\", [False, True])\n    def test_inplace_drop_and_operation(self, operation, inplace):\n        # GH 30484\n        df = pd.DataFrame({\"x\": range(5)})\n        expected = df.copy()\n        df[\"y\"] = range(5)\n        y = df[\"y\"]\n    \n        with tm.assert_produces_warning(None):\n            if inplace:\n                df.drop(\"y\", axis=1, inplace=inplace)\n            else:\n                df = df.drop(\"y\", axis=1, inplace=inplace)\n    \n            # Perform operation and check result\n            getattr(y, operation)(1)\n>           tm.assert_frame_equal(df, expected)",
            "\npandas/tests/frame/test_axis_select_reindex.py:739: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex object at 0x1100918e0>\noperation = '__ipow__', inplace = True\n\n    @pytest.mark.parametrize(\n        \"operation\", [\"__iadd__\", \"__isub__\", \"__imul__\", \"__ipow__\"]\n    )\n    @pytest.mark.parametrize(\"inplace\", [False, True])\n    def test_inplace_drop_and_operation(self, operation, inplace):\n        # GH 30484\n        df = pd.DataFrame({\"x\": range(5)})\n        expected = df.copy()\n        df[\"y\"] = range(5)\n        y = df[\"y\"]\n    \n        with tm.assert_produces_warning(None):\n            if inplace:\n                df.drop(\"y\", axis=1, inplace=inplace)\n            else:\n                df = df.drop(\"y\", axis=1, inplace=inplace)\n    \n            # Perform operation and check result\n            getattr(y, operation)(1)\n>           tm.assert_frame_equal(df, expected)",
            "\npandas/tests/frame/test_axis_select_reindex.py:739: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "cls": "<class 'pandas.core.series.Series'>"
            },
            {
                "new_methods": "array of shape 30",
                "method": "<function _arith_method_SERIES.<locals>.wrapper at 0x113905430>",
                "name": "'add'",
                "method.__name__": "'__add__'",
                "f.__name__": "'__iadd__'",
                "f": "<function add_special_arithmetic_methods.<locals>._wrap_inplace_method.<locals>.f at 0x11390c3a0>",
                "_wrap_inplace_method": "<function add_special_arithmetic_methods.<locals>._wrap_inplace_method at 0x113905310>"
            }
        ],
        [
            {
                "cls": "<class 'pandas.core.frame.DataFrame'>"
            },
            {
                "new_methods": "array of shape 28",
                "method": "<function _arith_method_FRAME.<locals>.f at 0x113927ee0>",
                "name": "'add'",
                "method.__name__": "'__add__'",
                "f.__name__": "'__iadd__'",
                "f": "<function add_special_arithmetic_methods.<locals>._wrap_inplace_method.<locals>.f at 0x113932940>",
                "_wrap_inplace_method": "<function add_special_arithmetic_methods.<locals>._wrap_inplace_method at 0x1139328b0>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "cls": "type"
            },
            {
                "new_methods": "dict",
                "method": "function",
                "name": "str",
                "method.__name__": "str",
                "f.__name__": "str",
                "f": "function",
                "_wrap_inplace_method": "function"
            }
        ],
        [
            {
                "cls": "type"
            },
            {
                "new_methods": "dict",
                "method": "function",
                "name": "str",
                "method.__name__": "str",
                "f.__name__": "str",
                "f": "function",
                "_wrap_inplace_method": "function"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "cls": "<class 'pandas.core.series.Series'>"
            },
            {
                "new_methods": "array of shape 30",
                "method": "<function _arith_method_SERIES.<locals>.wrapper at 0x111ed04c0>",
                "name": "'add'",
                "method.__name__": "'__add__'",
                "f.__name__": "'__iadd__'",
                "f": "<function add_special_arithmetic_methods.<locals>._wrap_inplace_method.<locals>.f at 0x112145430>",
                "_wrap_inplace_method": "<function add_special_arithmetic_methods.<locals>._wrap_inplace_method at 0x111ed03a0>"
            }
        ],
        [
            {
                "cls": "<class 'pandas.core.frame.DataFrame'>"
            },
            {
                "new_methods": "array of shape 28",
                "method": "<function _arith_method_FRAME.<locals>.f at 0x112160f70>",
                "name": "'add'",
                "method.__name__": "'__add__'",
                "f.__name__": "'__iadd__'",
                "f": "<function add_special_arithmetic_methods.<locals>._wrap_inplace_method.<locals>.f at 0x1121699d0>",
                "_wrap_inplace_method": "<function add_special_arithmetic_methods.<locals>._wrap_inplace_method at 0x112169940>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "cls": "type"
            },
            {
                "new_methods": "dict",
                "method": "function",
                "name": "str",
                "method.__name__": "str",
                "f.__name__": "str",
                "f": "function",
                "_wrap_inplace_method": "function"
            }
        ],
        [
            {
                "cls": "type"
            },
            {
                "new_methods": "dict",
                "method": "function",
                "name": "str",
                "method.__name__": "str",
                "f.__name__": "str",
                "f": "function",
                "_wrap_inplace_method": "function"
            }
        ]
    ],
    "3.1.1": [
        "Strange behaviour of pd.DataFrame.drop() with inplace argument\n"
    ],
    "3.1.2": [
        "Code Sample, a copy-pastable example if possible\n# input - 1 \ndf = pd.DataFrame({})\ndf[\"x1\"] = [1, 2, 3, 4, 5]\ndf[\"x2\"] = [0, 0, 0, 1, 1]\ndf[\"target\"] = [10, 20, 30, 40, 50]\ny = df[\"target\"]\ndf.drop(\"target\", axis=1, inplace=True)\ny = y + np.min(y)\n\n# output df (without removed target column)\n\tx1\tx2\n0\t1\t0\n1\t2\t0\n2\t3\t0\n3\t4\t1\n4\t5\t1\n\n# input - 2 \ndf = pd.DataFrame({})\ndf[\"x1\"] = [1, 2, 3, 4, 5]\ndf[\"x2\"] = [0, 0, 0, 1, 1]\ndf[\"target\"] = [10, 20, 30, 40, 50]\ny = df[\"target\"]\ndf.drop(\"target\", axis=1, inplace=True)\ny += np.min(y)\n\n# output df (with the removed target column)\n\n  | x1 | x2 | target\n-- | -- | -- | --\n0 | 1 | 0 | 20\n1 | 2 | 0 | 30\n2 | 3 | 0 | 40\n3 | 4 | 1 | 50\n4 | 5 | 1 | 60\nProblem description\nPandas return DataFrame with removed column after doing in-place operation with a column. Is it a bug or intentional behavior?\n"
    ]
}