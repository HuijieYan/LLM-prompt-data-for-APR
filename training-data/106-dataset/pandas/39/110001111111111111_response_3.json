{
    "pandas": [
        {
            "bugID": 39,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 72,
            "file_name": "pandas/core/ops/methods.py",
            "replace_code": "def add_special_arithmetic_methods(cls):\n    # ... existing code ...\n\n\n    def _wrap_inplace_method(method):\n        def f(self, other):\n            result = method(self, other)\n            df = self.reindex_like(self, copy=False)._data  # reindex to ensure alignment\n            df.update(result)  # Update the DataFrame with the computation result\n            return self\n    \n        name = method.__name__.strip(\"__\")\n        f.__name__ = f\"__i{name}__\"\n        return f\n    \n    new_methods.update(\n        dict(\n            __iadd__=_wrap_inplace_method(new_methods[\"__add__\"]),\n            __isub__=_wrap_inplace_method(new_methods[\"__sub__\"]),\n            __imul__=_wrap_inplace_method(new_methods[\"__mul__\"]),\n            __ipow__=_wrap_inplace_method(new_methods[\"__pow__\"]),\n        )\n    )\n    \n    _add_methods(cls, new_methods=new_methods)"
        }
    ]
}