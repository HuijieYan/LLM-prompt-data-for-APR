{
    "pandas": [
        {
            "bugID": 39,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 72,
            "file_name": "pandas/core/ops/methods.py",
            "replace_code": "def add_special_arithmetic_methods(cls):\n    _, _, arith_method, comp_method, bool_method = _get_method_wrappers(cls)\n    new_methods = _create_methods(\n        cls, arith_method, comp_method, bool_method, special=True\n    )\n    \n    def _wrap_inplace_method(impl, method_name):\n        def _wrapper(self, *args, **kwargs):\n            inplace_result = impl(self, *args, **kwargs)\n            self._update_inplace(inplace_result)\n            return self\n        _wrapper.__name__ = method_name\n        return _wrapper\n\n    inplace_methods = [\n        (\"__add__\", \"__iadd__\"),\n        (\"__sub__\", \"__isub__\"),\n        (\"__mul__\", \"__imul__\"),\n        (\"__truediv__\", \"__itruediv__\"),\n        (\"__floordiv__\", \"__ifloordiv__\"),\n        (\"__mod__\", \"__imod__\"),\n        (\"__pow__\", \"__ipow__\"),\n        (\"__and__\", \"__iand__\"),\n        (\"__or__\", \"__ior__\"),\n        (\"__xor__\", \"__ixor__\")\n    ]\n\n    for method_name, inplace_name in inplace_methods:\n        new_methods[inplace_name] = _wrap_inplace_method(new_methods[method_name], inplace_name)\n\n    _add_methods(cls, new_methods=new_methods)",
            "imports": []
        }
    ]
}