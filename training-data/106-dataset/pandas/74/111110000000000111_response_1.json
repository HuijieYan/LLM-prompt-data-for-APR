{
    "pandas": [
        {
            "bugID": 74,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 142,
            "file_name": "pandas/core/indexes/timedeltas.py",
            "replace_code": "def __new__(cls, data=None, unit=None, freq=None, closed=None, dtype=_TD_DTYPE, copy=False, name=None):\n    name = maybe_extract_name(name, data, cls)\n\n    if data is None:\n        # handle the case when data is None\n        values = np.array([], dtype=dtype)\n    elif is_scalar(data):\n        # handle the case when data is a scalar\n        raise TypeError(\n            f\"{cls.__name__}() must be called with a collection of some kind, {repr(data)} was passed\"\n        )\n    elif unit in {\"Y\", \"y\", \"M\"}:\n        # handle the case when unit is invalid\n        raise ValueError(\n            \"Units 'M' and 'Y' are no longer supported, as they do not represent unambiguous timedelta values durations.\"\n        )\n    elif isinstance(data, TimedeltaArray):\n        if copy:\n            # handle the case when data is an instance of TimedeltaArray\n            values = data.copy()\n        else:\n            values = data\n    elif isinstance(data, TimedeltaIndex) and freq is None and name is None:\n        if copy:\n            # handle the case when data is an instance of TimedeltaIndex with no frequency or name\n            return data.copy()\n        else:\n            return data._shallow_copy()\n    else:\n        # handle the case when data is a sequence\n        values = TimedeltaArray._from_sequence(data, freq=freq, unit=unit, dtype=dtype, copy=copy)\n\n    return cls._simple_new(values, name=name, freq=freq)",
            "import_list": []
        }
    ]
}