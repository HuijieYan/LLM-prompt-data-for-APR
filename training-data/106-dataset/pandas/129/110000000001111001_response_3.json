{
    "pandas": [
        {
            "bugID": 129,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1302,
            "file_name": "pandas/core/arrays/datetimelike.py",
            "replace_code": "def __rsub__(self, other):\n    import numpy as np\n    from pandas.core.arrays import DatetimeArray\n    import numpy as np\n    from pandas.core.arrays import DatetimeArray\n    \n    if self.dtype == np.dtype('<m8[ns]') and isinstance(other, np.datetime64):\n        # Wrap other in DatetimeArray/Index and flip the operation\n        other = DatetimeArray([other])  # Wrap in DatetimeArray\n        return other - self\n    elif (self.dtype == np.dtype('<m8[ns]') and isinstance(other, (pd.DatetimeIndex, pd.DatetimeArray))):\n        return -(-self - other)  # Subtracting datetime objects returns timedelta\n    elif (self.dtype == np.dtype('<m8[ns]') and isinstance(other, np.timedelta64)):\n        return -(-self - other)  # Subtracting timedelta returns timedelta\n    else:\n        raise TypeError(\n            \"cannot subtract {cls} from {typ}\".format(\n                cls=type(self).__name__, typ=type(other).__name__\n            )\n        )"
        }
    ]
}