{
    "pandas": [
        {
            "bugID": 129,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1302,
            "file_name": "pandas/core/arrays/datetimelike.py",
            "replace_code": "def __rsub__(self, other):\n    import numpy as np\n    from pandas import Timedelta, DatetimeIndex, Index, Series, DatetimeArray, TimedeltaArray\n    from pandas.core.dtypes.common import is_datetime64_any_dtype, is_timedelta64_dtype\n    if isinstance(other, np.datetime64) and is_timedelta64_dtype(self.dtype):\n        # ndarray[datetime64] cannot be subtracted from self, so\n        # we need to wrap in DatetimeArray/Index and flip the operation\n        if not isinstance(other, (DatetimeArray, DatetimeIndex, Index)):\n            # Avoid down-casting DatetimeIndex\n            other = DatetimeArray(other)\n        return other - self\n    elif is_datetime64_any_dtype(self.dtype) and hasattr(other, \"dtype\") and not is_datetime64_any_dtype(other.dtype):\n        # GH#19959 datetime - datetime is well-defined as timedelta,\n        # but any other type - datetime is not well-defined.\n        raise TypeError(f\"cannot subtract {type(self).__name__} from {type(other).__name__}\")\n    elif is_timedelta64_dtype(self.dtype) and isinstance(other, (int, float, np.integer)):\n        result = self.values - other\n        return TimedeltaArray(result)\n    elif is_timedelta64_dtype(self.dtype) and isinstance(other, (Timedelta, np.timedelta64, TimedeltaArray)):\n        result = self.values - other\n        return TimedeltaArray(result)\n    else:\n        return -self + other",
            "imports": [
                "import numpy as np",
                "from pandas import Timedelta, DatetimeIndex, Index, Series, DatetimeArray, TimedeltaArray",
                "from pandas.core.dtypes.common import is_datetime64_any_dtype, is_timedelta64_dtype"
            ]
        }
    ]
}