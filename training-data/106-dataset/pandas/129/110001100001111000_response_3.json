{
    "pandas": [
        {
            "bugID": 129,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 1302,
            "file_name": "pandas/core/arrays/datetimelike.py",
            "replace_code": "def __rsub__(self, other):\n    if np.issubdtype(other.dtype, np.datetime64) and np.issubdtype(self.dtype, np.timedelta64):\n        if not isinstance(other, DatetimeArray):\n            other = DatetimeArray([other])\n        return -(self - other)\n    elif np.issubdtype(self.dtype, np.datetime64) and hasattr(other, \"dtype\") and not np.issubdtype(other.dtype, np.datetime64):\n        raise TypeError(\n            f\"cannot subtract {type(self).__name__} from {type(other).__name__}\"\n        )\n    elif np.issubdtype(self.dtype, 'm') and np.issubdtype(other.dtype, np.timedelta64):\n        raise TypeError(\n            f\"cannot subtract {type(self).__name__} from {other.dtype}\"\n        )\n    elif np.issubdtype(self.dtype, np.timedelta64):\n        if np.issubdtype(other, np.integer) or np.issubdtype(other.dtype, np.integer):\n            return -(self - other)\n        return (-self) + other\n    return -(self - other)",
            "import_list": [
                "from pandas.core.arrays import DatetimeArray",
                "import numpy as np"
            ]
        }
    ]
}