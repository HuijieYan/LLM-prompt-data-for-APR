{
    "pandas": [
        {
            "bugID": 129,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1302,
            "file_name": "pandas/core/arrays/datetimelike.py",
            "replace_code": "def __rsub__(self, other):\n    if is_datetime64_any_dtype(other) and is_timedelta64_dtype(self.dtype):\n        result = []\n        for val in self:\n            result.append(other - val)\n        return result\n    elif (is_datetime64_any_dtype(self.dtype) and isinstance(other, datetime) and not is_datetime64_any_dtype(pd.Series(other).dtype)):\n        raise TypeError(\"cannot subtract {typ} from {cls}\".format(cls=type(self).__name__, typ=type(other).__name__))\n    elif is_period_dtype(self.dtype) and is_timedelta64_dtype(other):\n        raise TypeError(\"cannot subtract {dtype} from {cls}\".format(cls=type(self).__name__, dtype=other.dtype))\n    elif is_timedelta64_dtype(self.dtype):\n        if isinstance(other, int):\n            result = []\n            for val in self:\n                result.append(pd.Timedelta(days=-val.days))\n            return result\n        else:\n            result = []\n            for val in self:\n                result.append(pd.Timedelta(days=val.days * -1))\n            return result\n\n    result = []\n    for val in self:\n        result.append(pd.Timedelta(days=-val.days))\n    return result",
            "import_list": []
        }
    ]
}