{
    "pandas": [
        {
            "bugID": 129,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1302,
            "file_name": "pandas/core/arrays/datetimelike.py",
            "replace_code": "def __rsub__(self, other):\n    if is_datetime64_any_dtype(other) and is_timedelta64_dtype(self.dtype):\n        # ndarray[datetime64] cannot be subtracted from self, so\n        # we need to wrap in DatetimeArray/Index and flip the operation\n        if not isinstance(other, DatetimeLikeArrayMixin):\n            # Avoid down-casting DatetimeIndex\n            from pandas.core.arrays import DatetimeArray\n\n            if isinstance(other, np.ndarray):\n                other = DatetimeArray(other)\n            elif isinstance(other, (pd.Series, pd.Index)):\n                other = DatetimeArray(other.array)\n            else:\n                raise ValueError(f\"Unexpected type '{type(other).__name__}'. 'values' must be a DatetimeArray ndarray, or Series or Index containing one of those.\")\n        return other - self",
            "import_list": [
                "from pandas.core.arrays import DatetimeArray"
            ]
        }
    ]
}