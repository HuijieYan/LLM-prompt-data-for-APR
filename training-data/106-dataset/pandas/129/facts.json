{
    "1.1.1": "def __rsub__(self, other):\n    if is_datetime64_any_dtype(other) and is_timedelta64_dtype(self.dtype):\n        # ndarray[datetime64] cannot be subtracted from self, so\n        # we need to wrap in DatetimeArray/Index and flip the operation\n        if not isinstance(other, DatetimeLikeArrayMixin):\n            # Avoid down-casting DatetimeIndex\n            from pandas.core.arrays import DatetimeArray\n\n            other = DatetimeArray(other)\n        return other - self\n    elif (\n        is_datetime64_any_dtype(self.dtype)\n        and hasattr(other, \"dtype\")\n        and not is_datetime64_any_dtype(other.dtype)\n    ):\n        # GH#19959 datetime - datetime is well-defined as timedelta,\n        # but any other type - datetime is not well-defined.\n        raise TypeError(\n            \"cannot subtract {cls} from {typ}\".format(\n                cls=type(self).__name__, typ=type(other).__name__\n            )\n        )\n    elif is_period_dtype(self.dtype) and is_timedelta64_dtype(other):\n        # TODO: Can we simplify/generalize these cases at all?\n        raise TypeError(\n            \"cannot subtract {cls} from {dtype}\".format(\n                cls=type(self).__name__, dtype=other.dtype\n            )\n        )\n    elif is_timedelta64_dtype(self.dtype):\n        if lib.is_integer(other) or is_integer_dtype(other):\n            # need to subtract before negating, since that flips freq\n            # -self flips self.freq, messing up results\n            return -(self - other)\n\n        return (-self) + other\n\n    return -(self - other)\n",
    "1.1.2": null,
    "1.2.1": "class DatetimeLikeArrayMixin(ExtensionOpsMixin, AttributesMixin, ExtensionArray)",
    "1.2.2": "Shared Base/Mixin class for DatetimeArray, TimedeltaArray, PeriodArray\n\nAssumes that __new__/__init__ defines:\n    _data\n    _freq\n\nand that the inheriting class has methods:\n    _generate_range",
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/arrays/datetimelike.py",
    "1.3.2": null,
    "1.4.1": [
        "    @pytest.mark.parametrize(\n        \"ts\",\n        [\n            Timestamp(\"2012-01-01\"),\n            Timestamp(\"2012-01-01\").to_pydatetime(),\n            Timestamp(\"2012-01-01\").to_datetime64(),\n        ],\n    )\n    def test_td64arr_add_sub_datetimelike_scalar(self, ts, box_with_array):\n        # GH#11925, GH#29558\n        tdi = timedelta_range(\"1 day\", periods=3)\n        expected = pd.date_range(\"2012-01-02\", periods=3)\n\n        tdarr = tm.box_expected(tdi, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n\n        tm.assert_equal(ts + tdarr, expected)\n        tm.assert_equal(tdarr + ts, expected)\n\n        expected2 = pd.date_range(\"2011-12-31\", periods=3, freq=\"-1D\")\n        expected2 = tm.box_expected(expected2, box_with_array)\n\n        tm.assert_equal(ts - tdarr, expected2)\n        tm.assert_equal(ts + (-tdarr), expected2)\n\n        with pytest.raises(TypeError):\n            tdarr - ts",
        "    @pytest.mark.parametrize(\n        \"ts\",\n        [\n            Timestamp(\"2012-01-01\"),\n            Timestamp(\"2012-01-01\").to_pydatetime(),\n            Timestamp(\"2012-01-01\").to_datetime64(),\n        ],\n    )\n    def test_td64arr_add_sub_datetimelike_scalar(self, ts, box_with_array):\n        # GH#11925, GH#29558\n        tdi = timedelta_range(\"1 day\", periods=3)\n        expected = pd.date_range(\"2012-01-02\", periods=3)\n\n        tdarr = tm.box_expected(tdi, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n\n        tm.assert_equal(ts + tdarr, expected)\n        tm.assert_equal(tdarr + ts, expected)\n\n        expected2 = pd.date_range(\"2011-12-31\", periods=3, freq=\"-1D\")\n        expected2 = tm.box_expected(expected2, box_with_array)\n\n        tm.assert_equal(ts - tdarr, expected2)\n        tm.assert_equal(ts + (-tdarr), expected2)\n\n        with pytest.raises(TypeError):\n            tdarr - ts"
    ],
    "1.4.2": [
        "pandas/tests/arithmetic/test_timedelta64.py",
        "pandas/tests/arithmetic/test_timedelta64.py"
    ],
    "2.1.1": [
        [
            "E           ValueError: Unexpected type 'datetime64'. 'values' must be a DatetimeArray ndarray, or Series or Index containing one of those."
        ],
        [
            "E           ValueError: Unexpected type 'datetime64'. 'values' must be a DatetimeArray ndarray, or Series or Index containing one of those."
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps object at 0x117209a90>\nts = numpy.datetime64('2012-01-01T00:00:00.000000000')\nbox_with_array = <class 'pandas.core.indexes.base.Index'>\n\n    @pytest.mark.parametrize(\n        \"ts\",\n        [\n            Timestamp(\"2012-01-01\"),\n            Timestamp(\"2012-01-01\").to_pydatetime(),\n            Timestamp(\"2012-01-01\").to_datetime64(),\n        ],\n    )\n    def test_td64arr_add_sub_datetimelike_scalar(self, ts, box_with_array):\n        # GH#11925, GH#29558\n        tdi = timedelta_range(\"1 day\", periods=3)\n        expected = pd.date_range(\"2012-01-02\", periods=3)\n    \n        tdarr = tm.box_expected(tdi, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n    \n        tm.assert_equal(ts + tdarr, expected)\n        tm.assert_equal(tdarr + ts, expected)\n    \n        expected2 = pd.date_range(\"2011-12-31\", periods=3, freq=\"-1D\")\n        expected2 = tm.box_expected(expected2, box_with_array)\n    \n>       tm.assert_equal(ts - tdarr, expected2)\n\npandas/tests/arithmetic/test_timedelta64.py:921: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/indexes/datetimelike.py:558: in __rsub__\n    result = self._data.__rsub__(maybe_unwrap_index(other))\npandas/core/arrays/datetimelike.py:1310: in __rsub__\n    other = DatetimeArray(other)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[TypeError(\"object of type 'NoneType' has no len()\") raised in repr()] DatetimeArray object at 0x1175dddf0>\nvalues = numpy.datetime64('2012-01-01T00:00:00.000000000')\ndtype = dtype('<M8[ns]'), freq = None, copy = False\n\n    def __init__(self, values, dtype=_NS_DTYPE, freq=None, copy=False):\n        if isinstance(values, (ABCSeries, ABCIndexClass)):\n            values = values._values\n    \n        inferred_freq = getattr(values, \"_freq\", None)\n    \n        if isinstance(values, type(self)):\n            # validation\n            dtz = getattr(dtype, \"tz\", None)\n            if dtz and values.tz is None:\n                dtype = DatetimeTZDtype(tz=dtype.tz)\n            elif dtz and values.tz:\n                if not timezones.tz_compare(dtz, values.tz):\n                    msg = (\n                        \"Timezone of the array and 'dtype' do not match. \"\n                        \"'{}' != '{}'\"\n                    )\n                    raise TypeError(msg.format(dtz, values.tz))\n            elif values.tz:\n                dtype = values.dtype\n            # freq = validate_values_freq(values, freq)\n            if freq is None:\n                freq = values.freq\n            values = values._data\n    \n        if not isinstance(values, np.ndarray):\n            msg = (\n                \"Unexpected type '{}'. 'values' must be a DatetimeArray \"\n                \"ndarray, or Series or Index containing one of those.\"\n            )\n>           raise ValueError(msg.format(type(values).__name__))",
            "\npandas/core/arrays/datetimes.py:363: ValueError"
        ],
        [
            "self = <pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps object at 0x11f461a90>\nts = numpy.datetime64('2012-01-01T00:00:00.000000000')\nbox_with_array = <function to_array at 0x111ebedc0>\n\n    @pytest.mark.parametrize(\n        \"ts\",\n        [\n            Timestamp(\"2012-01-01\"),\n            Timestamp(\"2012-01-01\").to_pydatetime(),\n            Timestamp(\"2012-01-01\").to_datetime64(),\n        ],\n    )\n    def test_td64arr_add_sub_datetimelike_scalar(self, ts, box_with_array):\n        # GH#11925, GH#29558\n        tdi = timedelta_range(\"1 day\", periods=3)\n        expected = pd.date_range(\"2012-01-02\", periods=3)\n    \n        tdarr = tm.box_expected(tdi, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n    \n        tm.assert_equal(ts + tdarr, expected)\n        tm.assert_equal(tdarr + ts, expected)\n    \n        expected2 = pd.date_range(\"2011-12-31\", periods=3, freq=\"-1D\")\n        expected2 = tm.box_expected(expected2, box_with_array)\n    \n>       tm.assert_equal(ts - tdarr, expected2)\n\npandas/tests/arithmetic/test_timedelta64.py:921: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/arrays/datetimelike.py:1310: in __rsub__\n    other = DatetimeArray(other)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[TypeError(\"object of type 'NoneType' has no len()\") raised in repr()] DatetimeArray object at 0x11f4612e0>\nvalues = numpy.datetime64('2012-01-01T00:00:00.000000000')\ndtype = dtype('<M8[ns]'), freq = None, copy = False\n\n    def __init__(self, values, dtype=_NS_DTYPE, freq=None, copy=False):\n        if isinstance(values, (ABCSeries, ABCIndexClass)):\n            values = values._values\n    \n        inferred_freq = getattr(values, \"_freq\", None)\n    \n        if isinstance(values, type(self)):\n            # validation\n            dtz = getattr(dtype, \"tz\", None)\n            if dtz and values.tz is None:\n                dtype = DatetimeTZDtype(tz=dtype.tz)\n            elif dtz and values.tz:\n                if not timezones.tz_compare(dtz, values.tz):\n                    msg = (\n                        \"Timezone of the array and 'dtype' do not match. \"\n                        \"'{}' != '{}'\"\n                    )\n                    raise TypeError(msg.format(dtz, values.tz))\n            elif values.tz:\n                dtype = values.dtype\n            # freq = validate_values_freq(values, freq)\n            if freq is None:\n                freq = values.freq\n            values = values._data\n    \n        if not isinstance(values, np.ndarray):\n            msg = (\n                \"Unexpected type '{}'. 'values' must be a DatetimeArray \"\n                \"ndarray, or Series or Index containing one of those.\"\n            )\n>           raise ValueError(msg.format(type(values).__name__))",
            "\npandas/core/arrays/datetimes.py:363: ValueError"
        ]
    ],
    "2.1.3": [
        [
            {
                "other": "Timestamp('2012-01-01 00:00:00')",
                "self.dtype": "dtype('<m8[ns]')",
                "self": "<TimedeltaArray>\n['1 days', '2 days', '3 days']\nLength: 3, dtype: timedelta64[ns]"
            },
            {}
        ],
        [
            {
                "other": "datetime.datetime(2012, 1, 1, 0, 0)",
                "self.dtype": "dtype('<m8[ns]')",
                "self": "<TimedeltaArray>\n['1 days', '2 days', '3 days']\nLength: 3, dtype: timedelta64[ns]"
            },
            {}
        ],
        [
            {
                "other": "Timestamp('2012-01-01 00:00:00')",
                "self.dtype": "dtype('<m8[ns]')",
                "self": "<TimedeltaArray>\n['1 days']\nLength: 1, dtype: timedelta64[ns]"
            },
            {}
        ],
        [
            {
                "other": "Timestamp('2012-01-01 00:00:00')",
                "self.dtype": "dtype('<m8[ns]')",
                "self": "<TimedeltaArray>\n['2 days']\nLength: 1, dtype: timedelta64[ns]"
            },
            {}
        ],
        [
            {
                "other": "Timestamp('2012-01-01 00:00:00')",
                "self.dtype": "dtype('<m8[ns]')",
                "self": "<TimedeltaArray>\n['3 days']\nLength: 1, dtype: timedelta64[ns]"
            },
            {}
        ],
        [
            {
                "other": "datetime.datetime(2012, 1, 1, 0, 0)",
                "self.dtype": "dtype('<m8[ns]')",
                "self": "<TimedeltaArray>\n['1 days']\nLength: 1, dtype: timedelta64[ns]"
            },
            {}
        ],
        [
            {
                "other": "datetime.datetime(2012, 1, 1, 0, 0)",
                "self.dtype": "dtype('<m8[ns]')",
                "self": "<TimedeltaArray>\n['2 days']\nLength: 1, dtype: timedelta64[ns]"
            },
            {}
        ],
        [
            {
                "other": "datetime.datetime(2012, 1, 1, 0, 0)",
                "self.dtype": "dtype('<m8[ns]')",
                "self": "<TimedeltaArray>\n['3 days']\nLength: 1, dtype: timedelta64[ns]"
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "other": "Timestamp",
                "self.dtype": "dtype",
                "self": "TimedeltaArray"
            },
            {}
        ],
        [
            {
                "other": "datetime",
                "self.dtype": "dtype",
                "self": "TimedeltaArray"
            },
            {}
        ],
        [
            {
                "other": "Timestamp",
                "self.dtype": "dtype",
                "self": "TimedeltaArray"
            },
            {}
        ],
        [
            {
                "other": "Timestamp",
                "self.dtype": "dtype",
                "self": "TimedeltaArray"
            },
            {}
        ],
        [
            {
                "other": "Timestamp",
                "self.dtype": "dtype",
                "self": "TimedeltaArray"
            },
            {}
        ],
        [
            {
                "other": "datetime",
                "self.dtype": "dtype",
                "self": "TimedeltaArray"
            },
            {}
        ],
        [
            {
                "other": "datetime",
                "self.dtype": "dtype",
                "self": "TimedeltaArray"
            },
            {}
        ],
        [
            {
                "other": "datetime",
                "self.dtype": "dtype",
                "self": "TimedeltaArray"
            },
            {}
        ]
    ],
    "2.1.5": [
        [
            {
                "other": "Timestamp('2012-01-01 00:00:00')",
                "self.dtype": "dtype('<m8[ns]')",
                "self": "<TimedeltaArray>\n['1 days', '2 days', '3 days']\nLength: 3, dtype: timedelta64[ns]"
            },
            {}
        ],
        [
            {
                "other": "datetime.datetime(2012, 1, 1, 0, 0)",
                "self.dtype": "dtype('<m8[ns]')",
                "self": "<TimedeltaArray>\n['1 days', '2 days', '3 days']\nLength: 3, dtype: timedelta64[ns]"
            },
            {}
        ],
        [
            {
                "other": "numpy.datetime64('2012-01-01T00:00:00.000000000')",
                "self.dtype": "dtype('<m8[ns]')",
                "self": "<TimedeltaArray>\n['1 days', '2 days', '3 days']\nLength: 3, dtype: timedelta64[ns]",
                "other.dtype": "dtype('<M8[ns]')"
            },
            {}
        ],
        [
            {
                "other": "Timestamp('2012-01-01 00:00:00')",
                "self.dtype": "dtype('<m8[ns]')",
                "self": "<TimedeltaArray>\n['1 days']\nLength: 1, dtype: timedelta64[ns]"
            },
            {}
        ],
        [
            {
                "other": "Timestamp('2012-01-01 00:00:00')",
                "self.dtype": "dtype('<m8[ns]')",
                "self": "<TimedeltaArray>\n['2 days']\nLength: 1, dtype: timedelta64[ns]"
            },
            {}
        ],
        [
            {
                "other": "Timestamp('2012-01-01 00:00:00')",
                "self.dtype": "dtype('<m8[ns]')",
                "self": "<TimedeltaArray>\n['3 days']\nLength: 1, dtype: timedelta64[ns]"
            },
            {}
        ],
        [
            {
                "other": "datetime.datetime(2012, 1, 1, 0, 0)",
                "self.dtype": "dtype('<m8[ns]')",
                "self": "<TimedeltaArray>\n['1 days']\nLength: 1, dtype: timedelta64[ns]"
            },
            {}
        ],
        [
            {
                "other": "datetime.datetime(2012, 1, 1, 0, 0)",
                "self.dtype": "dtype('<m8[ns]')",
                "self": "<TimedeltaArray>\n['2 days']\nLength: 1, dtype: timedelta64[ns]"
            },
            {}
        ],
        [
            {
                "other": "datetime.datetime(2012, 1, 1, 0, 0)",
                "self.dtype": "dtype('<m8[ns]')",
                "self": "<TimedeltaArray>\n['3 days']\nLength: 1, dtype: timedelta64[ns]"
            },
            {}
        ]
    ],
    "2.1.6": [
        [
            {
                "other": "Timestamp",
                "self.dtype": "dtype",
                "self": "TimedeltaArray"
            },
            {}
        ],
        [
            {
                "other": "datetime",
                "self.dtype": "dtype",
                "self": "TimedeltaArray"
            },
            {}
        ],
        [
            {
                "other": "datetime64",
                "self.dtype": "dtype",
                "self": "TimedeltaArray",
                "other.dtype": "dtype"
            },
            {}
        ],
        [
            {
                "other": "Timestamp",
                "self.dtype": "dtype",
                "self": "TimedeltaArray"
            },
            {}
        ],
        [
            {
                "other": "Timestamp",
                "self.dtype": "dtype",
                "self": "TimedeltaArray"
            },
            {}
        ],
        [
            {
                "other": "Timestamp",
                "self.dtype": "dtype",
                "self": "TimedeltaArray"
            },
            {}
        ],
        [
            {
                "other": "datetime",
                "self.dtype": "dtype",
                "self": "TimedeltaArray"
            },
            {}
        ],
        [
            {
                "other": "datetime",
                "self.dtype": "dtype",
                "self": "TimedeltaArray"
            },
            {}
        ],
        [
            {
                "other": "datetime",
                "self.dtype": "dtype",
                "self": "TimedeltaArray"
            },
            {}
        ]
    ],
    "3.1.1": [
        "BUG: np.datetime64 - TimedeltaArray\n"
    ],
    "3.1.2": null
}