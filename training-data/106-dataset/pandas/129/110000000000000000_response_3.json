{
    "pandas": [
        {
            "bugID": 129,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1302,
            "file_name": "pandas/core/arrays/datetimelike.py",
            "replace_code": "def __rsub__(self, other):\n    if pandas.api.types.is_datetime64_any_dtype(other) and pandas.api.types.is_timedelta64_dtype(self.dtype):\n        if not isinstance(other, pandas.DatetimeLikeArrayMixin):\n            from pandas.core.arrays import DatetimeArray\n            other = DatetimeArray(other)\n        return other - self\n    elif pandas.api.types.is_datetime64_any_dtype(self.dtype) and hasattr(other, \"dtype\") and not pandas.api.types.is_datetime64_any_dtype(other.dtype):\n        raise TypeError(\n            \"cannot subtract {cls} from {typ}\".format(\n                cls=type(self).__name__, typ=type(other).__name__\n            )\n        )\n    elif pandas.api.types.is_period_dtype(self.dtype) and pandas.api.types.is_timedelta64_dtype(other):\n        raise TypeError(\n            \"cannot subtract {cls} from {dtype}\".format(\n                cls=type(self).__name__, dtype=other.dtype\n            )\n        )\n    elif pandas.api.types.is_timedelta64_dtype(self.dtype):\n        if pandas.api.types.is_integer(other) or pandas.api.types.is_integer_dtype(other):\n            return -(self - other)\n        return (-self) + other\n    \n    return -(self - other)",
            "import_list": [
                "from pandas.core.arrays import DatetimeArray"
            ]
        }
    ]
}