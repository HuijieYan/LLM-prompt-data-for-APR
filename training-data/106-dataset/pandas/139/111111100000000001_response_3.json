{
    "pandas": [
        {
            "bugID": 139,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 246,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def __init__(\n        self,\n        index,\n        grouper=None,\n        obj=None,\n        name=None,\n        level=None,\n        sort=True,\n        observed=False,\n        in_axis=False,\n    ):\n    \n        self.name = name\n        self.level = level\n        self.index = index\n        self.sort = sort\n        self.obj = obj\n        self.observed = observed\n        self.in_axis = in_axis\n        \n        if isinstance(grouper, (Series, Index)) and name is None:\n            self.name = grouper.name\n        \n        if isinstance(grouper, MultiIndex):\n            self.grouper = grouper.values\n        else:\n            self.grouper = grouper\n        \n        # Handle the grouper based on its type\n        if isinstance(self.grouper, Grouper):\n            _, grouper, _ = self.grouper._get_grouper(self.obj, validate=False)\n            if self.name is None:\n                self.name = grouper.result_index.name\n            self.obj = self.grouper.obj\n            self.grouper = grouper._get_grouper()\n        elif isinstance(self.grouper, (list, tuple)):\n            self.grouper = com.asarray_tuplesafe(self.grouper)\n        elif is_categorical_dtype(self.grouper):\n            self.grouper, self.all_grouper = recode_for_groupby(\n                self.grouper, self.sort, self.observed\n            )\n            categories = self.grouper.categories\n            self._labels = self.grouper.codes\n            if observed:\n                codes = algorithms.unique1d(self.grouper.codes)\n                codes = codes[codes != -1]\n                if sort or self.grouper.ordered:\n                    codes = np.sort(codes)\n            else:\n                codes = np.arange(len(categories))\n            self._group_index = CategoricalIndex(\n                Categorical.from_codes(\n                    codes=codes, categories=categories, ordered=self.grouper.ordered\n                )\n            )\n        elif isinstance(self.grouper, Grouping):\n            self.grouper = self.grouper.grouper\n        elif not isinstance(\n            self.grouper, (Series, Index, ExtensionArray, np.ndarray)\n        ):\n            if getattr(self.grouper, \"ndim\", 1) != 1:\n                t = self.name or str(type(self.grouper))\n                raise ValueError(\"Grouper for '{}' not 1-dimensional\".format(t))\n            self.grouper = self.index.map(self.grouper)\n            if not (\n                hasattr(self.grouper, \"__len__\")\n                and len(self.grouper) == len(self.index)\n            ):\n                errmsg = (\n                    \"Grouper result violates len(labels) == \"\n                    \"len(data)\\nresult: %s\" % pprint_thing(self.grouper)\n                )\n                self.grouper = None  # Try for sanity\n                raise AssertionError(errmsg)\n        # Convert and handle datetime-like grouper\n        if getattr(self.grouper, \"dtype\", None) is not None:\n            if is_datetime64_dtype(self.grouper):\n                self.grouper = self.grouper.astype(\"datetime64[ns]\")\n            elif is_timedelta64_dtype(self.grouper):\n                self.grouper = self.grouper.astype(\"timedelta64[ns]\")",
            "import_list": []
        }
    ]
}