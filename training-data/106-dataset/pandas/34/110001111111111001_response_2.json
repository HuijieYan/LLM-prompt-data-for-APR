{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    first, last = _get_timestamp_range_edges(\n        ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base\n    )\n\n    ax_values = ax.asi8\n    binner, bin_edges = self._adjust_bin_edges(ax, ax_values)\n\n    n = len(bin_edges)\n    \n    if self.closed == \"right\":\n        bins = ax.searchsorted(bin_edges, side=self.closed)\n        labels = ax.take(bins - 1)\n    else:\n        bins = ax.searchsorted(bin_edges, side=self.closed)\n        labels = ax.take(bins)\n        labels, binner = labels[1:], binner[1:]\n\n    binner = binner.insert(0, NaT)\n    labels = labels.insert(0, NaT)\n\n    if len(bins) < len(labels):\n        labels = labels[:len(bins)]\n    elif len(bins) > n and n > 0:\n        edges = np.empty(len(ax), dtype=np.int_)\n        edges[:n - 1] = bins[:n - 1]\n        edges[n - 1] = len(ax)\n\n        closed = getattr(self, \"closed\", None)\n\n        i, j = 0, 0\n        while i < n and j < len(edges):\n            if j == edges[i]:\n                j += 1\n                if i < n - 1:\n                    i += 1\n            elif i == j or closed == \"right\":\n                labels[j] = binner[i]\n                j += 1\n            else:\n                i += 1\n\n    return binner, bins, labels",
            "import_list": [
                "from pandas import DatetimeIndex, NaT, Timedelta"
            ]
        }
    ]
}