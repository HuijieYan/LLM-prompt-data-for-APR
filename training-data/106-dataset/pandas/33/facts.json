{
    "1.1.1": "def _values_for_argsort(self) -> np.ndarray:\n    \n    data = self._data.copy()\n    data[self._mask] = data.min() - 1\n    return data\n",
    "1.1.2": "Return values for sorting.\n\nReturns\n-------\nndarray\n    The transformed values should maintain the ordering between values\n    within the array.\n\nSee Also\n--------\nExtensionArray.argsort",
    "1.2.1": "class IntegerArray(BaseMaskedArray)",
    "1.2.2": "Array of integer (optional missing) values.\n\n.. versionadded:: 0.24.0\n\n.. versionchanged:: 1.0.0\n\n   Now uses :attr:`pandas.NA` as the missing value rather\n   than :attr:`numpy.nan`.\n\n.. warning::\n\n   IntegerArray is currently experimental, and its API or internal\n   implementation may change without warning.\n\nWe represent an IntegerArray with 2 numpy arrays:\n\n- data: contains a numpy integer array of the appropriate dtype\n- mask: a boolean array holding a mask on the data, True is missing\n\nTo construct an IntegerArray from generic array-like input, use\n:func:`pandas.array` with one of the integer dtypes (see examples).\n\nSee :ref:`integer_na` for more.\n\nParameters\n----------\nvalues : numpy.ndarray\n    A 1-d integer-dtype array.\nmask : numpy.ndarray\n    A 1-d boolean-dtype array indicating missing values.\ncopy : bool, default False\n    Whether to copy the `values` and `mask`.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nReturns\n-------\nIntegerArray\n\nExamples\n--------\nCreate an IntegerArray with :func:`pandas.array`.\n\n>>> int_array = pd.array([1, None, 3], dtype=pd.Int32Dtype())\n>>> int_array\n<IntegerArray>\n[1, <NA>, 3]\nLength: 3, dtype: Int32\n\nString aliases for the dtypes are also available. They are capitalized.\n\n>>> pd.array([1, None, 3], dtype='Int32')\n<IntegerArray>\n[1, <NA>, 3]\nLength: 3, dtype: Int32\n\n>>> pd.array([1, None, 3], dtype='UInt16')\n<IntegerArray>\n[1, <NA>, 3]\nLength: 3, dtype: UInt16",
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/arrays/integer.py",
    "1.3.2": null,
    "1.4.1": [
        "def test_value_counts_empty():\n    # https://github.com/pandas-dev/pandas/issues/33317\n    s = pd.Series([], dtype=\"Int64\")\n    result = s.value_counts()\n    # TODO: The dtype of the index seems wrong (it's int64 for non-empty)\n    idx = pd.Index([], dtype=\"object\")\n    expected = pd.Series([], index=idx, dtype=\"Int64\")\n    tm.assert_series_equal(result, expected)"
    ],
    "1.4.2": [
        "pandas/tests/arrays/integer/test_function.py"
    ],
    "2.1.1": [
        [
            "E       ValueError: zero-size array to reduction operation minimum which has no identity"
        ]
    ],
    "2.1.2": [
        [
            "def test_value_counts_empty():\n        # https://github.com/pandas-dev/pandas/issues/33317\n        s = pd.Series([], dtype=\"Int64\")\n>       result = s.value_counts()\n\npandas/tests/arrays/integer/test_function.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/base.py:1248: in value_counts\n    result = value_counts(\npandas/core/algorithms.py:724: in value_counts\n    result = result.sort_values(ascending=ascending)\npandas/core/series.py:2963: in sort_values\n    argsorted = _try_kind_sort(arr[good])\npandas/core/series.py:2949: in _try_kind_sort\n    return arr.argsort(kind=kind)\npandas/core/arrays/base.py:507: in argsort\n    result = nargsort(self, kind=kind, ascending=ascending, na_position=\"last\")\npandas/core/sorting.py:263: in nargsort\n    items = items._values_for_argsort()\npandas/core/arrays/integer.py:502: in _values_for_argsort\n    data[self._mask] = data.min() - 1\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = array([], dtype=int64), axis = None, out = None, keepdims = False\ninitial = <no value>, where = True\n\n    def _amin(a, axis=None, out=None, keepdims=False,\n              initial=_NoValue, where=True):\n>       return umr_minimum(a, axis, None, out, keepdims, initial, where)",
            "\n../../envs/pandas_33/lib/python3.8/site-packages/numpy/core/_methods.py:34: ValueError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "self._data": "array([], dtype=int64)",
                "self": "<IntegerArray>\n[]\nLength: 0, dtype: Int64",
                "self._mask": "array([], dtype=bool)"
            },
            {
                "data": "array([], dtype=int64)"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self._data": "ndarray",
                "self": "IntegerArray",
                "self._mask": "ndarray"
            },
            {
                "data": "ndarray"
            }
        ]
    ],
    "3.1.1": [
        "BUG: value_counts Int64 zero-size array to reduction\n"
    ],
    "3.1.2": [
        " I have checked that this issue has not already been reported.\n\n I have confirmed this bug exists on the latest version of pandas.\n\n (optional) I have confirmed this bug exists on the master branch of pandas.\n\npd.Series([], dtype='int64').value_counts()  # Series([], dtype: int64)\npd.Series([], dtype='Int64').value_counts()  # ValueError: zero-size array to reduction ...\nProblem description\nFound this while using Int64 types in dask. Error occurred in _meta.value_counts()\n\nExpected Output\nError not to occur.\n"
    ]
}