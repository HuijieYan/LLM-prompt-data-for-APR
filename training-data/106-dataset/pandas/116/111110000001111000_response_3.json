{
    "pandas": [
        {
            "bugID": 116,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 924,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n\n    left_keys = []\n    right_keys = []\n    join_names = []\n    right_drop = []\n    left_drop = []\n    \n    left, right = self.left, self.right\n    \n    if not self.left_on and not self.right_on:\n        left_keys = left.index.values\n        right_keys = right.index.values\n        join_names = [None] * len(left_keys)\n    elif self.left_on and self.right_on:\n        for lk, rk in zip(self.left_on, self.right_on):\n            if lk:\n                left_keys.append(left._get_label_or_level_values(lk))\n                join_names.append(lk)\n                if rk:\n                    right_keys.append(right._get_label_or_level_values(rk))\n                else:\n                    right_keys.append(right.index)\n            else:\n                right_keys.append(right._get_label_or_level_values(rk))\n                join_names.append(rk)\n                left_keys.append(left.index)\n    elif self.left_on:\n        for k in self.left_on:\n            left_keys.append(left._get_label_or_level_values(k))\n            join_names.append(k)\n            if isinstance(self.right.index, pd.MultiIndex):\n                right_keys = [\n                    lev._values.take(lev_codes)\n                    for lev, lev_codes in zip(\n                        self.right.index.levels, self.right.index.codes\n                    )\n                ]\n            else:\n                right_keys = [self.right.index.values]\n    elif self.right_on:\n        for k in self.right_on:\n            right_keys.append(right._get_label_or_level_values(k))\n            join_names.append(k)\n            if isinstance(self.left.index, pd.MultiIndex):\n                left_keys = [\n                    lev._values.take(lev_codes)\n                    for lev, lev_codes in zip(\n                        self.left.index.levels, self.left.index.codes\n                    )\n                ]\n            else:\n                left_keys = [self.left.index.values]\n    \n    return left_keys, right_keys, join_names"
        }
    ]
}