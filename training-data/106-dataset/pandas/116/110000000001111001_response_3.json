{
    "pandas": [
        {
            "bugID": 116,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 924,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n    left_keys = []\n    right_keys = []\n    join_names = []\n\n    left, right = self.left, self.right\n\n    for i in range(len(self.left_on)):\n        if is_array_like(self.left_on[i]):\n            left_keys.append(self.left_on[i])\n            if is_array_like(self.right_on[i]):\n                right_keys.append(self.right_on[i])\n                join_names.append(None)  # what to do?\n            else:\n                if self.right_on[i] is not None:\n                    right_keys.append(right[self.right_on[i]])\n                    join_names.append(self.right_on[i])\n                else:\n                    right_keys.append(right.index)\n                    join_names.append(right.index.name)\n        else:\n            if not is_array_like(self.right_on[i]):\n                if self.right_on[i] is not None:\n                    right_keys.append(right[self.right_on[i]])\n                else:\n                    right_keys.append(right.index)\n                if self.left_on[i] is not None and self.left_on[i] == self.right_on[i]:\n                    if len(left) > 0:\n                        right_drop.append(self.right_on[i])\n                    else:\n                        left_drop.append(self.left_on[i])\n            else:\n                right_keys.append(self.right_on[i])\n            if self.left_on[i] is not None:\n                left_keys.append(left[self.left_on[i]])\n                join_names.append(self.left_on[i])\n            else:\n                left_keys.append(left.index)\n                join_names.append(left.index.name)\n\n    if left_drop:\n        self.left = self.left.drop(left_drop)\n\n    if right_drop:\n        self.right = self.right.drop(right_drop)\n\n    return left_keys, right_keys, join_names",
            "imports": []
        }
    ]
}