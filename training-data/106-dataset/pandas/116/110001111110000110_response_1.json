{
    "pandas": [
        {
            "bugID": 116,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 924,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self, left, right, on):\n    left_keys = []\n    right_keys = []\n    join_names = []\n    right_drop = []\n    left_drop = []\n    self.left = left\n    self.right = right\n   \n    is_lkey = lambda x: is_array_like(x) and len(x) == len(left)\n    is_rkey = lambda x: is_array_like(x) and len(x) == len(right)\n    \n    # fxing the condition to check if any of the provided values is True or False\n    if _any(left) and _any(right):\n        for lk, rk in zip(left, right):\n          if is_lkey(lk):\n              left_keys.append(lk)\n              if is_rkey(rk):\n                  right_keys.append(rk)\n                  join_names.append(None)  # what to do?\n              else:\n                  if rk is not None:\n                      right_keys.append(right._get_label_or_level_values(rk))\n                      join_names.append(rk)\n                  else:\n                      # work-around for merge_asof(right_index=True)\n                      right_keys.append(right.index)\n                      join_names.append(right.index.name)\n          else:\n              if not is_rkey(rk):\n                  if rk is not None:\n                      right_keys.append(right._get_label_or_level_values(rk))\n                  else:\n                      # work-around for merge_asof(right_index=True)\n                      right_keys.append(right.index)\n                  if lk is not None and lk == rk:\n                      # avoid key upcast in corner case (length-0)\n                      if len(left) > 0:\n                          right_drop.append(rk)\n                      else:\n                          left_drop.append(lk)\n              else:\n                  right_keys.append(rk)\n              if lk is not None:\n                  left_keys.append(left._get_label_or_level_values(lk))\n                  join_names.append(lk)\n              else:\n                  # work-around for merge_asof(left_index=True)\n                  left_keys.append(left.index)\n                  join_names.append(left.index.name)\n    elif _any(left):\n        for k in left:\n            if is_lkey(k):\n                left_keys.append(k)\n                join_names.append(None)\n            else:\n                left_keys.append(left._get_label_or_level_values(k))\n                join_names.append(k)\n        if isinstance(right.index, MultiIndex):\n            right_keys = [\n                lev._values.take(lev_codes)\n                for lev, lev_codes in zip(\n                    right.index.levels, right.index.codes\n                )\n            ]\n        else:\n            right_keys = [right.index._values]\n    elif _any(right):\n        for k in right:\n            if is_rkey(k):\n                right_keys.append(k)\n                join_names.append(None)\n            else:\n                right_keys.append(right._get_label_or_level_values(k))\n                join_names.append(k)\n        if isinstance(left.index, MultiIndex):\n            left_keys = [\n                lev._values.take(lev_codes)\n                for lev, lev_codes in zip(\n                    left.index.levels, left.index.codes\n                )\n            ]\n        else:\n            left_keys = [left.index.values]\n\n    if left_drop:\n        left = left._drop_labels_or_levels(left_drop)\n\n    if right_drop:\n        right = right._drop_labels_or_levels(right_drop)\n\n    return left_keys, right_keys, join_names",
            "import_list": []
        }
    ]
}