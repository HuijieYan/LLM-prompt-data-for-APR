{
    "pandas": [
        {
            "bugID": 116,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 924,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n\n    \"\"\"\n    Note: has side effects (copy/delete key columns)\n    \n    Parameters\n    ----------\n    left\n    right\n    on\n    \n    Returns\n    -------\n    left_keys, right_keys, join_names\n    \"\"\"\n    left_keys = []\n    right_keys = []\n    join_names = []\n    \n    left, right = self.left, self.right\n    \n    is_lkey = lambda x: x is not None and len(x) == len(left)\n    is_rkey = lambda x: x is not None and len(x) == len(right)\n    \n    if any(self.left_on) and any(self.right_on):\n        for lk, rk in zip(self.left_on, self.right_on):\n            if is_lkey(lk):\n                left_keys.append(lk)\n                if is_rkey(rk):\n                    right_keys.append(rk)\n                    join_names.append(None)\n                else:\n                    if rk is not None:\n                        right_keys.append(right._get_label_or_level_values(rk))\n                        join_names.append(rk)\n                    else:\n                        right_keys.append(pd.DatetimeIndex(right.index)._data)\n                        join_names.append(right.index.name)\n            else:\n                if rk is not None and rk == lk:\n                    left_keys.append(left._get_label_or_level_values(lk))\n                    join_names.append(lk)\n                else:\n                    right_keys.append(right._get_label_or_level_values(rk))\n                    join_names.append(rk)\n    \n    elif any(self.left_on):\n        left_keys = [x if is_lkey(x) else left._get_label_or_level_values(x) for x in self.left_on]\n        right_keys = [pd.DatetimeIndex(right.index)._data] * len(left_keys)\n        join_names = [None] * len(left_keys)\n    \n    elif any(self.right_on):\n        right_keys = [x if is_rkey(x) else right._get_label_or_level_values(x) for x in self.right_on]\n        left_keys = [pd.DatetimeIndex(left.index)._data] * len(right_keys)\n        join_names = [None] * len(right_keys)\n    \n    return left_keys, right_keys, join_names"
        }
    ]
}