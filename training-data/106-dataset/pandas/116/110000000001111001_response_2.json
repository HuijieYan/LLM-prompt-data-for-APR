{
    "pandas": [
        {
            "bugID": 116,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 924,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n\n    left_keys = []\n    right_keys = []\n    join_names = []\n    \n    if len(self.left_on) > 0:\n        for lk in self.left_on:\n            left_keys.append(self.left[lk].values)\n            join_names.append(lk)\n    else:\n        left_keys.append(self.left.index.values)\n        join_names.append(self.left.index.name)\n    \n    if len(self.right_on) > 0:\n        for rk in self.right_on:\n            right_keys.append(self.right[rk].values)\n            join_names.append(rk)\n    else:\n        right_keys.append(self.right.index.values)\n        join_names.append(self.right.index.name)\n    \n    right_keys, left_keys, join_names = (\n        np.array(right_keys),\n        np.array(left_keys),\n        np.array(join_names),\n    )\n    \n    return left_keys, right_keys, join_names"
        }
    ]
}