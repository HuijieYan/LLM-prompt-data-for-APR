{
    "pandas": [
        {
            "bugID": 116,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 924,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n\n    left_keys = []\n    right_keys = []\n    join_names = []\n    right_drop = []\n    left_drop = []\n    \n    left, right = self.left, self.right\n    \n    for lk, rk in zip(self.left_on, self.right_on):\n        if pd.api.types.is_list_like(lk) and len(lk) == len(left):\n            left_keys.append(lk)\n            if pd.api.types.is_list_like(rk) and len(rk) == len(right):\n                right_keys.append(rk)\n                join_names.append(None)  # what to do?\n            else:\n                if rk is not None:\n                    right_keys.append(right._get_label_or_level_values(rk))\n                    join_names.append(rk)\n                else:\n                    # work-around for merge_asof(right_index=True)\n                    right_keys.append(right.index)\n                    join_names.append(right.index.name)\n        else:\n            if rk is not None:\n                right_keys.append(right._get_label_or_level_values(rk))\n                join_names.append(rk)\n            else:\n                # work-around for merge_asof(right_index=True)\n                right_keys.append(right.index)\n                join_names.append(right.index.name)\n            if lk is not None and lk == rk:\n                # avoid key upcast in corner case (length-0)\n                if len(left) > 0:\n                    right_drop.append(rk)\n                else:\n                    left_drop.append(lk)\n            else:\n                right_keys.append(rk)\n            if lk is not None:\n                left_keys.append(left._get_label_or_level_values(lk))\n                join_names.append(lk)\n            else:\n                # work-around for merge_asof(left_index=True)\n                left_keys.append(left.index)\n                join_names.append(left.index.name)\n    \n    if left_drop:\n        self.left = self.left.drop(left_drop, axis=1)\n    \n    if right_drop:\n        self.right = self.right.drop(right_drop, axis=1)\n    \n    return left_keys, right_keys, join_names"
        }
    ]
}