{
    "pandas": [
        {
            "bugID": 116,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 924,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n    \"\"\"\n    Note: has side effects (copy/delete key columns)\n\n    Parameters\n    ----------\n    left\n    right\n    on\n\n    Returns\n    -------\n    left_keys, right_keys, join_names\n    \"\"\"\n    left_keys = []\n    right_keys = []\n    join_names = []\n    right_drop = []\n    left_drop = []\n\n    left, right = self.left, self.right\n\n    from pandas.api.types import is_array_like\n\n    is_lkey = lambda x: (is_array_like(x) and len(x) == len(left))\n    is_rkey = lambda x: (is_array_like(x) and len(x) == len(right))\n\n    self.left_okey = self.left._on\n    self.right_okey = self.right._on\n\n    if self.left_index and self.right_on:\n        common = self.left_index.intersection(self.right.index)\n        is_lkey = common.get_indexer(self.left_index) != -1\n        is_rkey = common.get_indexer(self.right_index) != -1\n\n        left_keys = self.left.reindex(common)._mgr.tz_convert(self.left.index.tz)\n        join_names = [self.left.index.name]\n        right_keys = self.right.reindex(common)._mgr\n    elif self.left_index:\n        left_keys = self.left_index\n        right_keys = self.right._get_label_or_level_values(self.right_on)\n        join_names = self.right_on\n    elif self.right_index:\n        left_keys = self.left._get_label_or_level_values(self.left_on)\n        right_keys = self.right_index\n        join_names = self.left_on\n    elif self.left_on and self.right_on:\n        left_keys = self.right_keys = [\n            self.left._get_label_or_level_values(on) for on in self.left_on\n        ]\n        right_key = [\n            self.right._get_label_or_level_values(on) for on in self.right_on\n        ]\n        join_names = self.left_on\n\n    if left_drop:\n        self.left = self.left._drop_labels_or_levels(left_drop)\n\n    if right_drop:\n        self.right = self.right._drop_labels_or_levels(right_drop)\n\n    return left_keys, right_keys, join_names",
            "imports": [
                "from pandas.api.types import is_array_like"
            ]
        }
    ]
}