{
    "pandas": [
        {
            "bugID": 116,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 924,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n        \"\"\"\n        Note: has side effects (copy/delete key columns)\n\n        Parameters\n        ----------\n        left\n        right\n        on\n\n        Returns\n        -------\n        left_keys, right_keys, join_names\n        \"\"\"\n        left_keys = []\n        right_keys = []\n        join_names = []\n        right_drop = []\n        left_drop = []\n\n        left, right = self.left, self.right\n\n        is_lkey = lambda x: is_array_like(x) and len(x) == len(left)\n        is_rkey = lambda x: is_array_like(x) and len(x) == len(right)\n\n        # handle the case for left_index=True and right_on=[column(s)]\n        if self.left_index and _any(self.right_on):\n            right_keys = right._get_label_or_level_values(self.right_on[0])\n            left_keys = list(left.index)\n            join_names = [self.right_on[0]] * len(left_keys)\n\n        # handle the case for left_index=False and right_on=[column(s)]\n        if _any(self.left_on) and _any(self.right_on):\n            for lk, rk in zip(self.left_on, self.right_on):\n                if is_lkey(lk):\n                    left_keys.append(lk)\n                    if is_rkey(rk):\n                        right_keys.append(rk)\n                        join_names.append(None)  # what to do?\n                    else:\n                        if rk is not None:\n                            right_keys.append(right._get_label_or_level_values(rk))\n                            join_names.append(rk)\n                        else:\n                            # work-around for merge_asof(right_index=True)\n                            right_keys.append(right.index)\n                            join_names.append(right.index.name)\n                else:\n                    if not is_rkey(rk):\n                        if rk is not None:\n                            right_keys.append(right._get_label_or_level_values(rk))\n                        else:\n                            # work-around for merge_asof(right_index=True)\n                            right_keys.append(right.index)\n                        if lk is not None and lk == rk:\n                            # avoid key upcast in corner case (length-0)\n                            if len(left) > 0:\n                                right_drop.append(rk)\n                            else:\n                                left_drop.append(lk)\n                    else:\n                        right_keys.append(rk)\n                    if lk is not None:\n                        left_keys.append(left._get_label_or_level_values(lk))\n                        join_names.append(lk)\n                    else:\n                        # work-around for merge_asof(left_index=True)\n                        left_keys.append(left.index)\n                        join_names.append(left.index.name)\n\n        if left_drop:\n            self.left = self.left._drop_labels_or_levels(left_drop)\n\n        if right_drop:\n            self.right = self.right._drop_labels_or_levels(right_drop)\n\n        return left_keys, right_keys, join_names",
            "imports": []
        }
    ]
}