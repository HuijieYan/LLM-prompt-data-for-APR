{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ) -> \"Tuple[List[Block], Index]\":\n        # TODO: the actual managing of mgr_locs is a PITA\n        # here, it should happen via BlockManager.combine\n    \n\n    data: BlockManager = self._get_data_to_aggregate()\n    \n    if numeric_only:\n        data = data.select_dtypes(include=np.number, copy=False)\n    \n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    for block in data.blocks:\n        locs = block.mgr_locs.as_array\n        try:\n            result = self.aggregate_series(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            # exclude the block\n            assert how == \"ohlc\"\n            deleted_items.append(locs)\n            continue\n    \n        if alt is not None:\n            agg_block = self._block_agg_block(\n                block, alt, axis=self.axis, mgr_locs=locs\n            )\n        else:\n            agg_block = block.make_block(result, placement=locs)\n    \n        new_items.append(locs)\n        agg_blocks.append(agg_block)\n    \n    if not agg_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n    \n    if deleted_items:\n        new_items = np.concatenate(new_items)\n        deleted_items = np.concatenate(deleted_items)\n        indexer = self._reindex_indexer(new_items, deleted_items)\n        agg_blocks, new_items = self._reindex_blocks(agg_blocks, new_items, indexer)\n    \n    return agg_blocks, new_items"
        }
    ]
}