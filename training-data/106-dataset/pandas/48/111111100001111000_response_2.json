{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n\n    no_result = object()\n    for block in data.blocks:\n        result = no_result\n        if block.is_extension:\n            try:\n                result, _ = self.grouper.aggregate(\n                    block.values, how, axis=0, min_count=min_count\n                )\n            except NotImplementedError:\n                if alt is None:\n                    deleted_items = block.items\n                    continue\n                try:\n                    # we may have an exception in trying to aggregate\n                    result = alt(block.values, axis=self.axis)\n                except TypeError:\n                    deleted_items = block.items\n                    continue\n                else:\n                    result = result.arrays[0]\n            finally:\n                if result is not no_result:\n                    result = maybe_downcast_numeric(result, block.dtype)\n                    agg_block: Block = block.make_block(result)\n        elif not isinstance(result, DataFrame) and result is not no_result:\n            agg_block: Block = block.make_block(result)\n\n        new_items.append(block.mgr_locs.as_array)\n        agg_blocks.append(agg_block)\n    if not (agg_blocks): \n        raise DataError(\"No numeric types to aggregate\")\n    \n    indexer = np.hstack(new_items).argsort()\n\n    agg_items = data.items.take(indexer)\n    agg_blocks = [agg_blocks[i] for i in indexer]\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}