{
    "pandas": [
        {
            "bugID": 28,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2273,
            "file_name": "pandas/core/strings.py",
            "replace_code": "def _get_series_list(self, others):\n    from pandas import Series, DataFrame\n    from pandas import Series, DataFrame\n    \n    # If `others` is a Series or Index, return a list containing `others`\n    if isinstance(others, (ABCSeries, ABCIndexClass)):\n        return [others]\n    \n    # If `others` is a DataFrame, return a list of its columns\n    elif isinstance(others, ABCDataFrame):\n        return [others[col] for col in others]\n    \n    # If `others` is a 2D ndarray, create a DataFrame and return a list of its columns\n    elif isinstance(others, np.ndarray) and others.ndim == 2:\n        df = DataFrame(others, index=self._orig.index)\n        return [df[col] for col in df]\n    \n    # If `others` is list-like and its elements are Series/Index/np.ndarray (1-dim), or just strings, \n    # then return a list of Series\n    elif is_list_like(others, allow_sets=False):\n        return [Series(others, index=self._orig.index)]\n    \n    # If none of the above conditions are met, raise a TypeError\n    else:\n        raise TypeError(\"others must be Series, Index, DataFrame, np.ndarray, or list-like\")"
        }
    ]
}