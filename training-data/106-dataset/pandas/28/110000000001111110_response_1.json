{
    "pandas": [
        {
            "bugID": 28,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 2273,
            "file_name": "pandas/core/strings.py",
            "replace_code": "def _get_series_list(self, others):\n    \"\"\"\n    Auxiliary function for :meth:`str.cat`. Turn potentially mixed input\n    into a list of Series (elements without an index must match the length\n    of the calling Series/Index).\n    \n    Parameters\n    ----------\n    others : Series, DataFrame, np.ndarray, list-like or list-like of\n        Objects that are either Series, Index or np.ndarray (1-dim).\n    \n    Returns\n    -------\n    list of Series\n        Others transformed into list of Series.\n    \"\"\"\n    from pandas import Series, DataFrame\n\n    # self._orig is either Series or Index\n    idx = self._orig if isinstance(self._orig, ABCIndexClass) else self._orig.index\n\n    # Generally speaking, all objects without an index inherit the index\n    # `idx` of the calling Series/Index - i.e. must have matching length.\n    # Objects with an index (i.e. Series/Index/DataFrame) keep their own.\n    if isinstance(others, ABCSeries) or isinstance(others, ABCIndexClass):\n        return [others]\n    elif isinstance(others, ABCDataFrame):\n        return [others[x] for x in others]\n    elif hasattr(others, '__array__'):\n        others_array = others.__array__()\n        if others_array.ndim == 2:\n            others = DataFrame(others_array, index=idx)\n            return [others[x] for x in others]\n        elif others_array.ndim == 1 and len(others_array) == len(idx):\n            return [Series(others_array, index=idx)]\n        else:\n            msg = 'others must be Series, Index, DataFrame, np.ndarrary ' \\\n                  'or list-like (either containing only strings or ' \\\n                  'containing only objects of type Series/Index/' \\\n                  'np.ndarray[1-dim])'\n            raise TypeError(msg)\n    elif is_list_like(others, allow_sets=False):\n        others = list(others)  # ensure iterators do not get read twice etc\n\n        if all(\n            isinstance(x, (ABCSeries, ABCIndexClass, np.ndarray))\n            or (isinstance(x, str) and not is_list_like(x))\n            for x in others\n        ):\n            los = []\n            for x in others:\n                los.extend(self._get_series_list(x))\n            return los\n        else:\n            msg = 'others must be Series, Index, DataFrame, np.ndarrary ' \\\n                  'or list-like (either containing only strings or ' \\\n                  'containing only objects of type Series/Index/' \\\n                  'np.ndarray[1-dim])'\n            raise TypeError(msg)",
            "import_list": [
                "from pandas import Series, DataFrame"
            ]
        }
    ]
}