{
    "pandas": [
        {
            "bugID": 28,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 2273,
            "file_name": "pandas/core/strings.py",
            "replace_code": "def _get_series_list(self, others):\n        \"\"\"\n        Auxiliary function for :meth:`str.cat`. Turn potentially mixed input\n        into a list of Series (elements without an index must match the length\n        of the calling Series/Index).\n    \n        Parameters\n        ----------\n        others : Series, DataFrame, np.ndarray, list-like or list-like of\n            Objects that are either Series, Index or np.ndarray (1-dim).\n    \n        Returns\n        -------\n        list of Series\n            Others transformed into list of Series.\n        \"\"\"\n        from pandas import Series, DataFrame\n    \n        # self._orig is either Series or Index\n        idx = self._orig if isinstance(self._orig, ABCIndexClass) else self._orig.index\n    \n        if not isinstance(others, list):\n            others = [others]\n    \n        new_list = []\n        for item in others:\n            if isinstance(item, (ABCSeries, ABCIndexClass)):\n                new_list.append(Series(item))\n            elif isinstance(item, ABCDataFrame):\n                new_list.extend([item[x] for x in item])\n            elif isinstance(item, np.ndarray) and item.ndim == 2:\n                new_df = DataFrame(item, index=idx)\n                new_list.extend([new_df[x] for x in new_df])\n            elif hasattr(item, '__iter__'):\n                for element in item:\n                    if isinstance(element, (ABCSeries, ABCIndexClass)) or (isinstance(element, np.ndarray) and element.ndim == 1):\n                        new_list.append(Series(element, index=idx))\n                    elif isinstance(element, str):\n                        new_list.append(Series(element, index=idx))\n    \n        return new_list",
            "import_list": [
                "from pandas import Series, DataFrame"
            ]
        }
    ]
}