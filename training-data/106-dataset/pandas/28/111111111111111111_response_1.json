{
    "pandas": [
        {
            "bugID": 28,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 2273,
            "file_name": "pandas/core/strings.py",
            "replace_code": "def _get_series_list(self, others):\n    from pandas import Series, DataFrame\n    from pandas import Series, DataFrame\n    \n    idx = self._orig.index if hasattr(self._orig, 'index') else self._orig\n    \n    if isinstance(others, (ABCSeries, ABCIndexClass)):\n        return [others]\n    elif isinstance(others, ABCDataFrame):\n        return [others[x] for x in others]\n    elif isinstance(others, np.ndarray) and others.ndim == 1:\n        others = DataFrame({0: others}, index=idx)\n        return [others[x] for x in others]\n    elif is_list_like(others, allow_sets=False):\n        # handle the case of Index input by converting it to a list\n        if isinstance(others, ABCIndexClass):\n            others = others.tolist()\n    \n        if all(\n            isinstance(x, (ABCSeries, ABCIndexClass))\n            or (isinstance(x, np.ndarray) and x.ndim == 1)\n            for x in others\n        ):\n            los = []\n            while others:\n                los = los + self._get_series_list(others.pop(0))\n            return los\n        elif all(not is_list_like(x) for x in others):\n            return [Series(others, index=idx)]\n    raise TypeError(\n        \"others must be Series, Index, DataFrame, np.ndarrary \"\n        \"or list-like (either containing only strings or \"\n        \"containing only objects of type Series/Index/\"\n        \"np.ndarray[1-dim])\"\n    )"
        }
    ]
}