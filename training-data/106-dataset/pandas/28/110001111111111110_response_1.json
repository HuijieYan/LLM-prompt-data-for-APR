{
    "pandas": [
        {
            "bugID": 28,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 2273,
            "file_name": "pandas/core/strings.py",
            "replace_code": "def _get_series_list(self, others):\n    \"\"\"\n    Auxiliary function for :meth:`str.cat`. Turn potentially mixed input\n    into a list of Series (elements without an index must match the length\n    of the calling Series/Index).\n\n    Parameters\n    ----------\n    others : Series, DataFrame, np.ndarray, list-like or list-like of\n        Objects that are either Series, Index or np.ndarray (1-dim).\n\n    Returns\n    -------\n    list of Series\n        Others transformed into list of Series.\n    \"\"\"\n    from pandas import Series, DataFrame\n    from pandas.api.types import is_list_like\n\n    idx = self._orig.index if not hasattr(self._orig, 'index') else self._orig\n    \n    if isinstance(others, Series):\n        return [others]\n    elif isinstance(others, (Index, np.ndarray)):\n        if isinstance(others, Index):\n            return [Series(others._values, index=others)]\n        else:  # np.ndarray\n            return [Series(others, index=idx)]\n    elif isinstance(others, DataFrame):\n        return [others[x] for x in others]\n    elif is_list_like(others, allow_sets=False):\n        others = list(others)\n        if all(isinstance(x, (Series, Index)) or (isinstance(x, np.ndarray) and x.ndim == 1) for x in others):\n            los = []\n            while others:\n                los.append(self._get_series_list(others.pop(0)))\n            return los\n        elif all(not is_list_like(x) for x in others):\n            return [Series(others, index=idx)]\n    raise TypeError(\n        \"others must be Series, Index, DataFrame, np.ndarrary \"\n        \" or list-like (either containing only strings or \"\n        \" containing only objects of type Series/Index/\"\n        \" np.ndarray[1-dim])\"\n    )",
            "import_list": [
                "from pandas import Series, DataFrame",
                "from pandas.api.types import is_list_like"
            ]
        }
    ]
}