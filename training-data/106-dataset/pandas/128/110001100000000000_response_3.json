{
    "pandas": [
        {
            "bugID": 128,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 352,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def read_json(\n    path_or_buf=None,\n    orient=None,\n    typ=\"frame\",\n    dtype=None,\n    convert_axes=None,\n    convert_dates=True,\n    keep_default_dates=True,\n    numpy=False,\n    precise_float=False,\n    date_unit=None,\n    encoding=None,\n    lines=False,\n    chunksize=None,\n    compression=\"infer\",\n):\n    \"\"\"\n    Convert a JSON string to pandas object.\n\n    Parameters\n    ----------\n    path_or_buf : str or path object or file-like object, default None\n        Either a path to a file (a valid JSON str path) or a paramiko file type where it is needed to have the data of file in RAM.\n\n    orient : str\n        Indication of expected JSON string format.\n\n    typ : {'frame', 'series'}, default 'frame'\n        The type of object to recover.\n\n    dtype : bool or dict, default None\n        If True, infer dtypes; if a dict of column to dtype, then use those;\n        if False, then don't infer dtypes at all, applies only to the data.\n\n    convert_axes : bool, default None\n        Try to convert the axes to the proper dtypes.\n\n    convert_dates : bool or list of str, default True\n        List of columns to parse for dates. If True, then try to parse\n        datelike columns.\n\n    keep_default_dates : bool, default True\n        If parsing dates, then parse the default datelike columns.\n\n    numpy : bool, default False\n        Direct decoding to numpy arrays.\n\n    precise_float : bool, default False\n        Set to enable usage of higher precision function when decoding to double values.\n\n    date_unit : str or None, default None\n        The timestamp unit to detect if converting dates.\n\n    encoding : str or None, default None\n        The encoding to use to decode bytes.\n\n    lines : bool, default False\n        Read the file as a json object per line.\n\n    chunksize : int, optional\n        Return JsonReader object for iteration.\n\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer'\n        For on-the-fly decompression of on-disk data.\n\n    Returns\n    -------\n    Series or DataFrame\n        The type returned depends on the value of `typ`.\n    \"\"\"",
            "imports": []
        }
    ]
}