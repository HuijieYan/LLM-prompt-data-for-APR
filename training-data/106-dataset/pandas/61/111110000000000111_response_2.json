{
    "pandas": [
        {
            "bugID": 61,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 884,
            "file_name": "pandas/core/series.py",
            "replace_code": "def _get_with(self, key):\n    # Handle slice type key\n\n    if isinstance(key, slice):\n        return self._slice(key)\n    # Handle DataFrame type key\n    elif isinstance(key, pd.DataFrame):\n        raise TypeError(\n            \"Indexing a Series with DataFrame is not supported, use the appropriate DataFrame column\"\n        )\n    # Handle tuple type key\n    elif isinstance(key, tuple):\n        # attempt to get values as a tuple\n        try:\n            return self._get_values_tuple(key)\n        except ValueError:\n            if len(key) == 1:\n                # Handle single element tuple as a key\n                key = key[0]\n                if isinstance(key, slice):\n                    # Handle single element tuple with slice as a key\n                    return self._get_values(key)\n            raise\n    # Handle other types of keys\n    else:\n        # If key is not list, numpy array, Series, or Index, convert to list\n        if not isinstance(key, (list, np.ndarray, pd.Series, pd.Index)):\n            key = list(key)\n        # Handle integer type key\n        if pd.api.types.is_integer_dtype(key):\n            return self.iloc[key]\n        # Handle boolean type key\n        elif pd.api.types.is_bool_dtype(key):\n            return self.loc[key]\n        # Handle other types of keys by reindexing\n        else:\n            return self.reindex(key)"
        }
    ]
}