{
    "1.1.1": "def _get_with(self, key):\n    # other: fancy integer or otherwise\n    if isinstance(key, slice):\n        return self._slice(key)\n    elif isinstance(key, ABCDataFrame):\n        raise TypeError(\n            \"Indexing a Series with DataFrame is not \"\n            \"supported, use the appropriate DataFrame column\"\n        )\n    elif isinstance(key, tuple):\n        try:\n            return self._get_values_tuple(key)\n        except ValueError:\n            # if we don't have a MultiIndex, we may still be able to handle\n            #  a 1-tuple.  see test_1tuple_without_multiindex\n            if len(key) == 1:\n                key = key[0]\n                if isinstance(key, slice):\n                    return self._get_values(key)\n            raise\n\n    if not isinstance(key, (list, np.ndarray, Series, Index)):\n        key = list(key)\n\n    if isinstance(key, Index):\n        key_type = key.inferred_type\n    else:\n        key_type = lib.infer_dtype(key, skipna=False)\n\n    # Note: The key_type == \"boolean\" case should be caught by the\n    #  com.is_bool_indexer check in __getitem__\n    if key_type == \"integer\":\n        if self.index.is_integer() or self.index.is_floating():\n            return self.loc[key]\n        elif isinstance(self.index, IntervalIndex):\n            indexer = self.index.get_indexer_for(key)\n            return self.iloc[indexer]\n        else:\n            return self._get_values(key)\n\n    if isinstance(key, (list, tuple)):\n        # TODO: de-dup with tuple case handled above?\n        # handle the dup indexing case GH#4246\n        if len(key) == 1 and isinstance(key[0], slice):\n            # [slice(0, 5, None)] will break if you convert to ndarray,\n            # e.g. as requested by np.median\n            # FIXME: hack\n            return self._get_values(key)\n\n        return self.loc[key]\n\n    return self.reindex(key)\n",
    "1.1.2": null,
    "1.2.1": "class Series(base.IndexOpsMixin, generic.NDFrame)",
    "1.2.2": "One-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, *, **) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series.\n\n    .. versionchanged:: 0.23.0\n       If data is a dict, argument order is maintained for Python 3.6\n       and later.\n\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If both a dict and index\n    sequence are used, the index will override the keys found in the\n    dict.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : str, optional\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data.",
    "1.2.3": [
        "_slice(self, slobj: slice, axis: int=0, kind: str='getitem') -> 'Series'",
        "_get_values_tuple(self, key)",
        "_get_values(self, indexer)",
        "reindex(self, index=None, **kwargs)"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/series.py",
    "1.3.2": [
        "_slice(self, slobj: slice, axis: int=0, kind: str='getitem') -> 'Series'",
        "_get_values_tuple(self, key)",
        "_get_values(self, indexer)",
        "reindex(self, index=None, **kwargs)"
    ],
    "1.4.1": [
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]",
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]",
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]",
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]",
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]",
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]",
        "    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n\n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n\n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n                idxr[nd3]"
    ],
    "1.4.2": [
        "pandas/tests/indexing/test_indexing.py",
        "pandas/tests/indexing/test_indexing.py",
        "pandas/tests/indexing/test_indexing.py",
        "pandas/tests/indexing/test_indexing.py",
        "pandas/tests/indexing/test_indexing.py",
        "pandas/tests/indexing/test_indexing.py",
        "pandas/tests/indexing/test_indexing.py"
    ],
    "2.1.1": [
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ],
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ],
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ],
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ],
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ],
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ],
        [
            "E               Failed: DID NOT RAISE <class 'ValueError'>"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x111d78e20>\nindex = Index(['9Zp6xZBb7A', '44aj93ZdKn', 'Pj5R4BEAd3', 'a2i5bFe7yo', 'qJuPQEJo2M'], dtype='object')\nobj = 9Zp6xZBb7A    0\n44aj93ZdKn    1\nPj5R4BEAd3    2\na2i5bFe7yo    3\nqJuPQEJo2M    4\ndtype: int64\nidxr = 9Zp6xZBb7A    0\n44aj93ZdKn    1\nPj5R4BEAd3    2\na2i5bFe7yo    3\nqJuPQEJo2M    4\ndtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ],
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x111d2e550>\nindex = Index(['4\u05d1\u05d6\u05e68\u05d0\u05d7\u05e8\u05d0\u05dd', '\u05d1\u05dd\u05da3\u05d6\u05e2\u05db5\u05df\u05e6', '7\u05da\u05e3\u05de\u05dc\u05dc75\u05e96', '\u05d3\u05e2\u05e3\u05e8\u05df\u05da3\u05d087', '\u05d0\u05db5\u05d0\u05d1\u05d8\u05d4\u05db7\u05d0'], dtype='object')\nobj = 4\u05d1\u05d6\u05e68\u05d0\u05d7\u05e8\u05d0\u05dd    0\n\u05d1\u05dd\u05da3\u05d6\u05e2\u05db5\u05df\u05e6    1\n7\u05da\u05e3\u05de\u05dc\u05dc75\u05e96    2\n\u05d3\u05e2\u05e3\u05e8\u05df\u05da3\u05d087    3\n\u05d0\u05db5\u05d0\u05d1\u05d8\u05d4\u05db7\u05d0    4\ndtype: int64\nidxr = 4\u05d1\u05d6\u05e68\u05d0\u05d7\u05e8\u05d0\u05dd    0\n\u05d1\u05dd\u05da3\u05d6\u05e2\u05db5\u05df\u05e6    1\n7\u05da\u05e3\u05de\u05dc\u05dc75\u05e96    2\n\u05d3\u05e2\u05e3\u05e8\u05df\u05da3\u05d087    3\n\u05d0\u05db5\u05d0\u05d1\u05d8\u05d4\u05db7\u05d0    4\ndtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ],
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x111d4ae50>\nindex = DatetimeIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',\n               '2000-01-07'],\n              dtype='datetime64[ns]', freq='B')\nobj = 2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64\nidxr = 2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ],
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x111d34940>\nindex = PeriodIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',\n             '2000-01-07'],\n            dtype='period[B]', freq='B')\nobj = 2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64\nidxr = 2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ],
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x111e04910>\nindex = TimedeltaIndex(['1 days', '2 days', '3 days', '4 days', '5 days'], dtype='timedelta64[ns]', freq='D')\nobj = 1 days    0\n2 days    1\n3 days    2\n4 days    3\n5 days    4\nFreq: D, dtype: int64\nidxr = 1 days    0\n2 days    1\n3 days    2\n4 days    3\n5 days    4\nFreq: D, dtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ],
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x111c347c0>\nindex = Index([False, True, False, False, False], dtype='object')\nobj = False    0\nTrue     1\nFalse    2\nFalse    3\nFalse    4\ndtype: int64\nidxr = False    0\nTrue     1\nFalse    2\nFalse    3\nFalse    4\ndtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ],
        [
            "self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x111d823a0>\nindex = CategoricalIndex(['boP5', 'jTvC', '8Ft3', 'boP5', 'jTvC'], categories=['boP5', 'jTvC', '8Ft3'], ordered=False, dtype='category')\nobj = boP5    0\njTvC    1\n8Ft3    2\nboP5    3\njTvC    4\ndtype: int64\nidxr = boP5    0\njTvC    1\n8Ft3    2\nboP5    3\njTvC    4\ndtype: int64\nidxr_id = 'getitem'\n\n    @pytest.mark.parametrize(\n        \"index\", tm.all_index_generator(5), ids=lambda x: type(x).__name__\n    )\n    @pytest.mark.parametrize(\n        \"obj\",\n        [\n            lambda i: Series(np.arange(len(i)), index=i),\n            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),\n        ],\n        ids=[\"Series\", \"DataFrame\"],\n    )\n    @pytest.mark.parametrize(\n        \"idxr, idxr_id\",\n        [\n            (lambda x: x, \"getitem\"),\n            (lambda x: x.loc, \"loc\"),\n            (lambda x: x.iloc, \"iloc\"),\n        ],\n    )\n    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):\n        # GH 25567\n        obj = obj(index)\n        idxr = idxr(obj)\n        nd3 = np.random.randint(5, size=(2, 2, 2))\n    \n        msg = \"|\".join(\n            [\n                r\"Buffer has wrong number of dimensions \\(expected 1, got 3\\)\",\n                \"Cannot index with multidimensional key\",\n                r\"Wrong number of dimensions. values.ndim != ndim \\[3 != 1\\]\",\n                \"Index data must be 1-dimensional\",\n            ]\n        )\n    \n        with pytest.raises(ValueError, match=msg):\n            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n>               idxr[nd3]",
            "\npandas/tests/indexing/test_indexing.py:94: Failed"
        ]
    ],
    "2.1.3": [
        [
            {
                "key": {
                    "value": "array([[[2, 0],\n        [3, 1]],\n\n       [[0, 3],\n        [1, 2]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "Int64Index([0, 1, 2, 3, 4], dtype='int64')",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x111befea0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x111befea0>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x111befb80>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x111befb80>",
                    "shape": null
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[3, 1],\n        [4, 3]],\n\n       [[4, 0],\n        [3, 0]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "0.161800    0\n0.177273    1\n0.480188    2\n0.535043    3\n0.658641    4\ndtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "Float64Index([0.16180044858050224, 0.17727284953770084,  0.4801878440948171,\n               0.5350434846992048,  0.6586410402783216],\n             dtype='float64')",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x111bef7c0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x111bef7c0>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x111c0a040>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x111c0a040>",
                    "shape": null
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[2, 0],\n        [2, 3]],\n\n       [[1, 2],\n        [0, 0]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "IaQ0HKqLtJ    0\nk51ci7Xdo3    1\nogvXjKMAju    2\n0Xt2Y04eSt    3\nPmffDqO7ks    4\ndtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "Index(['IaQ0HKqLtJ', 'k51ci7Xdo3', 'ogvXjKMAju', '0Xt2Y04eSt', 'PmffDqO7ks'], dtype='object')",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x111c0a9a0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x111c0a9a0>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x111c0a630>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x111c0a630>",
                    "shape": null
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[0, 1],\n        [0, 4]],\n\n       [[4, 0],\n        [4, 0]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "65\u05d4\u05d944\u05e56\u05dc\u05e5    0\n\u05db\u05da\u05d0\u05d0\u05e1\u05d69\u05e8\u05e9\u05da    1\n\u05d1\u05d552\u05d45\u05dc9\u05d4\u05e8    2\n0\u05e8\u05d0\u05d3708\u05e0\u05d1\u05d8    3\n\u05e1\u05d9\u05d29\u05d5\u05d8\u05e8\u05e5\u05d5\u05dc    4\ndtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "Index(['65\u05d4\u05d944\u05e56\u05dc\u05e5', '\u05db\u05da\u05d0\u05d0\u05e1\u05d69\u05e8\u05e9\u05da', '\u05d1\u05d552\u05d45\u05dc9\u05d4\u05e8', '0\u05e8\u05d0\u05d3708\u05e0\u05d1\u05d8', '\u05e1\u05d9\u05d29\u05d5\u05d8\u05e8\u05e5\u05d5\u05dc'], dtype='object')",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x111bd72c0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x111bd72c0>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x111bd7b80>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x111bd7b80>",
                    "shape": null
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[1, 0],\n        [4, 4]],\n\n       [[2, 3],\n        [3, 3]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "DatetimeIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',\n               '2000-01-07'],\n              dtype='datetime64[ns]', freq='B')",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x111b7c8b0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x111b7c8b0>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x111be5d60>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x111be5d60>",
                    "shape": null
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[3, 0],\n        [1, 2]],\n\n       [[4, 3],\n        [4, 4]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "PeriodIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',\n             '2000-01-07'],\n            dtype='period[B]', freq='B')",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x111c0a4a0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x111c0a4a0>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x111b4cc20>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x111b4cc20>",
                    "shape": null
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[4, 4],\n        [1, 4]],\n\n       [[3, 4],\n        [0, 2]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "1 days    0\n2 days    1\n3 days    2\n4 days    3\n5 days    4\nFreq: D, dtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "TimedeltaIndex(['1 days', '2 days', '3 days', '4 days', '5 days'], dtype='timedelta64[ns]', freq='D')",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x1046ca3b0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x1046ca3b0>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x111cafdb0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x111cafdb0>",
                    "shape": null
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[2, 4],\n        [0, 1]],\n\n       [[2, 3],\n        [4, 4]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "False    0\nTrue     1\nFalse    2\nFalse    3\nFalse    4\ndtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "Index([False, True, False, False, False], dtype='object')",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x111d34860>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x111d34860>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x111d34db0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x111d34db0>",
                    "shape": null
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[2, 0],\n        [4, 4]],\n\n       [[2, 0],\n        [0, 4]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=5, step=1)",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x111caf9f0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x111caf9f0>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x111d341d0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x111d341d0>",
                    "shape": null
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[3, 0],\n        [3, 1]],\n\n       [[2, 2],\n        [1, 1]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "Gq5u    0\nX6Vq    1\n1xEV    2\nGq5u    3\nX6Vq    4\ndtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "CategoricalIndex(['Gq5u', 'X6Vq', '1xEV', 'Gq5u', 'X6Vq'], categories=['Gq5u', 'X6Vq', '1xEV'], ordered=False, dtype='category')",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x111bd5810>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x111bd5810>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x111be5860>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x111be5860>",
                    "shape": null
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Int64Index",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Float64Index",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Index",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Index",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "DatetimeIndex",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "PeriodIndex",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "TimedeltaIndex",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Index",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "RangeIndex",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "CategoricalIndex",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "key": {
                    "value": "array([[[1, 1],\n        [2, 0]],\n\n       [[0, 0],\n        [3, 2]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "Int64Index([0, 1, 2, 3, 4], dtype='int64')",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11adccae0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11adccae0>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11adcc400>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11adcc400>",
                    "shape": null
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[4, 4],\n        [3, 3]],\n\n       [[1, 3],\n        [3, 3]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "-4.050512    0\n-2.902769    1\n-1.548741    2\n-0.108974    3\n 3.693743    4\ndtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "Float64Index([  -4.050512490535347,  -2.9027687846531514,  -1.5487409373841265,\n              -0.10897426592160309,   3.6937431392021205],\n             dtype='float64')",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11ae88db0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11ae88db0>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11adccae0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11adccae0>",
                    "shape": null
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[1, 0],\n        [1, 4]],\n\n       [[3, 4],\n        [3, 0]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "OghYOr8VhS    0\nLqJhf193ed    1\n2POEhk1F2f    2\nyJloN0Tr8o    3\n8EiJdzLbip    4\ndtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "Index(['OghYOr8VhS', 'LqJhf193ed', '2POEhk1F2f', 'yJloN0Tr8o', '8EiJdzLbip'], dtype='object')",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11adccc70>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11adccc70>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11ae880e0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11ae880e0>",
                    "shape": null
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[1, 2],\n        [1, 0]],\n\n       [[2, 3],\n        [4, 2]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "\u05e9\u05de18\u05da\u05d8\u05dd\u05e87\u05d6    0\n\u05d9212\u05e76\u05d5\u05d852    1\n\u05e2\u05d3\u05e70\u05d94\u05d73\u05db\u05df    2\n3\u05de\u05d5\u05e803\u05d9\u05da\u05d7\u05e4    3\n8112\u05d2\u05d5\u05e7\u05e9\u05d0\u05e7    4\ndtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "Index(['\u05e9\u05de18\u05da\u05d8\u05dd\u05e87\u05d6', '\u05d9212\u05e76\u05d5\u05d852', '\u05e2\u05d3\u05e70\u05d94\u05d73\u05db\u05df', '3\u05de\u05d5\u05e803\u05d9\u05da\u05d7\u05e4', '8112\u05d2\u05d5\u05e7\u05e9\u05d0\u05e7'], dtype='object')",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11adcc3b0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11adcc3b0>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11adcc2c0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11adcc2c0>",
                    "shape": null
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[0, 1],\n        [4, 0]],\n\n       [[0, 2],\n        [4, 1]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "DatetimeIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',\n               '2000-01-07'],\n              dtype='datetime64[ns]', freq='B')",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11ad6b310>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11ad6b310>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11adcc9a0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11adcc9a0>",
                    "shape": null
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[3, 3],\n        [4, 4]],\n\n       [[0, 0],\n        [3, 4]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "2000-01-03    0\n2000-01-04    1\n2000-01-05    2\n2000-01-06    3\n2000-01-07    4\nFreq: B, dtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "PeriodIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',\n             '2000-01-07'],\n            dtype='period[B]', freq='B')",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11adb9cc0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11adb9cc0>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11adcccc0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11adcccc0>",
                    "shape": null
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[0, 0],\n        [2, 3]],\n\n       [[3, 1],\n        [0, 4]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "1 days    0\n2 days    1\n3 days    2\n4 days    3\n5 days    4\nFreq: D, dtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "TimedeltaIndex(['1 days', '2 days', '3 days', '4 days', '5 days'], dtype='timedelta64[ns]', freq='D')",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11adcc3b0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11adcc3b0>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11ae88220>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11ae88220>",
                    "shape": null
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[2, 2],\n        [0, 2]],\n\n       [[1, 3],\n        [2, 2]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "False    0\nTrue     1\nFalse    2\nFalse    3\nFalse    4\ndtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "Index([False, True, False, False, False], dtype='object')",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11ae80360>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11ae80360>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11adcce00>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11adcce00>",
                    "shape": null
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[0, 2],\n        [3, 4]],\n\n       [[0, 1],\n        [3, 4]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "0    0\n1    1\n2    2\n3    3\n4    4\ndtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "RangeIndex(start=0, stop=5, step=1)",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11ae805e0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11ae805e0>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11adcc9f0>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11adcc9f0>",
                    "shape": null
                }
            }
        ],
        [
            {
                "key": {
                    "value": "array([[[0, 3],\n        [4, 3]],\n\n       [[2, 1],\n        [3, 3]]])",
                    "shape": "(2, 2, 2)"
                },
                "self": {
                    "value": "ggdu    0\nUfxn    1\ntpyz    2\nggdu    3\nUfxn    4\ndtype: int64",
                    "shape": "(5,)"
                },
                "self.index": {
                    "value": "CategoricalIndex(['ggdu', 'Ufxn', 'tpyz', 'ggdu', 'Ufxn'], categories=['ggdu', 'Ufxn', 'tpyz'], ordered=False, dtype='category')",
                    "shape": "(5,)"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11ae88360>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11ae88360>",
                    "shape": null
                }
            },
            {
                "key_type": {
                    "value": "'integer'",
                    "shape": "7"
                },
                "self.loc": {
                    "value": "<pandas.core.indexing._LocIndexer object at 0x11ae77c20>",
                    "shape": null
                },
                "self.iloc": {
                    "value": "<pandas.core.indexing._iLocIndexer object at 0x11ae77c20>",
                    "shape": null
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Int64Index",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Float64Index",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Index",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Index",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "DatetimeIndex",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "PeriodIndex",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "TimedeltaIndex",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "Index",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "RangeIndex",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ],
        [
            {
                "key": "ndarray",
                "self": "Series",
                "self.index": "CategoricalIndex",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            },
            {
                "key_type": "str",
                "self.loc": "_LocIndexer",
                "self.iloc": "_iLocIndexer"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}