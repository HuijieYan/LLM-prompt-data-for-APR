{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n\n    \" Returns a function to filter the formats according to the filter_spec \"\n    \n    OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    \n    str_operators = {\n        '=': operator.eq,\n        '^=': lambda attr, value: attr.startswith(value),\n        '$=': lambda attr, value: attr.endswith(value),\n        '*=': lambda attr, value: value in attr,\n        '!^=': lambda attr, value: not attr.startswith(value),\n        '!$=': lambda attr, value: not attr.endswith(value),\n        '!*=': lambda attr, value: value not in attr,\n    }\n    \n    def _filter(f):\n        for key, op, value, none_inclusive, negation in re.findall(\n                r'\\s*([a-zA-Z_]+)\\s*([<>=!]=?)'  # attribute, operator\n                r'(\\d+(?:(?:\\.\\d+)|(?:(?:[kKmMgGtTpPeEzZyY]i?[Bb]?))))?'  # value\n                r'(\\?)?'  # none inclusive\n                r'(\\!?)$',  # negation\n                filter_spec):\n            val = f.get(key)\n            if val is None:\n                if none_inclusive:\n                    continue\n                return False\n            if value is None:\n                if op == '=':\n                    return val == 'true'\n                return val is not None\n            if key in ('filesize', 'filesize_approx'):\n                val = parse_filesize(val) or val\n                value = parse_filesize(value) or value\n            else:\n                try:\n                    value = int(value)\n                except ValueError:\n                    raise ValueError('Invalid value %r in format specification %r' % (value, filter_spec))\n            if negate:\n                compare = value == val\n            elif op == '<':\n                compare = val < value\n            elif op == '<=':\n                compare = val <= value\n            elif op == '>':\n                compare = val > value\n            elif op == '>=':\n                compare = val >= value\n            else:\n                compare = val == value\n            if not compare:\n                return False\n        return True\n    \n    return _filter"
        }
    ]
}