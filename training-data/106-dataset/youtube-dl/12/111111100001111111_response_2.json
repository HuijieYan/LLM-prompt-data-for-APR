{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    OPERATORS = {'<': operator.lt, '<=': operator.le, '>': operator.gt, '>=': operator.ge, '=': operator.eq, '!=': operator.ne}\n    comp_value = ''\n    op = None\n    if '=' in filter_spec:\n        key, comp_value = filter_spec.split('=')\n        if key.endswith('*'):\n            comp_value = comp_value.replace('*', '')\n            op = lambda attr, value: attr.startswith(value)\n        elif key.endswith('^'):\n            comp_value = comp_value.replace('^', '')\n            op = lambda attr, value: attr.endswith(value)\n        elif key.endswith('$'):\n            comp_value = comp_value.replace('$', '')\n            op = lambda attr, value: value in attr\n        else:\n            op = OPERATORS['=']\n    elif '!=' in filter_spec:\n        key, comp_value = filter_spec.split('!=')\n        op = OPERATORS['!=']\n    else:\n        # Handle other cases here\n        pass\n        \n    def _filter(f):\n        actual_value = f.get(key)\n        if actual_value is None:\n            return bool(comp_value)\n        return op(actual_value, comp_value)\n    return _filter",
            "imports": []
        }
    ]
}