{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    \" Returns a function to filter the formats according to the filter_spec \"\n\n    OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n\n    OPERATORS_STR = {\n        '=': operator.eq,\n        '^=': lambda attr, value: attr.startswith(value),\n        '$=': lambda attr, value: attr.endswith(value),\n        '*=': lambda attr, value: value in attr,\n    }\n\n    if filter_spec[0] == '[' and filter_spec[-1] == ']':  # ensure filter specification is in valid format\n        filter_spec = filter_spec[1:-1]  # remove surrounding brackets\n\n    m = None  # initialize match variable\n    for key, operator in OPERATORS.items():  # try numerical operators\n        for regex in [r'\\b', '\\\\b', '']:  # treat operand as word boundary respecting or non-respectful of space\n            m = re.search(rf'(?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\\s*({regex}(?P<op>{re.escape(key)})){regex}(?P<none_inclusive>\\s*\\?)\\s*(?P<value>\\d+(?:\\.\\d+)?)', filter_spec)\n            if m:\n                comparison_value = int(m.group('value'))  # convert matching value to integer\n                op = operator  # get operator from OPERATORS dictionary\n                break\n\n    if not m:  # if there is no match for numerical operators, try string operators\n        for key, operator in OPERATORS_STR.items():  # iterate string operators\n            m = re.search(rf'(?P<key>ext|acodec|vcodec|container|protocol|format_id)(!\\s*)?(?P<op>{re.escape(key)})\\s*(?P<none_inclusive>\\s*\\?)\\s*(?P<value>.+)', filter_spec)\n            if m:\n                comparison_value = m.group('value')  # get matching value\n                str_op = operator  # get operator from OPERATORS_STR dictionary\n                break\n\n    # error handling\n    if not m:\n        raise ValueError(f'Invalid filter specification {filter_spec}')\n\n    def _filter(f):\n        actual_value = f.get(m.group('key'))  # get actual value\n        if actual_value is None:  # if value is None\n            return m.group('none_inclusive')\n        return op(actual_value, comparison_value)  # perform the comparison\n\n    return _filter",
            "import_list": []
        }
    ]
}