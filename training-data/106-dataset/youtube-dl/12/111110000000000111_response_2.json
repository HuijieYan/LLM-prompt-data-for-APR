{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n        \" Returns a function to filter the formats according to the filter_spec \"\n    \n        OPERATORS = {\n            '<': operator.lt,\n            '<=': operator.le,\n            '>': operator.gt,\n            '>=': operator.ge,\n            '=': operator.eq,\n            '!=': operator.ne,\n            '^=': lambda attr, value: attr.startswith(value),\n            '$=': lambda attr, value: attr.endswith(value),\n            '*=': lambda attr, value: value in attr,\n        }\n        \n        operator_rex = re.compile(r'''(?x)\\s*\n            (width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\n            \\s*(<|<=|>|>=|=|!=|^\\$=|\\*\\=)\\s*(\\?)?\\s*([0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\n            $''')\n        \n        str_operator_rex = re.compile(r'''(?x)\n            \\s*(ext|acodec|vcodec|container|protocol|format_id)\n            \\s*(!?\\s*(=|\\^=|\\$=|\\*\\=))\\s*(\\?)?\\s*([a-zA-Z0-9._-]+)\\s*$''')\n        \n        m = operator_rex.search(filter_spec)\n        \n        if not m:\n            m = str_operator_rex.search(filter_spec)\n        \n        if not m:\n            raise ValueError('Invalid filter specification %r' % filter_spec)\n        \n        key = m.group(1)\n        op = m.group(2)\n        none_inclusive = m.group(3)\n        value = m.group(4)\n        \n        comparison_value = int(value) if key in ('width', 'height') else parse_filesize(value)\n        op_func = OPERATORS[op]\n        \n        def _filter(f):\n            actual_value = f.get(key)\n            if actual_value is None:\n                return none_inclusive\n            return op_func(actual_value, comparison_value)\n        \n        return _filter",
            "import_list": [
                "import operator",
                "import re"
            ]
        }
    ]
}