{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    \" Returns a function to filter the formats according to the filter_spec \"\n    \n    OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n        '^=': lambda attr, value: attr.startswith(value),\n        '$=': lambda attr, value: attr.endswith(value),\n        '*=': lambda attr, value: value in attr,\n    }\n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps|ext|acodec|vcodec|container|protocol|format_id)\n        \\s*(?P<negation>!\\s*)?(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\n        \\s*(?P<value>[^\\s]+)\\s*$\n        ''' % '|'.join(map(re.escape, OPERATORS.keys())))\n    m = operator_rex.search(filter_spec)\n    if m:\n        comparison_value = m.group('value')\n        if m.group('key') in ('width', 'height', 'tbr', 'abr', 'vbr', 'asr', 'filesize', 'filesize_approx', 'fps'):\n            try:\n                comparison_value = int(comparison_value)\n            except ValueError:\n                comparison_value = parse_filesize(comparison_value)\n                if comparison_value is None:\n                    comparison_value = parse_filesize(comparison_value + 'B')\n            op = OPERATORS[m.group('op')]\n        else:\n            op = OPERATORS[m.group('op')]\n        if m.group('negation'):\n            op = lambda attr, value: not op(attr, value)\n        if m.group('none_inclusive'):\n            op = lambda attr, value: attr is None or op(attr, value)\n        return lambda f: op(f.get(m.group('key')), comparison_value)\n\n    raise ValueError('Invalid filter specification %r' % filter_spec)",
            "import_list": []
        }
    ]
}