{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    import re\n    import operator\n    from youtube_dl.utils import parse_filesize\n    \" Returns a function to filter the formats according to the filter_spec \"\n    \n    def _filter(f):\n        def sanitize_value(value):\n            try:\n                return int(value)\n            except ValueError:\n                return parse_filesize(value)\n    \n        parts = re.findall(r'((?:[a-zA-Z_]+[=!<>]+)?\\??[a-zA-Z_]+)', filter_spec)\n        for part in parts:\n            if part.endswith('?') and not f.get(part[:-1]):\n                return True\n            elif part.endswith('='):\n                key, operator, value = re.findall(r'([a-zA-Z_]+)([=!<>]+)?(.*)', part)[0]\n                value = sanitize_value(value)\n                if operator == '=':\n                    if f.get(key) != value:\n                        return False\n                elif operator == '!=':\n                    if f.get(key) == value:\n                        return False\n                elif operator == '<':\n                    if f.get(key) >= value:\n                        return False\n                elif operator == '<=':\n                    if f.get(key) > value:\n                        return False\n                elif operator == '>':\n                    if f.get(key) <= value:\n                        return False\n                elif operator == '>=':\n                    if f.get(key) < value:\n                        return False\n        return True\n    \n    return _filter"
        }
    ]
}