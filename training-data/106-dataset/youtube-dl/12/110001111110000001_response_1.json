{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    import re\n    import operator\n    \" Returns a function to filter the formats according to the filter_spec \"\n    OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    \n    numeric_operator_rex = re.compile(r'''(?x)\\s*\n        (?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\n        \\s*(?P<op>[<>=!]{1,2})\\s*(?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\n        \\s*$\n        ''')\n    \n    string_operator_rex = re.compile(r'''(?x)\\s*\n        (?P<key>ext|acodec|vcodec|container|protocol|format_id)\n        \\s*(?P<op>[!\\^$*]{1,2}=)(?P<value>[a-zA-Z0-9._-]+)\n        \\s*$\n        ''')\n    \n    def _filter(f):\n        if m := numeric_operator_rex.search(filter_spec):\n            key = m.group('key')\n            value = m.group('value')\n            op = OPERATORS[m.group('op')]\n            actual_value = f.get(key)\n            if actual_value is not None:\n                try:\n                    comparison_value = int(value)\n                except ValueError:\n                    # Handle different units of the comparison value\n                    comparison_value = parse_filesize(value)\n                    if comparison_value is None:\n                        comparison_value = parse_filesize(value + 'B')\n                    if comparison_value is None:\n                        raise ValueError(\n                            'Invalid value %r in format specification %r' % (value, filter_spec))\n                return op(actual_value, comparison_value) or False\n    \n        elif m := string_operator_rex.search(filter_spec):\n            key = m.group('key')\n            value = m.group('value')\n            str_op = m.group('op')\n            actual_value = f.get(key)\n            if actual_value is not None:\n                if str_op == '=':\n                    return actual_value == value\n                elif str_op == '^=':\n                    return actual_value.startswith(value)\n                elif str_op == '$=':\n                    return actual_value.endswith(value)\n                elif str_op == '*=':\n                    return value in actual_value\n    \n        raise ValueError('Invalid filter specification %r' % filter_spec)\n    \n    return _filter"
        }
    ]
}