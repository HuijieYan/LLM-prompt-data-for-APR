{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    operator_regex = re.compile(r'''(?x)\\s*(?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\\s*(?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)$''' % '|'.join(map(re.escape, OPERATORS.keys())))\n    str_operator_regex = re.compile(r'''(?x)\\s*(?P<key>ext|acodec|vcodec|container|protocol|format_id)\\s*(?P<negation>!\\s*)?(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\\s*(?P<value>[a-zA-Z0-9._-]+)\\s*$''' % '|'.join(map(re.escape, STR_OPERATORS.keys())))\n\n    def _filter(f):\n        if operator_regex.search(filter_spec):\n            m = operator_regex.search(filter_spec)\n            key = m.group('key')\n            value = m.group('value')\n            op_str = m.group('op')\n            comparison_value = int(value) if key in ['width', 'height', 'tbr', 'abr', 'vbr', 'asr', 'filesize', 'filesize_approx', 'fps'] else value\n            if key in f:\n                if op_str in OPERATORS:\n                    op = OPERATORS[op_str]\n                    actual_value = f[key]\n                    if actual_value is not None:\n                        return op(actual_value, comparison_value)\n            return m.group('none_inclusive')\n\n        if str_operator_regex.search(filter_spec):\n            m = str_operator_regex.search(filter_spec)\n            key = m.group('key')\n            value = m.group('value')\n            str_op_str = m.group('op')\n            negation = m.group('negation')\n            comparison_value = value\n            if key in f:\n                if str_op_str in STR_OPERATORS:\n                    str_op = STR_OPERATORS[str_op_str]\n                    actual_value = f[key]\n                    if actual_value is not None:\n                        return not str_op(actual_value, comparison_value) if negation else str_op(actual_value, comparison_value)\n            return m.group('none_inclusive')\n\n        raise ValueError('Invalid filter specification %r' % filter_spec)\n\n    return _filter",
            "imports": []
        }
    ]
}