{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    \" Returns a function to filter the formats according to the filter_spec \"\n  \n    # ... (other code remains unchanged) ...\n\n    def parse_comparison_value(value):\n        try:\n            return int(value)\n        except ValueError:\n            parsed_size = parse_filesize(value)\n            if parsed_size is None:\n                parsed_size = parse_filesize(value + 'B')\n            if parsed_size is None:\n                raise ValueError(f'Invalid value {value} in format specification {filter_spec}')\n            return parsed_size\n\n    def parse_string_comparison(key, value):\n        operators = {\n            '=': lambda attr, value: attr == value,\n            '^=': lambda attr, value: attr.startswith(value),\n            '$=': lambda attr, value: attr.endswith(value),\n            '*=': lambda attr, value: value in attr,\n        }\n        str_op = operators[key]\n        return str_op, value\n    \n    operator_rex = re.compile(r'\\s*(?P<key>\\w+)\\s*(?P<op>[!<>=]=?|%[!^$*]?=)(?P<value>.+)$')\n    m = operator_rex.search(filter_spec)\n  \n    if m:\n        key = m.group('key')\n        op = m.group('op')\n        value = m.group('value')\n        \n        if op in ('<', '<=', '>', '>=', '=', '!='):\n            op_func = lambda attr, value: {\n                '<': attr < value,\n                '<=': attr <= value,\n                '>': attr > value,\n                '>=': attr >= value,\n                '=': attr == value,\n                '!=': attr != value\n            }[op]\n      \n            comparison_value = parse_comparison_value(value)\n            _filter = lambda f: op_func(f.get(key, 0), comparison_value)\n      \n        else:\n            str_op, comparison_value = parse_string_comparison(op, value)\n            _filter = lambda f: str_op(f.get(key, ''), comparison_value)\n    \n    else:\n        raise ValueError(f'Invalid filter specification {filter_spec}')\n\n    return _filter",
            "import_list": []
        }
    ]
}