{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    \" Returns a function to filter the formats according to the filter_spec \"\n\n    OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n\n    def parse_filesize(value):\n        # Implementation to parse different units of file size\n        # ... (implementation to parse file size)\n        pass\n\n    operator_rex = re.compile(r\"(\\w+)\\s*([<>!=]+)\\s*([0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\\s*\")\n    m = operator_rex.search(filter_spec)\n\n    if m:\n        key, op, value = m.group(1), m.group(2), m.group(3)\n\n        try:\n            comparison_value = int(value)\n        except ValueError:\n            comparison_value = parse_filesize(value)\n            if comparison_value is None:\n                comparison_value = parse_filesize(value + 'B')\n            if comparison_value is None:\n                raise ValueError('Invalid value %r in format specification %r' % (value, filter_spec))\n\n        op = OPERATORS.get(op)\n\n        if op is None:\n            raise ValueError('Invalid operator %r in format specification %r' % (m.group(2), filter_spec))\n\n        def _filter(f):\n            actual_value = f.get(key)\n            if actual_value is None:\n                return bool(m.group(3))\n            return op(actual_value, comparison_value)\n\n        return _filter\n\n    else:\n        raise ValueError('Invalid filter specification %r' % filter_spec)",
            "imports": [
                "import operator",
                "import re"
            ]
        }
    ]
}