{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n        OPERATORS = {\n            '<': operator.lt,\n            '<=': operator.le,\n            '>': operator.gt,\n            '>=': operator.ge,\n            '=': operator.eq,\n            '!=': operator.ne,\n        }\n        operator_rex = re.compile(r'\\s*(?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\\s*(?P<op>(?:<|<=|>|>=|=|!=))\\s*(?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)$')\n        m = operator_rex.search(filter_spec)\n        if m:\n            key = m.group('key')\n            op = OPERATORS[m.group('op')]\n            comparison_value = int(m.group('value'))\n            if key in ('filesize', 'filesize_approx'):\n                comparison_value = self.parse_filesize(comparison_value)\n\n            def _filter(f):\n                actual_value = f.get(key)\n                if actual_value is None:\n                    return bool(m.group('value'))  # True if '?', otherwise False\n                return op(actual_value, comparison_value)\n            return _filter\n\n        str_operator_rex = re.compile(r'\\s*(?P<key>ext|acodec|vcodec|container|protocol|format_id)\\s*(?P<negation>!\\s*)?(?P<op>(?:=|\\^=|\\$=|\\*=))\\s*(?P<value>[a-zA-Z0-9._-]+)\\s*$')\n        m = str_operator_rex.search(filter_spec)\n        if m:\n            key = m.group('key')\n            negation = m.group('negation')\n            op = m.group('op')\n            value = m.group('value')\n            if op == '=':\n                condition = lambda attr, value: attr == value\n            elif op == '^=':\n                condition = lambda attr, value: attr.startswith(value)\n            elif op == '$=':\n                condition = lambda attr, value: attr.endswith(value)\n            elif op == '*=':\n                condition = lambda attr, value: value in attr\n\n            def _filter(f):\n                actual_value = f.get(key)\n                if actual_value is None:\n                    return bool(negation)  # True if '!' is present, otherwise False\n                return not condition(actual_value, value) if negation else condition(actual_value, value)\n            return _filter\n\n        raise ValueError('Invalid filter specification %r' % filter_spec)",
            "import_list": [
                "import operator",
                "import re"
            ]
        }
    ]
}