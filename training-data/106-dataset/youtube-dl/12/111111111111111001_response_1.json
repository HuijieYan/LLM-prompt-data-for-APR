{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    operators_rex = re.compile(r'(?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\\s*(?P<op><|<=|>|>=|=|!=)\\s*(?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)')\n    m = operators_rex.search(filter_spec)\n\n    if m:\n        key = m.group('key')\n        value = m.group('value')\n        operator = m.group('op')\n\n        def _filter(f):\n            actual_value = f.get(key)\n            if actual_value is None:\n                return False\n            if operator == '<':\n                return actual_value < float(value)\n            elif operator == '<=':\n                return actual_value <= float(value)\n            elif operator == '>':\n                return actual_value > float(value)\n            elif operator == '>=':\n                return actual_value >= float(value)\n            elif operator == '=':\n                return actual_value == float(value)\n            elif operator == '!=':\n                return actual_value != float(value)\n\n    else:\n        match_str_rex = re.compile(r'(?P<key>ext|acodec|vcodec|container|protocol|format_id)(?P<op>[!=^$*])=(?P<value>[a-zA-Z0-9._-]+)')\n        m = match_str_rex.search(filter_spec)\n\n        if m:\n            key = m.group('key')\n            value = m.group('value')\n            operator = m.group('op')\n\n            if operator == '=':\n                def _filter(f):\n                    return f.get(key) == value\n            elif operator == '^':\n                def _filter(f):\n                    return f.get(key).startswith(value)\n            elif operator == '$':\n                def _filter(f):\n                    return f.get(key).endswith(value)\n            elif operator == '*':\n                def _filter(f):\n                    return value in f.get(key)\n\n    if not m:\n        raise ValueError('Invalid filter specification %r' % filter_spec)\n\n    return _filter",
            "imports": [
                "import re"
            ]
        }
    ]
}