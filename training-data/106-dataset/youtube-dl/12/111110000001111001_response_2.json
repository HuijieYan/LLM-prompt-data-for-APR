{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    \" Returns a function to filter the formats according to the filter_spec \"\n\n    OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    \n    numeric_operator_rex = re.compile(r'(?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\\s*(?P<op><=|>=|<|>|=|!=)\\s*(?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)$')\n    str_operator_rex = re.compile(r'(?P<key>ext|acodec|vcodec|container|protocol|format_id)\\s(!)?(?:=|\\^=|\\$\\=|\\*\\=)\\s*(?P<value>[a-zA-Z0-9._-]+)$')\n\n    m = numeric_operator_rex.search(filter_spec)\n    if m:\n        key = m.group('key')\n        value = int(m.group('value'))\n        op = OPERATORS[m.group('op')]\n        \n        def _filter(f):\n            actual_value = f.get(key)\n            if actual_value is not None:\n                return op(actual_value, value)\n            return False if m.group('op') == '!=' else True\n        return _filter\n\n    m = str_operator_rex.search(filter_spec)\n    if m:\n        key = m.group('key')\n        value = m.group('value')\n        op = m.group('op')\n\n        STR_OPERATORS = {\n            '=': operator.eq,\n            '^=': lambda attr, value: attr.startswith(value),\n            '$=': lambda attr, value: attr.endswith(value),\n            '*=': lambda attr, value: value in attr,\n        }\n        str_op = STR_OPERATORS[op]\n        if m.group(2) == '!':\n            op = lambda attr, value: not str_op\n\n        def _filter(f):\n            actual_value = f.get(key)\n            if actual_value is not None:\n                return op(actual_value, value)\n            return False if m.group('op') == '!=' else True\n        return _filter\n\n    raise ValueError('Invalid filter specification %r' % filter_spec)",
            "import_list": []
        }
    ]
}