{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n        \" Returns a function to filter the formats according to the filter_spec \"\n\n        def _filter(f):\n            match = re.match(r'\\[([\\w_]+)(?P<op>[<>=!$*^]+)(?P<value>[\\w-]+)\\]', filter_spec)\n            if match:\n                key = match.group(1)\n                op = match.group('op')\n                value = match.group('value')\n\n                actual_value = f.get(key)\n                if actual_value is None:\n                    return False\n\n                if op == '=':\n                    return actual_value == value\n                elif op == '!=':\n                    return actual_value != value\n                elif op == '^=':\n                    return actual_value.startswith(value)\n                elif op == '$=':\n                    return actual_value.endswith(value)\n                elif op == '*=':\n                    return value in actual_value\n            return False\n\n        return _filter",
            "import_list": [
                "import operator",
                "import re"
            ]
        }
    ]
}