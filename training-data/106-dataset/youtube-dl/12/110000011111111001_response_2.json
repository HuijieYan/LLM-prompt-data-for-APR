{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    # ... (previous code)\n\n    # Update handling of string-based format filters\n    if not m:\n        STR_OPERATORS = {\n            '=': operator.eq,\n            '^=': lambda attr, value: attr.startswith(value),\n            '$=': lambda attr, value: attr.endswith(value),\n            '*=': lambda attr, value: value in attr,\n        }\n        str_operator_rex = re.compile(r'''(?x)\n            \\s*(?P<key>ext|acodec|vcodec|container|protocol|format_id)\n            \\s*(?P<negation>!\\s*)?(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\n            \\s*(?P<value>[a-zA-Z0-9._-]+)\n            \\s*$\n            ''' % '|'.join(map(re.escape, STR_OPERATORS.keys())))\n        m = str_operator_rex.search(filter_spec)\n        if m:\n            comparison_value = m.group('value')\n            str_op = STR_OPERATORS[m.group('op')]\n            if m.group('negation'):\n                op = lambda attr, value: not str_op\n            else:\n                op = str_op\n\n            def _filter(f):\n                actual_value = f.get(m.group('key'))\n                if actual_value is None:\n                    return m.group('none_inclusive')\n                return op(actual_value, comparison_value)\n            return _filter\n\n    # .. (rest of the original code)\n\n    # Handle the case where no filter is matched\n    if not m:\n        raise ValueError('Invalid filter specification %r' % filter_spec)",
            "imports": []
        }
    ]
}