{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    import operator\n    import re\n    \" Returns a function to filter the formats according to the filter_spec \"\n    \n    import operator\n    import re\n    \n    OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\n        \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\\s*\n        (?:\n            (?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?))\n            |\n            (?P<value2>[a-zA-Z0-9._-]+)\n        )\n        $\n        ''' % '|'.join(map(re.escape, OPERATORS.keys())))\n    m = operator_rex.search(filter_spec)\n    if m:\n        key = m.group('key')\n        none_inclusive = m.group('none_inclusive')\n        value = m.group('value') or m.group('value2')  # prioritize value, fallback to value2\n        try:\n            comparison_value = int(value)\n        except ValueError:\n            comparison_value = parse_filesize(value)\n            if comparison_value is None:\n                comparison_value = parse_filesize(value + 'B')\n            if comparison_value is None:\n                raise ValueError(\n                    'Invalid value %r in format specification %r' % (\n                        value, filter_spec))\n        op = OPERATORS[m.group('op')]\n    \n    if not m:\n        raise ValueError('Invalid filter specification %r' % filter_spec)\n    \n    def _filter(f):\n        actual_value = f.get(key)\n        if actual_value is None:\n            return none_inclusive\n        return op(actual_value, comparison_value)\n    return _filter"
        }
    ]
}