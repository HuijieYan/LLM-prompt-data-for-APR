{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    \" Returns a function to filter the formats according to the filter_spec \"\n    \n    OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    \n    m = re.match(r'(?P<key>\\w+)(?P<op><=|>=|<|>|=|!=)(?P<value>.+)', filter_spec)\n    if m:\n        key = m.group('key')\n        op = m.group('op')\n        value = m.group('value')\n        \n        try:\n            comparison_value = int(value)\n        except ValueError:\n            comparison_value = parse_filesize(value)\n            if comparison_value is None:\n                comparison_value = parse_filesize(value + 'B')\n            if comparison_value is None:\n                raise ValueError(\n                    'Invalid value %r in format specification %r' % (value, filter_spec))\n        \n        comparison_operator = OPERATORS.get(op)\n        if comparison_operator is None:\n            raise ValueError('Invalid comparison operator %r' % op)\n        \n        def _filter(f):\n            actual_value = f.get(key)\n            if actual_value is None:\n                return False\n            return comparison_operator(actual_value, comparison_value)\n        \n        return _filter\n    \n    else:\n        raise ValueError('Invalid filter specification %r' % filter_spec)",
            "import_list": [
                "import operator",
                "import re"
            ]
        }
    ]
}