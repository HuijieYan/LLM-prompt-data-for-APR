{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n        \"Returns a function to filter the formats according to the filter_spec\"\n\n        OPERATORS = {\n            '<': operator.lt,\n            '<=': operator.le,\n            '>': operator.gt,\n            '>=': operator.ge,\n            '=': operator.eq,\n            '!=': operator.ne,\n        }\n        string_ops = {\n            '=': operator.eq,\n            '^=': lambda attr, value: attr.startswith(value),\n            '$=': lambda attr, value: attr.endswith(value),\n            '*=': lambda attr, value: value in attr,\n        }\n        operator_rex = re.compile(r'(?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\\s*(?P<op>[<>=!]{1,2})(?P<inclusive>\\s*\\?)?\\s*(?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)$')\n        m = operator_rex.search(filter_spec)\n\n        is_operator = False\n        if m:\n            is_operator = True\n            try:\n                comparison_value = int(m.group('value'))\n            except ValueError:\n                comparison_value = youtube_dl.utils.parse_filesize(m.group('value'))\n                if comparison_value is None:\n                    comparison_value = youtube_dl.utils.parse_filesize(m.group('value') + 'B')\n\n            op = OPERATORS[m.group('op')]\n            none_inclusive = m.group('inclusive') and None or False\n\n            actual_value = self.params.get(m.group('key'))\n            if actual_value is None:\n                return none_inclusive\n            return op(actual_value, comparison_value)\n\n        if not is_operator:\n            string_operator_rex = re.compile(r'(?P<key>ext|acodec|vcodec|container|protocol|format_id)(?P<negation>!)?(?P<op>[=^$*])(?P<none_inclusive>\\s*\\?)?(?P<value>[a-zA-Z0-9._-]+)\\s*')\n            m = string_operator_rex.search(filter_spec)\n            if m:\n                str_op = string_ops[m.group('op')]\n                actual_value = self.params.get(m.group('key'))\n                if m.group('negation'):\n                    str_op = lambda attr, value: not str_op(attr, value)\n                if actual_value is None:\n                    return m.group('none_inclusive') and None or False\n                return str_op(actual_value, m.group('value'))\n\n        raise ValueError('Invalid filter specification %r' % filter_spec)",
            "import_list": [
                "import re",
                "import operator",
                "import youtube_dl"
            ]
        }
    ]
}