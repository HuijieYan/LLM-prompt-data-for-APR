{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n        \" Returns a function to filter the formats according to the filter_spec \"\n\n        OPERATORS = {\n            '<': operator.lt,\n            '<=': operator.le,\n            '>': operator.gt,\n            '>=': operator.ge,\n            '=': operator.eq,\n            '!=': operator.ne,\n            '^=': lambda attr, value: attr.startswith(value),\n            '$=': lambda attr, value: attr.endswith(value),\n            '*=': lambda attr, value: value in attr,\n        }\n\n        operator_rex = re.compile(r'''(?x)\\s*\n            (?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\n            \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\\s*\n            (?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\n            $\n            ''' % '|'.join(map(re.escape, OPERATORS.keys())))\n        \n        str_operator_rex = re.compile(r'''(?x)\n            \\s*(?P<key>ext|acodec|vcodec|container|protocol|format_id)\n            \\s*(?P<negation>!\\s*)?(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\n            \\s*(?P<value>[a-zA-Z0-9._-]+)\n            \\s*$\n            ''' % '|'.join(map(re.escape, OPERATORS.keys())))\n        \n        m = operator_rex.search(filter_spec)\n        op = None\n\n        if not m:\n            m = str_operator_rex.search(filter_spec)\n        \n        if m:\n            comparison_value = m.group('value')\n            if m.group('none_inclusive'):\n                op = lambda attr, value: attr is not None\n            elif m.group('op') in OPERATORS:\n                op = OPERATORS[m.group('op')]\n            else:\n                raise ValueError('Invalid filter specification %r' % filter_spec)\n\n            if m.group('negation'):\n                op = lambda attr, value: not op(attr, value)\n\n        if not m:\n            raise ValueError('Invalid filter specification %r' % filter_spec)\n\n        def _filter(f):\n            actual_value = f.get(m.group('key'))\n            if actual_value is None:\n                return bool(m.group('none_inclusive'))\n            return op(actual_value, comparison_value)\n        return _filter",
            "import_list": [
                "import operator",
                "import re",
                "from youtube_dl.utils import parse_filesize"
            ]
        }
    ]
}