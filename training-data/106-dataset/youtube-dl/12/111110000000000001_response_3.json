{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    import re\n    import operator\n    from youtube_dl.utils import parse_filesize\n    \" Returns a function to filter the formats according to the filter_spec \"\n    \n    def _filter(f):\n        return False  # default filter function\n    \n    if re.match(r'^\\s*(?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\\s*(?P<op><|<=|>|>=|=|!=)(?P<none_inclusive>\\s*\\?)?\\s*(?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\\s*$', filter_spec):\n        # handle numerical comparison\n        m = re.match(r'^\\s*(?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps)\\s*(?P<op><|<=|>|>=|=|!=)(?P<none_inclusive>\\s*\\?)?\\s*(?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\\s*$', filter_spec)\n        key = m.group('key')\n        value = m.group('value')\n        op = m.group('op')\n        none_inclusive = m.group('none_inclusive')\n    \n        comparison_value = parse_filesize(value) if key.endswith('size') else int(float(value))\n        comparison_operator = {\n            '<': operator.lt,\n            '<=': operator.le,\n            '>': operator.gt,\n            '>=': operator.ge,\n            '=': operator.eq,\n            '!=': operator.ne\n        }[op]\n        if none_inclusive:\n            comparison_function = lambda f: f.get(key) is None or comparison_operator(f.get(key), comparison_value)\n        else:\n            comparison_function = lambda f: comparison_operator(f.get(key, 0), comparison_value)\n    \n        return comparison_function\n    elif re.match(r'^\\s*(?P<key>ext|acodec|vcodec|container|protocol|format_id)\\s*(?P<negation>!\\s*)?(?P<op>=|\\^=|\\$=|\\*=)(?P<none_inclusive>\\s*\\?)?\\s*(?P<value>[a-zA-Z0-9._-]+)\\s*$', filter_spec):\n        # handle string comparison\n        m = re.match(r'^\\s*(?P<key>ext|acodec|vcodec|container|protocol|format_id)\\s*(?P<negation>!\\s*)?(?P<op>=|\\^=|\\$=|\\*=)(?P<none_inclusive>\\s*\\?)?\\s*(?P<value>[a-zA-Z0-9._-]+)\\s*$', filter_spec)\n        key = m.group('key')\n        value = m.group('value')\n        op = m.group('op')\n        none_inclusive = m.group('none_inclusive')\n        negation = m.group('negation')\n    \n        op_dict = {'=': operator.eq, '^=': lambda attr, value: attr.startswith(value),\n                   '$=': lambda attr, value: attr.endswith(value),\n                   '*=': lambda attr, value: value in attr}\n        str_op = op_dict[op]\n    \n        if negation:\n            comparison_function = lambda f: not (f.get(key, '') and str_op(f.get(key), value))\n        else:\n            comparison_function = lambda f: f.get(key, '') and str_op(f.get(key), value)\n    \n        if none_inclusive:\n            comparison_function = lambda f: f.get(key) is None or comparison_function(f)\n    \n        return comparison_function\n    else:\n        raise ValueError('Invalid filter specification %r' % filter_spec)"
        }
    ]
}