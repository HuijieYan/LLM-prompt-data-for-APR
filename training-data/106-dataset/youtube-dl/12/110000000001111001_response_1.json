{
    "youtube-dl": [
        {
            "bugID": 12,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1032,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def _build_format_filter(self, filter_spec):\n    \" Returns a function to filter the formats according to the filter_spec \"\n\n    OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n\n    condition_rex = re.compile(r'(?P<key>width|height|tbr|abr|vbr|asr|filesize|filesize_approx|fps|ext|acodec|vcodec|container|protocol|format_id)(?P<negation>[!]?)(?P<operator>[<>=!$^*]*)(?P<none_inclusive>\\?)?(?P<value>[a-zA-Z0-9._-]+)?')\n    m = condition_rex.match(filter_spec)\n    if m:\n        key = m.group('key')\n        negation = m.group('negation')\n        operator = m.group('operator')\n        value = m.group('value')\n\n        if key in ['width', 'height', 'tbr', 'abr', 'vbr', 'asr', 'filesize', 'filesize_approx', 'fps']:\n            if negation == '!':\n                op = lambda attr, value: not str(OPERATORS[operator](attr, value))\n            else:\n                op = lambda attr, value: str(OPERATORS[operator](attr, value))\n        else:\n            if negation == '!':\n                op = lambda attr, value: not str(attr).startswith(value) if operator == '^' else not str(attr).endswith(value) if operator == '$' else not value in str(attr) if operator == '*' else True\n            else:\n                op = lambda attr, value: str(attr).startswith(value) if operator == '^' else str(attr).endswith(value) if operator == '$' else value in str(attr) if operator == '*' else False\n\n        def _filter(f):\n            actual_value = f.get(key)\n            return actual_value is not None and op(actual_value, value)\n\n        return _filter\n    \n    raise ValueError('Invalid filter specification %r' % filter_spec)",
            "import_list": []
        }
    ]
}