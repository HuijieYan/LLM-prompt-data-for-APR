{
    "matplotlib": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 6338,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def hist(self, x, bins=None, range=None, density=False, weights=None,\n         cumulative=False, bottom=None, histtype='bar', align='mid',\n         orientation='vertical', rwidth=None, log=False,\n         color=None, label=None, stacked=False, **kwargs):\n    \"\"\"\n    Plot a histogram.\n    Compute and draw the histogram of *x*.\n\n    Parameters\n    ----------\n    x : (n,) array or sequence of (n,) arrays\n        Input values, this takes either a single array or a sequence of\n        arrays which are not required to be of the same length.\n\n    bins : int or sequence or str, optional\n        If *bins* is an integer, it defines the number of equal-width bins\n        in the range.\n\n    range : tuple or None, optional\n        The lower and upper range of the bins.\n\n    density : bool, optional\n        If ``True``, the first element of the return tuple will\n        be the counts normalized to form a probability density.\n\n    weights : (n, ) array-like or None, optional\n        An array of weights, of the same shape as *x*.\n\n    cumulative : bool or -1, optional\n        If ``True``, then a histogram is computed where each bin gives the\n        counts in that bin plus all bins for smaller values.\n\n    bottom : array-like, scalar, or None\n        Location of the bottom baseline of each bin.\n\n    histtype : {'bar', 'barstacked', 'step',  'stepfilled'}, optional\n        The type of histogram to draw.\n\n    align : {'left', 'mid', 'right'}, optional\n        Controls how the histogram is plotted.\n\n    orientation : {'horizontal', 'vertical'}, optional\n        If 'horizontal', `~matplotlib.pyplot.barh` will be used for\n        bar-type histograms and the *bottom* kwarg will be the left edges.\n\n    rwidth : scalar or None, optional\n        The relative width of the bars as a fraction of the bin width.\n\n    log : bool, optional\n        If ``True``, the histogram axis will be set to a log scale.\n\n    color : color or array-like of colors or None, optional\n        Color or sequence of colors, one per dataset.\n\n    label : str or None, optional\n        String, or sequence of strings to match multiple datasets.\n\n    stacked : bool, optional\n        If ``True``, multiple data are stacked on top of each other.\n\n    Returns\n    -------\n    n : array or list of arrays\n        The values of the histogram bins.\n\n    bins : array\n        The edges of the bins.\n\n    patches : list or list of lists\n        Silent list of individual patches used to create the histogram\n        or list of such list if multiple input datasets.\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.patches.Patch` properties\n    \"\"\"\n    if np.isscalar(x):\n        x = [x]\n\n    bin_edges = np.histogram_bin_edges(x, bins, range, weights)\n\n    if isinstance(bins, (list, np.ndarray)) and all(isinstance(b, (pd.Timestamp, datetime.datetime)) for b in bins):\n        # Convert date bin edges to numerical representation if not already in that form\n        bin_edges = date2num(bins)\n\n    m, bins = np.histogram(x, bins=bin_edges, weights=weights, density=density)",
            "import_list": [
                "from matplotlib.dates import date2num",
                "import numpy as np"
            ]
        }
    ]
}