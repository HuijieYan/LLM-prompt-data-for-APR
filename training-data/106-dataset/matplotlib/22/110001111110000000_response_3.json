{
    "matplotlib": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 6338,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def hist(self, x, bins=None, range=None, density=False, weights=None,\n             cumulative=False, bottom=None, histtype='bar', align='mid',\n             orientation='vertical', rwidth=None, log=False,\n             color=None, label=None, stacked=False, **kwargs):\n    \"\"\"\n    Center point of histogram will match the bin value at that point if alignment\n    is 'mid' Remove alignment option for barplot, fillplot etc.\n    \"\"\"\n\n    if isinstance(x, (int, float)):\n        x = [x]\n\n    if bins is None:\n        bins = rcParams['hist.bins']\n\n    if histtype in {'bar', 'barstacked', 'step', 'stepfilled'}:\n        pass\n    else:\n        raise ValueError(f\"Invalid hist type {histtype}\")\n\n    if orientation in {'horizontal', 'vertical'}:\n        pass\n    else:\n        raise ValueError(f\"Invalid orientation {orientation}\")\n\n    if isinstance(bins, int):\n        pass\n    elif isinstance(bins, (list, np.ndarray, str)):\n        pass\n    else:\n        raise ValueError(f\"Invalid type for bins {type(bins)}\")\n\n    if isinstance(bins, str) and bins not in {'auto', 'fd', 'doane', 'scott', 'stone', 'rice', 'sturges', 'sqrt'}:\n        raise ValueError(f\"Invalid binning strategy string: {bins}\")\n\n    if isinstance(bins, (int, list, np.ndarray)) and len(bins) == 0:\n        raise ValueError(\"bins must not be an empty sequence\")\n\n    if weights is None:\n        pass\n    elif isinstance(weights, (int, float, list, np.ndarray)) and len(weights) > 0:\n        pass\n    else:\n        raise ValueError(f\"Invalid weights {weights}\")\n\n    density = bool(density)\n\n    # additional validation - removed for brevity\n    pass",
            "import_list": [
                "import numpy as np",
                "from numbers import Number"
            ]
        }
    ]
}