{
    "matplotlib": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 6338,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def hist(self, x, bins=None, range=None, density=False, weights=None,\n             cumulative=False, bottom=None, histtype='bar', align='mid',\n             orientation='vertical', rwidth=None, log=False,\n             color=None, label=None, stacked=False, **kwargs):\n        \"\"\"\n        Plot a histogram.\n       # rest of the comments have been omitted.\n        \"\"\"\n        bin_range = range\n        \n        if np.isscalar(x):\n            x = [x]\n        \n        if bins is None:\n            bins = rcParams['hist.bins']\n        \n        cbook._check_in_list(['bar', 'barstacked', 'step', 'stepfilled'],\n                             histtype=histtype)\n        cbook._check_in_list(['left', 'mid', 'right'], align=align)\n        cbook._check_in_list(['horizontal', 'vertical'],\n                             orientation=orientation)\n        \n        if histtype == 'barstacked' and not stacked:\n            stacked = True\n        \n        # basic input validation\n        input_empty = np.size(x) == 0\n        x = cbook._reshape_2D(x, 'x')\n        nx = len(x)  # number of datasets\n\n        self._process_unit_info(xdata=x[0], kwargs=kwargs)\n        x = [self.convert_xunits(xi) for xi in x]\n        \n        # We need to do to 'weights' what was done to 'x'\n        if weights is not None:\n            w = cbook._reshape_2D(weights, 'weights')\n        else:\n            w = [None] * nx\n        \n        if len(w) != nx:\n            raise ValueError('weights should have the same shape as x')\n        \n        for xi, wi in zip(x, w):\n            if wi is not None and len(wi) != len(xi):\n                raise ValueError(\n                    'weights should have the same shape as x')\n        \n        if color is None:\n            color = [self._get_lines.get_next_color() for i in range(nx)]\n        else:\n            color = mcolors.to_rgba_array(color)\n            if len(color) != nx:\n                error_message = (\n                    \"color kwarg must have one color per data set. %d data \"\n                    \"sets and %d colors were provided\" % (nx, len(color)))\n                raise ValueError(error_message)\n        \n        hist_kwargs = dict()\n        \n        if bin_range is None:\n            xmin = np.inf\n            xmax = -np.inf\n            for xi in x:\n                if len(xi):\n                    xmin = min(xmin, np.nanmin(xi))\n                    xmax = max(xmax, np.nanmax(xi))\n            if not np.isnan([xmin, xmax]).any() and not (xmin > xmax):\n                bin_range = (xmin, xmax)\n        \n        if not input_empty and len(x) > 1:\n            if weights is not None:\n                _w = np.concatenate(w)\n            else:\n                _w = None\n        \n            bins = histogram_bin_edges(np.concatenate(x),\n                                       bins, bin_range, _w)\n        else:\n            hist_kwargs['range'] = bin_range\n        \n        density = bool(density)\n        if density and not stacked:\n            hist_kwargs['density'] = density\n        \n        # .... rest of the code has been omitted\n\n        if nx == 1:\n            return tops[0], bins, cbook.silent_list('Patch', patches[0])\n        else:\n            return tops, bins, cbook.silent_list('Lists of Patches', patches)",
            "import_list": []
        }
    ]
}