{
    "matplotlib": [
        {
            "bugID": 17,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2758,
            "file_name": "lib/matplotlib/transforms.py",
            "replace_code": "def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n    # Check for infinite values and return expanded endpoints if found\n    if (not np.isfinite(vmin)) or (not np.isfinite(vmax)) or (vmin == vmax):\n        return -expander, expander\n\n    # Swap vmin and vmax if necessary\n    if increasing and vmin > vmax:\n        vmin, vmax = vmax, vmin\n\n    maxabsvalue = max(abs(vmin), abs(vmax))\n    if maxabsvalue < (1e6 / tiny) * np.finfo(float).tiny:\n        return -expander, expander\n    elif (vmax - vmin) <= maxabsvalue * tiny:\n        if abs(vmax + vmin) < tiny:\n            return -expander, expander\n        vmin = vmax - (vmax - vmin) * (1 + expander)\n        vmax = vmax + (vmax - vmin) * expander\n\n    if not increasing and vmin > vmax:\n        vmin, vmax = vmax, vmin\n\n    return vmin, vmax",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}