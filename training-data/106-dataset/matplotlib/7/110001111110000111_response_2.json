{
    "matplotlib": [
        {
            "bugID": 7,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 1873,
            "file_name": "lib/matplotlib/colors.py",
            "replace_code": "def shade_rgb(self, rgb, elevation, fraction=1., blend_mode='hsv',\n              vert_exag=1, dx=1, dy=1, **kwargs):\n    \"\"\"\n    Use this light source to adjust the colors of the *rgb* input array to\n    give the impression of a shaded relief map with the given *elevation*.\n\n    Parameters\n    ----------\n    ...  # (No change in the previous parameter descriptions)\n\n    Returns\n    -------\n    ndarray\n        An (m, n, 3) array of floats ranging between 0-1.\n    \"\"\"\n    # Calculate the \"hillshade\" intensity.\n    intensity = self.hillshade(elevation, vert_exag, dx, dy, fraction)\n    intensity = intensity[..., np.newaxis]\n\n    # Ensure intensity is not masked\n    intensity = np.ma.masked_array(intensity, mask=np.zeros_like(intensity, dtype=bool))\n\n    # Blend the hillshade and rgb data using the specified mode\n    lookup = {\n        'hsv': self.blend_hsv,\n        'soft': self.blend_soft_light,\n        'overlay': self.blend_overlay,\n    }\n    if blend_mode in lookup:\n        blend = lookup[blend_mode](rgb, intensity, **kwargs)\n    else:\n        try:\n            blend = blend_mode(rgb, intensity, **kwargs)\n        except TypeError as err:\n            raise ValueError('\"blend_mode\" must be callable or one of {}'\n                             .format(lookup.keys)) from err\n\n    # Only apply result where hillshade intensity isn't masked\n    if hasattr(intensity, 'mask'):\n        mask = np.squeeze(intensity.mask)\n        for i in range(3):\n            blend[..., i][mask] = rgb[..., i][mask]\n\n    return blend",
            "imports": []
        }
    ]
}