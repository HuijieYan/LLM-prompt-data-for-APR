{
    "matplotlib": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 949,
            "file_name": "lib/matplotlib/projections/polar.py",
            "replace_code": "def draw(self, renderer):\n    thetamin, thetamax = np.rad2deg(self._realViewLim.intervalx)\n    if thetamin > thetamax:\n        thetamin, thetamax = thetamax, thetamin\n    rmin, rmax = ((self._realViewLim.intervaly - self.get_rorigin()) *\n                  self.get_rsign())\n    if isinstance(self.patch, mpatches.Wedge):\n        center = self.transWedge.transform_point((0.5, 0.5))\n        self.patch.set_theta1(thetamin)\n        self.patch.set_theta2(thetamax)\n\n        edge, _ = self.transWedge.transform_point((1, 0))\n        radius = np.hypot(edge[0] - center[0], edge[1] - center[1])\n        width = radius * (rmax - rmin) / rmax\n        self.patch.set_radius(radius)\n        self.patch.set_width(width)\n      \n    if thetamin == 0.0 and thetamax == 360.0:\n        self.spines['start'].set_visible(False)\n        self.spines['end'].set_visible(False)\n    else:\n        self.spines['start'].set_visible(True)\n        self.spines['end'].set_visible(True)\n\n    yaxis_text_transform = self.transData\n    if yaxis_text_transform != self._yaxis_text_transform.get():\n        self._yaxis_text_transform.set(yaxis_text_transform)\n        self.yaxis.reset_ticks()\n        self.yaxis.set_clip_path(self.patch)\n\n    Axes.draw(self, renderer)",
            "import_list": []
        }
    ]
}