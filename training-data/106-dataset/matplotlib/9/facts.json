{
    "1.1.1": "@cbook._delete_parameter(\"3.3\", \"args\")\n@cbook._delete_parameter(\"3.3\", \"kwargs\")\ndef draw(self, renderer, *args, **kwargs):\n    thetamin, thetamax = np.rad2deg(self._realViewLim.intervalx)\n    if thetamin > thetamax:\n        thetamin, thetamax = thetamax, thetamin\n    rmin, rmax = ((self._realViewLim.intervaly - self.get_rorigin()) *\n                  self.get_rsign())\n    if isinstance(self.patch, mpatches.Wedge):\n        # Backwards-compatibility: Any subclassed Axes might override the\n        # patch to not be the Wedge that PolarAxes uses.\n        center = self.transWedge.transform((0.5, 0.5))\n        self.patch.set_center(center)\n        self.patch.set_theta1(thetamin)\n        self.patch.set_theta2(thetamax)\n\n        edge, _ = self.transWedge.transform((1, 0))\n        radius = edge - center[0]\n        width = min(radius * (rmax - rmin) / rmax, radius)\n        self.patch.set_radius(radius)\n        self.patch.set_width(width)\n\n        inner_width = radius - width\n        inner = self.spines.get('inner', None)\n        if inner:\n            inner.set_visible(inner_width != 0.0)\n\n    visible = not _is_full_circle_deg(thetamin, thetamax)\n    # For backwards compatibility, any subclassed Axes might override the\n    # spines to not include start/end that PolarAxes uses.\n    start = self.spines.get('start', None)\n    end = self.spines.get('end', None)\n    if start:\n        start.set_visible(visible)\n    if end:\n        end.set_visible(visible)\n    if visible:\n        yaxis_text_transform = self._yaxis_transform\n    else:\n        yaxis_text_transform = self._r_label_position + self.transData\n    if self._yaxis_text_transform != yaxis_text_transform:\n        self._yaxis_text_transform.set(yaxis_text_transform)\n        self.yaxis.reset_ticks()\n        self.yaxis.set_clip_path(self.patch)\n\n    Axes.draw(self, renderer, *args, **kwargs)\n",
    "1.1.2": null,
    "1.2.1": "class PolarAxes(Axes)",
    "1.2.2": "A polar graph projection, where the input dimensions are *theta*, *r*.\n\nTheta starts pointing east and goes anti-clockwise.",
    "1.2.3": [
        "draw(self, renderer, *args, **kwargs)",
        "get_rorigin(self)",
        "get_rsign(self)"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "lib/matplotlib/projections/polar.py",
    "1.3.2": [
        "_is_full_circle_deg(thetamin, thetamax)",
        "draw(self, renderer, *args, **kwargs)",
        "get_rorigin(self)",
        "get_rsign(self)"
    ],
    "1.4.1": [
        "@image_comparison(['polar_invertedylim_rorigin.png'], style='default')\ndef test_polar_invertedylim_rorigin():\n    fig = plt.figure()\n    ax = fig.add_axes([0.1, 0.1, 0.8, 0.8], polar=True)\n    ax.yaxis.set_inverted(True)\n    # Set the rlims to inverted (2, 0) without calling set_rlim, to check that\n    # viewlims are correctly unstaled before draw()ing.\n    ax.plot([0, 0], [0, 2], c=\"none\")\n    ax.margins(0)\n    ax.set_rorigin(3)"
    ],
    "1.4.2": [
        "lib/matplotlib/tests/test_polar.py"
    ],
    "2.1.1": [
        [
            "E   matplotlib.testing.exceptions.ImageComparisonFailure: images not close (RMS 6.526):"
        ]
    ],
    "2.1.2": [
        [
            "    \tresult_images/test_polar/polar_invertedylim_rorigin.png\n    \tresult_images/test_polar/polar_invertedylim_rorigin-expected.png\nAll traceback entries are hidden. Pass `--full-trace` to see hidden and internal frames."
        ]
    ],
    "2.1.3": [
        [
            {
                "self._realViewLim": "<matplotlib.transforms.TransformedBbox object at 0x114964580>",
                "self": "<matplotlib.projections.polar.PolarAxes object at 0x114964fa0>",
                "self.patch": "<matplotlib.patches.Wedge object at 0x114957c70>",
                "self.transWedge": "<matplotlib.transforms.BboxTransformFrom object at 0x114964040>",
                "self.spines": "OrderedDict([('polar', <matplotlib.spines.Spine object at 0x11498a460>), ('start', <matplotlib.spines.Spine object at 0x11498a580>), ('end', <matplotlib.spines.Spine object at 0x11498a670>), ('inner', <matplotlib.spines.Spine object at 0x11498a760>)])",
                "self._yaxis_transform": "<matplotlib.transforms.CompositeGenericTransform object at 0x11498a340>",
                "self._r_label_position": "<matplotlib.transforms.Affine2D object at 0x11498a370>",
                "self.transData": "<matplotlib.transforms.CompositeGenericTransform object at 0x11494ee20>",
                "self._yaxis_text_transform": "<matplotlib.transforms.TransformWrapper object at 0x11498a400>",
                "self.yaxis": "<matplotlib.projections.polar.RadialAxis object at 0x1149a7970>",
                "renderer": "<matplotlib.backends.backend_agg.RendererAgg object at 0x11493a6d0>",
                "args": "()",
                "kwargs": "{}"
            },
            {
                "thetamin": "0.0",
                "thetamax": "360.0",
                "rmin": "2.0",
                "rmax": "3.0",
                "center": "array([0.5, 0.5])",
                "edge": "1.0",
                "_": "0.0",
                "radius": "0.5",
                "width": "0.16666666666666666",
                "inner_width": "0.33333333333333337",
                "inner": "<matplotlib.spines.Spine object at 0x11498a760>",
                "visible": "False",
                "start": "<matplotlib.spines.Spine object at 0x11498a580>",
                "end": "<matplotlib.spines.Spine object at 0x11498a670>",
                "yaxis_text_transform": "<matplotlib.transforms.CompositeGenericTransform object at 0x11493ac10>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "self._realViewLim": "TransformedBbox",
                "self": "PolarAxes",
                "self.patch": "Wedge",
                "self.transWedge": "BboxTransformFrom",
                "self.spines": "OrderedDict",
                "self._yaxis_transform": "CompositeGenericTransform",
                "self._r_label_position": "Affine2D",
                "self.transData": "CompositeGenericTransform",
                "self._yaxis_text_transform": "TransformWrapper",
                "self.yaxis": "RadialAxis",
                "renderer": "RendererAgg",
                "args": "tuple",
                "kwargs": "dict"
            },
            {
                "thetamin": "float64",
                "thetamax": "float64",
                "rmin": "float64",
                "rmax": "float64",
                "center": "ndarray",
                "edge": "float64",
                "_": "float64",
                "radius": "float64",
                "width": "float64",
                "inner_width": "float64",
                "inner": "Spine",
                "visible": "bool",
                "start": "Spine",
                "end": "Spine",
                "yaxis_text_transform": "CompositeGenericTransform"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "self": "<matplotlib.projections.polar.PolarAxes object at 0x10b1a9640>",
                "self._realViewLim": "<matplotlib.transforms.TransformedBbox object at 0x10b1a9910>",
                "self.patch": "<matplotlib.patches.Wedge object at 0x10b188eb0>",
                "self.transWedge": "<matplotlib.transforms.BboxTransformFrom object at 0x10b1a9070>",
                "self.spines": "OrderedDict([('polar', <matplotlib.spines.Spine object at 0x10b1a9f10>), ('start', <matplotlib.spines.Spine object at 0x10b166070>), ('end', <matplotlib.spines.Spine object at 0x10b166160>), ('inner', <matplotlib.spines.Spine object at 0x10b166250>)])",
                "self._yaxis_transform": "<matplotlib.transforms.CompositeGenericTransform object at 0x10b1a9df0>",
                "self._r_label_position": "<matplotlib.transforms.Affine2D object at 0x10b1a9e20>",
                "self.transData": "<matplotlib.transforms.CompositeGenericTransform object at 0x10b1a9b80>",
                "self._yaxis_text_transform": "<matplotlib.transforms.TransformWrapper object at 0x10b1a9eb0>",
                "self.yaxis": "<matplotlib.projections.polar.RadialAxis object at 0x10b17f460>",
                "renderer": "<matplotlib.backends.backend_agg.RendererAgg object at 0x10b1de1c0>",
                "args": "()",
                "kwargs": "{}"
            },
            {
                "thetamin": "0.0",
                "thetamax": "360.0",
                "rmin": "1.0",
                "rmax": "3.0",
                "center": "array([0.5, 0.5])",
                "edge": "1.0",
                "_": "0.0",
                "radius": "0.5",
                "width": "0.3333333333333333",
                "inner_width": "0.16666666666666669",
                "inner": "<matplotlib.spines.Spine object at 0x10b166250>",
                "visible": "False",
                "start": "<matplotlib.spines.Spine object at 0x10b166070>",
                "end": "<matplotlib.spines.Spine object at 0x10b166160>",
                "yaxis_text_transform": "<matplotlib.transforms.CompositeGenericTransform object at 0x10b1de5b0>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self": "PolarAxes",
                "self._realViewLim": "TransformedBbox",
                "self.patch": "Wedge",
                "self.transWedge": "BboxTransformFrom",
                "self.spines": "OrderedDict",
                "self._yaxis_transform": "CompositeGenericTransform",
                "self._r_label_position": "Affine2D",
                "self.transData": "CompositeGenericTransform",
                "self._yaxis_text_transform": "TransformWrapper",
                "self.yaxis": "RadialAxis",
                "renderer": "RendererAgg",
                "args": "tuple",
                "kwargs": "dict"
            },
            {
                "thetamin": "float64",
                "thetamax": "float64",
                "rmin": "float64",
                "rmax": "float64",
                "center": "ndarray",
                "edge": "float64",
                "_": "float64",
                "radius": "float64",
                "width": "float64",
                "inner_width": "float64",
                "inner": "Spine",
                "visible": "bool",
                "start": "Spine",
                "end": "Spine",
                "yaxis_text_transform": "CompositeGenericTransform"
            }
        ]
    ],
    "3.1.1": [
        "Issue rendering polar plot (agg backend?) with rorigin set\n"
    ],
    "3.1.2": [
        "Bug report\nWhen saving a png of a polar plot with the r-origin set \"by hand,\" saving the result as a png plot doesn't work as expected. Saving it as PDF works as expected. Working interactively and saving it with the UI as a png works as expected.\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.gridspec import GridSpec\n\nnbins = 50\ndata = np.random.randint(0, 42, nbins)\n\nfig = plt.figure()\n\nax_g = fig.add_subplot(polar=True, facecolor=\"none\")\ntheta = np.array(\n    [np.pi/2-i*2*np.pi/len(data) for i in range(len(data))])\nlines = ax_g.plot(theta, data)\n\nax_g.set_rorigin(-78)  # Replacing this with ax_g.set_rmin works as expected, so the problem comes from this line.\n\nfig.savefig(\"bug.png\")\nfig.savefig(\"bug.pdf\")\n\nMatplotlib version\n\nOperating system: Ubuntu\nMatplotlib version: 3.2.1\nMatplotlib backend (print(matplotlib.get_backend())): TkAgg (tried with Agg, and other backends)\nPython version: 3.8.2\nJupyter version (if applicable): NA\nOther libraries:  NA\n"
    ]
}