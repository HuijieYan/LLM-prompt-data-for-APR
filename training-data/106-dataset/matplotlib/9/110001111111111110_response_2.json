{
    "matplotlib": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 949,
            "file_name": "lib/matplotlib/projections/polar.py",
            "replace_code": "def draw(self, renderer, *args, **kwargs):\n    thetamin, thetamax = np.rad2deg(self._realViewLim.intervalx)\n    if thetamin > thetamax:\n        thetamin, thetamax = thetamax, thetamin\n    y0, y1 = self.get_rorigin()\n    rsign = self.get_rsign()\n    rmin = (y0 - y1) * rsign\n    rmax = y0 * rsign\n    if isinstance(self.patch, mpatches.Wedge):\n        center = self.transWedge.transform([[0.5, 0.5]])\n        self.patch.set_center(center[0])\n        self.patch.set_theta1(thetamin)\n        self.patch.set_theta2(thetamax)\n        \n        edge = self.transWedge.transform([[1, 0]])[0]\n        radius = edge[0] - center[0][0]\n        width = min(radius * (rmax - rmin) / rmax, radius)\n        self.patch.set_radius(radius)\n        self.patch.set_width(width)\n        \n        inner_width = radius - width\n        inner = self.spines.get('inner', None)\n        if inner:\n            inner.set_visible(inner_width != 0.0)\n        \n    visible = not _is_full_circle_deg(thetamin, thetamax)\n    start = self.spines.get('start', None)\n    if start:\n        start.set_visible(visible)\n    end = self.spines.get('end', None)\n    if end:\n        end.set_visible(visible)\n    if visible:\n        yaxis_text_transform = self._yaxis_transform\n    else:\n        yaxis_text_transform = self._r_label_position + self.transData\n    if self._yaxis_text_transform != yaxis_text_transform:\n        self._yaxis_text_transform.set(yaxis_text_transform)\n        self.yaxis.reset_ticks()\n        self.yaxis.set_clip_path(self.patch)\n    \n    Axes.draw(self, renderer, *args, **kwargs)",
            "import_list": []
        }
    ]
}