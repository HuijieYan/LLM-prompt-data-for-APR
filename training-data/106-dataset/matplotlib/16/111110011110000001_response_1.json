{
    "matplotlib": [
        {
            "bugID": 16,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2779,
            "file_name": "lib/matplotlib/transforms.py",
            "replace_code": "def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n    if not np.isfinite(vmin) or not np.isfinite(vmax):\n        return -expander, expander\n\n    # Ensure vmin is not greater than vmax if increasing is True\n    if increasing and vmax < vmin:\n        vmin, vmax = vmax, vmin\n\n    # Handle special cases\n    if vmax == vmin == 0 or (vmax - vmin) < tiny:\n        return -expander, expander\n    if vmax == vmin:\n        return vmin - expander, vmax + expander\n\n    # Process other cases\n    diff = vmax - vmin\n    if diff > 0:\n        expander = max(expander, diff * tiny)  # Set expander value based on the difference\n    else:\n        expander = -expander  # Adjust expander for negative difference\n\n    return vmin - expander, vmax + expander",
            "imports": [
                "import numpy as np"
            ]
        }
    ]
}