{
    "matplotlib": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1438,
            "file_name": "lib/matplotlib/axes/_base.py",
            "replace_code": "def apply_aspect(self, position=None):\n        \"\"\"\n        Adjust the Axes for a specified data aspect ratio.\n    \n        Depending on `.get_adjustable`, this will modify either the Axes box\n        (position) or the view limits. In the former case, `.get_anchor`\n        will affect the position.\n    \n        Notes\n        -----\n        This is called automatically when each Axes is drawn.  You may need\n        to call it yourself if you need to update the Axes position and/or\n        view limits before the Figure is drawn.\n    \n        See Also\n        --------\n        matplotlib.axes.Axes.set_aspect\n            for a description of aspect ratio handling.\n        matplotlib.axes.Axes.set_adjustable\n            defining the parameter to adjust in order to meet the required\n            aspect.\n        matplotlib.axes.Axes.set_anchor\n            defining the position in case of extra space.\n        \"\"\"\n        if position is None:\n            position = self.get_position()\n    \n        aspect = self.get_aspect()\n    \n        if aspect == 'auto':\n            self._set_position(position, which='both')\n            return\n    \n        if aspect == 'equal':\n            aspect = 1\n    \n      \n        fig_width, fig_height = self.get_figure().get_size_inches()\n        fig_aspect = fig_height / fig_width\n    \n        if self.get_adjustable() == 'box':\n            \n            if self in self._twinned_axes:\n                raise RuntimeError(\"Adjustable 'box' is not allowed in a \"\n                                   \"twinned Axes; use 'datalim' instead\")\n            \n            box_aspect = aspect * self.get_data_ratio()\n            pb = position.frozen()\n            pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n            self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n            return\n    \n        # self._adjustable == 'datalim', reset viewLim to ensure tick locator\n        # update when they are needed next time\n        self.set_viewLim(self.dataLim)\n\n        if self in self._twinned_axes:\n            return\n        \n        known_fixed = any((fmt.find('off') < 0 and scale == 'linear')\n                          for (scale, fmt), locator, factor in self._xaxis.get_major_locator()._steps)\n    \n        if not known_fixed:\n            self.set_xlim(3, 1000)\n        nmax = 1000\n        while nmax > 1:\n            self.set_xlim(3, nmax)\n            xticks = len(self.get_xticks())\n            if xticks > 9:\n                nmax = nmax - 1\n            else:\n                break\n                \n        if not known_fixed:\n            self.set_ylim(3, 1000)\n        nmax = 1000\n        while nmax > 1:\n            self.set_ylim(3, nmax)\n            yticks = len(self.get_yticks())\n            if yticks > 9:\n                nmax = nmax - 1\n            else:\n                break",
            "imports": []
        }
    ]
}