{
    "matplotlib": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1438,
            "file_name": "lib/matplotlib/axes/_base.py",
            "replace_code": "def apply_aspect(self, position=None):\n\n    \"\"\"\n    Adjust the Axes for a specified data aspect ratio.\n    \n    Depending on `.get_adjustable` this will modify either the Axes box\n    (position) or the view limits. In the former case, `.get_anchor`\n    will affect the position.\n    \n    Notes\n    -----\n    This is called automatically when each Axes is drawn.  You may need\n    to call it yourself if you need to update the Axes position and/or\n    view limits before the Figure is drawn.\n    \n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect ratio handling.\n    matplotlib.axes.Axes.set_adjustable\n        defining the parameter to adjust in order to meet the required\n        aspect.\n    matplotlib.axes.Axes.set_anchor\n        defining the position in case of extra space.\n    \"\"\"\n    if position is None:\n        position = self.get_position(original=True)\n    \n    aspect = self.get_aspect()\n    \n    if aspect == 'auto':\n        self._set_position(position, which='active')\n        return\n    \n    if aspect == 'equal':\n        aspect = 1\n    \n    fig_aspect = self.get_figure().get_figwidth() / self.get_figure().get_figheight()\n    x0, y0, w, h = position.bounds\n    \n    if self.get_adjustable() == 'box':\n        box_aspect = aspect * self.get_data_ratio()\n        if h / w > box_aspect:\n            new_h = w * box_aspect\n            y0 += (h - new_h) / 2\n            h = new_h\n        else:\n            new_w = h / box_aspect\n            x0 += (w - new_w) / 2\n            w = new_w\n    elif self.get_adjustable() == 'datalim':\n        if aspect != 1:\n            raise NotImplementedError(\"Adjustable 'datalim' currently only supports aspect='auto' or aspect=1.\")\n        self.set_position(position, which='both')\n        self.set_aspect('auto')\n        return\n    \n    self.set_position([x0, y0, w, h])"
        }
    ]
}