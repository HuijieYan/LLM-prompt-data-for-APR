{
    "matplotlib": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 1438,
            "file_name": "lib/matplotlib/axes/_base.py",
            "replace_code": "def apply_aspect(self, position=None, x_shape=None, y_shape=None,\n                     divide_by_first=False):\n        \"\"\"\n        Adjust the Axes for a specified data aspect ratio.\n\n        Depending on ``.get_adjustable`` this will modify either the Axes\n        box (position) or the view limits. In the former case,\n        ``.get_anchor`` will affect the position.\n\n        Parameters\n        ----------\n        position : `.Bbox`, optional\n            The new position for the Axes.  If *None*, the current position\n            is taken.  The `aspect` attribute is ignored if *position* is\n            not *None*; the bbox is simply set to *position*.\n        x_shape / y_shape : float, optional\n            The aspect ratio for the x- and y-axis.  Its absolute value is\n            irrelevant.  This determines what aspect *position* should be if\n            positions differs from ``get_position(original=True)``.  This is\n            the new aspect ratio for the x- and y-axis.  Its absolute value\n            is irrelevant; the only significance is the ratio.\n        divide_by_first : bool, optional\n            If *True*, and *x_shape* or *y_shape* is provided, compare the\n            apect to that of the first Axes from a use case like::\n\n                ax1 = fig.add_subplot(121, adjustable='datalim')\n                ax2 = fig.add_subplot(122, adjustable='datalim')\n                ax2.get_shared_x_axes().join(ax1, ax2)\n                ax1.plot([1, 2])\n                ax2.plot([1, 2e6])\n                ax1.apply_aspect()   # Does not change ax1's limits,\n                                     # breaks the spline...\n                ax2.apply_aspect()   # ...but changes ax2's limits.\n\n            allowing limit expansion.  The spline is broken regardless; a \"fake\n            spline\" that is linear in data space is used in 2.1.x and below;\n            this would come back in case of ``use_aspect = False``.\n        \"\"\"\n        if position is None:\n            position = self.get_position(original=True)\n\n        aspect = self.get_aspect()\n\n        if aspect == 'auto':\n            self._set_position(position, which='active')\n            return\n\n        if aspect == 'equal':\n            if x_shape is None or y_shape is None:\n                x_shape, y_shape = np.ones((2,), dtype=float)\n            else:\n                pass\n\n        # non-equal aspect\n        else:\n            # scale the bboxes for the aspect ratio of the device\n            if x_shape is None:\n                x_shape = 1\n            if y_shape is None:\n                y_shape = 1\n\n        fig_width, fig_height = self.get_figure().get_size_inches()\n        fig_aspect = fig_height / fig_width\n\n        if self._adjustable == 'box':\n            pb = position.frozen()\n            pb1 = pb.shrunk_to_aspect(x_shape / y_shape, pb, fig_aspect)\n            self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n            return\n\n        with cbook._setattr_cm(self, _adjustable='datalim'):\n            self._process_unit_info(xdata=self.get_xscale(),\n                                    ydata=self.get_yscale())\n\n            x0, x1 = map(\n                x_scale.scale, self.convert_xunits(self.get_xbound()))\n            y0, y1 = map(\n                y_scale.scale, self.convert_yunits(self.get_ybound()))\n            xsize = max(abs(x1 - x0), 1e-30)\n            ysize = max(abs(y1 - y0), 1e-30)\n            l, b, w, h = position.bounds\n            box_aspect = fig_aspect * (h / w)\n            r = box_aspect / (x_shape / y_shape)\n            if r < 1.0:\n                x_inner, y_inner = x_size / r, y_size\n            else:\n                x_inner, y_inner = x_size, y_size * r\n            p1 = position.shrunk_to_aspect(\n                x_inner / y_inner, position, fig_aspect)\n            self._set_position(position.anchored(self.get_anchor(), p1),\n                               which='active')",
            "imports": []
        }
    ]
}