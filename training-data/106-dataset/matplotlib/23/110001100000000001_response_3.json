{
    "matplotlib": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1438,
            "file_name": "lib/matplotlib/axes/_base.py",
            "replace_code": "def apply_aspect(self, position=None):\n        if position is None:\n            position = self.get_position(original=True)\n    \n        aspect = self.get_aspect()\n    \n        if aspect == 'auto':\n            self._set_position(position, which='active')\n            return\n    \n        if aspect == 'equal':\n            aspect = 1\n    \n        fig_width, fig_height = self.get_figure().get_size_inches()\n        fig_aspect = fig_height / fig_width\n    \n        if self._adjustable == 'box':\n            if self in self._twinned_axes:\n                raise RuntimeError(\"Adjustable 'box' is not allowed in a \"\n                                   \"twinned Axes; use 'datalim' instead\")\n            box_aspect = aspect * self.get_data_ratio()\n            pb = position.frozen()\n            pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n            self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n            return\n    \n        # self._adjustable == 'datalim'\n    \n        self._set_position(position, which='active')\n\n        if self.get_xscale() != 'linear' or self.get_yscale() != 'linear':\n            raise RuntimeError(\"Non-linear axes are not currently supported by apply_aspect.\")\n\n        x0, x1 = self.get_xbound()\n        y0, y1 = self.get_ybound()\n        xsize = max(abs(x1 - x0), 1e-30)\n        ysize = max(abs(y1 - y0), 1e-30)\n    \n        l, b, w, h = position.bounds\n        box_aspect = fig_aspect * (h / w)\n        data_ratio = box_aspect / aspect\n    \n        target_aspect = xsize / ysize * data_ratio\n    \n        if target_aspect > 1:\n            self.set_xlim((x0 + x1 - ysize * target_aspect) / 2, (x0 + x1 + ysize * target_aspect) / 2)\n        else:\n            self.set_ylim((y0 + y1 - xsize / target_aspect) / 2, (y0 + y1 + xsize / target_aspect) / 2)",
            "imports": []
        }
    ]
}