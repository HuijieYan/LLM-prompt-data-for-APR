{
    "matplotlib": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1438,
            "file_name": "lib/matplotlib/axes/_base.py",
            "replace_code": "def apply_aspect(self, position=None):\n    if position is None:\n        position = self.get_position(original=True)\n\n    aspect = self.get_aspect()\n\n    if aspect == 'auto':\n        self._set_position(position, which='active')\n        return\n\n    if aspect == 'equal':\n        aspect = 1\n\n    fig_width, fig_height = self.get_figure().get_size_inches()\n    fig_aspect = fig_height / fig_width\n\n    if self._adjustable == 'datalim':\n        xmin, xmax = self.get_xbound()\n        ymin, ymax = self.get_ybound()\n        xmin_orig, xmax_orig = xmin, xmax\n        ymin_orig, ymax_orig = ymin, ymax\n\n        x_trf = self.xaxis.get_transform()\n        y_trf = self.yaxis.get_transform()\n\n        xmin, xmax = x_trf.transform([xmin, xmax])\n        ymin, ymax = y_trf.transform([ymin, ymax])\n\n        # Perform the aspect ratio adjustment\n        xsize = max(abs(xmax - xmin), 1e-30)\n        ysize = max(abs(ymax - ymin), 1e-30)\n\n        dataratio = fig_aspect * xsize / ysize / aspect\n\n        xmin, xmax = x_trf.inverted().transform([xsize, xsize / dataratio])\n        ymin, ymax = y_trf.inverted().transform([-ysize * dataratio, ysize])\n\n        # Set the new axis limits\n        self.set_xbound(xmin, xmax)\n        self.set_ybound(ymin, ymax)\n\n    elif self._adjustable == 'box':\n        if self in self._twinned_axes:\n            raise RuntimeError(\"Adjustable 'box' is not allowed in a \"\n                               \"twinned Axes; use 'datalim' instead\")\n\n        box_aspect = aspect * self.get_data_ratio()\n        pb = position.frozen()\n        pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n        self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')",
            "imports": [
                "import numpy as np"
            ]
        }
    ]
}