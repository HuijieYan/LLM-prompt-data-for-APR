{
    "matplotlib": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1438,
            "file_name": "lib/matplotlib/axes/_base.py",
            "replace_code": "def apply_aspect(self, position=None):\n        \"\"\"\n        Adjust the Axes for a specified data aspect ratio.\n    \n        Depending on `.get_adjustable` this will modify either the Axes box\n        (position) or the view limits. In the former case, `.get_anchor`\n        will affect the position.\n    \n        Notes\n        -----\n        This is called automatically when each Axes is drawn.  You may need\n        to call it yourself if you need to update the Axes position and/or\n        view limits before the Figure is drawn.\n    \n        See Also\n        --------\n        matplotlib.axes.Axes.set_aspect\n            for a description of aspect ratio handling.\n        matplotlib.axes.Axes.set_adjustable\n            defining the parameter to adjust in order to meet the required\n            aspect.\n        matplotlib.axes.Axes.set_anchor\n            defining the position in case of extra space.\n        \"\"\"\n        if position is None:\n            position = self.get_position(original=True)\n    \n        aspect = self.get_aspect()\n    \n        if aspect == 'auto':\n            self._set_position(position, which='active')\n            return\n    \n        if aspect == 'equal':\n            aspect = 1\n    \n        fig_width, fig_height = self.get_figure().get_size_inches()\n        fig_aspect = fig_height / fig_width\n    \n        if self._adjustable == 'box':\n            if self in self._twinned_axes:\n                raise RuntimeError(\"Adjustable 'box' is not allowed in a \"\n                                   \"twinned Axes; use 'datalim' instead\")\n            box_aspect = aspect * self.get_data_ratio()\n            pb = position.frozen()\n            pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n            self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n            return\n    \n        # self._adjustable == 'datalim'\n    \n        # reset active to original in case it had been changed by prior use\n        # of 'box'\n        self._set_position(position, which='active')\n    \n        x_trf = self.xaxis.get_transform()\n        y_trf = self.yaxis.get_transform()\n        xmin, xmax = map(x_trf.transform, self.get_xbound())\n        ymin, ymax = map(y_trf.transform, self.get_ybound())\n        xsize = max(abs(xmax - xmin), 1e-30)\n        ysize = max(abs(ymax - ymin), 1e-30)\n    \n        l, b, w, h = position.bounds\n        box_aspect = fig_aspect * (h / w)\n        data_ratio = box_aspect / aspect\n    \n        y_expander = data_ratio * xsize / ysize - 1\n        # Always expand the y-axis to avoid sending artists out-of-bounds\n        adjust_y = True\n    \n        if abs(y_expander) < 0.005:\n            return\n\n        if adjust_y:\n            yc = 0.5 * (ymin + ymax)\n            y0 = yc - ysize / 2.0\n            y1 = yc + ysize / 2.0\n            self.set_ybound(*map(y_trf.inverted().transform, (y0, y1)))\n        else:\n            xc = 0.5 * (xmin + xmax)\n            x0 = xc - xsize / 2.0\n            x1 = xc + xsize / 2.0\n            self.set_xbound(*map(x_trf.inverted().transform, (x0, x1)))",
            "imports": []
        }
    ]
}