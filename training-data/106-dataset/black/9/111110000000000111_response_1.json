{
    "black": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 725,
            "file_name": "black.py",
            "replace_code": "def get_grammars(target_versions: Set[TargetVersion]) -> List[Grammar]:\n    if not target_versions:\n        return GRAMMARS\n    elif all(version in target_versions for version in (TargetVersion.PY2, TargetVersion.PY2_AND_PAREN)) or all(not version.is_python2() for version in target_versions):\n        return [\n            pygram.python_grammar_no_print_statement_no_exec_statement,\n            pygram.python_grammar_no_print_statement,\n        ]\n    else:\n        return [python_grammar]",
            "import_list": [
                "from typing import Set, List",
                "from black import TargetVersion, pygram",
                "from black.pygram import python_grammar, python_grammar_no_print_statement_no_exec_statement, python_grammar_no_print_statement"
            ]
        }
    ]
}