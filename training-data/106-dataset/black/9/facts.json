{
    "1.1.1": "def get_grammars(target_versions: Set[TargetVersion]) -> List[Grammar]:\n    if not target_versions:\n        return GRAMMARS\n    elif all(not version.is_python2() for version in target_versions):\n        # Python 2-compatible code, so don't try Python 3 grammar.\n        return [\n            pygram.python_grammar_no_print_statement_no_exec_statement,\n            pygram.python_grammar_no_print_statement,\n        ]\n    else:\n        return [pygram.python_grammar]\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/black_9/black.py",
    "1.3.2": [
        "is_python2(self) -> bool"
    ],
    "1.4.1": [
        "    @patch(\"black.dump_to_file\", dump_to_stderr)\n    def test_python2_print_function(self) -> None:\n        source, expected = read_data(\"python2_print_function\")\n        mode = black.FileMode(target_versions={black.TargetVersion.PY27})\n        actual = fs(source, mode=mode)\n        self.assertFormatEqual(expected, actual)\n        black.assert_stable(source, actual, mode)"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs/repos/black_9/tests/test_black.py"
    ],
    "2.1.1": [
        [
            "E           black.InvalidInput: Cannot parse: 6:13: print(a, file=sys.stderr)"
        ]
    ],
    "2.1.2": [
        [
            "self = <test_black.BlackTestCase testMethod=test_python2_print_function>\n\n    @patch(\"black.dump_to_file\", dump_to_stderr)\n    def test_python2_print_function(self) -> None:\n        source, expected = read_data(\"python2_print_function\")\n        mode = black.FileMode(target_versions={black.TargetVersion.PY27})\n>       actual = fs(source, mode=mode)\n\ntests/test_black.py:468: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nblack.py:669: in format_str\n    src_node = lib2to3_parse(src_contents.lstrip(), mode.target_versions)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsrc_txt = \"#!/usr/bin/env python2\\nfrom __future__ import print_function\\n\\nprint('hello')\\nprint(u'hello')\\nprint(a, file=sys.stderr)\\n\"\ntarget_versions = {<TargetVersion.PY27: 2>}\n\n    def lib2to3_parse(src_txt: str, target_versions: Iterable[TargetVersion] = ()) -> Node:\n        \"\"\"Given a string with source, return the lib2to3 Node.\"\"\"\n        if src_txt[-1:] != \"\\n\":\n            src_txt += \"\\n\"\n    \n        for grammar in get_grammars(set(target_versions)):\n            drv = driver.Driver(grammar, pytree.convert)\n            try:\n                result = drv.parse_string(src_txt, True)\n                break\n    \n            except ParseError as pe:\n                lineno, column = pe.context[1]\n                lines = src_txt.splitlines()\n                try:\n                    faulty_line = lines[lineno - 1]\n                except IndexError:\n                    faulty_line = \"<line number missing in source>\"\n                exc = InvalidInput(f\"Cannot parse: {lineno}:{column}: {faulty_line}\")\n        else:\n>           raise exc from None",
            "\nblack.py:758: InvalidInput"
        ]
    ],
    "2.1.3": [
        [
            {
                "target_versions": "{<TargetVersion.PY27: 2>}"
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "target_versions": "set"
            },
            {}
        ]
    ],
    "2.1.5": [
        [
            {
                "target_versions": "{<TargetVersion.PY27: 2>}"
            },
            {}
        ]
    ],
    "2.1.6": [
        [
            {
                "target_versions": "set"
            },
            {}
        ]
    ],
    "3.1.1": [
        "black inserts unnecessary whitespace around print() with target_version = py27\n"
    ],
    "3.1.2": [
        "black is adding whitespace between print and ( with --target-version py27.\n\nTest file:\n\nfrom __future__ import print_function\n\nprint(\"hello world\")\nResult:\n\n$ black t.py --target-version py27 --diff\n--- t.py\t2019-03-14 22:09:34.902887 +0000\n+++ t.py\t2019-03-14 22:10:21.022372 +0000\n@@ -1,4 +1,4 @@\n from __future__ import print_function\n\n-print(\"hello world\")\n+print (\"hello world\")\n\nreformatted t.py\nAll done! \u2728 \ud83c\udf70 \u2728\n1 file reformatted.\nOperating system: OS X\nPython version: 3.7.2\nBlack version: 19.3b0\nDoes also happen on master: yes\n"
    ]
}