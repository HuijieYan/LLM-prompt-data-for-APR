{
    "black": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n        if current_line.leaves:\n            first_leaf = current_line.leaves[0]\n            before = min(first_leaf.prefix.count(\"\\n\"), 2)\n            first_leaf.prefix = \"\"\n        else:\n            before = 0\n        \n        depth = current_line.depth\n        \n        # Add condition for handling decorators, imports, and flow control\n        if current_line.is_decorator or current_line.is_def or current_line.is_class:\n            # ... handle decorators, previous line, and current line ...\n            return 0, 0\n\n        if current_line.is_flow_control:\n            return before, 1\n        \n        if (\n            self.previous_line\n            and self.previous_line.is_import()\n            and not current_line.is_import()\n            and depth == self.previous_line.depth\n        ):\n            return max(before, 1), 0\n\n        if (\n            self.previous_line\n            and self.previous_line.is_yield()\n            and (not current_line.is_yield or depth != self.previous_line.depth)\n        ):\n            return max(before, 1), 0\n\n        return before, 0",
            "import_list": [
                "from typing import Tuple"
            ]
        }
    ]
}