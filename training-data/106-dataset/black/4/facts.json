{
    "1.1.1": "def maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    \n    before, after = self._maybe_empty_lines(current_line)\n    before -= self.previous_after\n    self.previous_after = after\n    self.previous_line = current_line\n    return before, after\n",
    "1.1.2": "Return the number of extra empty lines before and after the `current_line`.\n\nThis is for separating `def`, `async def` and `class` with extra empty\nlines (two on module-level).",
    "1.2.1": "@dataclass\nclass EmptyLineTracker()",
    "1.2.2": "Provides a stateful method that returns the number of potential extra\nempty lines needed before and after the currently processed line.\n\nNote: this tracker works on lines that haven't been split yet.  It assumes\nthe prefix of the first leaf consists of optional newlines.  Those newlines\nare consumed by `maybe_empty_lines()` and included in the computation.",
    "1.2.3": [
        "_maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]"
    ],
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/black_4/black.py",
    "1.3.2": [
        "_maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]"
    ],
    "1.4.1": [
        "    @patch(\"black.dump_to_file\", dump_to_stderr)\n    def test_beginning_backslash(self) -> None:\n        source, expected = read_data(\"beginning_backslash\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, black.FileMode())"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs/repos/black_4/tests/test_black.py"
    ],
    "2.1.1": [
        [
            "E   AssertionError: 'print(\"hello, world\")\\n' != '\\n\\nprint(\"hello, world\")\\n'\nE   + \nE   + \nE     print(\"hello, world\")"
        ]
    ],
    "2.1.2": [
        [
            "self = <test_black.BlackTestCase testMethod=test_beginning_backslash>\n\n    @patch(\"black.dump_to_file\", dump_to_stderr)\n    def test_beginning_backslash(self) -> None:\n        source, expected = read_data(\"beginning_backslash\")\n        actual = fs(source)\n>       self.assertFormatEqual(expected, actual)\n\ntests/test_black.py:646: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_black.py:168: in assertFormatEqual\n    self.assertEqual(expected, actual)"
        ]
    ],
    "2.1.3": [
        [
            {
                "self._maybe_empty_lines": "<bound method EmptyLineTracker._maybe_empty_lines of EmptyLineTracker(is_pyi=False, previous_line=None, previous_after=0, previous_defs=[])>",
                "self": "EmptyLineTracker(is_pyi=False, previous_line=None, previous_after=0, previous_defs=[])",
                "current_line": "Line(depth=0, leaves=[Leaf(NAME, 'print'), Leaf(LPAR, '('), Leaf(STRING, '\"hello, world\"'), Leaf(RPAR, ')')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                "self.previous_after": "0"
            },
            {
                "before": "2",
                "after": "0",
                "self._maybe_empty_lines": "<bound method EmptyLineTracker._maybe_empty_lines of EmptyLineTracker(is_pyi=False, previous_line=Line(depth=0, leaves=[Leaf(NAME, 'print'), Leaf(LPAR, '('), Leaf(STRING, '\"hello, world\"'), Leaf(RPAR, ')')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), previous_after=0, previous_defs=[])>",
                "self": "EmptyLineTracker(is_pyi=False, previous_line=Line(depth=0, leaves=[Leaf(NAME, 'print'), Leaf(LPAR, '('), Leaf(STRING, '\"hello, world\"'), Leaf(RPAR, ')')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), previous_after=0, previous_defs=[])",
                "self.previous_line": "Line(depth=0, leaves=[Leaf(NAME, 'print'), Leaf(LPAR, '('), Leaf(STRING, '\"hello, world\"'), Leaf(RPAR, ')')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "self._maybe_empty_lines": "method",
                "self": "EmptyLineTracker",
                "current_line": "Line",
                "self.previous_after": "int"
            },
            {
                "before": "int",
                "after": "int",
                "self._maybe_empty_lines": "method",
                "self": "EmptyLineTracker",
                "self.previous_line": "Line"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "self._maybe_empty_lines": "<bound method EmptyLineTracker._maybe_empty_lines of EmptyLineTracker(is_pyi=False, previous_line=None, previous_after=0, previous_defs=[])>",
                "self": "EmptyLineTracker(is_pyi=False, previous_line=None, previous_after=0, previous_defs=[])",
                "current_line": "Line(depth=0, leaves=[Leaf(NAME, 'print'), Leaf(LPAR, '('), Leaf(STRING, '\"hello, world\"'), Leaf(RPAR, ')')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                "self.previous_after": "0"
            },
            {
                "before": "0",
                "after": "0",
                "self._maybe_empty_lines": "<bound method EmptyLineTracker._maybe_empty_lines of EmptyLineTracker(is_pyi=False, previous_line=Line(depth=0, leaves=[Leaf(NAME, 'print'), Leaf(LPAR, '('), Leaf(STRING, '\"hello, world\"'), Leaf(RPAR, ')')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), previous_after=0, previous_defs=[])>",
                "self": "EmptyLineTracker(is_pyi=False, previous_line=Line(depth=0, leaves=[Leaf(NAME, 'print'), Leaf(LPAR, '('), Leaf(STRING, '\"hello, world\"'), Leaf(RPAR, ')')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), previous_after=0, previous_defs=[])",
                "self.previous_line": "Line(depth=0, leaves=[Leaf(NAME, 'print'), Leaf(LPAR, '('), Leaf(STRING, '\"hello, world\"'), Leaf(RPAR, ')')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self._maybe_empty_lines": "method",
                "self": "EmptyLineTracker",
                "current_line": "Line",
                "self.previous_after": "int"
            },
            {
                "before": "int",
                "after": "int",
                "self._maybe_empty_lines": "method",
                "self": "EmptyLineTracker",
                "self.previous_line": "Line"
            }
        ]
    ],
    "3.1.1": [
        "Black produced different code on the second pass of the formatter: Explicit line join in the first line\n"
    ],
    "3.1.2": [
        "Operating system: macOS Mojave 10.14.5 (18F132)\nPython version: Python 3.7.3\nBlack version: 19.3b0 (f3bb22a)\nDoes also happen on master: yes\n\nMinified reproducer:\n\n\\\n\n\npass\nBlack diff:\n\n--- source\n+++ first pass\n@@ -1,5 +1,3 @@\n-\\\n-\n\n pass\n\n--- first pass\n+++ second pass\n@@ -1,3 +1,2 @@\n-\n pass\nLooks like some kind of boundary condition in EmptyLineTracker?\n"
    ]
}