{
    "tqdm": [
        {
            "bugID": 4,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 252,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False,\n                 unit='it', unit_scale=False, rate=None, bar_format=None,\n                 postfix=None, unit_divisor=1000, **extra_kwargs):\n\n    # Sanity check: total\n    if total and n > total:\n        total = None\n\n    elapsed_str = \"{:.2f}s\".format(elapsed)\n\n    # Calculating progress and stats\n    if total:\n        percentage = (n / total) * 100\n        remaining = (total - n) / rate if rate else 0\n        remaining_str = \"{:.2f}s\".format(remaining) if rate else '?'\n        n_fmt = str(n)\n        total_fmt = str(total) if total else None\n\n        if prefix:\n            l_bar = prefix + \": \" + '{0:3.0f}%|'.format(percentage)\n        else:\n            l_bar = '{0:3.0f}%|'.format(percentage)\n\n        rate_noinv_fmt = \"{:.2f}{}/s\".format(rate, unit) if rate else '?'\n        rate_inv_fmt = \"{:.2f}s/{}\".format(1 / rate, unit) if rate else '?'\n        rate_fmt = rate_inv_fmt if rate and 1 / rate > 1 else rate_noinv_fmt\n\n        r_bar = '| {0}/{1} [{2}<{3}, {4}{5}]'.format(\n            n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt, postfix)\n\n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n\n        if bar_format:\n            # Implement custom bar formatting\n            bar_format = bar_format.format(\n                n=n, n_fmt=n_fmt, total=total, total_fmt=total_fmt,\n                percentage=percentage, rate=rate, rate_fmt=rate_fmt,\n                elapsed=elapsed_str, remaining=remaining_str, l_bar=l_bar,\n                r_bar=r_bar, desc=prefix or '', postfix=postfix, unit=unit,\n                **extra_kwargs)\n            return bar_format\n        else:\n            return l_bar + r_bar\n    else:\n        return ((prefix + \": \") if prefix else '') + \\\n               '{0}{1} [{2}, {3}{4}]'.format(\n                   n, unit, elapsed_str, rate, postfix)",
            "imports": []
        }
    ]
}