{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False, unit='it', unit_scale=False, rate=None, bar_format=None):\n    if total and n > total:\n        total = None\n\n    elapsed_str = \"00:{}\".format(str(elapsed).zfill(2))\n\n    if rate is None and elapsed:\n        rate = n / elapsed\n\n    inv_rate = 1 / rate if (rate and (rate < 1)) else None\n\n    rate_fmt = ((f'{inv_rate:.2f}' + ('s' if inv_rate else unit) + '/' + (unit if inv_rate else 's')) if rate else '?')\n\n    n_fmt = f'{n}'\n    total_fmt = str(total) if total else None\n\n    if total:\n        frac = n / total\n        percentage = frac * 100\n        remaining_str = '??'\n\n        l_bar = (prefix if prefix else '') + f'{percentage:.0f}%'\n        r_bar = f'| {n_fmt}/{total_fmt} [{elapsed_str}<{remaining_str}, {rate_fmt}]'\n\n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n\n        if bar_format:\n            bar_args = {\n                'n': n,\n                'n_fmt': n_fmt,\n                'total': total,\n                'total_fmt': total_fmt,\n                'percentage': percentage,\n                'rate': rate if inv_rate is None else inv_rate,\n                'rate_noinv': rate,\n                'rate_noinv_fmt': (f'{rate:.2f}' + 'it/s') if rate else '?it/s',\n                'rate_fmt': rate_fmt,\n                'elapsed': elapsed_str,\n                'remaining': remaining_str,\n                'l_bar': l_bar,\n                'r_bar': r_bar,\n                'desc': prefix if prefix else ''\n            }\n\n            if '{bar}' in bar_format:\n                l_bar_user, r_bar_user = bar_format.split('{bar}')\n                l_bar, r_bar = l_bar.format(**bar_args), r_bar.format(**bar_args)\n            else:\n                return bar_format.format(**bar_args)\n\n        N_BARS = max(1, ncols - len(l_bar) - len(r_bar)) if ncols else 10\n\n        if ascii:\n            bar_length, frac_bar_length = divmod(int(frac * N_BARS * 10), 10)\n            bar = '#' * bar_length\n            frac_bar = chr(48 + frac_bar_length) if frac_bar_length else ' '\n        else:\n            bar_length, frac_bar_length = divmod(int(frac * N_BARS * 8), 8)\n            bar = '\u2588' * bar_length\n            frac_bar = chr(9600 + frac_bar_length) if frac_bar_length else ' '\n\n        if bar_length < N_BARS:\n            full_bar = bar + frac_bar + ' ' * max(N_BARS - bar_length - 1, 0)\n        else:\n            full_bar = bar + ' ' * max(N_BARS - bar_length, 0)\n\n        return l_bar + full_bar + r_bar\n\n    else:\n        return (prefix if prefix else '') + f'{n_fmt}{unit} [{elapsed_str}, {rate_fmt}]'",
            "imports": []
        }
    ]
}