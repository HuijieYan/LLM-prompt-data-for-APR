{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format=None):\n    # ... omitted code ...\n\n    if bar_format:\n        # Custom bar formatting\n        # Populate a dict with all available progress indicators\n        bar_args = {'n': n,\n                    'n_fmt': n_fmt,\n                    'total': total,\n                    'total_fmt': total_fmt,\n                    'percentage': percentage,\n                    'rate': rate if inv_rate is None else inv_rate,\n                    'rate_noinv': rate,\n                    'rate_noinv_fmt': ((format_sizeof(rate)\n                                            if unit_scale else\n                                            '{0:5.2f}'.format(rate))\n                                            if rate else '?') + 'it/s',\n                    'rate_fmt': rate_fmt,\n                    'elapsed': elapsed_str,\n                    'remaining': remaining_str,\n                    'l_bar': prefix if prefix else '',\n                    'r_bar': '',\n                    'desc': '',\n                    'bar': full_bar,\n                    }\n\n        # Interpolate supplied bar format with the dict\n        l_bar_user, r_bar_user = bar_format.split('{bar}')\n        l_bar = l_bar_user.format(**bar_args)\n        r_bar = r_bar_user.format(**bar_args)\n\n        # Piece together the bar parts\n        return l_bar + bar + r_bar\n    else:\n        # Formatting progress bar\n        # space available for bar's display\n        N_BARS = max(1, ncols - len(l_bar) - len(r_bar)) if ncols \\\n            else 10\n\n        # format bar depending on availability of unicode/ascii chars\n        if ascii:\n            bar_length, frac_bar_length = divmod(\n                int(frac * N_BARS * 10), 10)",
            "imports": []
        }
    ]
}