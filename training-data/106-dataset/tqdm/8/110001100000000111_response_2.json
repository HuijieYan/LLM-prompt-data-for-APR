{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format=None):\n    \"\"\"\n    Return a string-based progress bar given some parameters\n\n    Parameters\n    ----------\n    n  : int\n        Number of finished iterations.\n    total  : int\n        The expected total number of iterations. If meaningless (), only\n        basic progress statistics are displayed (no ETA).\n    elapsed  : float\n        Number of seconds passed since start.\n    ncols  : int, optional\n        The width of the entire output message. If specified,\n        dynamically resizes the progress meter to stay within this bound\n        [default: None]. The fallback meter width is 10 for the progress\n        bar + no limit for the iterations counter and statistics. If 0,\n        will not print any meter (only stats).\n    prefix  : str, optional\n        Prefix message (included in total width) [default: ''].\n    ascii  : bool, optional\n        If not set, use unicode (smooth blocks) to fill the meter\n        [default: False]. The fallback is to use ASCII characters\n        (1-9 #).\n    unit  : str, optional\n        The iteration unit [default: 'it'].\n    unit_scale  : bool, optional\n        If set, the number of iterations will printed with an\n        appropriate SI metric prefix (K = 10^3, M = 10^6, etc.)\n        [default: False].\n    rate  : float, optional\n        Manual override for iteration rate.\n        If [default: None], uses n/elapsed.\n    bar_format  : str, optional\n        Specify a custom bar string formatting. May impact performance.\n        [default: None].\n\n    Returns\n    -------\n    out  : Formatted meter and stats, ready to display.\n    \"\"\"\n\n    if total and n > total:\n        total = None  # sanity check: total\n\n    elapsed_str = format_interval(elapsed)\n\n    if rate is None and elapsed:\n        rate = n / elapsed\n    rate_fmt = format_interval(1 / rate) + unit + '/s' if rate else '?s'\n\n    n_fmt = format_sizeof(n) if unit_scale else str(n)\n    total_fmt = format_sizeof(total) if unit_scale and total else str(total)\n\n    if total:\n        frac = n / total\n        percentage = frac * 100\n        remaining_str = format_interval((total - n) / rate) if rate else '?'\n        l_bar = (prefix if prefix else '') + '{0:3.0f}%|'.format(percentage)\n        r_bar = '| {0}/{1} [{2}<{3}, {4}]'.format(\n            n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt)\n\n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n\n        if bar_format:\n            bar_format = bar_format.replace('{bar}', '{0}' + '{1}')\n            return bar_format.format(bar, ' ' * max(ncols - len(bar) - len(l_bar + r_bar), 0))\n\n        full_bar = '#' * int(frac * ncols)\n        return l_bar + full_bar + r_bar\n    else:\n        return (prefix if prefix else '') + '{0}{1} [{2}, {3}]'.format(\n            n_fmt, unit, elapsed_str, rate_fmt)",
            "import_list": []
        }
    ]
}