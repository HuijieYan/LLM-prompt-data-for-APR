{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                    ascii=False, unit='it', unit_scale=False, rate=None,\n                    bar_format=None):\n    from datetime import timedelta\n    \"\"\"\n    Return a string-based progress bar given some parameters\n    \n    Parameters\n    ----------\n    n  : int\n        Number of finished iterations.\n    total  : int\n        The expected total number of iterations. If meaningless (), only\n        basic progress statistics are displayed (no ETA).\n    elapsed  : float\n        Number of seconds passed since start.\n    ncols  : int, optional\n        The width of the entire output message. If specified,\n        dynamically resizes the progress meter to stay within this bound\n        [default: None]. The fallback meter width is 10 for the progress\n        bar + no limit for the iterations counter and statistics. If 0,\n        will not print any meter (only stats).\n    prefix  : str, optional\n        Prefix message (included in total width) [default: ''].\n    ascii  : bool, optional\n        If not set, use unicode (smooth blocks) to fill the meter\n        [default: False]. The fallback is to use ASCII characters\n        (1-9 #).\n    unit  : str, optional\n        The iteration unit [default: 'it'].\n    unit_scale  : bool, optional\n        If set, the number of iterations will printed with an\n        appropriate SI metric prefix (K = 10^3, M = 10^6, etc.)\n        [default: False].\n    rate  : float, optional\n        Manual override for iteration rate.\n        If [default: None], uses n/elapsed.\n    bar_format  : str, optional\n        Specify a custom bar string formatting. May impact performance.\n        [default: '{l_bar}{bar}{r_bar}'], where l_bar is\n        '{desc}{percentage:3.0f}%|' and r_bar is\n        '| {n_fmt}/{total_fmt} [{elapsed_str}<{remaining_str}, {rate_fmt}]'\n        Possible vars: bar, n, n_fmt, total, total_fmt, percentage,\n        rate, rate_fmt, elapsed, remaining, l_bar, r_bar, desc.\n    \n    Returns\n    -------\n    out  : Formatted meter and stats, ready to display.\n    \"\"\"\n    \n    # if total is not set or n is greater than total, set total to None\n    if total is None or n > total:\n        total = None\n    \n    # format seconds to HH:MM:SS\n    elapsed_str = str(timedelta(seconds=elapsed))\n    \n    # if unspecified, attempt to use rate = average speed\n    # (we allow manual override since predicting time is an arcane art)\n    if rate is None and elapsed:\n        rate = n / elapsed\n    \n    rate_fmt = '{0:5.2f}s'.format(rate)\n    \n    n_fmt = str(n)\n    total_fmt = str(total) if total else None\n    \n    # total is known: we can predict some stats\n    if total:\n        # fractional and percentage progress\n        frac = n / total\n        percentage = frac * 100\n    \n        remaining_str = str(timedelta(seconds=(total - n) / rate)) if rate else '?'\n    \n        l_bar = (prefix if prefix else '') + '{0:3.0f}%|'.format(percentage)\n        r_bar = '| {0}/{1} [{2}, {3}]'.format(n_fmt, total_fmt, elapsed_str, remaining_str)\n    \n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n    \n        if bar_format:\n            # if '{bar}' is in format string, use bar_format\n            if '{bar}' in bar_format:\n                l_bar_user, r_bar_user = bar_format.split('{bar}')\n                return l_bar.format(**bar_args) + bar_format + r_bar.format(**bar_args)\n            else:\n                return bar_format.format(**bar_args)\n    \n        # space available for bar's display\n        N_BARS = max(1, ncols - len(l_bar) - len(r_bar)) if ncols else 10\n    \n        # format bar depending on availability of unicode/ascii chars\n        bar = '#' * int(frac * N_BARS)\n    \n        # Piece together the bar parts\n        return l_bar + bar + r_bar\n    \n    else:\n        # no total: no progressbar, ETA, just progress stats\n        return (prefix if prefix else '') + '{0}{1} [{2}, {3}]'.format(n_fmt, unit, elapsed_str, rate_fmt)"
        }
    ]
}