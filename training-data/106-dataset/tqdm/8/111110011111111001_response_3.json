{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format=None):\n    \"\"\"\n    Return a string-based progress bar given some parameters\n\n    Parameters\n    ----------\n    # ... omitted parameters ...\n\n    Returns\n    -------\n    out  : Formatted meter and stats, ready to display.\n    \"\"\"\n\n    # Corrected formatting logic for progress bar\n    l_bar = (prefix if prefix else '') + '{0:3}%|'.format(int(n / total * 100))\n    r_bar = '| {0}/{1} [{2}, {3}]'.format(n, total, format_interval(elapsed), remaining_str, rate_fmt)\n\n    full_bar = ''  # logic for generating the full bar goes here\n\n    if ncols == 0:\n        return l_bar[:-1] + r_bar[1:]\n    elif bar_format:\n        # Custom bar formatting\n        # Populate a dict with all available progress indicators\n        bar_args = {'n': n,\n                    'n_fmt': n_fmt,\n                    'total': total,\n                    'total_fmt': total_fmt,\n                    'percentage': percentage,\n                    'rate': rate if inv_rate is None else inv_rate,\n                    'rate_noinv': rate,\n                    'rate_noinv_fmt': ((format_sizeof(rate) if unit_scale else '{0:5.2f}'.format(rate)) if rate else '?') + 'it/s',\n                    'rate_fmt': rate_fmt,\n                    'elapsed': elapsed_str,\n                    'remaining': remaining_str,\n                    'l_bar': l_bar,\n                    'r_bar': r_bar,\n                    'desc': prefix if prefix else '',\n                    'bar': full_bar\n                    }\n\n        # Interpolate supplied bar format with the dict\n        formatted_bar = bar_format.format(**bar_args)\n\n        return formatted_bar\n    else:\n        # Default formatting for the progress bar\n        return l_bar + full_bar + r_bar",
            "imports": []
        }
    ]
}