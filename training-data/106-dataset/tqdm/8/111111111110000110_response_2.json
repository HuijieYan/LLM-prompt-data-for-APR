{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format=None):\n\n        elapsed_str = format_interval(elapsed)\n    \n        if rate is None and elapsed:\n            rate = n / elapsed\n        inv_rate = 1 / rate if (rate and (rate < 1)) else None\n        rate_fmt = (format_sizeof(inv_rate if inv_rate else rate)\n                    if rate else '?') \\\n            + ('s' if inv_rate else unit) + '/' + (unit if inv_rate else 's')\n    \n        if unit_scale:\n            n_fmt = format_sizeof(n)\n            total_fmt = format_sizeof(total) if total else None\n        else:\n            n_fmt = str(n)\n            total_fmt = str(total)\n    \n        if total:\n            frac = n / total\n            percentage = frac * 100\n    \n            remaining_str = format_interval((total - n) / rate) \\\n                if rate else '?'\n    \n            l_bar = (prefix if prefix else '') + \\\n                '{0:3.0f}%|'.format(percentage)\n            r_bar = '| {0}/{1} [{2}<{3}, {4}]'.format(\n                    n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt)\n    \n            if ncols == 0:\n                return l_bar[:-1] + r_bar[1:]\n    \n            if bar_format:\n                bar_args = {'n': n,\n                            'n_fmt': n_fmt,\n                            'total': total,\n                            'total_fmt': total_fmt,\n                            'percentage': percentage,\n                            'rate': rate if inv_rate is None else inv_rate,\n                            'rate_noinv': rate,\n                            'rate_noinv_fmt': (format_sizeof(rate)\n                                                if unit_scale else\n                                                '{0:5.2f}'.format(rate)) + 'it/s',\n                            'rate_fmt': rate_fmt,\n                            'elapsed': elapsed_str,\n                            'remaining': remaining_str,\n                            'l_bar': l_bar,\n                            'r_bar': r_bar,\n                            'desc': prefix if prefix else ''\n                            }\n    \n                if '{bar}' in bar_format:\n                    l_bar_user, r_bar_user = bar_format.split('{bar}')\n                    l_bar, r_bar = l_bar.format(**bar_args), r_bar.format(**bar_args)\n                else:\n                    return bar_format.format(**bar_args)\n    \n            N_BARS = max(1, ncols - len(l_bar) - len(r_bar)) if ncols else 10\n    \n            # format bar depending on availability of unicode/ascii chars\n            if ascii:\n                full_bar = '#' * int(frac * N_BARS)\n            else:\n                full_bar = '\\u2588' * int(frac * N_BARS)\n    \n            if bar_format:\n                return l_bar + full_bar + r_bar\n            else:\n                return (prefix if prefix else '') + '{0}{1} [{2}, {3}]'.format(\n                    n_fmt, unit, elapsed_str, rate_fmt)\n        else:\n            return (prefix if prefix else '') + '{0}{1} [{2}, {3}]'.format(\n                n_fmt, unit, elapsed_str, rate_fmt)",
            "import_list": [
                "from math import floor",
                "from math import log10"
            ]
        }
    ]
}