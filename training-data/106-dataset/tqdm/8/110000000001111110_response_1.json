{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format=None):\n    if total and n > total:\n        total = None\n\n    elapsed_str = '00:{:02d}'.format(int(elapsed))\n\n    if rate is None and elapsed:\n        rate = n / elapsed\n    inv_rate = 1 / rate if (rate and (rate < 1)) else None\n\n    rate_fmt = ((str(inv_rate if inv_rate else rate) + ('s' if inv_rate else unit) + '/' + (unit if inv_rate else 's')) if rate else '?')\n\n    n_fmt = str(n)\n    total_fmt = str(total) if total else None\n\n    if total:\n        frac = n / total\n        percentage = frac * 100\n        remaining_str = '{:02d}:{:02d}'.format(int(((total - n) / rate)//60), int(((total - n) / rate) % 60))\n        l_bar = (prefix + '{:3.0f}%|'.format(percentage))\n        r_bar = '| ' + n_fmt + '/' + total_fmt + ' [' + elapsed_str + '<' + remaining_str + ', ' + rate_fmt + ']'\n\n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n\n        if bar_format:\n            bar_args = {'n': n,\n                        'n_fmt': n_fmt,\n                        'total': total,\n                        'total_fmt': total_fmt,\n                        'percentage': percentage,\n                        'rate': rate if inv_rate is None else inv_rate,\n                        'rate_noinv': rate,\n                        'rate_noinv_fmt': str(rate) + 'it/s',\n                        'rate_fmt': rate_fmt,\n                        'elapsed': elapsed_str,\n                        'remaining': remaining_str,\n                        'l_bar': l_bar,\n                        'r_bar': r_bar,\n                        'desc': prefix}             \n            return bar_format.format(**bar_args)\n\n    return (prefix if prefix else '') + '{0}{1} [{2}, {3}]'.format(\n        n_fmt, unit, elapsed_str, rate_fmt)",
            "import_list": []
        }
    ]
}