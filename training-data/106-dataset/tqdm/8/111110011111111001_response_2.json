{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format=None):\n    # ... previous code ...\n\n    # Formatting progress bar\n    bar_width = max(1, ncols - len(prefix) - 21) if ncols else 10\n    bar_length = int(bar_width * n / total)\n\n    if ascii:\n        bar = '#' * bar_length\n        frac_bar = '{0}'.format(chr(48 + int((bar_width * n) % total * 8 / total)) if bar_length < bar_width else ' ')\n    else:\n        bar = _unich(0x2588) * bar_length\n        frac_bar = _unich(0x2590 - int((bar_width * n) % total * 8 / total)) if bar_length < bar_width else ' '\n\n    full_bar = bar + frac_bar + ' ' * max(bar_width - bar_length - 1, 0)\n\n    if len(prefix) + len(full_bar) + 21 > ncols:\n        # Shrink a long bar to fit\n        bar_start = max(1, ncols - len(full_bar) - len(prefix) - 42)\n        full_bar = full_bar[-bar_start:]\n        bar_length = len(full_bar) - len(frac_bar)\n\n    # Piece together the bar parts\n    l_bar = prefix + '{0:3.0f}%|'.format(percentage)\n    remaining_str = format_interval((total - n) / rate) if rate else '?'\n    if bar_format:\n        # Custom bar formatting\n        # Populate a dict with all available progress indicators\n        bar_args = {'n': n,\n                    'n_fmt': n_fmt,\n                    'total': total,\n                    'total_fmt': total_fmt,\n                    'percentage': percentage,\n                    'rate': rate,\n                    'elapsed': elapsed_str,\n                    'remaining': remaining_str,\n                    'l_bar': l_bar,\n                    'bar': full_bar\n                    }\n\n        return bar_format.format(**bar_args)\n    else:\n        return l_bar + full_bar + '| {0}/{1} [{2}<{3}, {4}]'.format(\n            n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt)",
            "import_list": []
        }
    ]
}