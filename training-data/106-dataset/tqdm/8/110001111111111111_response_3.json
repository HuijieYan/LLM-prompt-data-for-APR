{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format='{l_bar}{bar}|{n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]'):\n    \"\"\"\n    Return a string-based progress bar given some parameters\n    Parameters\n    ----------\n    n  : int\n        Number of finished iterations.\n    total  : int\n        The expected total number of iterations. If meaningless (), only\n        basic progress statistics are displayed (no ETA).\n    elapsed  : float\n        Number of seconds passed since start.\n    ncols  : int, optional\n        The width of the entire output message.\n    prefix  : str, optional\n        Prefix message (included in total width).\n    ascii  : bool, optional\n        If not set, use unicode (smooth blocks) to fill the meter.\n    unit  : str, optional\n        The iteration unit.\n    unit_scale  : bool, optional\n        If set, the number of iterations will printed with an\n        appropriate SI metric prefix (K = 10^3, M = 10^6, etc.).\n    rate  : float, optional\n        Manual override for iteration rate.\n    bar_format  : str, optional\n        Specify a custom bar string formatting.\n\n    Returns\n    -------\n    out  : Formatted meter and stats, ready to display.\n    \"\"\"\n\n    # existing code\n\n    if bar_format:\n        # Custom bar formatting\n        # Populate a dict with all available progress indicators\n        bar_args = {\n            'n': n,\n            'n_fmt': n_fmt,\n            'total': total,\n            'total_fmt': total_fmt,\n            'percentage': percentage,\n            'rate': rate if inv_rate is None else inv_rate,\n            'rate_noinv': rate,\n            'rate_noinv_fmt': (\n                (format_sizeof(rate) if unit_scale else '{0:5.2f}'.format(rate))\n                if rate else '?') + 'it/s',\n            'rate_fmt': rate_fmt,\n            'elapsed': elapsed_str,\n            'remaining': remaining_str,\n            'l_bar': l_bar,\n            'r_bar': r_bar,\n            'desc': prefix if prefix else ''\n        }\n\n        # Interpolate supplied bar format with the dict\n        if '{bar}' in bar_format:\n            l_bar_user, r_bar_user = bar_format.split('{bar}')\n            l_bar, r_bar = l_bar.format(**bar_args), r_bar.format(**bar_args)\n        else:\n            return bar_format.format(**bar_args)",
            "imports": []
        }
    ]
}