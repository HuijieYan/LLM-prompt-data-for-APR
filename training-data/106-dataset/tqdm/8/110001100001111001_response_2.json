{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False, unit='it', unit_scale=False, rate=None, bar_format=None):\n    if total and n > total:\n        total = None\n    \n    elapsed_str = format_interval(elapsed)\n    \n    if rate is None and elapsed:\n        rate = n / elapsed\n    \n    if total:\n        frac = n / total\n        percentage = frac * 100\n        remaining_str = format_interval((total - n) / rate) if rate else '?'\n        \n        l_bar = (prefix if prefix else '') + '{0:3.0f}%|'.format(percentage)\n        r_bar = '| {0}/{1} [{2}<{3}, {4}]'.format(n, total, elapsed_str, remaining_str, rate if rate else '?') \n    \n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n\n        if bar_format and '{bar}' in bar_format:\n            l_bar_user, r_bar_user = bar_format.split('{bar}')\n            l_bar, r_bar = l_bar.format(percentage=percentage, desc=prefix if prefix else ''), r_bar.format(n=n, total=total, elapsed=elapsed_str, remaining=remaining_str, rate=rate)\n        else:\n            return bar_format.format(percentage=percentage, desc=prefix if prefix else '', n=n, total=total, elapsed=elapsed_str, remaining=remaining_str, rate=rate)\n        \n        bar_length = max(1, ncols - len(l_bar) - len(r_bar)) if ncols else 10\n        if ascii:\n            bar_length, frac_bar_length = int(frac * bar_length), int(10 * (frac * bar_length - int(frac * bar_length)))\n            full_bar = '#' * bar_length + '-' * (bar_length - bar_length)\n            if frac_bar_length != 0:\n                full_bar += chr(48 + frac_bar_length)\n        else:\n            bar_length, frac_bar_length = int(frac * bar_length), int(8 * (frac * bar_length - int(frac * bar_length)))\n            full_bar = _unich(0x2588) * bar_length + _unich(0x2590 - frac_bar_length) if frac_bar_length else ' '\n\n        return l_bar + full_bar + r_bar\n    \n    else:\n        return (prefix if prefix else '') + '{0}{1} [{2}, {3}]'.format(n, unit, elapsed_str, rate if rate else '?')",
            "import_list": []
        }
    ]
}