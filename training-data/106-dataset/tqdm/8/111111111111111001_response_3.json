{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False, unit='it', unit_scale=False, rate=None, bar_format=None):\n    # sanity check: total\n    if total and n > total:\n        total = None\n\n    # ... other code ...\n\n    l_bar = (prefix if prefix else '') + '{0:3.0f}%'.format(percentage)\n    r_bar = '| {0}/{1} [{2}<{3}, {4}]'.format(n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt)\n    if ncols == 0:\n        return l_bar[:-1] + r_bar[1:]\n\n    if bar_format:\n        bar_filling = max(1, ncols - len(l_bar) - len(r_bar)) if ncols else 10\n        if '{bar}' in bar_format:\n            bar = bar_format.replace('{bar}', '#'*bar_filling)  # Replace {bar} with \"#\"s\n            return l_bar + bar + r_bar\n        else:\n            return \"Custom bar formatting not supported\"  # Notify user bar_format not valid\n\n    # ASCII or Unicode bar\n    if ascii:\n        bar_length, frac_bar_length = divmod(int(frac * bar_filling * 10), 10)\n        bar = '#' * bar_length\n        frac_bar = chr(48 + frac_bar_length) if frac_bar_length else ' '\n    else:\n        bar_length, frac_bar_length = divmod(int(frac * bar_filling * 8), 8)\n        bar = _unich(0x2588) * bar_length\n        frac_bar = _unich(0x2590 - frac_bar_length) if frac_bar_length else ' '\n\n    # whitespace padding\n    if bar_length < bar_filling:\n        full_bar = bar + frac_bar + ' ' * max(bar_filling - bar_length - 1, 0)\n    else:\n        full_bar = bar + ' ' * max(bar_filling - bar_length, 0)\n\n    return l_bar + full_bar + r_bar",
            "imports": []
        }
    ]
}