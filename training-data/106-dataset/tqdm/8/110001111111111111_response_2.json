{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format=None):\n    \"\"\"\n    Return a string-based progress bar given some parameters\n    (the rest of the function remains the same)\n    \"\"\"\n\n    # (previous code remains as is)\n\n    if bar_format:\n        # Custom bar formatting\n        # Populate a dict with all available progress indicators\n        bar_args = {'n': n,\n                    'n_fmt': n_fmt,\n                    'total': total,\n                    'total_fmt': total_fmt,\n                    'percentage': percentage,\n                    'rate': rate if inv_rate is None else inv_rate,\n                    'rate_noinv': rate,\n                    'rate_noinv_fmt': ((format_sizeof(rate)\n                                        if unit_scale else\n                                        '{0:5.2f}'.format(rate))\n                                        if rate else '?') + 'it/s',\n                    'rate_fmt': rate_fmt,\n                    'elapsed': elapsed_str,\n                    'remaining': remaining_str,\n                    'l_bar': l_bar,\n                    'r_bar': r_bar,\n                    'desc': prefix if prefix else '',\n                    # 'bar': full_bar  # replaced by procedure below\n                    }\n\n        # Interpolate supplied bar format with the dict\n        if '{bar}' in bar_format:\n            # Format left/right sides of the bar, and format the bar\n            # later in the remaining space (avoid breaking display)\n            l_bar_user, r_bar_user = bar_format.split('{bar}')\n            l_bar, r_bar = l_bar.format(**bar_args), r_bar.format(**bar_args)\n\n            # Format the bar to fit the remaining space\n            available_space = ncols - len(l_bar) - len(r_bar)\n            bar_length = min(available_space, N_BARS)\n            bar = _unich(0x2588) * bar_length\n            frac_bar_length = max(0, available_space - bar_length)\n            frac_bar = _unich(0x2590 - frac_bar_length) if frac_bar_length else ' '\n        else:\n            # Else no progress bar, we can just format and return\n            return bar_format.format(**bar_args)",
            "imports": []
        }
    ]
}