{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False, unit='it', unit_scale=False, rate=None, bar_format=None):\n\n    if total and n > total:\n        total = None\n    \n    if elapsed:\n        rate = n / elapsed\n    else:\n        rate = 0\n    rate_fmt = f'{rate:.2f}{unit}/s' if rate else '?'\n    \n    n_fmt = str(n)\n    total_fmt = str(total)\n    \n    if total:\n        percentage = (n / total) * 100\n        remaining = (total - n) / rate if rate else -1\n        elapsed_str = format_interval(elapsed)\n        remaining_str = format_interval(remaining) if remaining >= 0 else '?'\n        \n        l_bar = f'{prefix}{percentage:3.0f}%|'\n        r_bar = f'| {n_fmt}/{total_fmt} [{elapsed_str}<{remaining_str}, {rate_fmt}]'\n    \n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n    \n        if bar_format:\n            bar_args = {'n': n, 'n_fmt': n_fmt, 'total': total, 'total_fmt': total_fmt, 'percentage': percentage, 'rate': rate, 'rate_fmt': rate_fmt, 'elapsed': elapsed_str, 'remaining': remaining_str, 'l_bar': l_bar, 'r_bar': r_bar, 'desc': prefix}\n    \n            if '{bar}' in bar_format:\n                l_bar_user, r_bar_user = bar_format.split('{bar}')\n                l_bar = l_bar.format(**bar_args)\n                r_bar = r_bar.format(**bar_args)\n            else:\n                return bar_format.format(**bar_args)\n    \n        N_BARS = max(1, ncols - len(l_bar) - len(r_bar)) if ncols else 10\n    \n        if ascii:\n            bar_length, frac_bar_length = divmod(int((n / total) * N_BARS * 10), 10)\n            bar = '#' * bar_length\n            frac_bar = str(int(frac_bar_length)) if frac_bar_length else ' '\n        else:\n            bar_length, frac_bar_length = divmod(int(n / total * N_BARS * 8), 8)\n            bar = '\u2588' * bar_length\n            frac_bar = chr(9601 + frac_bar_length) if frac_bar_length else ' '\n    \n        full_bar = (bar + frac_bar).ljust(N_BARS, ' ')\n    \n        return l_bar + full_bar + r_bar\n    else:\n        return f'{n_fmt}{unit} [{elapsed_str}, {rate_fmt}]'"
        }
    ]
}