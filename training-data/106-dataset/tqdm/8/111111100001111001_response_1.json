{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format=None):\n    if total and n > total:\n        total = None\n\n    format_interval = tqdm.format_interval\n    elapsed_str = format_interval(elapsed)\n\n    if rate is None and elapsed:\n        rate = n / elapsed\n    inv_rate = 1 / rate if (rate and (rate < 1)) else None\n    format_sizeof = tqdm.format_sizeof\n    rate_fmt = ((format_sizeof(inv_rate if inv_rate else rate)\n                 if unit_scale else\n                 '{0:5.2f}'.format(inv_rate if inv_rate else rate))\n                 if rate else '?') \\\n        + ('s' if inv_rate else unit) + '/' + (unit if inv_rate else 's')\n\n    if unit_scale:\n        n_fmt = format_sizeof(n)\n        total_fmt = format_sizeof(total) if total else 'None'\n    else:\n        n_fmt = str(n)\n        total_fmt = str(total) if total else 'None'\n\n    if total:\n        frac = n / total\n        percentage = frac * 100\n        remaining_str = format_interval((total - n) / rate) if rate else '?'\n\n        l_bar = (prefix if prefix else '') + '{0:3.0f}%|'.format(percentage)\n        r_bar = '| {0}/{1} [{2}<{3}, {4}]'.format(\n            n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt)\n\n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n        else:\n            N_BARS = max(1, ncols - len(l_bar) - len(r_bar)) if ncols else 10\n\n            if ascii:\n                bar_length, frac_bar_length = divmod(int(frac * N_BARS * 10), 10)\n                bar = '#' * bar_length\n                frac_bar = chr(48 + frac_bar_length) if frac_bar_length else ' '\n            else:\n                bar_length, frac_bar_length = divmod(int(frac * N_BARS * 8), 8)\n                bar = _unich(0x2588) * bar_length\n                frac_bar = _unich(0x2590 - frac_bar_length) if frac_bar_length else ' '\n\n            if bar_length < N_BARS:\n                full_bar = bar + frac_bar + ' ' * max(N_BARS - bar_length - 1, 0)\n            else:\n                full_bar = bar + ' ' * max(N_BARS - bar_length, 0)\n\n            return l_bar + full_bar + r_bar\n    else:\n        return (prefix if prefix else '') + '{0}{1} [{2}, {3}]'.format(n_fmt, unit, elapsed_str, rate_fmt)",
            "import_list": []
        }
    ]
}