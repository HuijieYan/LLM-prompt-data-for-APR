{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format=None):\n    remaining_str = '?'\n    percentage = 0.0\n    format_interval = tqdm.format_interval\n    elapsed_str = format_interval(elapsed)\n    format_sizeof = tqdm.format_sizeof\n    \n    # Calculate rate and format it\n    if total and elapsed:\n        rate = n / elapsed\n    rate_fmt = format_sizeof(rate) if rate else '?'\n    \n    # Format counts based on unit scale\n    if unit_scale:\n        n_fmt = format_sizeof(n)\n        total_fmt = format_sizeof(total) if total else None\n    else:\n        n_fmt = str(n)\n        total_fmt = str(total) if total else None\n    \n    # Total is known: we can predict some stats\n    if total:\n        frac = n / total\n        percentage = frac * 100\n        remaining_str = format_interval((total - n) / rate) if rate else '?'\n        \n    # Custom bar formatting\n    if bar_format:\n        bar_args = {'n': n, 'n_fmt': n_fmt, 'total': total, 'total_fmt': total_fmt, 'percentage': percentage, 'rate': rate, 'rate_noinv': rate, 'rate_noinv_fmt': rate_fmt, 'rate_fmt': rate_fmt, 'elapsed': elapsed_str, 'remaining': remaining_str, 'l_bar': prefix, 'r_bar': ''}\n        return bar_format.format(**bar_args)\n    \n    # Formatting progress bar with ASCII or Unicode characters\n    N_BARS = max(1, ncols - 10) if ncols else 10\n    bar_length = int(frac * N_BARS)\n    \n    if ascii:\n        bar = '#' * bar_length\n        frac_bar = chr(48 + int((frac * N_BARS * 10) % 10)) if int((frac * N_BARS * 10) % 10) else ' '\n    else:\n        bar = '\u2588' * bar_length\n        frac_bar = chr(0x2591 + int((frac * N_BARS * 8) % 8)) if int((frac * N_BARS * 8) % 8) else ' '\n    \n    full_bar = bar + frac_bar + ' ' * (N_BARS - bar_length - 1)\n    \n    return '{0:3.0f}%|{1}| {2}/{3} [{4}<{5}, {6}]'.format(percentage, full_bar, n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt)",
            "import_list": []
        }
    ]
}