{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format=None):\n\n    if total and n > total:\n        total = None\n    \n    elapsed_str = \"{:0>8}\".format(str(timedelta(seconds=elapsed)))\n    \n    if total and total > 0:\n        percentage = min(100, 100 * n // total)\n        remaining = total - n\n        rate = n / elapsed\n        rate_fmt = '{:.2f}'.format(rate) + unit + '/s'\n    \n        l_bar = '{:3.0f}% |'.format(percentage)\n        r_bar = '| {:,}/{:,} [{}, {}<{}, {}]'.format(\n            n, total, elapsed_str, format_time(remaining / rate),\n            rate_fmt, unit\n        )\n    \n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n    \n        if bar_format:\n            l_bar_user, r_bar_user = bar_format.split('{bar}')\n    \n            return l_bar_user.format(desc=prefix, percentage=percentage, n_fmt=n, total_fmt=total, elapsed_str=elapsed_str,\n                                     remaining_str=format_time(remaining / rate), rate_fmt=rate_fmt) + r_bar_user\n    \n        N_BARS = max(1, ncols - len(l_bar) - len(r_bar)) if ncols else 10\n    \n        bar_length = int(N_BARS * percentage / 100)\n        bar = '#' * bar_length\n        frac_bar = chr(48 + int((N_BARS - bar_length) * 8 / N_BARS)) if bar_length < N_BARS else ' '\n        full_bar = bar + frac_bar + ' ' * max(N_BARS - bar_length - 1, 0)\n    \n        return l_bar + full_bar + r_bar\n    else:\n        return (prefix if prefix else '') + '{:,} {} [{}, {}]'.format(n, unit, elapsed_str, rate_fmt)"
        }
    ]
}