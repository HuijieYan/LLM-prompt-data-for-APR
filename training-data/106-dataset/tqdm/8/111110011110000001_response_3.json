{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar__format=None):  \n    # ... (existing code as is) ...\n    \n    if ncols == 0:\n        return l_bar[:-1] + \" \" + r_bar[1:]\n\n    if bar_format:\n        # Custom bar formatting\n        # Populate a dict with all available progress indicators\n        bar_args = {'n': n,\n                    'n_fmt': n_fmt,\n                    'total': total,\n                    'total_fmt': total_fmt,\n                    'percentage': percentage,\n                    'rate': rate if inv_rate is None else inv_rate,\n                    'rate_noinv': rate,\n                    'rate_noinv_fmt': ((format_sizeof(rate)\n                                        if unit_scale else\n                                        '{0:5.2f}'.format(rate))\n                                        if rate else '?') + 'it/s',\n                    'rate_fmt': rate_fmt,\n                    'elapsed': elapsed_str,\n                    'remaining': remaining_str,\n                    'l_bar': l_bar,\n                    'r_bar': r_bar,\n                    'desc': prefix if prefix else '',\n                    # 'bar': full_bar  # replaced by procedure below\n                    }\n\n        # Interpolate supplied bar format with the dict\n        if '{bar}' in bar_format:\n            # Calculate remaining space for the bar and adjust the formatting\n            space_for_bar = ncols - (len(l_bar) + len(r_bar))\n            bar_space = bar_format.replace('{bar}', '').format(**bar_args)\n            bar_length = min(space_for_bar, len(bar_space))\n            full_bar = bar_space[:bar_length] + \" \" * (space_for_bar - len(full_bar))\n        else:\n            # No progress bar, just format and return\n            return bar_format.format(**bar_args)",
            "import_list": []
        }
    ]
}