{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False, unit='it', unit_scale=False, rate=None, bar_format=None):\n\n    if total and n > total:\n        total = None\n    \n    elapsed_str = '{:.2f}s'.format(elapsed)\n    \n    if rate is None and elapsed:\n        rate = n / elapsed\n    rate_fmt = '{:.2f}{}/{}'.format(rate, unit, 's' if rate < 1 else unit)\n    \n    n_fmt = str(n)\n    total_fmt = str(total) if total is not None else None\n    \n    if total is not None:\n        frac = n / total\n        percentage = frac * 100\n    \n        remaining_str = format_interval((total - n) / rate) if rate else '?'\n    \n        l_bar = '{}{:3.0f}%|'.format(prefix, percentage)\n        r_bar = '| {}/{} [{}, {}]'.format(n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt)\n    \n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n    \n        if bar_format:\n            return bar_format.format(l_bar=l_bar, r_bar=r_bar, n=n, n_fmt=n_fmt, total=total, total_fmt=total_fmt, percentage=percentage, rate=rate, rate_fmt=rate_fmt, elapsed=elapsed_str, remaining=remaining_str, desc=prefix)\n    \n        N_BARS = max(1, ncols - len(l_bar) - len(r_bar)) if ncols else 10\n    \n        bar_length = int(frac * N_BARS)\n        bar = '#' * bar_length\n        remaining = ' ' * (N_BARS - bar_length)\n        full_bar = '{}{}{}'.format(bar, remaining_str, remaining)\n    \n        return l_bar + full_bar + r_bar\n    else:\n        return '{}{} [{}, {}]'.format(prefix, n_fmt, unit, elapsed_str, rate_fmt)"
        }
    ]
}