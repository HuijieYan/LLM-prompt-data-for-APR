{
    "tqdm": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 103,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='',\n                 ascii=False, unit='it', unit_scale=False, rate=None,\n                 bar_format=None):\n\n    if total and n > total:\n        total = None\n    \n    elapsed_str = format_interval(elapsed)\n    \n    if rate is None and elapsed:\n        rate = n / elapsed\n    rate_fmt = '{:5.2f}{}{}'.format(rate, unit if rate else '?', unit if not rate else 's')\n    \n    if unit_scale:\n        suffixes = ['', 'K', 'M', 'G', 'T', 'P', 'E']\n        order = min(int(log(total, 1000)) if total else 0, len(suffixes))\n        n_fmt = '{:3.1f}{}{}'.format(n / (1000 ** order), suffixes[order], unit)\n        total_fmt = '{:3.1f}{}{}'.format(total / (1000 ** order) if total else 0, suffixes[order], unit)\n    else:\n        n_fmt = str(n)\n        total_fmt = str(total)\n    \n    if total:\n        frac = n / total\n        percentage = frac * 100\n        remaining_str = format_interval((total - n) / rate) if rate else '?'\n        l_bar = (prefix if prefix else '') + '{0:3.0f}%|'.format(percentage)\n        r_bar = '| {0}/{1} [{2}<{3}, {4}]'.format(n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt)\n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n        else:\n            bar_length = ncols - len(l_bar) - len(r_bar)\n            if bar_length < 10:\n                return l_bar + r_bar\n            else:\n                progress = min(int(bar_length * frac), bar_length)\n                bar = '#'*progress + '-'*(bar_length-progress)\n                return l_bar + bar + r_bar\n    else:\n        rate_fmt = '{}{}'.format(rate, unit)\n        return (prefix if prefix else '') + '{0}{1} [{2}, {3}]'.format(n_fmt, unit, elapsed_str, rate_fmt)"
        }
    ]
}