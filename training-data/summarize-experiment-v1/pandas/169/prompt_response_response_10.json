{
    "pandas": [
        {
            "bugID": 169,
            "start_line": 8143,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation=\"linear\"):\n    \"\"\"\n    Return values at the given quantile over requested axis.\n\n    Parameters\n    ----------\n    ...\n    (other parameters remain the same)\n    ...\n    Returns\n    -------\n    Series or DataFrame\n    (returns remain the same)\n    \"\"\"\n\n    # check if numeric_only is False and the data has datetime or timedelta data\n    if not numeric_only and self._typ in {'datetime', 'timedelta'}:\n        if isinstance(q, (float, int)):\n            q = [q]  # convert q to a list for consistent handling\n        result = self._data.quantile(qs=q, axis=axis, interpolation=interpolation)\n        if len(q) == 1:\n            # return a Series for a single quantile\n            return self._constructor_sliced(result, name=q[0])\n        else:\n            # return a DataFrame for multiple quantiles\n            index = pd.Index(q, name=\"quantile\")\n            return self._constructor(result, index=index, columns=self.columns)\n\n    # for numeric data, perform the standard quantile computation\n    self._check_percentile(q)\n    data = self._get_numeric_data() if numeric_only else self\n    axis = self._get_axis_number(axis)\n\n    is_transposed = axis == 1\n    if is_transposed:\n        data = data.T\n\n    result = data._data.quantile(\n        qs=q, axis=1, interpolation=interpolation, transposed=is_transposed\n    )\n\n    if result.ndim == 2:\n        result = self._constructor(result)\n    else:\n        result = self._constructor_sliced(result, name=q)\n\n    if is_transposed:\n        result = result.T\n\n    return result",
            "import_list": []
        }
    ]
}