{
    "pandas": [
        {
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    # Keep track of level numbers\n    cloc_numbers = [\n        index._get_level_number(i) if isinstance(i, tuple) else i for i in clocs\n    ]\n    rloc_numbers = [i for i in range(index.nlevels) if i not in cloc_numbers]\n\n    clevels = [index.levels[i] for i in cloc_numbers]\n    ccodes = [index.codes[i] for i in cloc_numbers]\n    cnames = [index.names[i] for i in cloc_numbers]\n    rlevels = [index.levels[i] for i in rloc_numbers]\n    rcodes = [index.codes[i] for i in rloc_numbers]\n    rnames = [index.names[i] for i in rloc_numbers]\n\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    # Label the created placeholder index\n    placeholder_name = \"__placeholder__\" if not len(rloc_numbers) else cnames[0]\n    dummy_index = (\n        Index(obs_ids, name=placeholder_name)\n        if not len(rloc_numbers)\n        else MultiIndex(\n            levels=rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=rnames + [placeholder_name],\n            verify_integrity=False,\n        )\n    )\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(placeholder_name, fill_value=fill_value)\n        new_levels = clevels\n        new_names = cnames\n        new_codes = recons_codes\n    else:\n        # Handling for MultiIndex columns\n        if isinstance(data.columns, MultiIndex):\n            result = data\n            for i in range(len(cloc_numbers)):\n                val = cloc_numbers[i]\n                result = result.unstack(val, fill_value=fill_value)\n                cloc_numbers = [v if i > v else v - 1 for v in cloc_numbers]\n\n            return result\n\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(placeholder_name, fill_value=fill_value)\n        if isinstance(unstacked, Series):\n            unstcols = unstacked.index\n            new_columns = MultiIndex(\n                levels=[unstcols[0].levels[0]] + clevels,\n                codes=[unstcols[0].codes[0]] + recons_codes,\n                names=[unstcols.names[0]] + cnames,\n                verify_integrity=False,\n            )\n        else:\n            unstcols = unstacked.columns\n            new_columns = MultiIndex(\n                levels=[unstcols.levels[0]] + clevels,\n                codes=[unstcols.codes[0]] + recons_codes,\n                names=[data.columns.names[0]] + cnames,\n                verify_integrity=False,\n            )\n            \n        if isinstance(unstacked, Series):\n            unstacked.index = new_columns\n        else:\n            unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}