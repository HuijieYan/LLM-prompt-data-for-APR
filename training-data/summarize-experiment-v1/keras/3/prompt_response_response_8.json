{
    "keras": [
        {
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    # ... (other code remains unchanged)\n\n    for node in nodes:\n        # Recover the corresponding layer.\n        layer = node.outbound_layer\n\n        # Get or create layer.\n        if layer not in layer_map:\n            # Clone layer.\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n            layer = new_layer\n        else:\n            # Reuse previously cloned layer.\n            layer = layer_map[layer]\n            # Don't call InputLayer multiple times.\n            if isinstance(layer, InputLayer):\n                continue\n\n        # Gather inputs to call the new layer.\n        reference_input_tensors = node.input_tensors\n        reference_output_tensors = node.output_tensors\n\n        # If all previous input tensors are available in tensor_map,\n        # then call node.inbound_layer on them.\n        computed_data = []  # List of tuples (input, mask).\n        for x in reference_input_tensors:\n            if x in tensor_map:\n                computed_data.append(tensor_map[x])\n\n        if len(computed_data) == len(reference_input_tensors):\n            # Call layer.\n            if node.arguments:\n                kwargs = node.arguments\n            else:\n                kwargs = {}\n            if len(computed_data) == 1:\n                computed_tensor, computed_mask = computed_data[0]\n                if has_arg(layer.call, 'mask') and computed_mask:  # Check if the layer supports masks\n                    kwargs['mask'] = computed_mask\n                output_tensors = to_list(\n                    layer(computed_tensor, **kwargs))\n                if computed_mask:  # Update output masks only if computed mask is available\n                    output_masks = to_list(\n                        layer.compute_mask(computed_tensor,\n                                           computed_mask))\n                else:\n                    output_masks = [None] * len(output_tensors)\n            else:\n                computed_tensors = [x[0] for x in computed_data]\n                computed_masks = [x[1] for x in computed_data]\n                if has_arg(layer.call, 'mask') and all(computed_masks):  # Check if the layer supports masks for all input tensors\n                    kwargs['mask'] = computed_masks\n                output_tensors = to_list(\n                    layer(computed_tensors, **kwargs))\n                # Update output masks only if computed masks are available\n                output_masks = to_list(\n                    layer.compute_mask(computed_tensors,\n                                       computed_masks)) if all(computed_masks) else [None] * len(output_tensors)\n            # Update tensor_map.\n            for x, y, mask in zip(reference_output_tensors,\n                                  output_tensors,\n                                  output_masks):\n                tensor_map[x] = (y, mask)",
            "import_list": []
        }
    ]
}