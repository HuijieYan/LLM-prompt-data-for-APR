{
    "keras": [
        {
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    # ... (existing code)\n\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_layers = []\n        input_tensors = []\n        for layer in model._input_layers:\n            input_tensor = Input(batch_shape=layer.batch_input_shape,\n                                 dtype=layer.dtype,\n                                 sparse=layer.sparse,\n                                 name=layer.name)\n            input_tensors.append(input_tensor)\n            # Cache newly created input layer.\n            newly_created_input_layer = input_tensor._keras_history[0]\n            layer_map[layer] = newly_created_input_layer\n            input_layers.append(newly_created_input_layer)\n        model._input_layers = input_layers\n    else:\n        # Make sure that all input tensors come from a Keras layer.\n        _input_tensors = []\n        for i, x in enumerate(input_tensors):\n            if not hasattr(x, '._keras_history'):\n                name = 'input_' + str(i)\n                input_tensor = Input(tensor=x,\n                                     name=name)\n                _input_tensors.append(input_tensor)\n                # Cache newly created input layer.\n                newly_created_input_layer = input_tensor._keras_history[0]\n                layer_map[input_tensors[i]] = newly_created_input_layer\n            else:\n                _input_tensors.append(x)\n        input_tensors = _input_tensors\n\n    # ... (existing code)\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}