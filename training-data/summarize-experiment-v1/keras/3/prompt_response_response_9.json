{
    "keras": [
        {
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    # ... (other code remains unchanged)\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    # Iterated over every node in the reference model, in depth order.\n    depth_keys = list(model._nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n    for depth in depth_keys:\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            # (existing code...)\n            \n            # Call layer.\n            if node.arguments:\n                kwargs = node.arguments\n            else:\n                kwargs = {}\n            if len(computed_data) == 1:\n                computed_tensor, computed_mask = computed_data[0]\n                if has_arg(layer.call, 'mask') and computed_mask is not None:  # Check if computed_mask is not None\n                    kwargs['mask'] = computed_mask\n                output_tensors = to_list(\n                    layer(computed_tensor, **kwargs))\n                output_masks = to_list(\n                    layer.compute_mask(computed_tensor, computed_mask))\n                computed_tensors = [computed_tensor]\n                computed_masks = [computed_mask]\n            else:\n                computed_tensors = [x[0] for x in computed_data]\n                computed_masks = [x[1] for x in computed_data]\n                if has_arg(layer.call, 'mask') and all(mask is not None for mask in computed_masks):  # Check if all computed_masks are not None\n                    kwargs['mask'] = computed_masks\n                output_tensors = to_list(\n                    layer(computed_tensors, **kwargs))\n                output_masks = to_list(\n                    layer.compute_mask(computed_tensors, computed_masks))",
            "import_list": []
        }
    ]
}