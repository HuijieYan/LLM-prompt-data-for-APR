{
    "keras": [
        {
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    # ... (same function signature and initial sections)\n\n    # Create a dictionary to store references to the cloned layers.\n    layer_map = {}\n    tensor_map = {}\n\n    # Check if input_tensors is provided, if not, create placeholders for building the model.\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.batch_input_shape, dtype=layer.dtype, sparse=layer.sparse, name=layer.name) \n                         for layer in model._input_layers]\n        # Map the original input layers to the newly created placeholders.\n        for original, cloned in zip(model._input_layers, input_tensors):\n            layer_map[original] = cloned\n    else:\n        # Handle input_tensors to ensure they come from a Keras layer, handling InputLayer separately.\n        input_tensors = to_list(input_tensors)\n        _input_tensors = []\n        for i, x in enumerate(input_tensors):\n            if not K.is_keras_tensor(x):\n                name = model._input_layers[i].name\n                input_layer = Input(tensor=x, name='input_wrapper_for_' + name)\n                _input_tensors.append(input_layer)\n                # Map the original input layer and the newly created input layer.\n                original_input_layer = x._keras_history[0]\n                newly_created_input_layer = input_layer._keras_history[0]\n                layer_map[original_input_layer] = newly_created_input_layer\n            else:\n                _input_tensors.append(x)\n        input_tensors = _input_tensors\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    # Iterate over the nodes in the reference model.\n    for depth in reversed(range(len(model._nodes_by_depth))):\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            layer = node.outbound_layer\n\n            # Get or create cloned layer.\n            if layer not in layer_map:\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n                layer = new_layer\n            else:\n                layer = layer_map[layer]\n                if isinstance(layer, InputLayer):\n                    continue\n\n            # Gather inputs for the new layer.\n            reference_input_tensors = node.input_tensors\n\n            computed_data = []  # List of tuples (input, mask).\n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n\n            if len(computed_data) == len(reference_input_tensors):\n                kwargs = node.arguments\n                computed_tensors = [x[0] for x in computed_data]\n                computed_masks = [x[1] for x in computed_data]\n                output_tensors = to_list(layer(computed_tensors, **kwargs))\n                output_masks = to_list(layer.compute_mask(computed_tensors, computed_masks))\n\n                # Update tensor_map.\n                for x, y, mask in zip(node.output_tensors, output_tensors, output_masks):\n                    tensor_map[x] = (y, mask)\n\n    # Check and compute the model outputs, then instantiate a new model from inputs and outputs.\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}