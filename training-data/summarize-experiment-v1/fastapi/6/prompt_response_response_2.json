{
    "fastapi": [
        {
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]]\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    \n    values = {}\n    errors = []\n\n    for field in required_params:\n        if isinstance(received_body, FormData):\n            if field.shape in sequence_shapes:\n                value = received_body.getlist(field.alias)\n            else:\n                value = received_body.get(field.alias)\n                \n            if value is None or (isinstance(field, params.Form) and value == \"\") \\\n               or (isinstance(field, params.Form) and field.shape in sequence_shapes and len(value) == 0):\n                if field.required:\n                    errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias)))\n                else:\n                    values[field.name] = deepcopy(field.default)\n                continue\n                \n            if isinstance(field, params.File) and lenient_issubclass(field.type_, bytes):\n                if isinstance(value, UploadFile):\n                    value = await value.read()\n                elif isinstance(value, list) and all(isinstance(sub_value, UploadFile) for sub_value in value):\n                    contents = await asyncio.gather(*[sub_value.read() for sub_value in value])\n                    value = sequence_shape_to_type[field.shape](contents)\n            \n            v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            else:\n                values[field.name] = v_\n    \n    return values, errors",
            "import_list": []
        }
    ]
}