{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data, errors: str = \"raise\") -> Tuple[Union[\"_ArrayType\", Series], bool]:\n    \"\"\"\n    Try to parse a ndarray like into a date column.\n\n    Try to coerce object in epoch/iso formats and integer/float in epoch\n    formats. Return a boolean if parsing was successful.\n    \"\"\"\n    # no conversion on empty\n    if not len(data):\n        return data, False\n\n    new_data = data\n    data_is_data_or_discrete = (\n        not is_datetime64_any_dtype(data)\n        and is_datetime64_any_or_timedelta_dtype(data)\n        and not is_datetime64_or_timedelta_dtype(data)\n    )\n    # ignore datetime\n    if (errors == \"coerce\" and data_is_data_or_discrete) or errors == \"ignore\":\n        if self.errors in [\"ignore\", \"coerce\"]:\n            return data, False\n\n    if new_data.dtype == \"object\":\n        try:\n            result = new_data.astype(\"int64\")\n            new_data = new_data[result == new_data]._values\n        except (TypeError, ValueError, OverflowError):\n            pass\n\n    # ignore numbers that are out of range\n    if issubclass(new_data.dtype.type, np.number):\n        if (\n            self.errors in [None, \"coerce\"]\n            and (not isna(new_data._values))\n            & ((new_data > iNaT) | (new_data._values == iNaT))\n        ).any():\n            return data, False\n\n    date_units = (self.date_unit,) if self.date_unit else self._STAMP_UNITS\n    for date_unit in date_units:\n        try:\n            new_data = to_datetime(new_data, errors=self.errors, unit=date_unit)\n        except (ValueError, OverflowError, TypeError):\n            continue\n        return new_data, True\n    return data, False",
            "import_list": [
                "import pandas as pd",
                "import numpy as np",
                "from pandas._libs.missing import iNaT",
                "from pandas._libs.tslibs.nattype import NaTType",
                "from pandas._typing import Dtype",
                "from pandas.core.dtypes.common import is_datetime64_any_dtype",
                "from pandas.core.dtypes.dtypes import DatetimeTZDtype, Datetime64Dtype, is_datetime64_any_or_timedelta_dtype",
                "from pandas.core.dtypes.dtypes import (DatetimeNS, DatetimeTZDtype,\n                                       Datetime64Dtype, is_datetime64_any_dtype)"
            ]
        }
    ]
}