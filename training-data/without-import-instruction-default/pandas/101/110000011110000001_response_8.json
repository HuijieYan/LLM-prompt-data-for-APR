{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Casts the elements of an array to a given dtype in a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : array_like\n        Input data.\n    dtype : numpy.dtype or pandas.CategoricalDtype (or object)\n        Data type to convert to.\n    copy : bool, default True\n        Whether to generate a new object of the input data with the specified dtype.\n    skipna : bool, default False\n        Whether to convert NaNs to the corresponding dtype.\n\n    Returns\n    -------\n    array_like\n        The input arr, with the specified dtype.\n\n    Raises\n    ------\n    TypeError\n        If astype with the specified dtype is not possible.\n    ValueError\n        If providing the ``dtype`` parameter would require a upcast.\n    \"\"\"\n    \n    # dispatch on extension dtype if needed\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = pandas_dtype(dtype)\n\n    if issubclass(dtype.type, str):\n        return arr.astype(dtype)\n\n    elif is_datetime64_dtype(arr):\n        if is_object_dtype(dtype):\n            return arr\n        elif dtype == np.int64:\n            return arr.view(dtype)\n        elif is_datetime64tz_dtype(dtype):\n            return arr.view(dtype)\n    \n    elif is_timedelta64_dtype(arr):\n        if is_object_dtype(dtype):\n            return arr\n        elif dtype == np.int64:\n            return arr.view(dtype)\n        elif is_timedelta64tz_dtype(dtype):\n            return arr.view(dtype)\n\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n    \n    elif is_object_dtype(arr):\n        if np.issubdtype(dtype.type, np.integer):\n            return arr.astype(dtype)\n        elif is_datetime64tz_dtype(dtype):\n            return arr\n        elif is_timedelta64tz_dtype(dtype):\n            return arr\n\n    if dtype.name in (\"datetime64\", \"timedelta64\"):\n        msg = f\"The '{dtype.name}' dtype has no unit. Please pass in '{dtype.name}[ns]' instead.\"\n        raise ValueError(msg)\n\n    if copy or is_object_dtype(arr) or is_object_dtype(dtype):\n        # Explicit copy, or required since NumPy can't view from / to object.\n        return arr.astype(dtype, copy=True)\n\n    return arr.view(dtype)",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "import pytest",
                "from pandas.api.types import is_extension_array_dtype, is_datetime64_dtype, pandas_dtype",
                "from pandas.core.dtypes.common import is_timedelta64_dtype",
                "from pandas.core.dtypes.dtypes import DatetimeTZDtype, TimedeltaTZDtype",
                "from pandas.core.dtypes.generic import ABCDataFrame, ABCIndexClass, ABCSeries, ABCSparseArray",
                "from pandas.core.dtypes.inference import is_datetime64tz_dtype, is_timedelta64tz_dtype",
                "from pandas.core.dtypes.missing import isna, notna",
                "from pandas.core.dtypes.missing import notna as check_notna"
            ]
        }
    ]
}