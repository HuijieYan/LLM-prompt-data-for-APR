{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype in a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n\n    if is_object_dtype(arr):\n        if is_datetime64_dtype(arr):\n            if is_datetime64_dtype(dtype):\n                return pd.to_datetime(arr, errors='coerce').values.astype(dtype)\n            elif is_timedelta64_dtype(dtype):\n                return pd.to_timedelta(arr, errors='coerce').values.astype(dtype)\n        elif is_timedelta64_dtype(arr):\n            if is_datetime64_dtype(dtype):\n                return pd.to_datetime(arr, errors='coerce').values.astype(dtype)\n            elif is_timedelta64_dtype(dtype):\n                return pd.to_timedelta(arr, errors='coerce').values.astype(dtype)\n\n    if np.issubdtype(arr.dtype, np.datetime64) and np.issubdtype(dtype, np.integer):\n        return pd.to_numeric(arr, errors='coerce').fillna(0).astype(dtype)\n\n    if np.issubdtype(arr.dtype, np.timedelta64) and np.issubdtype(dtype, np.integer):\n        return pd.to_timedelta(pd.to_numeric(arr, errors='coerce').fillna(0).astype('int64'), unit='ns').astype(dtype)\n\n    if np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    try:\n        result = arr.astype(dtype, copy=copy)\n    except ValueError:\n        result = arr\n\n    return result",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas.api.types import is_datetime64_dtype, is_timedelta64_dtype, is_object_dtype"
            ]
        }
    ]
}