{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: Optional[bool] = True, skipna: Optional[bool] = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype in a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype or ExtensionDtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n    can_cast : bool, default True\n\n    Returns\n    -------\n    ret : casted\n    \"\"\"\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = pandas_dtype(dtype)\n\n    if arr.ndim != 1:\n        if dtype.kind == 'M':\n            # subset in case of Period, timedeltas are integers\n            arr = arr.ravel()\n            return arr.astype(dtype).reshape(arr.shape)\n        raise ValueError(\"can only convert an array of size 1 to a Python scalar\")\n\n    if issubclass(dtype.type, str):\n        return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n\n    elif is_datetime64_dtype(arr):\n        if is_object_dtype(dtype):\n            return DatetimeArray._sequence_to_dt64ns(arr.ravel(), dtype, copy=copy)\n        elif dtype == np.int64:\n            return arr.view(dtype)\n        elif dtype.kind == \"M\":\n            return arr.astype(dtype)\n        raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n\n    elif is_timedelta64_dtype(arr):\n        if is_object_dtype(dtype):\n            return TimedeltaArray._sequence_to_td64ns(arr.ravel(), dtype, copy=copy)\n        elif dtype == np.int64:\n            return arr.view(dtype)\n        if dtype.kind == 'm':\n            # Conversion to a float by default as we do not know\n            # how to convert to an integer\n            if dtype.kind == \"m\":\n                mask = arr.isna()\n                result = arr.astype(dtype).astype(np.float64)\n                result[mask] = np.nan\n                return result\n        raise TypeError(f\"cannot astype a timedelta-like from [{arr.dtype}] to [{dtype}]\")\n    \n    elif is_unsigned_integer_dtype(arr) and is_signed_integer_dtype(dtype):\n        return arr.astype(dtype, casting='safe', copy=copy)\n\n    if isinstance(dtype, Categorical):\n        return arr.astype(dtype, copy=copy)\n\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    if can_cast(arr.dtype, dtype, **kwargs):\n        ret = arr.astype(dtype, casting='same_kind', copy=copy)\n    else:\n        ret = arr.astype(dtype, copy=copy)\n    \n    return arr.view(dtype)",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas.core.dtypes.generic import is_datetime64_dtype, is_timedelta64_dtype",
                "from pandas.core.dtypes.common import is_extension_array_dtype, pandas_dtype",
                "from pandas.core.dtypes.generic import is_object_dtype",
                "from pandas.core.arrays.datetimes import timedelta, DatetimeArray",
                "from pandas.core import algorithms, arr, ops",
                "from pandas.core.indexing.common import SettingWithCopy_NA",
                "from pandas.core.construction import array",
                "import pandas._libs.lib as lib",
                "from typing import Optional, Union",
                "from pandas.core.dtypes.cast import extension_types",
                "from pandas.core.dtypes.common import is_float, is_unsigned_integer_dtype, is_object_dtype, is_signed_integer_dtype",
                "from pandas.core.dtypes.generic import ABCExtensionArray",
                "from pandas.core.arrays import DatetimeArray, PeriodArray, TimedeltaArray, Categorical"
            ]
        }
    ]
}