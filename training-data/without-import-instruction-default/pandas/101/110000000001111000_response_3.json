{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n\n    if np.issubdtype(arr.dtype, np.datetime64) or np.issubdtype(arr.dtype, np.timedelta64):\n\n        if np.issubdtype(arr.dtype, np.datetime64):\n            if not np.issubdtype(dtype, np.integer):\n                raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n            elif dtype.kind != 'i' or dtype.itemsize != 8:\n                raise ValueError(\"The dtype was a datetime64 dtype, but it had no unit.\")\n\n        elif np.issubdtype(arr.dtype, np.timedelta64):\n            if not np.issubdtype(dtype, np.integer):\n                raise TypeError(f\"cannot astype a timedelta from [{arr.dtype}] to [{dtype}]\")\n            elif dtype.kind != 'i' or dtype.itemsize != 8:\n                raise ValueError(\"The dtype was a timedelta64 dtype, but it had no unit.\")\n        \n        if copy:\n            return arr.astype(dtype, copy=True)\n        else:\n            return arr.view(dtype)\n    \n    else:\n        if not isinstance(dtype, np.dtype):\n            dtype = np.dtype(dtype)\n\n        if np.issubdtype(dtype, np.floating) and np.issubdtype(arr.dtype, np.floating):\n            if np.isnan(arr).any():\n                arr = arr.astype(dtype)\n                arr[np.isnan(arr)] = np.nan\n                return arr\n            else:\n                return arr.astype(dtype)\n        \n        elif np.issubdtype(dtype, np.integer) and np.issubdtype(arr.dtype, np.floating):\n            if np.isfinite(arr).all():\n                return arr.astype(dtype)\n            else:\n                raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n        \n        else:\n            if copy:\n                return arr.astype(dtype, copy=True)\n            else:\n                return arr.view(dtype)",
            "import_list": [
                "import numpy as np",
                "from numpy import datetime64, timedelta64"
            ]
        }
    ]
}