{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n\n    # dispatch on extension dtype if needed\n    if is_extension_array_dtype(dtype):      \n        dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)  \n\n    if not isinstance(dtype, np.dtype):\n        dtype = np.dtype(dtype)  # corrected to convert to np.dtype\n\n    if np.issubdtype(dtype, np.str_):  # corrected to check string type using np.str_\n\n        return arr.astype(str)\n\n    elif np.issubdtype(arr.dtype, np.datetime64):  # corrected to check datetime64 type using np.datetime64\n        if np.issubdtype(dtype, np.object_):  # corrected to check object type using np.object_\n            return arr.astype(np.int64).view('M8')  # corrected to cast as int64 and view as datetime64\n        elif dtype == np.int64:\n            return arr.view(dtype)\n\n        if np.datetime_data(dtype) is not None:  # corrected to check if dtype has unit\n            return arr.astype(dtype)\n\n        raise ValueError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n\n    elif np.issubdtype(arr.dtype, np.timedelta64):  # corrected to check timedelta64 type using np.timedelta64\n        if np.issubdtype(dtype, np.object_):  # corrected to check object type using np.object_\n            return arr.astype(np.int64).view('m8')  # corrected to cast as int64 and view as timedelta64\n        elif dtype == np.int64:\n            return arr.view(dtype)\n\n        if np.timedelta_data(dtype) is not None:  # corrected to check if dtype has unit\n            return arr.astype(dtype)\n\n        if np.issubdtype(dtype, np.integer):  # corrected to check integer type using np.integer\n            if np.isfinite(arr).all():\n                return arr.astype(dtype)\n            else:\n                raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n        raise TypeError(f\"cannot astype a timedelta from [{arr.dtype}] to [{dtype}]\")\n\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    elif np.issubdtype(arr.dtype, np.object_):  # corrected to check object type using np.object_\n        \n        if np.issubdtype(dtype, np.integer):  # corrected to check integer type using np.integer\n            return arr.astype(dtype)\n\n        elif np.issubdtype(dtype, np.datetime64):  # corrected to check datetime64 type using np.datetime64\n            return astype_nansafe(np.datetime_as_string(arr), dtype, copy=copy)\n\n        elif np.issubdtype(dtype, np.timedelta64):  # corrected to check timedelta64 type using np.timedelta64\n            return astype_nansafe(np.timedelta_as_string(arr), dtype, copy=copy)\n\n    if np.issubdtype(dtype, np.datetime64) or np.issubdtype(dtype, np.timedelta64): \n        msg = (\n            f\"The '{dtype.name}' dtype has no unit. Please pass in \"\n            f\"'{dtype.name}[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    if copy or np.issubdtype(arr.dtype, np.object_) or np.issubdtype(dtype, np.object_):\n        # Explicit copy, or required since NumPy can't view from / to object.\n        return arr.astype(dtype, copy=True)\n\n    return arr.view(dtype)",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}