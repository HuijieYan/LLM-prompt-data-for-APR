{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n\n    # dispatch on extension dtype if needed\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = np.dtype(dtype)  # Changed pandas_dtype to np.dtype()\n\n    if issubclass(dtype.type, str):\n        return np.array([str(a) for a in arr.ravel()], dtype=object).reshape(arr.shape)  # Changed lib.astype_str to list comprehension\n\n    elif np.issubdtype(arr.dtype, np.datetime64):  # Changed is_datetime64_dtype to np.issubdtype\n        if np.issubdtype(dtype, np.integer):  # Changed is_object_dtype to np.issubdtype\n            raise ValueError(\"Cannot convert NaT values to integer\")  # Added to raise correct exception\n        if dtype == np.datetime64:  # Changed dtype.kind to dtype\n            dtype = np.dtype('datetime64[ns]')  # Modified dtype.kind to a compatible datetime dtype\n        return arr.astype(dtype)  # Changed return statement\n\n    elif np.issubdtype(arr.dtype, np.timedelta64):  # Changed is_timedelta64_dtype to np.issubdtype\n        if np.issubdtype(dtype, np.integer):  # Changed is_object_dtype to np.issubdtype\n            raise ValueError(\"Cannot convert NaT values to integer\")  # Added to raise correct exception\n        if dtype == np.timedelta64:  # Changed dtype.kind to dtype\n            dtype = np.dtype('timedelta64[ns]')  # Modified dtype.kind to a compatible timedelta dtype\n        return arr.astype(dtype)  # Changed return statement\n\n    elif np.issubdtype(arr.dtype, float) and np.issubdtype(dtype, int):  # Changed np.issubdtype for float and int\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    elif np.issubdtype(arr.dtype, np.object_):  # Changed is_object_dtype to np.issubdtype\n        if np.issubdtype(dtype, np.integer):  # Changed is_object_dtype to np.issubdtype\n            raise ValueError(\"Cannot convert NaT values to integer\")  # Added to raise correct exception\n        elif np.issubdtype(dtype, np.datetime64):  # Changed is_datetime64_dtype to np.issubdtype\n            return astype_nansafe(np.array([pd.to_datetime(a) for a in arr.ravel()]), dtype, copy=copy)  # Changed from pandas to pd, and dtype to convert to proper datetime dtype\n        elif np.issubdtype(dtype, np.timedelta64):  # Changed is_timedelta64_dtype to np.issubdtype\n            return astype_nansafe(np.array([pd.to_timedelta(a) for a in arr.ravel()]), dtype, copy=copy)  # Changed from pandas to pd and dtype to convert to proper timedelta dtype\n\n    if isinstance(dtype, np.dtype) and dtype.name in (\"datetime64\", \"timedelta64\"):  # Changed dtype.name to isinstance check\n        msg = (\n            f\"The '{dtype.name}' dtype has no unit. Please pass in \"\n            f\"'{dtype.name}[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    if copy or isinstance(arr.dtype, np.object_) or isinstance(dtype, np.object_):  # Changed is_object_dtype to isinstance check\n        # Explicit copy, or required since NumPy can't view from / to object.\n        return arr.astype(dtype, copy=True)\n\n    return arr.view(dtype)",
            "import_list": [
                "import numpy as np",
                "import pytest"
            ]
        }
    ]
}