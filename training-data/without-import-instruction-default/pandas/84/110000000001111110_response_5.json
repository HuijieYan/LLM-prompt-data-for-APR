{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # Extract clocs values, assuming knowledge of the levels\n    clevels = data.index.levels\n    cnames = data.index.names\n\n    rlevels = data.index.remove_unused_levels().levels\n    rnames = data.index.remove_unused_levels().names\n\n    # Unstack the data with fill_value if given\n    unstacked = data.unstack(clocs, fill_value=fill_value)\n\n    # Refresh the index and columns with new levels, names and codes\n    index_names = list(rnames) + [i for i in cnames if i not in rnames]\n    new_index = pd.MultiIndex.from_product(rlevels, names=rnames)\n    new_columns = pd.MultiIndex.from_product(clevels, names=cnames)\n\n    # Update the index with the newly unstacked data\n    unstacked.index = new_index\n\n    if isinstance(unstacked, pd.Series):\n        unstacked = unstacked.unstack(new_columns.names[-1], fill_value=fill_value)\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}