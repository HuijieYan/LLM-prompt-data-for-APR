{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n    if isinstance(clocs, tuple):\n        clocs = [clocs]\n\n    clevels = [index.get_level_values(i[1]) for i in clocs]\n    rlevels = [index.get_level_values(i) for i in range(index.nlevels) if i not in [i[0] for i in clocs]]\n\n    # Unstacking for the case when hierarchical columns are present\n    if isinstance(data.columns, pd.MultiIndex):\n        result = data\n        for cloc in sorted([i[0] for i in clocs]):\n            result = result.unstack(cloc, fill_value=fill_value)\n            clocs = [(i[0], i[1]-1) if i[0] >= cloc else i for i in clocs]\n        return result\n    else:\n        shape = [len(x) for x in clevels]\n        group_index = get_group_index([index.get_level_values(i[1]) for i in clocs], shape, sort=False, xnull=False)\n      \n        comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n        recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, [index.get_level_values(i[1]) for i in clocs], xnull=False)\n\n        if rlevels == []:\n            # Everything is in clocs, so the dummy df has a regular index\n            dummy_index = pd.Index(obs_ids, name=\"__placeholder__\")\n        else:\n            dummy_index = pd.MultiIndex(\n                levels=rlevels + [obs_ids],\n                codes=recons_codes + [comp_ids],\n                names=[index.names[i] if i < len(index.names) else \"__placeholder__\" for i in [i[0] for i in clocs]]+[None],\n                verify_integrity=False\n            )\n\n        if isinstance(data, pd.Series):\n            dummy = data.copy()\n            dummy.index = dummy_index\n\n            unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n            new_levels = clevels\n            new_names = [i[1] for i in clocs]\n            new_codes = [index.get_level_values(i[1]).codes for i in clocs]\n        else:\n            dummy = data.copy()\n            dummy.index = dummy_index\n\n            unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n            if isinstance(unstacked, pd.Series):\n                unstcols = unstacked.index\n            else:\n                unstcols = unstacked.columns\n            new_levels = [index.get_level_values(i[1]) for i in clocs] + clevels\n            new_names = [index.names[i[1]] for i in clocs] + [data.columns.name]\n            new_codes = [unstcols.get_level_values(i).codes for i in range(len(unstcols.levels))]\n    \n        new_columns = pd.MultiIndex(\n            levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n        )\n\n        if isinstance(unstacked, pd.Series):\n            unstacked.index = new_columns\n        else:\n            unstacked.columns = new_columns\n\n        return unstacked",
            "import_list": []
        }
    ]
}