{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n    clevels = [index.levels[i] for i in clocs]\n    ccodes = [index.codes[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    if rlocs == []:\n        # Everything is in clocs, so the dummy df has a regular index\n        dummy_index = pd.Index(ccodes[0], name=\"__placeholder__\")\n    else:\n        obs_ids = list(set(ccodes[0]))\n        comp_ids = range(len(obs_ids))\n        dummy_index = pd.MultiIndex(\n            levels=rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=rnames + [\"__placeholder__\"],\n            verify_integrity=False\n        )\n\n    if isinstance(data, pd.Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = clevels\n        new_names = cnames\n        new_codes = [comp_ids]\n    else:\n        if isinstance(data.columns, pd.MultiIndex):\n            result = data\n            for i in range(len(clocs)):\n                val = clocs[i]\n                result = result.unstack(val, fill_value=fill_value)\n\n            return result\n\n        dummy = data.copy()\n        dummy.index = dummy_index\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        if isinstance(unstacked, pd.Series):\n            new_levels = [unstacked.index.levels[0]] + clevels\n            new_names = [data.columns.name] + cnames\n            new_codes = [[unstacked.index.codes[0][i]] for i in range(len(unstacked.index.codes[0]))]\n        else:\n            new_levels = [unstacked.columns.levels[0]] + clevels\n            new_names = [data.columns.name] + cnames\n            new_codes = [[unstacked.columns.codes[0][i]] for i in range(len(unstacked.columns.codes[0]))]\n\n    new_columns = pd.MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    if isinstance(unstacked, pd.Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": [
                "import pandas as pd"
            ]
        }
    ]
}