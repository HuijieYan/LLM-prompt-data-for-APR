{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    clocs = [index._get_level_number(i) if isinstance(i, tuple) else index._get_level_number([i]) for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    clevels = [index.levels[i] for i in clocs]\n    ccodes = [index.codes[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    current_idx = np.arange(data.index.size)\n\n    for i in range(len(clocs)):\n        idx = current_idx\n        val = clocs[i]\n        hlevel = index.get_level_values(val)\n\n        codes, level_kinds = coerce_indexer_dtype(idx)\n        mask = ~isna(hlevel)._values\n        idx = idx[mask]\n        if len(level_kinds) == 1 and clocs[0] != val:\n            mask = True\n        else:\n            mask = ~isna(hlevel._view(codes._ndarray_values))._ndarray_values\n\n        idx = idx[mask]\n        lev = hlevel._take(indexer=idx)\n        idx = get_group_index(lev, sort=False)\n        current_idx = idx\n\n    multi_codes = idx\n    unstack_index = MultiIndex(\n        levels=clevels+[obs_idx],\n        codes=ccodes + [multi_codes],\n        names=cnames + [None]\n    )\n\n    if isinstance(data, Series):\n        result.index = unstack_index if unstack else unstack_index.droplevel(-1)\n        result = result._constructor(result._values.copy(), index=result.index, name=result.name)\n    else:\n        return result.unstack(level=ccodes[-1], fill_value=fill_value)\n\n    return unstacked",
            "import_list": []
        }
    ]
}