{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n    rlocs = [i for i in range(index.nlevels) if index.names[i] not in clocs]\n\n    if len(rlocs) == 0:\n        dummy_index = Index(index, name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(\n            levels=[index.levels[i] for i in rlocs] + [index.levels[i] for i in clocs],\n            codes=[index.codes[i] for i in rlocs] + [index.codes[i] for i in clocs],\n            names=[index.names[i] for i in rlocs] + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    dummy = data.copy()\n    dummy.index = dummy_index\n\n    unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\n    new_levels = [index.levels[i] for i in clocs] if len(clocs) > 1 else index.levels[clocs[0]]\n    new_names = [index.names[i] for i in clocs] if len(clocs) > 1 else index.names[clocs[0]]\n    new_codes = [unstacked.columns.codes[1]] if len(clocs) > 1 else unstacked.columns.codes\n\n    new_columns = MultiIndex(\n        levels=[new_levels, unstacked.columns.levels[0]],\n        codes=[new_codes, unstacked.columns.codes[0]],\n        names=[new_names, unstacked.columns.names[0]],\n        verify_integrity=False\n    )\n\n    if isinstance(unstacked, DataFrame):\n        unstacked.columns = new_columns\n    else:\n        unstacked.index = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}