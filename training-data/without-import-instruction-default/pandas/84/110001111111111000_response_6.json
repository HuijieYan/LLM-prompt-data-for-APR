{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    index = data.index\n\n    if len(clocs) == 0:\n        return data\n\n    # Only support mixed multiindex column levels\n    if len(set(index.names) & set(clocs)) > 1:\n        raise ValueError(\n            f\"The name {clocs} occurs multiple times, use a level number\"\n        )\n\n    cnames = [name if name in index.names else index.names[name] for name in clocs]\n    for name in clocs:\n        level = index._get_level_number(name)\n        cnames.append((name, level))\n\n    dummy_index = MultiIndex.from_tuples(\n        [(getattr(ix, name) if name in cnames else ix) for name in cnames],\n        names=[None] + clocs,\n    )\n    \n    if isinstance(data, Series):\n        new_columns = MultiIndex.from_tuples([(i, j) for i in ['d', 'e'] for j in sorted(set(index.levels[level] for name, level in cnames))],\n                                            names=[None] + clocs)\n    else:\n        new_columns = MultiIndex.from_tuples([(i, j, k) for i in ['d', 'e'] for j in sorted(set(index.levels[level] for name, level in cnames)) for k in sorted(set(data.columns.levels[level]))],\n                                            names=[None] + clocs)\n\n    if isinstance(data, Series):\n        unstacked = data.reindex(dummy_index)\n        unstacked.index = new_columns\n    else:\n        unstacked = data.stack(clocs[0]).unstack(list(range(len(clocs[:-1]))), fill_value=fill_value)\n        unstacked = unstacked.unstack(clocs[-1], fill_value=fill_value)\n\n    return unstacked",
            "import_list": []
        }
    ]
}