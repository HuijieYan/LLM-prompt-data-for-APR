{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> Tuple[List[Block], pd.Index]:\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    data = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data._get_numeric_data(copy=False)\n\n    agg_blocks = []\n    new_items = []\n    deleted_items = []\n    split_items = []\n    split_frames = []\n\n    no_result = object()\n    for block in data.blocks:\n        result = no_result\n        locs = block.mgr_locs.as_array\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            if alt is None:\n                assert how == \"ohlc\"\n                deleted_items.append(locs)\n                continue\n            obj = self.obj[data.items[locs]]\n            if obj.shape[1] == 1:\n                obj = obj.iloc[:, 0]\n            s = data._get_grouper(obj, self.grouper)\n            try:\n                result = s.aggregate(lambda x: alt(x, axis=self.axis))\n                result = result._validate(allow_object=True)\n                blocks = result._data.blocks\n                if not result._data.get_bool_indexer(result.columns, null_val=True).any():\n                    result = blocks[0].get_values()\n            except TypeError:\n                deleted_items.append(locs)\n                continue\n            except ValueError:\n                split_items.append(locs)\n                split_frames.append(result._data.blocks[0])\n                continue\n            except Exception as e:\n                raise e\n            else:\n                pass\n\n        if not isinstance(result, (pd.DataFrame, pd.Series, np.ndarray, list, tuple)):\n            if result is no_result:\n                pass\n            else:\n                raise TypeError(\n                    f\"unsupported type: {type(result).__name__}\"\n                )\n\n        if block._can_hold_element(result):\n            result = pd._try_cast(result, block.values.dtype, copy=False)\n            agg_block = block.make_block(result, placement=block.mgr_locs)\n        else:\n            raise TypeError(\n                \"invalid apply result at {0!r}\".format(block)\n            )\n\n        new_items.append(np.array(list(block.mgr_locs)))\n\n        agg_blocks.append(agg_block)\n\n    if not (agg_blocks or split_frames):\n        raise ValueError(\"No numeric types to aggregate\")\n\n    if len(split_items) > 0:\n        for locs, result in zip(split_items, split_frames):\n            result_block = result._data.blocks[0]\n            assert len(locs) == result_block.shape[1]\n            blklocs = result.from_element(locs)\n            new_items.append(np.array(list(blklocs)))\n            agg_blocks.append(result_block)\n\n    indexer = np.concatenate(new_items)\n    agg_items = data.items.take(np.sort(indexer))\n\n    if len(deleted_items) > 0:\n        di = np.concatenate(deleted_items)\n        ai = np.arange(len(data.items))\n        m = np.zeros(len(data.items))\n        m[di] = 1\n        indexer = (ai - m.cumsum())[indexer]\n\n    offset = 0\n    for block in agg_blocks:\n        loc = len(block.mgr_locs)\n        block.mgr_locs = indexer[offset:offset + loc]\n        offset += loc\n\n    return agg_blocks, agg_items",
            "import_list": [
                "from typing import List, Tuple",
                "import numpy as np",
                "import pandas as pd",
                "from pandas.core.internals import Block"
            ]
        }
    ]
}