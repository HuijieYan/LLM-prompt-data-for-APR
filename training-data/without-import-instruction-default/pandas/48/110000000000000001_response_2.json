{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    \n    for block in data.blocks:\n        locs = block.mgr_locs\n\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            if alt is None:\n                raise DataError(\"Unable to perform the operation\")\n\n            obj = self.obj[data.items[locs]]\n            s = obj.groupby(self.grouper.nkeys).agg(alt)\n            result = s if isinstance(s, Series) else s.values\n\n        if len(result.shape) == 1:\n            result = result.reshape(1, -1)\n\n        agg_blocks.append(block.make_block(result))\n        new_items.append(locs)\n\n    if not agg_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n\n    new_items = np.concatenate(new_items)\n\n    agg_items = data.items.take(new_items)\n    offsets = np.zeros(len(data))\n    offsets[new_items] = 1\n    offsets = np.cumsum(offsets) - 1\n\n    for i, block in enumerate(agg_blocks):\n        block.mgr_locs = np.unique(offsets[block.mgr_locs])\n\n    return agg_blocks, agg_items",
            "import_list": [
                "from pandas.core.internals.blocks import Block",
                "from pandas import DataFrame, Index, Series, DataError",
                "from pandas.core.internals.managers import BlockManager",
                "import numpy as np",
                "from typing import List, Tuple, cast"
            ]
        }
    ]
}