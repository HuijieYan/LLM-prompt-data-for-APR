{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ) -> \"Tuple[List[Block], Index]\":\n        data: BlockManager = self._get_data_to_aggregate()\n    \n        if numeric_only:\n            data = data.get_numeric_data(copy=False)\n    \n        agg_blocks: List[Block] = []\n        new_items: List[np.ndarray] = []\n        deleted_items: List[np.ndarray] = []\n        split_items: List[np.ndarray] = []\n        split_frames: List[DataFrame] = []\n    \n        no_result = object()\n        for block in data.blocks:\n            result = no_result # Avoid inheriting result from earlier in the loop\n            locs = block.mgr_locs.as_array # Get locs as array\n            if block.get_numeric_data(): # Check if block has numeric data to aggregate\n                result = self.grouper.aggregate(block.values, how, axis=1, min_count=min_count) # Then aggregate\n            elif alt is not None: # If alternate method is provided\n                obj = self.obj[data.items[locs]] \n                if obj.shape[1] == 1: \n                    obj = obj.iloc[:, 0] # Pandas specific code to avoid call to self.values\n                s = get_groupby(obj, self.grouper) # Get groupby columns\n                result = s.aggregate(lambda x: alt(x, axis=self.axis)) \n                if isinstance(result, DataFrame) and len(result._data.blocks) > 1:\n                    split_items.append(locs) # Append locs to split items\n                    split_frames.append(result) \n                else:\n                    result = result._data.blocks[0].values.reshape(1, -1) if isinstance(result, DataFrame) else result  # Reshape the result \n            assert not isinstance(result, DataFrame) # Assert the result is not a DataFrame\n    \n            # Some codes removed\n    \n            if result is not no_result:\n               agg_blocks.append(agg_block) # Append agg block\n               new_items.append(locs) # Append locs\n    \n        if not (agg_blocks or split_frames):\n            raise DataError(\"No numeric types to aggregate\") # Raise exception if no numeric types\n    \n        # Some codes removed\n    \n        return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}