{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> Tuple[List[Block], Index]:\n    data: BlockManager = self._get_data_to_aggregate()\n    \n    # Store original items and blocks in variables for later use\n    original_items = data.items\n    original_blocks = data.blocks\n    \n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n    \n    agg_blocks: List[Block] = []\n    new_items: List[int] = []\n    deleted_items: List[int] = []\n    split_items: List[int] = []\n    split_frames: List[DataFrame] = []\n    \n    for block_idx, block in enumerate(data.blocks):\n        locs = block.mgr_locs.as_array\n        # Rest of the implementation goes here\n    \n    # Combine the results into agg_blocks and agg_items\n    # Error handling for empty results\n    if not (agg_blocks or split_frames):\n        raise DataError(\"No numeric types to aggregate\")\n    \n    # Handling for split blocks\n    if split_items:\n        for locs, result in zip(split_items, split_frames):\n            # Restoring original items in case of split blocks\n            agg_blocks.append(result._data.blocks[0])\n    \n    # Reordering the blocks and resetting locs\n    offset = 0\n    for blk in agg_blocks:\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = indexer[offset : (offset + loc)]\n        offset += loc\n\n    # Resetting the locs to correspond to the current ordering\n    indexer = np.concatenate(new_items)\n    agg_items = original_items.take(np.sort(indexer))\n\n    # Handling for excluded items\n    if deleted_items:\n        deleted = np.concatenate(deleted_items)\n        ai = np.arange(len(original_blocks))\n        mask = np.zeros(len(original_blocks))\n        mask[deleted] = 1\n        indexer = (ai - mask.cumsum())[indexer]\n        # End of error handling for excluded items\n    \n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}