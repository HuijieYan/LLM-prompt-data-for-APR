{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n        if not isinstance(ax, DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n\n        if len(ax) == 0:\n            binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n            return binner, [], labels\n\n        start = ax.min()\n        end = ax.max()\n        if self.freq is None:\n           raise ValueError(\"'freq' must be defined\")\n        \n        dst_overlap = True if self.freq.rule_code in ['D', 'B'] else False\n        binner = labels = date_range(start=start, end=end, freq=self.freq, tz=ax.tz, name=ax.name, closed=self.closed, ambiguous='infer', nonexistent='shift_forward', dst_overlap=dst_overlap)\n        \n        binner, labels = self._adjust_bin_edges(binner, ax)\n\n        return binner, binner, labels",
            "import_list": [
                "from pandas import DatetimeIndex, date_range, NaT",
                "import numpy as np",
                "from pandas.tseries.frequencies import to_offset",
                "from pandas.tseries.frequencies import _get_offset_name",
                "from pandas.core.arrays.datetimes import DatetimeArray",
                "from pandas.tseries.frequencies import to_offset"
            ]
        }
    ]
}