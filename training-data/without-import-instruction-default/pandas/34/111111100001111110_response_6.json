{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n        if not isinstance(ax, DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n\n        if len(ax) == 0:\n            binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n            return binner, [], labels\n\n        bins_impl = lib.generate_bins_dt64\n\n        first, last = _get_timestamp_range_edges(\n            ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base\n        )\n\n        freq = to_offset(self.freq)\n        rule_code = freq.rule_code\n        ambiguous = ax.is_all_dates_localized and rule_code is not None and \"D\" not in rule_code\n        impl = None\n        tz = getattr(first, \"tz\", None) or getattr(last, \"tz\", None)\n\n        if ambiguous:\n            if tz is None:\n                tz = ax.tz\n            first_val = first.value\n            last_val = last.value\n            stride = freq.nanos\n\n            def impl(ax_values, bin_edges):\n                return lib.generate_bins_dt64_ambiguous(\n                    ax_values,\n                    bin_edges,\n                    self.closed,\n                    stride,\n                    first_val,\n                    last_val,\n                    has_nans=ax.hasnans,\n                )\n\n            bins_impl = impl\n\n        binner = date_range(\n            freq=self.freq,\n            start=first,\n            end=last,\n            tz=ax.tz,\n            name=ax.name,\n            ambiguous=\"infer\",\n            nonexistent=\"shift_forward\",\n        )\n\n        ax_values = ax.asi8\n        binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n\n        bins = bins_impl(ax_values, bin_edges)\n\n        if self.closed == \"right\":\n            labels = binner\n            if self.label == \"right\":\n                labels = labels[1:]\n        elif self.label == \"right\":\n            labels = labels[1:]\n\n        if ax.hasnans:\n            binner = np.r_[NaT, binner]\n            labels = np.r_[NaT, labels]\n\n        if len(bins) < len(labels):\n            labels = labels[: len(bins)]\n\n        return binner, bins, labels",
            "import_list": [
                "import numpy as np",
                "from pandas import DatetimeIndex, Timestamp, date_range, NaT",
                "from pandas.core.resample import _get_timestamp_range_edges",
                "from pandas.core.tools.timedeltas import to_offset"
            ]
        }
    ]
}