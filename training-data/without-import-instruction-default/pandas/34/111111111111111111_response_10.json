{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n        if not isinstance(ax, DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n    \n        if len(ax) == 0:\n            binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n            return binner, [], labels\n\n        first, last = _get_timestamp_range_edges(\n            ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base\n        )\n\n        offset = to_offset(self.freq)\n        maybe_infer_timezone = getattr(ax, '_can_infer_dst_tz', False)\n        adjust_tz = maybe_infer_timezone\n        first = to_time(first, freq=offset, tz=ax.tz, ambiguous='infer', nonexistent='shift_forward', infer_dst=maybe_infer_timezone).to_datetime64()\n        last = to_time(last, freq=offset, tz=ax.tz, ambiguous='infer', nonexistent='shift_forward', infer_dst=maybe_infer_timezone).to_datetime64()\n\n        binner = date_range(\n            start=first,\n            end=last,\n            freq=self.freq,\n            ambiguous=\"infer\",\n            nonexistent=\"shift_forward\",\n            tz=ax.tz,\n            name=ax.name\n        )\n    \n        ax_values = ax.asi8\n        binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n        bins = lib.generate_bins_dt64(\n            ax_values, bin_edges, self.closed, hasnans=ax.hasnans\n        )\n    \n        if self.closed == \"right\":\n            labels = binner\n            if self.label == \"right\":\n                labels = labels[1:]\n        elif self.label == \"right\":\n            labels = labels[1:]\n    \n        if ax.hasnans:\n            binner = binner.insert(0, NaT)\n            labels = labels.insert(0, NaT)\n    \n        if len(bins) < len(labels):\n            labels = labels[: len(bins)]\n    \n        return binner, bins, labels",
            "import_list": [
                "from pandas import Timestamp, DatetimeIndex, date_range, NaT",
                "from pandas.core.resample import _get_timestamp_range_edges",
                "from pandas.tseries.frequencies import to_offset",
                "from pandas.tseries.common import maybe_to_datetimelike",
                "from pandas.core.arrays.datetimes import DatetimeArray",
                "from pandas.core.tools.datetimes import to_time",
                "from pandas.core import arrays as lib"
            ]
        }
    ]
}