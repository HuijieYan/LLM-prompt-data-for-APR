{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    from pandas.core.indexes.datetimes import DatetimeIndex\n    from pandas.tseries.frequencies import to_offset\n\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name, tz=ax.tz)\n        return binner, [], labels\n\n    first, last = ax[[0, -1]]\n    first = first.floor(self.freq)\n    last = last.ceil(self.freq)\n    labels = date_range(\n        start=first,\n        end=last,\n        freq=self.freq,\n        tz=ax.tz,\n        name=ax.name,\n        closed=self.closed\n    )\n    if self.closed == \"right\":\n        bins = labels.searchsorted(ax, side=self.label)\n    else:\n        bins = labels.searchsorted(ax, side=self.label, sorter=ax.argsort())\n    bins = bins[: _find_non_nans(bins)]\n    labels = labels[: len(bins)]\n\n    return labels, bins, labels",
            "import_list": [
                "import pandas as pd",
                "from pandas.tseries.frequencies import to_offset",
                "from pandas.core.indexes.datetimes import DatetimeIndex",
                "from pandas.tseries.frequencies import to_offset"
            ]
        }
    ]
}