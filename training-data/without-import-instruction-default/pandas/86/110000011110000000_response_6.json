{
    "pandas": [
        {
            "bugID": 86,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 429,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot(data: \"DataFrame\", index=None, columns=None, values=None):\n    \"\"\"\n    pivot(data, index=None, columns=None, values=None) -> DataFrame\n\n    Return reshaped DataFrame organized by given index / column values.\n\n    Parameters\n    ----------\n    data : DataFrame\n    index : int or str, optional\n        Column to use to make the new frame's index. If none, uses existing index.\n    columns : int or str, optional\n        Column to use to make the new frame's columns.\n    values : int or str, optional\n        Column(s) in the DataFrame to pivot to the column level.\n    \"\"\"\n    if values is None:\n        cols = [columns] if index is None else [index, columns]\n        append = index is None\n        indexed = data.set_index(cols, append=append)\n    else:\n        if index is None:\n            index = data.index\n        else:\n            index = data[values]  # Fix assignment\n        index = tslib.MultiIndex.from_arrays([data[index], data[columns]])  # Update MultiIndex.from_arrays call\n\n        if isinstance(values, str):  # Check if values is a string\n            indexed = pd.DataFrame(data[values].values, index=index, columns=[values])  # Reconstruct DataFrame\n        elif isinstance(values, list):\n            indexed = pd.DataFrame(data[values].values, index=index, columns=values)  # Reconstruct DataFrame\n    return indexed.unstack(columns)",
            "import_list": [
                "import pandas as pd",
                "import pytest",
                "from pandas.core.indexes.api import _shared_docs",
                "from pandas._libs import tslib"
            ]
        }
    ]
}