{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n    \"\"\"\n    Try to parse a ndarray like into a date column.\n\n    Try to coerce object in epoch/iso formats and integer/float in epoch\n    formats. Return a boolean if parsing was successful.\n    \"\"\"\n    # no conversion on empty\n    if not len(data):\n        return data, False\n\n    new_data = data\n    if is_datetime64_any_dtype(new_data) or is_integer_dtype(new_data):\n        try:\n            new_data = astype_nansafe(new_data, 'int', copy=True, errors='ignore')\n        except (TypeError, ValueError, OverflowError):\n            pass\n\n    # ignore numbers that are out of range\n    if is_numeric_dtype(new_data):\n        in_range = (new_data > self.min_stamp) | new_data.isna()\n        if not in_range.all():\n            return data, False\n\n    date_unit = self.date_unit if self.date_unit else 'ns'\n    try:\n        new_data = pd.to_datetime(new_data, errors='raise', unit=date_unit)\n        return new_data, True\n    except (ValueError, OverflowError):\n        return data, False",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas.compat import iNaT",
                "from pandas.core.dtypes.common import is_datetime64_any_dtype, is_numeric_dtype",
                "from pandas.core.dtypes.cast import astype_nansafe",
                "from pandas.api.types import is_integer_dtype"
            ]
        }
    ]
}