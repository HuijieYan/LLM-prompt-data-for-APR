{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n        \"\"\"\n        Try to parse a ndarray like into a date column.\n\n        Try to coerce object in epoch/iso formats and integer/float in epoch\n        formats. Return a boolean if parsing was successful.\n        \"\"\"\n        if len(data) == 0:\n            return data, False\n\n        new_data = data\n\n        if is_datetime64_any_or_timedelta64_dtype(new_data):\n            return new_data, True\n\n        try:\n            new_data = pd.to_numeric(new_data, errors='coerce')\n        except (ValueError, TypeError):\n            pass\n\n        if new_data.dtype == np.dtype('float64'):\n            mask = new_data.notnull() & (new_data < self.min_stamp)\n            new_data[mask] = self.min_stamp\n\n        try:\n            date_unit = (self.date_unit,) if self.date_unit else None\n            new_data = to_datetime(new_data, errors='coerce', unit=date_unit)\n            if is_datetime(new_data) or is_datetime64_any_or_timedelta64_dtype(new_data):\n                return new_data, True\n        except (ValueError, OverflowError):\n            pass\n\n        return data, False",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas.api.types import is_datetime64_any_dtype as is_datetime",
                "from pandas.core.dtypes.common import is_datetime64_any_or_timedelta64_dtype",
                "from pandas import to_datetime, isna, iNaT"
            ]
        }
    ]
}