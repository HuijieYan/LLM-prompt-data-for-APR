{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data, errors=\"raise\"):\n        \"\"\"\n        Try to parse a ndarray like into a date column.\n\n        Try to coerce object in epoch/iso formats and integer/float in epoch\n        formats. Return a boolean if parsing was successful.\n        \"\"\"\n        # no conversion on empty\n        if not len(data):\n            return data, False\n\n        if not is_numeric_dtype(data) and not isinstance(data, str) and not isinstance(data, (np.ndarray, pd.Series)):\n            if errors == \"coerce\":\n                return data, False\n            if errors == \"raise\":\n                raise ParserError(f\"{errors} is not supported for parsing bool data to dates\")\n\n        new_data = data\n\n        if not is_numeric_dtype(new_data):\n            if errors == \"coerce\":\n                from pandas.api.types import is_bool_dtype\n                coerce_result = new_data.copy()\n                coerce_result[is_bool_dtype(new_data)] = new_data[is_bool_dtype(new_data)]\n                new_data = coerce_result\n            else:\n                if errors != \"ignore\":\n                    raise ParserError(\n                        f\"An incorrect type of values was passed in, \"\n                        f\"{type(data)} cannot be used for date conversion.\"\n                    )\n\n        if is_numeric_dtype(new_data) and not pd.api.types.is_datetime64_any_dtype(new_data):\n            date_units = (self.date_unit,) if self.date_unit else self._STAMP_UNITS\n            for date_unit in date_units:\n                try:\n                    new_data = pd.to_datetime(new_data, errors=errors, unit=date_unit)\n                except (ValueError, OverflowError):\n                    continue\n                return new_data, True\n\n        return data, False",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas.core.dtypes.common import is_numeric_dtype",
                "from pandas.core.dtypes.dtypes import DatetimeTZDtype, Datetime64Dtype",
                "from pandas.core.dtypes.missing import isna, notna",
                "from pandas.errors import ParserError",
                "from pandas.tseries import frequencies",
                "from pandas.tseries.util import iNaT, ts_input_to_str",
                "from pandas.api.types import is_bool_dtype"
            ]
        }
    ]
}