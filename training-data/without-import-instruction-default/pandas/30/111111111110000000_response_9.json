{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n    \"\"\"\n    Try to parse a ndarray like into a date column.\n    Try to coerce object in epoch/iso formats and integer/float in epoch\n    formats. Return a boolean if parsing was successful.\n    \"\"\"\n    if not len(data):  # no conversion on empty\n        return data, False\n\n    new_data = data\n    try:\n        if is_scalar(data[0]):\n            new_data = np.array(data)\n    except (TypeError, ValueError, OverflowError):\n        pass\n\n    if is_integer_dtype(new_data):\n        if should_cache(new_data):\n            new_data = new_data.copy()\n    elif is_float_dtype(new_data):\n        try:\n            if np.issubdtype(new_data.dtype, np.floating):\n                new_data = np.array(new_data, dtype=\"datetime64[s]\")\n        except (TypeError, ValueError, OverflowError):\n            pass\n    else:\n        raise\n\n    if isinstance(new_data.dtype, DatetimeArray):  # parse datetime\n        return new_data, True\n\n    try:\n        new_data, result = self._convert_lists_to_datetimes(new_data)\n        return new_data, result\n    except (TypeError, ValueError, OverflowError):\n        pass\n\n    return data, False",
            "import_list": [
                "import numpy as np",
                "from pandas.errors import iNaT",
                "from pandas.core.dtypes.common import is_integer_dtype, is_scalar, is_float_dtype",
                "from pandas.core.missing import isna",
                "from pandas.core.arrays.datetimes import DatetimeArray, should_cache",
                "from pandas.core.tools.datetimes import _guess_datetime_format_for_array",
                "from pandas._libs.tslibs.timestamps import Timestamp"
            ]
        }
    ]
}