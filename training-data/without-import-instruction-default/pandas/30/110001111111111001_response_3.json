{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(data, date_unit=None, min_stamp=0):\n    \"\"\"\n    Try to parse a ndarray-like into a date column.\n\n    Try to coerce object in epoch/iso formats and integer/float in epoch\n    formats. Return a boolean if parsing was successful.\n    \"\"\"\n    # no conversion on empty\n    if not len(data):\n        return data, False\n\n    new_data = data\n    if new_data.dtype == \"object\":\n        try:\n            new_data = data.astype(\"int64\")\n        except (TypeError, ValueError, OverflowError):\n            pass\n    elif new_data.dtype == \"bool\":\n        return data, False\n\n    if isna(new_data).any():\n        if not isinstance(data, pd.Series):\n            clean_removals(data, new_data)\n    if not is_datetime64_any_dtype(data):\n        coerced = check_implicit(new_data, data)\n        if notna(coerced).all():\n            new_data = coerced\n\n    # ignore numbers that are out of range\n    if issubclass(new_data.dtype.type, np.number):\n        in_range = (\n            isna(new_data._values)\n            | (new_data > min_stamp)\n            | (new_data._values == iNaT)\n        )\n        if not in_range.all():\n            return data, False\n\n    if not isinstance(data, pd.Series):\n        return new_data, True\n\n    date_units = (date_unit,) if date_unit else (\"ns\",)\n    for date_unit in date_units:\n        if new_data.dtype == \"datetime64[ns]\":\n            return new_data, True\n\n        # error passed here will raise\n        new_data = new_data.apply(\n            lambda x: pd.to_datetime(x, errors=\"raise\", unit=date_unit)\n        )\n        # if we survivor the apply, then the convertion worked!\n        return new_data, True\n\n    # if there is error on datetime64[ns] for all dateunit, return false\n    return new_data, False",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas._libs.tslibs.nattype import iNaT",
                "from pandas.core.dtypes.common import is_datetime64_any_dtype",
                "from pandas.core.dtypes.dtypes import CategoricalDtype",
                "from pandas.core.dtypes.missing import isna",
                "from pandas.core.dtypes.missing import check_implicit, clean_removals",
                "from pandas.core.dtypes.missing import notna",
                "from pandas.core.indexes.datetimes import DatetimeIndex",
                "from pandas.io.formats.printing import pprint_thing"
            ]
        }
    ]
}