{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n        \"\"\"\n        Try to parse a ndarray like into a date column.\n\n        Try to coerce object in epoch/iso formats and integer/float in epoch\n        formats. Return a boolean if parsing was successful.\n        \"\"\"\n        if len(data) == 0:\n            return data, False\n\n        if data.dtype == \"object\":\n            try:\n                new_data = data.astype(\"int64\")\n            except (TypeError, ValueError, OverflowError):\n                pass\n        else:\n            new_data = data\n\n        if is_numeric_dtype(new_data):\n            new_data = np.where(\n                (new_data < self.min_stamp) & (new_data != iNaT),\n                np.datetime64(\"NaT\"),\n                new_data,\n            )\n        elif is_datetime64_dtype(new_data):\n            try:\n                new_data = np.array(\n                    [\n                        Timestamp(x, unit=self.date_unit) if x != iNaT else x for x in new_data\n                    ],\n                    dtype=self.date_unit,\n                )\n            except OutOfBoundsDatetime:\n                return data, False\n\n        return new_data, True",
            "import_list": [
                "import numpy as np",
                "from pandas.api.types import is_numeric_dtype, is_datetime64_dtype",
                "from pandas._libs.tslibs.nattype import iNaT",
                "from pandas._libs.tslibs.timestamps import Timestamp",
                "from pandas.errors import OutOfBoundsDatetime"
            ]
        }
    ]
}