{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n    \"\"\"\n    Try to parse a ndarray like into a date column.\n\n    Try to coerce object in epoch/iso formats and integer/float in epoch\n    formats. Return a boolean if parsing was successful.\n    \"\"\"\n    # no conversion on empty\n    if not len(data):\n        return data, False\n\n    new_data = data\n    if is_list_like(data) and new_data.dtype.type == np.object_:\n        try:\n            new_data = data.astype(\"int64\")\n        except (TypeError, ValueError, OverflowError):\n            pass\n\n    # ignore numbers that are out of range\n    if issubclass(new_data.dtype.type, np.number):\n        in_range = (\n            isna(new_data)\n            | (new_data > self.min_stamp)\n            | (new_data == iNaT)\n        )\n        if not in_range.all():\n            return data, False\n\n    if not isna(data).all() and not is_datetimelike(new_data):\n        date_unit = self.date_unit if self.date_unit else \"s\"\n        try:\n            if is_list_like(data):\n                tz = None\n                result = array_with_unit_to_datetime(\n                    new_data, errors=\"raise\", name=self.name\n                )\n            else:\n                result, tz = datetimelike_to_datetime(\n                    new_data, errors=\"raise\", dayfirst=False\n                )\n\n            if isinstance(result, (DatetimeArray, CategoricalDtype.categories)):\n                new_data = result\n            # allow lists to be converted to Timestamp\n            if is_list_like(new_data) and len(new_data) <= 1 and not is_list_like(data) and not result.shape:\n                new_data = new_data[0]\n\n            if isinstance(result, OutOfBoundsDatetime):\n                raise result\n\n            return new_data, True\n        except (ValueError, OutOfBoundsDatetime, OverflowError):\n            pass\n\n    return data, False",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas._libs.tslibs.nattype import iNaT",
                "from pandas.core.dtypes.dtypes import CategoricalDtype",
                "from pandas.core.dtypes.common import is_datetimelike, is_list_like",
                "from pandas.core.arrays import DatetimeArray",
                "from pandas.core.np import isna",
                "from pandas.tseries.frequencies import to_offset",
                "from pandas.errors import OutOfBoundsDatetime",
                "from pandas.tseries.tools import to_datetime"
            ]
        }
    ]
}