{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n        \"\"\"\n        Try to parse a ndarray like into a date column.\n\n        Try to coerce object in epoch/iso formats and integer/float in epoch\n        formats. Return a boolean if parsing was successful.\n        \"\"\"\n        # no conversion on empty\n        if not len(data):\n            return data, False\n\n        new_data = data\n        if hasattr(new_data, 'dtype') and new_data.dtype == 'object':\n            try:\n                new_data = new_data.astype(\"int64\")\n            except (TypeError, ValueError, OverflowError):\n                pass\n\n        # ignore numbers that are out of range\n        if isinstance(new_data, np.ndarray) and issubclass(new_data.dtype.type, np.number):\n            self.min_stamp=31536000 # assuming this value to handle numbers out of range\n            in_range = (\n                isna(new_data) | (new_data > self.min_stamp ) \n            )\n            if not all(in_range):\n                return new_data, False\n\n        date_units = (self.date_unit,) if self.date_unit else ('s', 'ms', 'us', 'ns')\n        for date_unit in date_units:\n            try:\n                new_data = Series(new_data).apply(lambda x: pd.to_datetime(x, errors=\"raise\", unit=date_unit))\n                return new_data, True\n            except (ValueError, OverflowError):\n                pass\n\n        return new_data, False",
            "import_list": [
                "import numpy as np",
                "from pandas._libs.missing import iNaT",
                "from pandas.core.dtypes.missing import isna",
                "from pandas.errors import PerformanceWarning",
                "from pandas.core.arrays.datetimes import DatetimeArray",
                "from pandas.core.tools.timedeltas import to_offset",
                "from pandas.core.common import ensure_timezone",
                "from datetime import datetime, date, timedelta",
                "from pandas import RangeIndex, Series",
                "import numpy as np",
                "from pandas.core.tools.timedeltas import to_offset",
                "from pandas._libs.tslibs.nattype import NAType",
                "from pandas.core.arrays.datetimes import DatetimeArray",
                "from pandas.tseries.frequencies import to_offset",
                "from pandas._libs.tslibs import bases",
                "from pandas._libs.tslibs.timedeltas import Timedelta",
                "from pandas._libs.tslibs.offsets import to_offset"
            ]
        }
    ]
}