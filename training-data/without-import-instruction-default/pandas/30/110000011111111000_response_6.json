{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n    \"\"\"\n    Try to parse a ndarray like into a date column.\n\n    Try to coerce object in epoch/iso formats and integer/float in epoch\n    formats. Return a boolean if parsing was successful.\n    \"\"\"\n    # no conversion on empty\n    if data.empty:\n        return data, False\n\n    new_data = data\n    if is_categorical_dtype(new_data):\n        raise TypeError(f\"Categorical is not convertible to datetime\")\n    elif is_complex(new_data):\n        raise TypeError(f\"Complex is not convertible to datetime\")\n    elif is_integer_dtype(new_data.dtype):\n        new_data = pd.to_datetime(new_data, unit=self.date_unit, errors='coerce')\n\n    if isinstance(data, ABCDatetimeArray):\n        return data, True\n\n    if isinstance(data, pd.Series) and isinstance(data._values, ExtensionArray):\n        return data, False\n\n    return new_data, False",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas.core.dtypes.common import is_categorical_dtype",
                "from pandas.api.types import is_complex, is_integer_dtype",
                "from pandas._libs.missing import isna, na_value_for_dtype",
                "import pandas.core.dtypes.common as common",
                "from pandas.core.dtypes.generic import ABCDatetimeArray",
                "from pandas.api.extensions import ExtensionArray"
            ]
        }
    ]
}