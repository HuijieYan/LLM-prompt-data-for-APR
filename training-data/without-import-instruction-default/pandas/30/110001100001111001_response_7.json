{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n\n    import numpy as np\n    from pandas._libs.missing import iNaT\n    from pandas._libs.tslibs.nattype import NaT\n\n    def isna(x):\n        return x in [NaT, None]\n\n    def _maybe_cast_for_comparisons(arr):\n        typ = arr.dtype.type\n        if issubclass(typ, np.integer) and issubclass(typ, np.datetime64):\n            return arr.view(np.int64)\n        return arr\n\n    def needs_i8_conversion(arr):\n        kind = arr.dtype.kind\n        return kind in [\"i\", \"u\", \"f\"] and kind != \"M\"\n\n    def to_datetime(arg, errors=\"raise\", dayfirst=False, yearfirst=False, utc=None, box=True, format=None, exact=True, unit=None, infer_datetime_format=False, origin=\"unix\", cache=True):\n        return np.array([0, 1, 2])\n\n    if not len(data):\n        return data, False\n\n    new_data = data\n    if needs_i8_conversion(new_data):\n        new_data = new_data._values\n        new_data[~in_range]._data = new_data._data.astype(\"int64\", copy=False)\n\n    return new_data, True",
            "import_list": [
                "import numpy as np",
                "from pandas._libs.missing import iNaT",
                "from pandas._libs.tslibs.nattype import NaT",
                "import numpy as np",
                "from pandas._libs.missing import iNaT",
                "from pandas._libs.tslibs.nattype import NaT"
            ]
        }
    ]
}