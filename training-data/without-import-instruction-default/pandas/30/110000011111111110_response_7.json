{
    "pandas": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n    \"\"\"\n    Try to parse a ndarray like into a date column.\n\n    Try to coerce object in epoch/iso formats and integer/float in epoch\n    formats. Return a boolean if parsing was successful.\n    \"\"\"\n    # no conversion on empty\n    if not len(data):\n        return data, False\n\n    new_data = data\n    if is_integer_dtype(new_data) or is_float(new_data):\n        date_range_max = np.iinfo(\"int64\").max\n        if new_data.max() > date_range_max:\n            return data, False\n\n    new_data_dtype = new_data.dtype\n    if (\n        new_data_dtype == \"object\"\n        and isinstance(new_data[0], str)\n        and isinstance(new_data[0], bytes)\n    ):\n        try:\n            new_data = new_data.astype(\"int64\")\n        except (TypeError, ValueError, OverflowError):\n            pass\n\n    elif is_extension_array_dtype(new_data):\n        if isinstance(new_data, ABCDatetimeArray):\n            result = new_data._try_coerce_to_datetimelike(errors=\"raise\")\n            if not result[1]:\n                return data, False\n\n    else:\n        categorical = is_categorical(new_data)\n        if not categorical and isinstance(new_data, ABCIndexClass):\n            categorical = (\n                is_categorical(new_data.array)\n                if isinstance(new_data.array, ABCIndexClass)\n                else is_categorical(new_data.array)\n            )\n        if categorical:\n            new_data = new_data.astype(str)\n\n        if (is_integer_dtype(new_data_dtype) or is_float(new_data) and not categorical):\n            mask = isna(new_data) | (new_data > self.min_stamp)\n\n            if iNaT is not None:\n                mask |= new_data._values == iNaT\n            if not mask.all():\n                return data, False\n\n        elif not isinstance(new_data_dtype, DatetimeArray):\n            # ignore numbers that are out of range\n            if issubclass(new_data_dtype.type, np.number):\n                in_range = isin(\n                    new_data, [-np.inf, self.min_stamp, np.inf], assume_unique=False\n                )\n                if not in_range.all():\n                    return data, False\n\n        conversions = list(self._get_date_formats())\n\n        for _, date_unit in conversions:\n            try:\n                new_data = pd.to_datetime(new_data, errors=\"raise\", unit=date_unit)\n                return new_data, True\n            except Exception:\n                continue\n\n    return data, False",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas import Series",
                "from pandas.util._decorators import Appender",
                "from pandas.errors import iNaT, isna",
                "from pandas.core.arrays.datetimes import DatetimeArray",
                "from pandas.core.algorithms import isin",
                "from pandas.types.dtypes import CategoricalDtype",
                "from pandas.core.dtypes.common import (\n    is_categorical,\n    is_extension_array_dtype,\n)",
                "from pandas.api.types import is_float, is_integer_dtype",
                "from pandas.core.dtypes.generic import ABCDatetimeArray, ABCIndexClass"
            ]
        }
    ]
}