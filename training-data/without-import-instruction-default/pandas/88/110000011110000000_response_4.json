{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    if isinstance(aggfunc, list):\n        pieces: List[DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            table = pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return concat(pieces, keys=keys, axis=1)\n\n    keys = index + columns\n\n    values_passed = values is not None\n    if values_passed:\n        if np.iterable(values):\n            values_multi = True\n            values = list(values)\n        else:\n            values_multi = False\n            values = [values]\n\n        to_filter = [x for x in keys + values if isinstance(x, (list, tuple, range, np.ndarray))]\n        if len(to_filter) < len(data.columns):\n            data = data[to_filter]\n\n    else:\n        values = [col for col in data.columns if col not in keys]\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    if dropna:\n        agged = agged.dropna(how=\"all\")\n\n    table = agged\n    if table.index.nlevels > 1:\n        index_names = agged.index.names[: len(index)]\n        to_unstack = [i if isinstance(i, (int, str)) and (i is None or i in index_names) else agged.index.names[i] for i in range(len(index), len(keys))]\n        table = agged.unstack(to_unstack)\n\n    if not dropna:\n        if table.index.nlevels > 1:\n            m = pd.MultiIndex.from_product(table.index.levels, names=table.index.names)\n            table = table.reindex(m, axis=0)\n\n        if table.columns.nlevels > 1:\n            m = pd.MultiIndex.from_product(table.columns.levels, names=table.columns.names)\n            table = table.reindex(m, axis=1)\n\n    table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table.fillna(fill_value, downcast=\"infer\", inplace=True)\n\n    if margins:\n        data_no_na = data.dropna() if dropna else data\n        table = _add_margins(\n            table,\n            data_no_na,\n            values,\n            index,\n            columns,\n            aggfunc,\n            observed,\n            margins_name\n        )\n\n    if values_passed and not values_multi and not table.empty and table.columns.nlevels > 1:\n        table = table[values[0]]\n\n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    if isinstance(table, pd.DataFrame):\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table",
            "import_list": [
                "from typing import List, Union"
            ]
        }
    ]
}