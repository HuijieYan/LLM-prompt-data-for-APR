{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data: DataFrame,\n    values: Union[str, List[str], None] = None,\n    index: List[str] = None,\n    columns: List[str] = None,\n    aggfunc: Any = \"mean\",\n    fill_value: Any = None,\n    margins: bool = False,\n    dropna: bool = True,\n    margins_name: str = \"All\",\n    observed: bool = False\n) -> DataFrame:\n\n    aggfunc = [aggfunc] if isinstance(aggfunc, str) else aggfunc\n\n    if isinstance(aggfunc, list):\n        pieces: List[DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            table = pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return concat(pieces, keys=keys, axis=1)\n\n    keys = index + columns\n\n    values = data.columns.tolist() if values is None else values\n    values = [values] if isinstance(values, str) else values\n\n    to_filter = [x for x in keys + values if isinstance(x, str) and x in data.columns]\n    if len(to_filter) < len(data.columns):\n        data = data[to_filter]\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    if dropna and isinstance(agged, DataFrame) and not agged.empty:\n        agged = agged.dropna(how=\"all\")\n        for v in values:\n            if (\n                v in data\n                and data[v].dtype == \"int\"\n                and v in agged\n                and agged[v].dtype != \"int\"\n            ):\n                agged[v] = agged[v].astype(int)\n\n    table = agged\n    if table.index.nlevels > 1:\n        index_names = table.index.names[:len(index)]\n        to_unstack = [i if table.index.names[i] in index_names else table.index.names[i] for i in range(len(index), len(keys))]\n        table = table.unstack(to_unstack)\n\n    if not dropna:\n        if table.index.nlevels > 1:\n            m = MultiIndex.from_product([level for level in table.index.levels], names=table.index.names)\n            table = table.reindex(m, axis=0)\n\n        if table.columns.nlevels > 1:\n            m = MultiIndex.from_product([level for level in table.columns.levels], names=table.columns.names)\n            table = table.reindex(m, axis=1)\n\n    if isinstance(table, DataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table.fillna(fill_value)\n\n    if margins:\n        data = data.dropna(axis=1, how=\"all\")\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n\n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    if isinstance(table, DataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table",
            "import_list": [
                "from pandas import DataFrame, MultiIndex, Index, concat, Grouper",
                "from typing import List, Union, Any"
            ]
        }
    ]
}