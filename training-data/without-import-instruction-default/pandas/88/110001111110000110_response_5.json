{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    \"\"\"\n    Create a spreadsheet-style pivot table as a DataFrame. The levels in the pivot table will\n    be stored in MultiIndex objects (hierarchical indexes) on the index and columns of the result DataFrame.\n\n    Parameters\n    ----------\n    data : DataFrame\n    values : column to aggregate (can be list of columns)\n    index : column, Grouper, array, or list of the previous\n        If an array is passed, it must be the same length as the data. The list can contain any of the other types (except list).\n        Keys to group by on the pivot table index. If an array is passed, it is being used as the same manner as column values.\n    columns : column, Grouper, array, or list of the previous\n        If an array is passed, it must be the same length as the data. The list can contain any of the other types (except list).\n        Keys to group by on the pivot table column. If an array is passed, it is being used as the same manner as column values.\n    aggfunc : function, list of functions, dict, default numpy.mean\n        If list of functions passed, the resulting pivot table will have hierarchical columns whose top level are the function names.\n        If dict is passed, the key is column to aggregate and value is function or list of functions.\n    fill_value : scalar, default None\n        Value to replace missing values with.\n    margins : bool, default False\n        Add all row / columns (e.g. for subtotal / grand totals).\n    dropna : bool, default True\n        Do not include columns whose entries are all NaN.\n    margins_name : str, default 'All'\n        Name of the row / column that will contain the totals when margins is True.\n    observed : bool, default False\n        This only applies if any of the groupers are Categoricals. If True: only show observed values for categorical groupers.\n        If False: show all values for categorical groupers.\n\n    Returns\n    -------\n    DataFrame\n\n    Raises\n    ------\n    TypeError\n        If values is list-like, value and col are missing, or additional fill_value is provided when the called function does not allow it.\n\n    See Also\n    --------\n    DataFrame.pivot : Pivot without aggregation that can handle non-numeric data.\n    DataFrame.unstack : Pivot based on the index values instead of a column.\n    DataFrame.melt : Unpivot a DataFrame from wide format to long format.\n    \"\"\"",
            "import_list": []
        }
    ]
}