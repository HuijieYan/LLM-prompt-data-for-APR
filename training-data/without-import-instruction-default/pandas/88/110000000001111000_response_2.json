{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(data, values=None, index=None, columns=None, aggfunc=\"mean\", fill_value=None, margins=False, dropna=True, margins_name=\"All\", observed=False) -> pd.DataFrame:\n    index = get_split_frames(index)\n    columns = get_split_frames(columns)\n\n    if isinstance(aggfunc, list):\n        pieces, keys = [], []\n        for func in aggfunc:\n            table = pivot_table(data, values=values, index=index, columns=columns, fill_value=fill_value, aggfunc=func, margins=margins, dropna=dropna, margins_name=margins_name, observed=observed)\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return pd.concat(pieces, keys=keys, axis=1)\n\n    keys = index + columns\n\n    values_passed = values is not None\n    if values_passed:\n        if isinstance(values, (list, tuple)):\n            values_multi = True\n            values = list(values)\n        else:\n            values_multi = False\n            values = [values]\n\n        if not set(values).issubset(data.columns):\n            raise KeyError(\"One or more value labels are not present in the data\")\n\n        to_filter = [x for x in keys + values if isinstance(x, pd.Grouper) or x in data]\n        if len(to_filter) < len(data.columns):\n            data = data[to_filter]\n    else:\n        values = data.columns.difference(keys).tolist()\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    if dropna and isinstance(agged, pd.core.frame.DataFrame) and not agged.empty:\n        agged = agged.dropna(how=\"all\")\n\n        for v in values:\n            if v in data and pd.api.types.is_integer_dtype(data[v]) and v in agged and not pd.api.types.is_integer_dtype(agged[v]):\n                agged[v] = agged[v].astype(data[v].dtype, errors=\"ignore\")\n\n    table = agged\n    if table.index.nlevels > 1:\n        index_names = table.index.names[:len(index)]\n        to_unstack = [i for i in range(len(index), len(keys)) if table.index.names[i] is None or table.index.names[i] in index_names]\n        table = agged.unstack(to_unstack)\n\n    if not dropna:\n        if table.index.nlevels > 1:\n            m = pd.MultiIndex.from_product([table.index.levels[i] for i in range(len(table.index.levels))], names=table.index.names)\n            table = table.reindex(m, axis=0)\n\n        if table.columns.nlevels > 1:\n            m = pd.MultiIndex.from_product([table.columns.levels[i] for i in range(len(table.columns.levels))], names=table.columns.names)\n            table = table.reindex(m, axis=1)\n\n    if isinstance(table, pd.core.frame.DataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table.fillna(fill_value, downcast=\"infer\")\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        table = _add_margins(table, data, values, rows=index, cols=columns, aggfunc=aggfunc, observed=dropna, margins_name=margins_name, fill_value=fill_value)\n\n    if values_passed and not values_multi and not table.empty and table.columns.nlevels > 1:\n        table = table[values[0]]\n\n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    if isinstance(table, pd.core.frame.DataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table",
            "import_list": [
                "import pandas as pd",
                "from pandas.core.reshape.pivot import get_split_frames"
            ]
        }
    ]
}