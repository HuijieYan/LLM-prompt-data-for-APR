{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> 'DataFrame':\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces = [pivot_table(\n            data,\n            values=values,\n            index=index,\n            columns=columns,\n            fill_value=fill_value,\n            aggfunc=func,\n            margins=margins,\n            dropna=dropna,\n            margins_name=margins_name,\n            observed=observed\n        ) for func in aggfunc]\n\n        keys = [getattr(func, \"__name__\", func) for func in aggfunc]\n\n        return concat(pieces, keys=keys, axis=1)\n\n    keys = index + columns\n\n    values_passed = values is not None\n    if values_passed:\n        if isinstance(values, list):\n            values_multi = True\n        else:\n            values_multi = False\n            values = [values]\n\n        for i in values:\n            if i not in data:\n                raise KeyError(i)\n\n        to_filter = [x.key if isinstance(x, Grouper) else x for x in keys + values if isinstance(x, str)]\n        if len(to_filter) < len(data.columns):\n            data = data[to_filter]\n\n    else:\n        values = [col for col in data.columns if col not in keys]\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n\n        for v in values:\n            if v in data and is_integer_dtype(data[v]) and v in agged and not is_integer_dtype(agged[v]):\n                agged[v] = agged[v].astype(data[v].dtype)\n\n    table = agged\n    if table.index.nlevels > 1:\n        index_names = agged.index.names[:len(index)]\n        to_unstack = [i if agged.index.names[i] and agged.index.names[i] not in index_names else agged.index.names[i] for i in range(len(index), len(keys))]\n        table = agged.unstack(to_unstack)\n\n    if not dropna:\n        if table.index.nlevels > 1:\n            table = table.reindex(MultiIndex.from_arrays(cartesian_product(table.index.levels), names=table.index.names), axis=0)\n\n        if table.columns.nlevels > 1:\n            table = table.reindex(MultiIndex.from_arrays(cartesian_product(table.columns.levels), names=table.columns.names), axis=1)\n\n    if isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table.fillna(fill_value, downcast=\"infer\")\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        table = add_margins(table, data, values, rows=index, cols=columns, aggfunc=aggfunc, observed=dropna, margins_name=margins_name, fill_value=fill_value)\n\n    if values_passed and not values_multi and not table.empty and table.columns.nlevels > 1:\n        table = table[values[0]]\n\n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    if isinstance(table, ABCDataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table",
            "import_list": [
                "from pandas import DataFrame, MultiIndex, concat, Grouper, Index",
                "from pandas.core.dtypes.common import is_integer_dtype",
                "from pandas.core.frame import ABCDataFrame",
                "from pandas.core.reshape.reshape import cartesian_product",
                "from pandas.core.reshape.pivot import pivot_table as pivot_table_original",
                "from pandas.core.reshape.pivot import _add_margins as add_margins"
            ]
        }
    ]
}