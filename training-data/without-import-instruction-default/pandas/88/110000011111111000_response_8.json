{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    keys = index + columns\n\n    values_passed = values is not None\n    if values_passed:\n        values = [values] if not is_list_like(values) else list(values)\n\n    grouped = data.groupby(keys, observed=observed) if not isinstance(data, DataFrameGroupBy) else data\n    agged = grouped.agg(aggfunc)\n\n    agged = agged.dropna(axis=1, how=\"all\") if dropna else agged\n\n    if isinstance(agged, ABCDataFrame):\n        if fill_value is not None:\n            agged.fillna(fill_value, downcast=\"infer\", inplace=True)\n\n        if margins:\n            if dropna:\n                data = data[data.notna().all(axis=1)]\n            agged = _add_margins(\n                agged,\n                data,\n                values,\n                rows=index,\n                cols=columns,\n                aggfunc=aggfunc,\n                observed=dropna,\n                margins_name=margins_name,\n                fill_value=fill_value,\n            )\n\n        if isinstance(agged, ABCDataFrame) and agged.empty:\n            return agged\n\n        if agged.index.nlevels > 1:\n            agged = agged.T\n\n        if not values_passed:\n            values = agged.columns\n        return agged\n\n    def raise_error(x, y):\n        raise SettingWithCopyError(\n            f\"Cannot set to a copy of a slice from a DataFrame. Try using .loc[{x}, {y}] = value instead\"\n        )\n\n    wrapped_agged = agged\n    if isinstance(wrapped_agged, ABCDataFrame):\n        wrapped_agged.loc[:, :] = wrapped_agged.values\n        if wrapped_agged.ndim > 1:\n            raise_error(wrapped_agged.index, wrapped_agged.columns)\n\n        return wrapped_agged\n\n    if wrapped_agged.ndim > 1:\n        raise_error(wrapped_agged.index, wrapped_agged.columns)\n    return wrapped_agged",
            "import_list": [
                "from pandas import DataFrame, concat, Grouper, is_list_like, maybe_downcast_to_dtype, MultiIndex",
                "from pandas.core.dtypes.common import is_integer_dtype",
                "from pandas.core.groupby import DataFrameGroupBy",
                "from pandas.core.base import ABCDataFrame",
                "from pandas.core.frame import _shared_docs",
                "from pandas.core.generic import NDFrame",
                "from pandas.core.indexing import convert_to_index_sliceable",
                "from pandas.core.common import SettingWithCopyError",
                "from pandas.core.ops import invalid_comparison, ComparisonViolation"
            ]
        }
    ]
}