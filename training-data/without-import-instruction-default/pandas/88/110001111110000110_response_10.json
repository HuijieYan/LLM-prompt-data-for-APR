{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False) -> 'DataFrame':\n    if values is not None:\n        if is_list_like(values):\n            values_multi = True\n            values = list(values)\n        else:\n            values_multi = False\n            values = [values]\n\n        to_filter = [getattr(x, \"key\", x) if isinstance(x, Grouper) else x for x in index + columns + values if x in data]\n        data = data[to_filter]\n\n    else:\n        values = [x for x in data.columns if x not in index + columns]\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n        for v in values:\n            if v in data and is_integer_dtype(data[v]) and v in agged and not is_integer_dtype(agged[v]):\n                agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n\n    table = agged\n    if table.index.nlevels > 1:\n        unstack_cols = [i for i in range(len(index), len(keys)) if agged.index.names[i] is None or agged.index.names[i] in index_names]\n        table = agged.unstack(to_unstack)\n        \n    if not dropna:\n        if table.index.nlevels > 1:\n            table = table.reindex(cartesian_product(table.index.levels), axis=0)\n\n        if table.columns.nlevels > 1:\n            table = table.reindex(cartesian_product(table.columns.levels), axis=1)\n\n    if isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table._ensure_type(table.fillna(fill_value, downcast=\"infer\"))\n\n    if margins:\n        data = data[data.notna().all(axis=1)]\n        table = _add_margins(table, data, values, index, columns, aggfunc, observed=observed, margins_name=margins_name, fill_value=fill_value)\n\n    if values is not None and not values_multi and not table.empty and table.columns.nlevels > 1:\n        table = table[values[0]]\n\n    if not index and columns:\n        table = table.T\n\n    if isinstance(table, ABCDataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table",
            "import_list": [
                "from pandas import concat, is_list_like, Grouper, Index, DataFrame, MultiIndex",
                "from pandas.api.types import is_integer_dtype",
                "from pandas.core.dtypes.common import maybe_downcast_to_dtype",
                "from pandas.core.generic import ABCDataFrame",
                "from pandas.core.groupby.generic import GroupBy",
                "from pandas.core.reshape.merge import _maybe_check_integrity",
                "from pandas.core.reshape.pivot import _shared_docs",
                "from pandas.core.reshape.pivot import _convert_by, _add_margins, _shared_docs",
                "from pandas.core.frame import DataFrame",
                "from pandas.core.reshape.pivot import Substitution, Appender",
                "from pandas.core.reshape.pivot import ABCDataFrame, is_integer_dtype, _shared_docs, _convert_by, Grouper, _add_margins",
                "from pandas.core.reshape.merge import merge",
                "from pandas.core.generic import maybe_downcast_to_dtype",
                "from pandas.core.groupby.generic import GroupBy",
                "from pandas.core.dtypes.common import is_integer_dtype",
                "from pandas.core.frame import DataFrame",
                "from pandas.core.reshape.pivot import _shared_docs",
                "from pandas.core.reshape.pivot import _add_margins, ABCDataFrame, Grouper, Substitution, Appender",
                "from pandas.core.reshape.merge import merge",
                "from pandas.core.generic import maybe_downcast_to_dtype, ABCDataFrame",
                "from pandas.core.dtypes.common import is_integer_dtype",
                "from pandas.core.frame import DataFrame"
            ]
        }
    ]
}