{
    "pandas": [
        {
            "bugID": 112,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 907,
            "file_name": "pandas/core/indexes/interval.py",
            "replace_code": "def get_indexer(\n    self,\n    target: AnyArrayLike,\n    method: Optional[str] = None,\n    limit: Optional[int] = None,\n    tolerance: Optional[Any] = None,\n) -> np.ndarray:\n    \n    self._check_method(method)\n\n    if self.is_overlapping:\n        msg = (\n            \"cannot handle overlapping indices; use \"\n            \"IntervalIndex.get_indexer_non_unique\"\n        )\n        raise InvalidIndexError(msg)\n\n    target_as_index = ensure_index(target)\n\n    if isinstance(target_as_index, IntervalIndex):\n        # equal indexes -> 1:1 positional match\n        if self.equals(target_as_index):\n            return np.arange(len(self), dtype=\"intp\")\n        \n        # casting to ensure the correct types\n        self_dtype_subtype = ensure_python_subtype(self.dtype.subtype)\n        target_dtype_subtype = ensure_python_subtype(target_as_index.dtype.subtype)\n        \n        common_subtype = find_common_type([self_dtype_subtype, target_dtype_subtype])\n        \n        if (\n            self.closed != target_as_index.closed \n            or is_object_dtype(common_subtype)\n        ):\n            return np.repeat(np.intp(-1), len(target_as_index))\n\n        # non-overlapping -> at most one match per interval in target_as_index\n        # want exact matches -> need both left/right to match, so defer to\n        # left/right get_indexer, compare elementwise, equality -> match\n        \n        # casting to ensure the correct types\n        left_indexer = ensure_platform_int(\n            self.left.get_indexer(ensure_index(target_as_index.left))\n        )\n        right_indexer = ensure_platform_int(\n            self.right.get_indexer(ensure_index(target_as_index.right))\n        )\n        \n        indexer = np.where(left_indexer == right_indexer, left_indexer, -1)\n        \n    elif not is_object_dtype(target_as_index):\n        # casting to ensure the correct types\n        target_as_index = ensure_index(self._maybe_convert_i8(target_as_index))\n        indexer = ensure_platform_int(self._engine.get_indexer(target_as_index.values))\n    else:\n        # defer to elementwise get_loc operation\n        indexer = [self.get_loc(key) if key in self else -1 for key in target_as_index]\n\n    return indexer",
            "import_list": []
        }
    ]
}