{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, pd.Timestamp):\n        n = self.n\n        start_time = self.start_time\n        end_time = self.end_time\n        business_day_offsets = pd.offsets.BusinessDay(n=0)\n        remaining_business_days = abs(n) // 60 // len(self.start)\n        \n        if n >= 0:\n            # Roll forward to the next working day if the current time is at the end of a business hour\n            if other.time() >= end_time or not self._is_on_offset(other):\n                other = self._next_opening_time(other + self.offset)\n            else:\n                # Roll the time to the next opening hour\n                if other.time() in self.start:\n                    other = other.replace(minute=0, second=0, microsecond=0) + pd.offsets.Hour()\n        else:\n            # Roll back to the previous working day if the current time is at the start of a business hour\n            if other.time() <= start_time:\n                other = self._next_opening_time(other - pd.Timedelta(1, unit='s'))\n            else:\n                # Roll the time to the previous opening hour\n                other = self._prev_opening_time(other)\n        \n        # Get total business hours in seconds\n        total_business_hours = sum((end - start).seconds for start, end in zip(self.start, self.end))\n        business_days_to_roll, remaining_seconds = divmod(abs(n) * 60, total_business_hours // 60)\n        \n        if n < 0:\n            business_days_to_roll = -business_days_to_roll\n            remaining_seconds = -remaining_seconds\n        \n        if business_days_to_roll != 0:\n            other = other + (business_day_offsets * business_days_to_roll)\n        \n        remaining_hours = pd.Timedelta(seconds=remaining_seconds * 60)\n        \n        if n >= 0:\n            # Roll time forward to the business hour where the remaining seconds fall\n            while remaining_hours.seconds > 0:\n                business_hour_end = self._get_closing_time(self._prev_opening_time(other))\n                remaining_in_business_hour = (business_hour_end - other).seconds\n                \n                if remaining_hours.seconds < remaining_in_business_hour:\n                    other = other + pd.Timedelta(seconds=remaining_hours.seconds * 60)\n                    remaining_hours = pd.Timedelta(seconds=0)\n                else:\n                    remaining_hours = pd.Timedelta(seconds=remaining_hours.seconds - remaining_in_business_hour)\n                    other = self._next_opening_time(other + pd.Timedelta(remaining_in_business_hour, unit='s'))\n        else:\n            # Roll time back to the business hour where the remaining seconds fall\n            while remaining_hours.seconds > 0:\n                business_hour_start = self._next_opening_time(other)\n                remaining_in_business_hour = (business_hour_end - other).seconds\n                \n                if remaining_hours.seconds < remaining_in_business_hour or (remaining_hours.seconds == remaining_in_business_hour and other.nanosecond != 0):\n                    other = other + pd.Timedelta(seconds=remaining_hours.seconds * 60)\n                    remaining_hours = pd.Timedelta(seconds=0)\n                else:\n                    remaining_hours = pd.Timedelta(seconds=remaining_hours.seconds - remaining_in_business_hour)\n                    other = self._get_closing_time(self._next_opening_time(other + pd.Timedelta(remaining_in_business_hour - 1, unit='s')))\n        \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with Timestamp\")",
            "import_list": []
        }
    ]
}