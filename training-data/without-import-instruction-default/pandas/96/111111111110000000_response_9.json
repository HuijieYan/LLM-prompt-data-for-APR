{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, pd.Timestamp):\n\n            # reset timezone and nanosecond\n            other = other.replace(hour=0, minute=0, second=0, microsecond=0)\n\n            if self.n >= 0:\n                if other.time() > max(self.end) or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() < min(self.start) or not self._is_on_offset(other):\n                    other = self._prev_opening_time(other)\n\n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            bd, r = divmod(abs(self.n * 60), businesshours // 60)\n            if self.n < 0:\n                bd, r = -bd, -r\n\n            if bd != 0:\n                skip_bd = pd.offsets.BDay(n=bd)\n                if not self.is_on_offset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + skip_bd + remain\n                else:\n                    other = other + skip_bd\n\n            bhour_remain = pd.Timedelta(minutes=r)\n\n            if self.n >= 0:\n                while bhour_remain != pd.Timedelta(0):\n                    bhour = self._next_opening_time(other) - other\n                    if bhour_remain < bhour:\n                        other += bhour_remain\n                        bhour_remain = pd.Timedelta(0)\n                    else:\n                        bhour_remain -= bhour\n                        other = self._next_opening_time(other + bhour)\n            else:\n                while bhour_remain != pd.Timedelta(0):\n                    bhour = other - self._prev_opening_time(other)\n                    if bhour_remain > bhour:\n                        other += bhour_remain\n                        bhour_remain = pd.Timedelta(0)\n                    else:\n                        bhour_remain -= bhour\n                        other = self._get_closing_time(self._prev_opening_time(other))\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}