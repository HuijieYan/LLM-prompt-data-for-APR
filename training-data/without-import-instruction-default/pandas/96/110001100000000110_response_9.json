{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, pd.Timestamp):\n        n = self.n\n        business_hours = self.business_hours\n        start_time = self.start_time\n\n        if n >= 0:\n            # check if the time is in after the specified end time or not on the current offset\n            if other.time() in self.end_time or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            # check if the time is on the specified start time\n            if other.time() in self.start_time:\n                other = other - pd.Timedelta(seconds=1)\n            # check of the time is not on the current offset\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        # Calculate the total business hours in a day\n        total_business_hours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start_time, self.end_time)\n        )\n\n        # Calculate the business days and remaining hours\n        business_days, remaining_seconds = divmod(abs(n * 60), total_business_hours // 60)\n        if n < 0:\n            business_days, remaining_seconds = -business_days, -remaining_seconds\n\n        # Adjust the dates for business days\n        if business_days != 0:\n            skip_bd = BusinessDay(n=business_days)\n            if self._next_bday.is_on_offset(other):\n                other = other + skip_bd\n            else:\n                prev_open = self._prev_opening_time(other)\n                remain = other - prev_open\n                other = prev_open + skip_bd + remain\n\n        # Remaining business hours adjustment\n        remaining_hours = pd.Timedelta(minutes=remaining_seconds)\n\n        if n >= 0:\n            while remaining_hours != pd.Timedelta(0):\n                business_hour = (\n                    self._get_closing_time(self._prev_opening_time(other)) - other\n                )\n                if remaining_hours < business_hour:\n                    other += remaining_hours\n                    remaining_hours = pd.Timedelta(0)\n                else:\n                    remaining_hours -= business_hour\n                    other = self._next_opening_time(other + business_hour)\n        else:\n            while remaining_hours != pd.Timedelta(0):\n                business_hour = self._next_opening_time(other) - other\n                if remaining_hours > business_hour or remaining_hours == business_hour:\n                    other += remaining_hours\n                    remaining_hours = pd.Timedelta(0)\n                else:\n                    remaining_hours -= business_hour\n                    other = self._get_closing_time(\n                        self._next_opening_time(\n                            other + business_hour - pd.Timedelta(seconds=1)\n                        )\n                    )\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}