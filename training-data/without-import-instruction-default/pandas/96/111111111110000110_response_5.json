{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, pd.Timestamp):  # Fix the check for datetime\n            nanosecond = getattr(other, \"nanosecond\", 0)\n            other = other.replace(microsecond=0)  # Use replace to remove nanoseconds\n            n = self.n\n\n            # adjust other to reduce number of cases to handle\n            if n >= 0:\n                if other.time() >= self._end.min() or not self.is_on_offset(other):  # Fix the check for end time\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() <= self._start.max():  # Fix the check for start time\n                    other -= pd.Timedelta(seconds=1)\n                if not self.is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n\n            # Get total business hours by sec in one business day\n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self._start, self._end)  # Fix the attribute names\n            )\n\n            bd, r = divmod(abs(n) * 60, businesshours // 60) if businesshours > 0 else (0, 0)\n            bd, r = (-bd, -r) if n < 0 else (bd, r)\n\n            # adjust by business days first\n            if bd != 0:\n                if not self.next_bday.is_on_offset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + pd.offsets.BusinessDay(n=bd) + remain\n                else:\n                    other += pd.offsets.BusinessDay(n=bd)\n\n            # remaining business hours to adjust\n            bhour_remain = pd.Timedelta(minutes=r)\n\n            adjust_method = self._get_closing_time if n >= 0 else self._next_opening_time\n            interval_method = self._prev_opening_time if n >= 0 else self._next_opening_time\n            start_attr = self._start.min() if n >= 0 else self._start.max()\n            end_attr = self._end.max() if n >= 0 else self._end.min()\n\n            while bhour_remain > pd.Timedelta(0):\n                bhour = (self._get_closing_time(interval_method(other)) - other) if n >= 0 else (interval_method(other) - other)\n                if not bhour:\n                    bhour = pd.Timedelta(hours=1)  # Fallback to 1 hour if bhour is 0\n\n                if bhour_remain >= bhour:\n                    other = adjust_method(other + bhour)\n                    bhour_remain -= bhour\n                else:\n                    other += bhour_remain\n                    break\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}