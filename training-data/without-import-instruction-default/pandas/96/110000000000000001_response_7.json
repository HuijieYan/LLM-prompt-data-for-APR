{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # reset timezone and nanosecond\n        other = other.replace(microsecond=0)\n        n = self.n\n\n        # adjust other to reduce number of cases to handle\n        if n >= 0:\n            if other.time() >= self.end[0] or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() < self.start[0]:\n                # adjustment to move to previous business day\n                other = other - timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        # get total business hours by sec in one business day\n        businesshours = sum((en - st).total_seconds() for st, en in zip(self.start, self.end))\n\n        bd, r = divmod(abs(n * 60 * 60), businesshours)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # adjust by business days first\n        if bd != 0:\n            delta_days = 1 if bd > 0 else -1\n            for _ in range(abs(bd)):\n                while not self._is_on_offset(other):\n                    other += timedelta(days=delta_days)\n\n        # remaining business hours to adjust\n        bhour_remain = timedelta(seconds=r)\n\n        if n >= 0:\n            while bhour_remain.total_seconds() > 0:\n                bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                if bhour_remain >= bhour:\n                    other = self._next_opening_time(other)\n                    bhour_remain -= bhour\n                else:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n        else:\n            while bhour_remain.total_seconds() > 0:\n                bhour = self._next_opening_time(other) - other\n                if bhour_remain >= bhour:\n                    other = self._get_closing_time(self._next_opening_time(other))\n                    bhour_remain -= bhour\n                else:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}