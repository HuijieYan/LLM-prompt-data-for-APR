{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # check if other is a Timestamp\n            if hasattr(other, 'time'):\n                other = other.replace(hour=0, minute=0, second=0, microsecond=0)  # reset time component\n\n            n = self.n\n            is_negative = n < 0\n\n            # logic for adjusting other based on n\n            if is_negative:\n                if self.on_offset(other):\n                    other -= timedelta(hours=1)  # move to previous business day\n\n                while n != 0:\n                    is_business_hour = self.on_offset(other)\n                    if not is_business_hour:\n                        if n > 0:\n                            other = self._next_opening_time(other)\n                        else:\n                            other = self._prev_opening_time(other)\n                            if self.on_offset(other):\n                                other -= timedelta(hours=1)\n\n                        n -= 1 if is_negative else 1\n                    else:\n                        other += timedelta(hours=1) if is_negative else timedelta(hours=1)\n            else:\n                while n != 0:\n                    is_business_hour = self.on_offset(other)\n                    if not is_business_hour:\n                        if n > 0:\n                            other = self._next_opening_time(other)\n                        else:\n                            other = self._prev_opening_time(other)\n                            if self.on_offset(other):\n                                other -= timedelta(hours=1)\n\n                        n -= 1 if is_negative else 1\n                    else:\n                        other += timedelta(hours=1) if is_negative else timedelta(hours=1)\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta",
                "from pandas.tseries.offsets import CustomBusinessHour"
            ]
        }
    ]
}