{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # reset timezone and nanosecond\n        other = other.replace(tzinfo=None, microsecond=0)\n\n        n = self.n\n\n        businesshours = sum(\n            (en - st).seconds // 60\n            for st, en in zip(self.start, self.end)\n        )\n\n        bd, r = divmod(abs(n * 60), businesshours)\n\n        if n < 0:\n            bd, r = -bd, -r\n\n        if bd != 0:\n            other += timedelta(days=bd)\n\n        if n >= 0:\n            while r > 0:\n                bhour = self._next_opening_time(other) - other\n                if r < bhour.seconds // 60:\n                    other += timedelta(minutes=r)\n                    r = 0\n                else:\n                    r -= bhour.seconds // 60\n                    other = self._next_opening_time(other + bhour)\n        else:\n            while r < 0:\n                bhour = other - self._prev_closing_time(other)\n                if abs(r) < bhour.seconds // 60 or (abs(r) == bhour.seconds // 60 and other.nanosecond != 0):\n                    other -= timedelta(minutes=abs(r))\n                    r = 0\n                else:\n                    r += bhour.seconds // 60\n                    other = self._prev_closing_time(other - bhour)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}