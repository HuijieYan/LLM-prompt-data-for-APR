{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got: ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead: ', model)\n\n    layer_map = {} \n    tensor_map = {}  \n\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [Input(batch_shape=layer.batch_input_shape, dtype=layer.dtype, sparse=layer.sparse, name=layer.name) for layer in model._input_layers]\n        for orig, cloned in zip(model._input_layers, input_tensors):\n            layer_map[orig] = cloned\n    else:\n        input_tensors = to_list(input_tensors)\n        input_tensors = [Input(tensor=x) if not K.is_keras_tensor(x) else x for x in input_tensors]\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  \n\n    for depth in list(model._nodes_by_depth.keys()):\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            layer = node.outbound_layer\n\n            if layer not in layer_map:\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n                layer = new_layer\n            else:\n                layer = layer_map[layer]\n                if isinstance(layer, InputLayer):\n                    continue\n\n            reference_input_tensors = node.input_tensors\n            computed_data = [] \n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n\n            if len(computed_data) == len(reference_input_tensors):\n                kwargs = node.arguments if node.arguments else {}\n                computed_tensors = [x[0] for x in computed_data]\n                computed_masks = [x[1] for x in computed_data]\n\n                if has_arg(layer.call, 'mask'):\n                    kwargs['mask'] = computed_masks\n\n                output_tensors = to_list(layer(computed_tensors, **kwargs))\n                output_masks = to_list(layer.compute_mask(computed_tensors, computed_masks))\n\n                for i, x in enumerate(reference_input_tensors):\n                    tensor_map[x] = (output_tensors[i], output_masks[i])\n\n    for x in model.outputs:\n        assert x in tensor_map, 'Could not compute output: ' + str(x)\n        tensor, _ = tensor_map[x]\n\n    input_tensors = source_inputs(input_tensors)\n    return Model(input_tensors, [tensor_map[x][0] for x in model.outputs], name=model.name)",
            "imports": [
                "from tensorflow.keras.layers import InputLayer, Input, to_list",
                "from tensorflow.python.keras.engine.network import Network",
                "from tensorflow.python.keras.engine.training import Model, Sequential",
                "from tensorflow.python.keras.utils import source_inputs",
                "from tensorflow.python.keras.utils.layer_utils import has_arg",
                "from tensorflow.python.keras import backend as K"
            ]
        }
    ]
}