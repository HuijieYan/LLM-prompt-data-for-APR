{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ' + str(model))\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead: ' + str(model))\n\n    layer_map = {}  # Cache for created layers\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    if input_tensors is None:\n        input_layers = []\n        input_tensors = []\n        for layer in model.input_layers:\n            input_tensor = Input(batch_shape=layer.input_spec[0].shape)\n            input_tensors.append(input_tensor)\n            input_layers.append(layer)\n            layer_map[layer] = input_tensor\n    else:\n        input_tensors = K.to_list(input_tensors)\n        for i, x in enumerate(input_tensors):\n            name = model.input_layers[i].name\n            input_tensor = Input(tensor=x, name=\"input_wrapper_for_\" + name)\n            input_tensors[i] = input_tensor\n            layer_map[model.input_layers[i]] = input_tensor\n\n        input_layers = []\n        for layer in model.input_layers:\n            input_layers.append(layer)\n\n    for x, y in zip(input_layers, input_tensors):\n        tensor_map[x.output] = (y, None)  # tensor, mask\n\n    depth_keys = list(model._outbound_nodes.keys())\n    depth_keys.sort(reverse=True)\n    for depth in depth_keys:\n        nodes = model._outbound_nodes[depth]\n        for node in nodes:\n            layer = node.outbound_layer\n\n            if layer not in layer_map:\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n\n            for i in range(len(node.input_tensors)):\n                if node.input_tensors[i] in tensor_map:\n                    tensor = tensor_map[node.input_tensors[i]][0]\n                    if node.arguments:\n                        output_tensors = K.to_list(\n                            layer.call(tensor, **node.arguments))\n                    else:\n                        output_tensors = K.to_list(layer.call(tensor))\n                    computed_tensors = K.to_list(output_tensors)\n\n                    if node.call_args:\n                        layer_mask = K.to_list(layer.compute_mask(tensor, node.call_args.get('mask')))\n                    elif hasattr(layer, 'compute_mask'):\n                        layer_mask = K.to_list(layer.compute_mask(tensor))\n\n                    for i in range(len(node.output_tensors)):\n                        tensor_map[node.output_tensors[i]] = (computed_tensors[i], layer_mask[i])\n\n    output_tensors = []\n    for x in model.outputs:\n        assert x in tensor_map, 'Could not compute output: ' + str(x)\n        tensor, _ = tensor_map[x]\n        output_tensors.append(tensor)\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": [
                "import numpy as np",
                "from keras import Model, Input",
                "from keras.layers import Lambda",
                "import keras.backend as K",
                "from keras.layers import InputLayer"
            ]
        }
    ]
}