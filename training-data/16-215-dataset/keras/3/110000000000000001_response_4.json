{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    input_layers = model._input_layers\n    input_tensors = input_tensors if input_tensors is not None else [Input(batch_shape=layer.input_shape, dtype=layer.dtype, sparse=layer.sparse, name=layer.name) for layer in input_layers]\n\n    layer_map = {}\n    tensor_map = {}\n    \n    for original_input, new_input in zip(input_layers, input_tensors):\n        layer_map[original_input] = new_input\n\n    for layer in model.layers:\n        if layer not in layer_map:\n            cloned_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = cloned_layer\n\n    for node in model._nodes:\n        layer = node.outbound_layer\n\n        if layer not in layer_map:\n            cloned_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = cloned_layer\n        else:\n            layer = layer_map[layer]\n            \n        reference_input_tensors = node.input_tensors\n        computed_tensors = [tensor_map[tensor][0] for tensor in reference_input_tensors]\n\n        if node.arguments:\n            kwargs = node.arguments\n        else:\n            kwargs = {}\n        \n        if isinstance(layer, InputLayer):\n            continue\n        else:\n            output_tensors = to_list(layer(computed_tensors, **kwargs))\n            tensor_map[node.output_tensors[0]] = (output_tensors[0], None)\n\n    outputs = [tensor_map[tensor][0] for tensor in model.outputs]\n    return Model(input_tensors, outputs, name=model.name)",
            "imports": [
                "from tensorflow.keras.models import Model",
                "from tensorflow.keras.layers import Input, InputLayer",
                "from tensorflow.python.keras import backend as K",
                "from tensorflow.python.keras.utils.generic_utils import to_list, has_arg",
                "from tensorflow.python.keras.layers import Sequential"
            ]
        }
    ]
}