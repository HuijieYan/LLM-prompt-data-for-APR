{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [Input(tensor=layer.input) for layer in model.layers if isinstance(layer, InputLayer)]\n\n    for original_tensor, new_tensor in zip(model.input, input_tensors):\n        tensor_map[original_tensor] = new_tensor\n\n    for layer in model.layers:\n        if layer not in layer_map:\n            layer_config = layer.get_config()\n            recreated_layer = layer.__class__.from_config(layer_config)\n            layer_map[layer] = recreated_layer\n\n    for node in model._nodes_by_depth:\n        for inbound_layer, node_data in model._nodes_by_depth[node]:\n            for input_tensor, output_tensor in zip(node_data['input_tensors'], node_data['output_tensors']):\n                if input_tensor in tensor_map:\n                    computed_input_tensor = tensor_map[input_tensor]\n                    computed_output_tensor = layer_map[inbound_layer](computed_input_tensor)\n                    tensor_map[output_tensor] = computed_output_tensor\n\n    output_tensors = [tensor_map[output] for output in model.output]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "imports": []
        }
    ]
}