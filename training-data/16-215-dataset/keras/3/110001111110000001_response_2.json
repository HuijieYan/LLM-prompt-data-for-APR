{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    cloned_layers = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [Input(batch_shape=layer.batch_input_shape, dtype=layer.dtype, sparse=layer.sparse, name=layer.name) for layer in model._input_layers]\n    else:\n        for i, inputs in enumerate(input_tensors):\n            if not K.is_keras_tensor(inputs):\n                input_layer = Input(tensor=inputs, name='input_wrapper_for_' + model._input_layers[i].name)\n                input_tensors[i] = input_layer\n\n    for original_input, cloned_input in zip(model.inputs, input_tensors):\n        tensor_map[original_input] = (cloned_input, None)  # tensor, mask\n\n    for depth in model._nodes_by_depth.keys():\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            outbound_layer = node.outbound_layer\n\n            if outbound_layer not in cloned_layers:\n                new_layer = outbound_layer.__class__.from_config(outbound_layer.get_config())\n                cloned_layers[outbound_layer] = new_layer\n            else:\n                new_layer = cloned_layers[outbound_layer]\n\n            if isinstance(new_layer, InputLayer):\n                continue\n\n            input_tensors = [tensor_map[x][0] for x in node.input_tensors if x in tensor_map]\n            computed_data = [(tensor_map[x][0], tensor_map[x][1]) for x in node.input_tensors if x in tensor_map]\n\n            if len(computed_data) == len(node.input_tensors):\n                kwargs = {arg: getattr(node, arg) for arg in outbound_layer._fn_args}\n                if len(computed_data) == 1:\n                    computed_tensor, computed_mask = computed_data[0]\n                    if hasattr(new_layer.call, 'mask') and 'mask' not in kwargs:\n                        kwargs['mask'] = computed_mask\n                    output_tensors = K.in_train_phase(lambda: new_layer.call(computed_tensor, **kwargs), training=None)\n                    output_tokens = K.in_train_phase(lambda: new_layer.compute_mask(computed_tensor, computed_mask), training=None)\n                    computed_tensors = [computed_tensor]\n                    computed_masks = [computed_mask]\n                else:\n                    computed_tensors = [x[0] for x in computed_data]\n                    computed_masks = [x[1] for x in computed_data]\n                    if hasattr(new_layer.call, 'mask') and 'mask' not in kwargs:\n                        kwargs['mask'] = computed_masks\n                    output_tensors = K.in_train_phase(lambda: new_layer.call(computed_tensors, **kwargs), training=None)\n                    output_masks = K.in_train_phase(lambda: new_layer.compute_mask(computed_tensors, computed_masks), training=None)\n\n                for x, y, mask in zip(node.output_tensors, output_tensors, output_masks):\n                    tensor_map[x] = (y, mask)\n\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "imports": [
                "from tensorflow.keras.models import Model, Sequential, Input",
                "from tensorflow.keras.layers import InputLayer",
                "import tensorflow.keras.backend as K",
                "from tensorflow.python.keras.models import clone_model",
                "import numpy as np"
            ]
        }
    ]
}