{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    from tensorflow.keras.models import Model, Sequential\n    from tensorflow.keras.layers import Input, InputLayer\n\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument '\n                         'to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument '\n                         'to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    \n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [Input(batch_shape=layer.input.shape, dtype=layer.dtype)\n                         for layer in model.layers if isinstance(layer, InputLayer)]\n        \n        if not input_tensors:\n            raise ValueError('No input tensors found. Please provide a list of input tensors.')\n        \n        # Cache newly created input layers.\n        for orig_layer, new_layer in zip(model.layers, input_tensors):\n            layer_map[orig_layer] = new_layer\n    else:\n        input_tensors = input_tensors\n\n    for input_t, new_input_t in zip(model.inputs, input_tensors):\n        tensor_map[input_t] = new_input_t\n\n    # Iterate over every layer in the model.\n    for layer in model.layers:\n        # Get or create the layer.\n        if layer not in layer_map:\n            # Clone layer.\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n        else:\n            # Reuse previously cloned layer.\n            new_layer = layer_map[layer]\n\n        # Gather inputs to call the new layer.\n        reference_input_tensors = layer.input\n        reference_output_tensors = layer.output\n\n        # If all previous input tensors are available in tensor_map,\n        # then call the new layer on them.\n        computed_data = []  # List of tuples (input, mask).\n        for x in reference_input_tensors:\n            if x in tensor_map:\n                computed_data.append(tensor_map[x])\n\n        if len(computed_data) == len(reference_input_tensors):\n            # Call layer.\n            kwargs = {}\n            computed_tensors = [x[0] for x in computed_data]\n            computed_masks = [x[1] for x in computed_data]\n            if hasattr(layer, 'mask'):\n                kwargs['mask'] = computed_masks\n\n            new_output_tensors = to_list(\n                new_layer(computed_tensors, **kwargs))\n\n            new_output_masks = to_list(\n                new_layer.compute_mask(computed_tensors,\n                                       computed_masks))\n\n            # Update tensor_map.\n            for x, y, mask in zip(reference_output_tensors,\n                                  new_output_tensors,\n                                  new_output_masks):\n                tensor_map[x] = (y, mask)\n\n    # Check that we computed the model outputs,\n    # then instantiate a new model from inputs and outputs.\n    output_tensors = []\n    for x in model.outputs:\n        if x not in tensor_map:\n            raise ValueError('Could not compute output ', str(x))\n        tensor, _ = tensor_map[x]\n        output_tensors.append(tensor)\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "imports": [
                "import tensorflow as tf",
                "from tensorflow.keras.models import Model, Sequential",
                "from tensorflow.keras.layers import Input, InputLayer"
            ]
        }
    ]
}