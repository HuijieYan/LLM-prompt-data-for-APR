{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    # Create placeholders to build the model on top of.\n    if input_tensors is None:\n        input_layers = []\n        input_tensors = []\n\n        for layer in model._input_layers:\n            input_layer = Input(batch_shape=layer.batch_input_shape,\n                               dtype=layer.dtype,\n                               sparse=layer.sparse,\n                               name=layer.name)\n            input_layers.append(input_layer)\n            layer_map[layer] = input_layer\n\n        for original, cloned in zip(model.inputs, input_layers):\n            tensor_map[original] = (cloned, None)\n\n    else:\n        for i, input_tensor in enumerate(input_tensors):\n            if not K.is_keras_tensor(input_tensor):\n                name = model._input_layers[i].name\n                input_tensor = Input(tensor=input_tensor, name='input_wrapper_for_' + name)\n\n            tensor_map[model.inputs[i]] = (input_tensor, None)\n\n    # Iterate over every node in the reference model, in depth order.\n    depth_keys = list(model._nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n\n    for depth in depth_keys:\n        nodes = model._nodes_by_depth[depth]\n\n        for node in nodes:\n            layer = node.outbound_layer\n\n            if layer not in layer_map:\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n\n            else:\n                layer = layer_map[layer]\n\n                if isinstance(layer, InputLayer):\n                    continue\n\n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n            computed_data = []\n\n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n\n            if len(computed_data) == len(reference_input_tensors):\n                kwargs = node.arguments if node.arguments else {}\n\n                if len(computed_data) == 1:\n                    computed_tensor, _ = computed_data[0]\n                    output_tensors = to_list(layer(computed_tensor, **kwargs))\n\n                else:\n                    computed_tensors = [x[0] for x in computed_data]\n                    output_tensors = to_list(layer(computed_tensors, **kwargs))\n\n                for x, y in zip(reference_output_tensors, output_tensors):\n                    tensor_map[x] = (y, None)\n\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model([tensor_map[x][0] for x in model.inputs], output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}