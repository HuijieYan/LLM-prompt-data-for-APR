{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    \n    if input_tensors is None:\n        input_tensors = [Input(shape=inp.shape[1:]) for inp in model.inputs]\n    \n    layer_map = {}\n    for layer in model.layers:\n        layer_config = layer.get_config()\n        new_layer = layer.__class__.from_config(layer_config)\n        layer_map[layer] = new_layer\n    \n    input_map = {model.input_layers[i]: input_tensors[i] for i in range(len(model.input_layers))}\n    \n    for node in model.nodes:\n        for i, inp in enumerate(node.input_tensors):\n            if inp in input_map:\n                node.input_tensors[i] = input_map[inp]\n    \n    output_tensors = [node.output_tensors[0] for node in model.nodes_by_depth[len(model.nodes_by_depth) - 1]]\n    \n    return Model(inputs=input_tensors, outputs=output_tensors, name=model.name)",
            "imports": [
                "from keras.models import Model",
                "from keras.layers import Input"
            ]
        }
    ]
}