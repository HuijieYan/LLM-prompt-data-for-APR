{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument '\n                         'to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    if input_tensors is None:\n        input_layers = []\n        input_tensors = []\n        for layer in model._input_layers:\n            # Create placeholders to build the model on top of.\n            input_tensor = Input(batch_shape=layer.output_shape,\n                                 dtype=layer.dtype,\n                                 sparse=layer.sparse)\n            input_tensors.append(input_tensor)\n            # Cache newly created input layer.\n            input_layers.append(input_tensor)\n            layer_map[layer] = input_tensor\n    else:\n        # Make sure that all input tensors come from a Keras layer.\n        for i, x in enumerate(input_tensors):\n            input_layers.append(x)\n            if not isinstance(x, Network):\n                # If tensor comes from an input layer: cache the input layer.\n                input_tensor = Input(tensor=x)\n                input_tensors[i] = input_tensor\n                # Cache newly created input layer.\n                layer_map[model._input_layers[i]] = input_tensor\n\n    for x, y in zip(input_layers, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    # Iterated over every node in the reference model, in depth order.\n    for layer in model.layers:\n        config = layer.get_config()\n        cloned_layer = layer.__class__.from_config(config)\n        layer_map[layer] = cloned_layer\n\n    outputs = []\n    for x in model.outputs:\n        tensor, _ = tensor_map[x]\n        outputs.append(tensor)\n\n    return Model(input_tensors, outputs, name=model.name)",
            "imports": [
                "from tensorflow.python.keras.engine.network import Network",
                "from tensorflow.python.keras.engine.sequential import Sequential"
            ]
        }
    ]
}