{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    from tensorflow.keras.models import Model\n    from tensorflow.keras.layers import Input\n\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    layer_map = {}\n    tensor_map = {}\n    if input_tensors is None:\n        input_tensors = [Input(shape=layer.input.shape[1:]) for layer in model.layers if hasattr(layer, 'input')]\n    for ref_input, new_input in zip(model.inputs, input_tensors):\n        tensor_map[ref_input] = new_input\n\n    for layer in model.layers:\n        new_layer = layer.__class__.from_config(layer.get_config())\n        layer_map[layer] = new_layer\n\n    for node in model._nodes_by_depth.keys():\n        for layer in model._nodes_by_depth[node]:\n            if layer not in layer_map:\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n            else:\n                new_layer = layer_map[layer]\n\n            input_tensors = [tensor_map[x] for x in layer.input]\n            if len(input_tensors) == 1:\n                output_tensors = new_layer(input_tensors[0])\n            else:\n                output_tensors = new_layer(input_tensors)\n\n            for ref_output, new_output in zip(layer.output, output_tensors):\n                tensor_map[ref_output] = new_output\n\n    return Model(input_tensors, [tensor_map[x] for x in model.outputs])",
            "imports": [
                "from tensorflow.keras.models import Model",
                "from tensorflow.keras.layers import Input"
            ]
        }
    ]
}