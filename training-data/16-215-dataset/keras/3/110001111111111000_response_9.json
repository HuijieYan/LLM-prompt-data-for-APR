{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.batch_input_shape, dtype=layer.dtype, sparse=layer.sparse, name=layer.name) for layer in model._input_layers]\n    else:\n        input_tensors = [Input(tensor=x) if not K.is_keras_tensor(x) else x for x in to_list(input_tensors)]\n\n    for layer, new_layer in zip(model._input_layers, input_tensors):\n        layer_map[layer] = new_layer\n\n    depth_keys = list(model._nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n    for depth in depth_keys:\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            # Recover the corresponding layer\n            layer = node.outbound_layer\n\n            # Get or create layer\n            if layer not in layer_map:\n                layer_map[layer] = layer.__class__.from_config(layer.get_config())\n\n            # Gather inputs to call the new layer\n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n\n            # If all previous input tensors are available in tensor_map, then call node.inbound_layer on them\n            computed_data = []  # List of tuples (input, mask)\n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n\n            if len(computed_data) == len(reference_input_tensors):\n                # Call layer\n                kwargs = node.arguments if node.arguments else {}\n                computed_tensors, computed_masks = [], []\n                for x, y in computed_data:\n                    if has_arg(layer.call, 'mask') and y is not None and 'mask' not in kwargs:\n                        kwargs['mask'] = y\n                    if isinstance(x, list):\n                        computed_tensors += x\n                        computed_masks += [y] * len(x)\n                    else:\n                        computed_tensors.append(x)\n                        computed_masks.append(y)\n                \n                # Apply mask to the layer call\n                output_tensors = to_list(layer(computed_tensors, **kwargs))\n                output_masks = to_list(layer.compute_mask(computed_tensors, computed_masks))\n\n                # Update tensor_map\n                for ref, out, mask in zip(reference_output_tensors, output_tensors, output_masks):\n                    tensor_map[ref] = (out, mask)\n\n    # Check that we did compute the model outputs, then instantiate a new model from inputs and outputs\n    output_tensors = []\n    for x in model.outputs:\n        if x not in tensor_map:\n            raise ValueError('Could not compute output ' + str(x))\n        output_tensors.append(tensor_map[x][0])\n    return Model(input_tensors, output_tensors, name=model.name)",
            "imports": []
        }
    ]
}