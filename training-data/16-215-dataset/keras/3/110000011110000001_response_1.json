{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    layer_map = {}\n    tensor_map = {}\n\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.input.shape[1:], dtype=layer.input.dtype) for layer in model._input_layers]\n\n    for i, layer in enumerate(model._input_layers):\n        layer_map[layer] = input_tensors[i]\n\n    for node in model._nodes_by_depth:\n        inbound_layer = node.outbound_layer\n\n        if inbound_layer not in layer_map:\n            new_layer = inbound_layer.from_config(inbound_layer.get_config())\n            layer_map[inbound_layer] = new_layer\n        else:\n            new_layer = layer_map[inbound_layer]\n            if isinstance(new_layer, InputLayer):\n                continue\n\n        reference_input_tensors = node.input_tensors\n        reference_output_tensors = node.output_tensors\n\n        computed_data = [(tensor_map[x][0], tensor_map[x][1]) for x in reference_input_tensors if x in tensor_map]\n\n        if len(computed_data) == len(reference_input_tensors):\n            if node.arguments:\n                kwargs = node.arguments\n            else:\n                kwargs = {}\n\n            computed_tensors = [x[0] for x in computed_data]\n            computed_masks = [x[1] for x in computed_data]\n\n            output_tensors = to_list(new_layer(computed_tensors, **kwargs))\n\n            if has_arg(new_layer.call, 'mask') and 'mask' not in kwargs:\n                kwargs['mask'] = computed_masks\n\n            output_masks = to_list(new_layer.compute_mask(computed_tensors, computed_masks))\n\n            for x, y, mask in zip(reference_output_tensors, output_tensors, output_masks):\n                tensor_map[x] = (y, mask)\n\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}