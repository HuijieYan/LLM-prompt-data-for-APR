{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    layer_map = {}  # Cache for created layers\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [Input(batch_shape=layer.input_shape) for layer in model._input_layers]\n    else:\n        # Map input tensors to model input layers\n        for orig_layer, new_tensor in zip(model._input_layers, input_tensors):\n            layer_map[orig_layer] = new_tensor\n\n    for node in model._nodes_by_depth:\n        for layer in model._nodes_by_depth[node]:\n            inbound_layers = [layer_map[inbound_layer] for inbound_layer in layer.inbound_layers]\n            if len(inbound_layers) == 1:\n                layer_map[layer.outbound_layer] = layer_map[layer.outbound_layer].__class__.from_config(layer.outbound_layer.get_config())(inbound_layers[0])\n            else:\n                layer_map[layer.outbound_layer] = layer_map[layer.outbound_layer].__class__.from_config(layer.outbound_layer.get_config())(inbound_layers)\n\n    orig_outputs = model.outputs\n    output_tensors = [layer_map[output] for output in orig_outputs]\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": [
                "import tensorflow as tf",
                "from tensorflow import keras",
                "from tensorflow.keras.models import Model, Sequential",
                "from tensorflow.keras.layers import Input, InputLayer"
            ]
        }
    ]
}