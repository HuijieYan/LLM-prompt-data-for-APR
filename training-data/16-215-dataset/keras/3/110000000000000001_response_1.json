{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.batch_input_shape, dtype=layer.dtype, sparse=layer.sparse, name=layer.name) for layer in model._input_layers]\n\n    input_layers = [tensor._keras_history[0] for tensor in input_tensors]\n\n    all_layers = model.layers\n    layer_map = {layer: layer.__class__.from_config(layer.get_config()) for layer in all_layers}\n\n    for layer in layer_map.values():\n        if isinstance(layer, InputLayer):\n            continue\n        layer.build(layer.input_shape)\n\n    tensor_map = {}\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)\n\n    for layer in model.layers:\n        if not layer.built:\n            layer.build(layer.input_shape)\n\n    for node in model._nodes_by_depth[model._output_coordinates]:\n        outbound_layer = node.outbound_layer\n        if outbound_layer not in layer_map:\n            new_layer = outbound_layer.__class__.from_config(outbound_layer.get_config())\n            layer_map[outbound_layer] = new_layer\n        else:\n            new_layer = layer_map[outbound_layer]\n\n        reference_input_tensors = node.input_tensors\n        reference_output_tensors = node.output_tensors\n\n        computed_data = []\n        for x in reference_input_tensors:\n            computed_data.append(tensor_map[x])\n\n        if len(computed_data) == len(reference_input_tensors):\n            kwargs = node.arguments if node.arguments else {}\n            computed_tensors = [x[0] for x in computed_data]\n            if len(computed_data) == 1 and has_arg(new_layer.call, 'mask'):\n                computed_mask = computed_data[0][1]\n                kwargs['mask'] = computed_mask\n                output_tensors = to_list(new_layer(computed_tensors[0], **kwargs))\n            else:\n                if has_arg(new_layer.call, 'mask'):\n                    computed_masks = [x[1] for x in computed_data]\n                    kwargs['mask'] = computed_masks\n                output_tensors = to_list(new_layer(computed_tensors, **kwargs))\n\n            for x, y in zip(reference_output_tensors, output_tensors):\n                tensor_map[x] = (y, None)\n\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "imports": [
                "from tensorflow.keras.models import Model, Sequential",
                "from tensorflow.keras.layers import Input, InputLayer",
                "from tensorflow.python.framework import tensor_util",
                "from tensorflow.python.keras.engine.base_layer import Layer",
                "from tensorflow.python.keras.utils import to_list",
                "from tensorflow.python.eager.backprop import tape",
                "import tensorflow.keras.backend as K",
                "from tensorflow.python.keras.utils.generic_utils import has_arg"
            ]
        }
    ]
}