{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got {}'.format(type(model)))\n    if hasattr(model, 'inputs'):\n        input_layers = model.inputs\n        if input_tensors is None:\n            input_tensors = [Input(batch_shape=layer.shape) for layer in input_layers]\n    else:\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    tensor_map = {}\n    layer_map = {}\n\n    for i, layer in enumerate(model.layers):\n        if layer in layer_map:\n            continue\n\n        layer_config = layer.get_config()\n        new_layer = layer.__class__.from_config(layer_config)\n        layer_map[layer] = new_layer\n\n    for x, y in zip(input_layers, input_tensors):\n        tensor_map[x] = (y, None)\n\n    for layer in model.layers:\n        inbound_nodes = layer.inbound_nodes\n        if not inbound_nodes:\n            continue\n\n        for node in inbound_nodes[0]:\n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n            computed_data = []\n            for x in reference_input_tensors:\n                computed_data.append(tensor_map[x])\n\n            if len(computed_data) == len(reference_input_tensors):\n                if len(computed_data) == 1:\n                    computed_tensor, computed_mask = computed_data[0]\n                    output_tensors = [layer(computed_tensor)]\n                else:\n                    computed_tensors = [x[0] for x in computed_data]\n                    output_tensors = layer(computed_tensors)\n\n                for x, y in zip(reference_output_tensors, output_tensors):\n                    tensor_map[x] = (y, None)\n\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "imports": [
                "from tensorflow.keras.models import Model",
                "from tensorflow.keras.layers import Input"
            ]
        }
    ]
}