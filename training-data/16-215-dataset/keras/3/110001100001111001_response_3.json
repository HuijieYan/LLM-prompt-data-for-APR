{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    if input_tensors is None:\n        input_layers = model._input_layers\n        input_tensors = [l.input for l in input_layers]\n        for layer in input_layers:\n            newly_created_input_layer = Input(batch_shape=layer.batch_input_shape,\n                                              dtype=layer.dtype,\n                                              sparse=layer.sparse,\n                                              name=layer.name)\n            layer_map[layer] = newly_created_input_layer\n    else:\n        input_tensors = to_list(input_tensors)\n        _input_tensors = []\n        for i, x in enumerate(input_tensors):\n            if not K.is_keras_tensor(x):\n                name = model._input_layers[i].name\n                input_layer = Input(tensor=x, name='input_wrapper_for_' + name)\n                _input_tensors.append(input_layer)\n                original_input_layer = x._keras_history[0]\n                newly_created_input_layer = input_layer._keras_history[0]\n                layer_map[original_input_layer] = newly_created_input_layer\n            else:\n                _input_tensors.append(x)\n        input_tensors = _input_tensors\n\n    for i in range(len(model._input_layers)):\n        tensor_map[model._input_layers[i].output] = (input_tensors[i], None)\n\n    for depth in sorted(model._nodes_by_depth.keys(), reverse=True):\n        for node in model._nodes_by_depth[depth]:\n            inbound_layers = node.inbound_layers\n            input_tensors = [tensor_map[tl.output][0] for tl in inbound_layers]\n            input_masks = [tensor_map[tl.output][1] for tl in inbound_layers]\n            kwargs = {} if not node.arguments else node.arguments\n            output_tensors = node.outbound_layer(input_tensors, **kwargs)\n\n            if len(inbound_layers) == 1:\n                output_tensors = to_list(output_tensors)\n            for i, x in enumerate(node.output_tensors):\n                tensor_map[x] = (output_tensors[i], None)\n\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}