{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    from tensorflow.python.keras.engine.network import Network\n    if not isinstance(model, Network):\n        raise ValueError('Expected `model` argument '\n                         'to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument '\n                         'to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    if input_tensors is None:\n        input_layers = model.inputs\n        input_tensors = [Input(tensor=layer.input) for layer in input_layers]\n        for original, cloned in zip(model.inputs, input_tensors):\n            tensor_map[original] = (cloned, None)\n    else:\n        if len(input_tensors) != len(model.inputs):\n            raise ValueError('The number of input_tensors provided must match the number of model inputs')\n        input_tensors = to_list(input_tensors)\n        for x, y in zip(model.inputs, input_tensors):\n            tensor_map[x] = (y, None)  # tensor, mask\n\n    for layer in model.layers:\n        for node in layer._inbound_nodes:\n            for in_tensor, out_tensor in zip(node.input_tensors, node.output_tensors):\n                if in_tensor in tensor_map:\n                    # use existing tensor\n                    new_in_tensor, mask = tensor_map[in_tensor]\n                    tensor_map[out_tensor] = (new_in_tensor, mask)\n                else:\n                    # create and cache new tensor\n                    if hasattr(in_tensor, '_keras_history'):\n                        new_in_tensor = input_layer = Input(tensor=in_tensor)\n                        tensor_map[in_tensor] = (new_in_tensor, None)\n    output_tensors = []\n    for out_tensor in model.outputs:\n        if out_tensor not in tensor_map:\n            raise ValueError('Could not compute output ' + str(out_tensor))\n        output_tensors.append(tensor_map[out_tensor][0])\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": [
                "from tensorflow.python.keras.engine.network import Network"
            ]
        }
    ]
}