{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.output_shape) for layer in model.layers]\n        \n    for input_layer, original_input_layer in zip(input_tensors, model.input_layers):\n        layer_map[original_input_layer] = input_layer\n\n    for layer in model.layers:\n        # Clone layer.\n        new_layer = layer.__class__.from_config(layer.get_config())\n        layer_map[layer] = new_layer\n\n    for node in model.nodes:\n        inbound_layers = [layer_map[inbound_layer] for inbound_layer in node.inbound_layers]\n        \n        kwargs = node.arguments if node.arguments else {}\n        output_tensors = to_list(layer_map[node.outbound_layer](inbound_layers, **kwargs))\n\n        for original_output_tensor, output_tensor in zip(node.output_tensors, output_tensors):\n            tensor_map[original_output_tensor] = (output_tensor, None)  # tensor, mask\n\n    output_tensors = [tensor_map[output_tensor][0] for output_tensor in model.output_tensors]\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "imports": [
                "from tensorflow.keras.models import Model, Sequential",
                "from tensorflow.keras.layers import Input, InputLayer",
                "from tensorflow.python.keras.utils.list_utils import to_list",
                "from tensorflow.python.keras.utils.layer_utils import has_arg",
                "import tensorflow.keras.backend as K"
            ]
        }
    ]
}