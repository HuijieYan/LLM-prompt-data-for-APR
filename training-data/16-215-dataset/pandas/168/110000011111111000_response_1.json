{
    "pandas": [
        {
            "bugID": 168,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    def is_in_axis(key):\n        if isinstance(obj.columns, pd.MultiIndex) and key in obj.columns:\n            return True\n        elif isinstance(key, (int, str)) and key in obj.index.names:\n            return True\n        else:\n            return False\n\n    def is_in_obj(gpr):\n        try:\n            return id(gpr) == id(obj[gpr.name])\n        except Exception:\n            return False\n        \n    if level is not None:\n        levels = level if isinstance(level, (tuple, list)) else [level]\n        \n        if key is None and is_in_axis(level):\n            key = group_axis.get_level_values(level)\n\n        for level in levels:\n            if level not in obj.index.names:\n                raise ValueError(\"level name {} is not the name of the index\".format(level))\n        \n        level = None\n\n    if isinstance(key, (str, int)):\n        key = [key]\n\n    match_axis_length = len(key) == len(group_axis)\n\n    if not (any(callable(g) or isinstance(g, dict) for g in key) or \n            any(isinstance(g, Grouper) for g in key) or \n            any(isinstance(g, (list, tuple, pd.Series, pd.Index, np.ndarray)) for g in key)):\n        if isinstance(obj, pd.DataFrame):\n            all_in_columns_index = all(g in obj.columns or g in obj.index.names for g in key)\n        elif isinstance(obj, pd.Series):\n            all_in_columns_index = all(g in obj.index.names for g in key)\n            \n        if not all_in_columns_index:\n            key = [com.asarray_tuplesafe(key)]\n\n    for i, gpr in enumerate(key):\n        if is_in_obj(gpr):\n            in_axis, name = True, gpr.name\n            exclusions.append(name)\n        else:\n            raise KeyError(gpr)\n\n    groupings = [Grouping(group_axis, g, obj=obj, name=name, level=None, sort=sort, observed=observed, in_axis=in_axis) for g, name in zip(key, exclusions)]\n    \n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    \n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}