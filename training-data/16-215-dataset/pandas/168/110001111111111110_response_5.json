{
    "pandas": [
        {
            "bugID": 168,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n\n    # a passed-in Grouper, directly convert\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key.key}, obj\n\n    # already have a BaseGrouper, just return it\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    keys = [key] if isinstance(key, str) else key\n    match_axis_length = len(keys) == len(group_axis)\n\n    if any(isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys):\n        match_axis_length = False  # No match for non-scalar keys\n\n    if not match_axis_length:\n        # If the number of keys does not match the number of columns,\n        # remove unhashable elements and interpret the key as a list of keys\n        keys = [k for k in keys if isinstance(k, (str, int, float))]  # Remove unhashable elements\n        match_axis_length = len(keys) == len(group_axis)\n\n    levels = [level] if not isinstance(level, (tuple, list)) else level\n    levels = levels * len(keys)\n\n    groupings = []\n    exclusions = []\n\n    for i, (gpr, level) in enumerate(zip(keys, levels)):\n        in_axis = (gpr in group_axis) if isinstance(gpr, str) else True\n\n        if isinstance(gpr, Grouper) and gpr.key is not None:\n            exclusions.append(gpr.key)\n        elif not in_axis:\n            if validate:\n                if not isinstance(gpr, str):\n                    raise ValueError(\"Length of key must be same as input data\")\n                obj._check_label_or_level_ambiguity(gpr)\n            gpr = obj[gpr]\n\n        # Create the Grouping and add it to groupings\n        groupings.append(\n            Grouping(\n                group_axis,\n                gpr,\n                obj=obj,\n                name=gpr.name if isinstance(gpr, Series) else level,\n                level=level,\n                sort=sort,\n                observed=observed,\n                in_axis=in_axis,\n            )\n        )\n\n    if len(groupings) == 0 and len(obj) > 0:\n        raise ValueError(\"No group keys passed!\")\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}