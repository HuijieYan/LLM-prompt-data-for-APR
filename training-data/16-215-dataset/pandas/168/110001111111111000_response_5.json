{
    "pandas": [
        {
            "bugID": 168,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis, level, sort, while\n    the passed-in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    from pandas.core.indexes.base import Index\n    from pandas.core.arrays.categorical import is_categorical_dtype\n    from pandas.core.arrays import is_datetimelike\n    import warnings\n\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        level = [level] if not isinstance(level, (list, tuple)) else level\n        level = level[0] if len(level) == 1 else level\n\n        # MultiIndex instance check is removable.\n        if not isinstance(group_axis, pd.MultiIndex):\n            if isinstance(level, str):\n                if obj.index.name != level:\n                    raise ValueError(f\"level name {level} is not the name of the index\")\n            elif level > 0 or level < -1:\n                raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n            level = None\n            key = group_axis\n        else:\n            if key is None and level == 0:\n                key = group_axis.get_level_values(level)\n                level = None\n            elif is_datetimelike(level):\n                level = 0\n                key = level\n            elif np.isscalar(level) and ishidden(level):\n                raise ValueError(f\"level > 0 or level < -1 only valid with MultiIndex\")\n            level = None\n\n    if isinstance(key, pd.Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key.key}, obj\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n    else:\n        is_tuple = isinstance(key, tuple)\n        all_hashable = is_tuple and hash(key)\n\n        if is_tuple:\n            if (all_hashable and key not in obj and set(key).issubset(obj)) or not all_hashable:\n                msg = (\n                    \"Interpreting tuple 'by' as a list of keys, rather than \"\n                    \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n                    \"the future, a tuple will always mean a single key.\"\n                )\n                warnings.warn(msg, FutureWarning, stacklevel=5)\n                key = list(key)\n        \n        if not isinstance(key, list):\n            keys = [key]\n            match_axis_length = False\n        else:\n            keys = key\n            match_axis_length = len(keys) == group_axis.nlevels\n\n        any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n        any_arraylike = any(isinstance(g, (list, tuple, pd.Series, Index, np.ndarray)) for g in keys)\n\n        if not any_callable and not any_arraylike and match_axis_length and level is None:\n            if isinstance(obj, pd.DataFrame):\n                all_in_columns_index = all(g in obj.columns or g in obj.index.names for g in keys)\n\n            elif isinstance(obj, pd.Series):\n                all_in_columns_index = all(g in obj.index.names for g in keys)\n            \n            if not all_in_columns_index:\n                keys = [com.asarray_tuplesafe(keys)]\n\n        levels = [level] if isinstance(level, int) else level\n        levels = len(keys) * [None] if levels is None else levels\n\n        groupings = []\n        exclusions = []\n\n        def is_hidden(label):\n            return label > 0 or label < -1\n\n        def is_in_axis(grp):\n            if not grp.name:\n                return False\n            try:\n                return obj.columns.to_numpy().get_loc(grp.name)\n            except Exception:\n                return False\n\n        def is_in_obj(grp):\n            try:\n                return id(grp) == id(obj[grp.name])\n            except Exception:\n                return False\n\n        for gpr, level in zip(keys, levels):\n            if is_in_obj(gpr):\n                in_axis, name = True, gpr.name\n                exclusions.append(name)\n            elif is_in_axis(gpr):\n                in_axis, name, gpr = True, gpr.name, obj[gpr]\n                exclusions.append(name)\n            else:\n                raise KeyError(gpr)\n\n            if is_categorical_dtype(gpr) and gpr.size != obj.shape[axis]:\n                raise ValueError(f\"Length of grouper ({gpr.size}) and axis ({obj.shape[axis]}) must be same length\")\n\n            size = gpr.size if gpr.size > 0 else 1\n            ping = pd.core.groupby.grouper.Grouping(group_axis, gpr, obj=obj, name=name, level=level, sort=sort, observed=observed, in_axis=in_axis, size=size)\n            groupings.append(ping)\n\n        if len(groupings) == 0 and len(obj):\n            raise ValueError(\"No group keys passed!\")\n        return BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated), exclusions, obj",
            "import_list": [
                "from pandas.core.indexes.base import Index",
                "from pandas.core.arrays.categorical import is_categorical_dtype",
                "from pandas.core.arrays import is_datetimelike",
                "import warnings"
            ]
        }
    ]
}