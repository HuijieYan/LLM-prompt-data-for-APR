{
    "pandas": [
        {
            "bugID": 168,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        # This will validate that the passed single level is compatible with the passed axis of the object\n        # Retrieve the level values from group_axis so that key can be set\n        key = group_axis.get_level_values(level)\n        level = None\n    else:\n        # Ensure level is a length-one list-like object, else raise an error\n        if isinstance(level, (tuple, list)):\n            if len(level) == 1:\n                level = level[0]\n            elif len(level) == 0:\n                raise ValueError(\"No group keys passed!\")\n            else:\n                raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n        if isinstance(level, str):\n            if obj.index.name != level:\n                raise ValueError(\n                    \"level name {} is not the name of the index\".format(level)\n                )\n        elif level > 0 or level < -1:\n            raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key.key}, obj\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    is_tuple = isinstance(key, tuple)\n    if is_tuple:\n        # Add a warning when 'key' is a tuple because it might cause unexpected behavior\n        msg = (\n            \"Interpreting tuple 'by' as a list of keys, rather than \"\n            \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n            \"the future, a tuple will always mean a single key.\"\n        )\n        warnings.warn(msg, FutureWarning, stacklevel=5)\n        if all(isinstance(el, str) for el in key):\n            key = list(key)\n\n    if not isinstance(key, list):\n        keys = [key]\n        match_axis_length = False\n    else:\n        keys = key\n        match_axis_length = len(keys) == len(group_axis)\n\n    any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n    any_groupers = any(isinstance(g, Grouper) for g in keys)\n    any_arraylike = any(\n        isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys\n    )\n\n    if not any_callable and not any_arraylike and not any_groupers and match_axis_length and level is None:\n        if isinstance(obj, DataFrame):\n            all_in_columns_index = all(\n                g in obj.columns or g in obj.index.names for g in keys\n            )\n        elif isinstance(obj, Series):\n            all_in_columns_index = all(g in obj.index.names for g in keys)\n\n        if not all_in_columns_index:\n            keys = [com.asarray_tuplesafe(keys)]\n\n    if isinstance(level, (tuple, list)):\n        # Ensure keys and levels are aligned\n        if key is None:\n            keys = [None] * len(level)\n        levels = level\n    else:\n        # Ensure level are aligned with the length of keys\n        levels = [level] * len(keys)",
            "imports": []
        }
    ]
}