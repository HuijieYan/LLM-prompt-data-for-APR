{
    "pandas": [
        {
            "bugID": 168,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n\n    if level is None:\n        group_axis = obj._get_axis(axis)\n        level = 0\n\n    if (\n        isinstance(level, (int, str))\n        and not isinstance(group_axis, MultiIndex)\n        and level not in group_axis\n    ):\n        level = None\n\n    if level is not None:\n        if not isinstance(group_axis, MultiIndex):\n            key = group_axis\n            level = None\n\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key.key}, obj\n\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    elif isinstance(key, tuple):\n        if isinstance(obj.columns, MultiIndex):\n            keys = obj.columns\n        else:\n            keys = obj.columns.tolist()\n        is_tuple = True\n        all_hashable = all(ptypes.is_hashable(k) for k in key)\n        if all_hashable:\n            non_exist = [k for k in key if k not in keys]\n            if non_exist:\n                iss = obj.columns.isin(non_exist)\n                if iss.all():\n                    is_tuple = False\n                    warnings.warn(\n                        \"Interpreting tuple 'by' as a list of keys, rather than \"\n                        \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n                        \"the future, a tuple will always mean a single key.\",\n                        FutureWarning,\n                        stacklevel=3,\n                    )\n                    key = list(key)\n        if is_tuple:\n            key = key[0]\n    if not isinstance(key, list):\n        keys = [key]\n        match_axis_length = False\n    else:\n        keys = key\n        match_axis_length = len(keys) == len(group_axis)\n\n    any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n    any_arraylike = any(\n        isinstance(g, (list, tuple, np.ndarray, pd.Series, Index)) for g in keys\n    )\n\n    if any_callable or any_arraylike:\n        # axis/level of the passed in keys\n        groupings = []\n        exclusions = group_axis.get_level_values(level)\n        for i, k in enumerate(keys):\n            groupings.append(\n                Grouper(\n                    group_axis,\n                    k,\n                    obj=obj,\n                    name=None,\n                    level=level,\n                    sort=sort,\n                    observed=observed,\n                    in_axis=True,\n                )\n            )\n        return BaseGrouper(group_axis, groupings, observed, mutated), exclusions, obj\n\n    else:\n        if (\n            not match_axis_length\n            or not isinstance(obj, BaseGrouper)\n            or (level is not None and not isinstance(group_axis, MultiIndex))\n        ):\n            keys = [com.asarray_tuplesafe(keys)]\n\n        if isinstance(level, (tuple, list)):\n            if key is None:\n                keys = [None] * len(level)\n                levels = level\n        else:\n            levels = [level] * len(keys)\n\n        if isinstance(level, (tuple, list)):\n            if key is None:\n                keys = [None] * len(level)\n            levels = level\n        else:\n            levels = [level] * len(keys)\n\n        groupings = []\n        exclusions = []\n        for i, (gpr, level) in enumerate(zip(keys, levels)):\n            index = level if level is not None else 0\n            if not ptypes.is_label_like(gpr):\n                # label is a keyword; we still need a better name here\n                candidates = np.array([gpr], dtype=\"object\")\n                gpr = candidates\n            exclusions.append(gpr)\n\n            if ptypes.is_categorical_dtype(gpr):\n                raise ValueError(\"Not implemented\")\n\n            indices = obj.columns.tolist()\n            if match_axis_length and level is None:\n                return BaseGrouper(group_axis, groupings, sort=sort, observed=observed, mutated=mutated), exclusions, indices\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    elif len(groupings) == 0:\n        groupings.append(Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp)))\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": [
                "import pandas.api.types as ptypes",
                "import numpy as np",
                "import warnings",
                "from pandas.core.groupby.grouper import Grouper, Grouping, BaseGrouper",
                "from pandas.core.indexes.base import Index",
                "from pandas.core.dtypes.common import is_list_like, is_scalar",
                "from pandas.core.indexes.multi import MultiIndex",
                "from pandas.core.dtypes.dtypes import is_categorical_dtype",
                "from pandas.core.arrays import asarray_tuplesafe"
            ]
        }
    ]
}