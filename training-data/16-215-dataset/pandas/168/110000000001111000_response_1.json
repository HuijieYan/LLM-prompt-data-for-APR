{
    "pandas": [
        {
            "bugID": 168,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n\n    if level and not isinstance(group_axis, MultiIndex):\n        level = [level] if level else []\n        if len(level) > 1:\n            raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n        if not level:\n            level = [0] if obj.index.name != level[0] else []\n        if level[0] != 0 and level[0] != -1:\n            raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n\n    if isinstance(key, (Grouper, BaseGrouper)):\n        if isinstance(key, Grouper):\n            binner, grouper, obj = key._get_grouper(obj, validate=False)\n            return (grouper, {key.key}, obj) if key.key else (grouper, [], obj)\n        return (key, [], obj)\n\n    if isinstance(key, tuple):\n        msg = (\n            \"Interpreting tuple 'by' as a list of keys, rather than \"\n            \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n            \"the future, a tuple will always mean a single key.\"\n        )\n        warnings.warn(msg, FutureWarning, stacklevel=5)\n        key = list(key)\n\n    if isinstance(key, list):\n        keys = key\n        match_axis_length = len(keys) == len(group_axis)\n    else:\n        keys = [key]\n        match_axis_length = False\n\n    if all(callable(g) or isinstance(g, dict) for g in keys):\n        any_callable = True\n    else:\n        any_callable = False\n\n    if all(isinstance(g, Grouper) for g in keys):\n        any_groupers = True\n    else:\n        any_groupers = False\n\n    if all(\n        isinstance(g, (list, tuple, pd.Series, pd.Index, np.ndarray))\n        for g in keys\n    ):\n        any_arraylike = True\n    else:\n        any_arraylike = False\n\n    if not any_callable and not any_groupers and not any_arraylike and match_axis_length and level is None:\n        if isinstance(obj, pd.DataFrame):\n            all_in_columns_index = all(g in obj.columns or g in obj.index.names for g in keys)\n        else:\n            all_in_columns_index = all(g in obj.index.names for g in keys)\n\n        if not all_in_columns_index:\n            keys = [pd.core.common.asarray_tuplesafe(keys)]\n\n    if isinstance(level, (tuple, list)):\n        if key is None:\n            keys = [None] * len(level)\n        levels = level\n    else:\n        levels = [level] * len(keys)\n\n    groupings = []\n    exclusions = []\n\n    for i, (gpr, level) in enumerate(zip(keys, levels)):\n        is_frame = isinstance(gpr, pd.DataFrame)\n        is_series = isinstance(gpr, pd.Series)\n        is_index = isinstance(gpr, pd.Index)\n\n        if is_frame or is_series:\n            name = gpr.columns if is_frame else gpr.name\n            ping = Grouping(\n                group_axis,\n                obj=gpr,\n                name=name,\n                level=level,\n                sort=sort,\n                observed=observed,\n                in_axis=True,\n            )\n            groupings.append(ping)\n            exclusions.append(name)\n        else:\n            for col in gpr:\n                ping = Grouping(\n                    group_axis,\n                    obj=gpr,\n                    col=col,\n                    level=level,\n                    sort=sort,\n                    observed=observed,\n                    in_axis=True,\n                )\n                groupings.append(ping)\n                exclusions.append(col)\n\n    if not groupings and obj.shape[0]:\n        raise ValueError(\"No group keys passed!\")\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}