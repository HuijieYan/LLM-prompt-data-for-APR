{
    "pandas": [
        {
            "bugID": 168,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n    \n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n    \n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'\n    \n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper\n    \n    If observed & we have a categorical grouper, only show the observed\n    values\n    \n    If validate, then check for key/level overlaps\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n\n    # if level is not None and group_axis is a multi-index\n    if level is not None and isinstance(group_axis, pd.MultiIndex):\n        if isinstance(level, (list, tuple)):\n            levels = level\n            keys = [None] * len(levels)\n        elif is_scalar(level):\n            keys = group_axis.get_level_values(level)\n            levels = None\n        elif level == 0:\n            keys = group_axis\n            levels = None\n        else:\n            raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n    # if level is not None and group_axis is not a multi-index\n    elif level is not None:\n        if isinstance(level, str):\n            if obj.index.name != level:\n                raise ValueError(\"level name {} is not the name of the index\".format(level))\n        elif level > 0 or level < -1:\n            raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n        keys = group_axis\n        levels = None\n    # if a Grouper instance is passed\n    elif isinstance(key, pd.Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key.key}, obj\n    # if a BaseGrouper instance is passed\n    elif isinstance(key, pd.BaseGrouper):\n        return key, [], obj\n    # if a tuple key is passed\n    elif isinstance(key, tuple):\n        msg = (\n            \"Interpreting tuple 'by' as a list of keys, rather than \"\n            \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n            \"the future, a tuple will always mean a single key.\"\n        )\n        warnings.warn(msg, FutureWarning, stacklevel=5)\n        keys = list(key)\n    # if a non-list key is passed\n    elif not isinstance(key, list):\n        keys = [key]\n    else:\n        keys = key\n\n    if isinstance(keys, (list, tuple)) and all(isinstance(g, str) for g in keys):\n        if not all(g in obj.columns for g in keys):\n            keys = [com.asarray_tuplesafe(keys)]\n\n    # create the internals grouper\n    grouper = pd.BaseGrouper(group_axis, keys, sort=sort, mutated=mutated)\n    return grouper, [], obj",
            "imports": []
        }
    ]
}