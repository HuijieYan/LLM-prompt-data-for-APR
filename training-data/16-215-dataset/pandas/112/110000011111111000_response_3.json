{
    "pandas": [
        {
            "bugID": 112,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 907,
            "file_name": "pandas/core/indexes/interval.py",
            "replace_code": "def get_indexer(\n    self,\n    target: Any,\n    method: Optional[str] = None,\n    limit: Optional[int] = None,\n    tolerance: Optional[Any] = None,\n) -> np.ndarray:\n\n    self._check_method(method)\n\n    if self.is_overlapping:\n        msg = (\n            \"cannot handle overlapping indices; use \"\n            \"IntervalIndex.get_indexer_non_unique\"\n        )\n        raise InvalidIndexError(msg)\n\n    target_as_index = ensure_index(target)\n\n    if isinstance(target_as_index, IntervalIndex):\n        # Code for handling IntervalIndex\n        indexer = np.arange(len(self), dtype=\"intp\") if self.equals(target_as_index) else np.repeat(np.intp(-1), len(target_as_index))\n        return ensure_platform_int(indexer)\n    elif not is_object_dtype(target_as_index):\n        # Code for handling non-IntervalIndex\n        return self._engine.get_indexer(target_as_index.values)\n    else:\n        # Code for handling heterogeneous scalar index\n        indexer = [self.get_loc(key) if key in self else -1 for key in target_as_index]\n        return ensure_platform_int(indexer)",
            "imports": [
                "from typing import Optional, Any",
                "import pandas as pd",
                "import numpy as np",
                "from pandas import IntervalIndex, textwrap",
                "from pandas.core.indexes.base import ensure_index",
                "from pandas._libs.interval import (\n    find_common_type,\n    is_object_dtype,\n    ensure_platform_int,\n    InvalidIndexError,\n    IntervalDtype,\n    Int64Index,\n)"
            ]
        }
    ]
}