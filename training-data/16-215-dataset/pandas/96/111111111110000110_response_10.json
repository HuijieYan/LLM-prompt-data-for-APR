{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, (pd.Timestamp, datetime)):\n    \n        # make a copy of the input datetime\n        other = other.replace(tzinfo=None, nanosecond=0)\n\n        # copy the original input datetime for modification\n        dt = other\n\n        # If the original input datetime is not on an offset, find the next opening time\n        if dt.time() not in self.offsets or not self.is_on_offset(dt):\n            dt = self._next_opening_time(dt)\n\n        # Getting total business hours\n        business_hours = self._get_business_hours_by_sec(self.start, self.end)\n\n        # Calculating the business day and remaining business hours\n        business_day, remaining_hours = divmod(abs(self.n * 60), business_hours // 60)\n        if self.n < 0:\n            business_day, remaining_hours = -business_day, -remaining_hours\n\n        # Adjusting by business days first\n        if business_day != 0:\n            skip_bd = BusinessDay(n=business_day)\n            if not self.next_bday.is_on_offset(other):\n                prev_open = self._prev_opening_time(other)\n                remaining = other - prev_open\n                other = prev_open + skip_bd + remaining\n            else:\n                other = other + skip_bd\n\n        # Adjusting remaining business hours\n        bhour_remain = timedelta(minutes=remaining_hours)\n\n        # Iteratively adjust the remaining business hours\n        while bhour_remain != timedelta(0):\n            if self.n >= 0:\n                bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                if bhour_remain < bhour:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    other = self._next_opening_time(other + bhour)\n            else:\n                bhour = self._next_opening_time(other) - other\n                if bhour_remain > bhour or bhour_remain == bhour and getattr(dt, \"nanosecond\", 0) != 0:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    other = self._get_closing_time(self._next_opening_time(other + bhour - timedelta(seconds=1)))\n\n        return other\n\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "imports": []
        }
    ]
}