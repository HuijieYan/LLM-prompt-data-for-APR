{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            # reset nanosecond to handle Timestamp objects\n            other = other.replace(nanosecond=0)\n\n            # adjust other based on the business hour\n            if n >= 0:\n                if other.time() in self.end or not self.is_on_offset(other):\n                    other = self.next_bday(other)\n            else:\n                if other.time() in self.start:\n                    other = other - timedelta(seconds=1)\n                if not self.is_on_offset(other):\n                    other = self.next_bday(other)\n                    other = self._get_closing_time(other)\n\n            # adjust other based on business days\n            bd, r = divmod(abs(n * 60), sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end)))\n            if n < 0:\n                bd, r = -bd, -r\n\n            if bd:\n                other += BusinessDay(n=bd)\n\n            # handle remaining business hours\n            while r != 0:\n                # Calculate the business hour left in this business time interval\n                if n >= 0:\n                    bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                else:\n                    bhour = self._next_opening_time(other) - other\n\n                if r < bhour.total_seconds() // 60:\n                    other += timedelta(minutes=r)\n                    r = 0\n                else:\n                    other += bhour\n                    r -= bhour.total_seconds() // 60\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "imports": [
                "from datetime import datetime, timedelta",
                "from pandas.tseries.offsets import BusinessMixin, BusinessDay, ApplyTypeError"
            ]
        }
    ]
}