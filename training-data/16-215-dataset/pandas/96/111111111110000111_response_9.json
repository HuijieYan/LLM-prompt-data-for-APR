{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    # ... (existing code)\n\n    # adjust other to reduce number of cases to handle\n    if isinstance(other, pd.Timestamp):\n        other = other.floor('T')\n        n = self.n\n\n        # adjust other to account for holidays\n        if self.is_on_offset(other):\n            other = self._next_opening_time(other)\n\n        # calculate the number of periods\n        periods = pd.TimedeltaIndex([0], freq=self)\n\n        while len(periods) < abs(n):\n            if n > 0:\n                other = self._next_opening_time(other + pd.Timedelta(hours=1))\n            else:\n                other = self._prev_opening_time(other)\n                if self._get_closing_time(other) == other:\n                    other = self._prev_opening_time(other)\n            periods = pd.date_range(start=other, periods=abs(n), freq=self)\n        \n        if n < 0:\n            periods = periods[::-1]\n\n        return periods\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}