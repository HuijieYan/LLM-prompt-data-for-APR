{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, pd.Timestamp):\n        n = self.n\n\n        business_hour = to_offset(self.start)  # Convert business hour string to CustomBusinessHour\n        ndiff = (other - other.normalize()).total_seconds()\n\n        if n >= 0:\n            next_bh = business_hour.apply(other) + business_hour\n        else:\n            next_bh = business_hour.rollback(other)\n\n        bd = 0\n        if next_bh.floor(other) not in self.start:\n            other = next_bh.ceil(other)\n            if next_bh.floor(other) == business_hour.apply(other):\n                bd -= 1\n        else:\n            other = next_bh.floor(other)\n\n        while True:\n            next_bh = next_bh + business_hour\n            if next_bh > other:\n                break\n            if next_bh.floor(next_bh) not in self.start:\n                other = next_bh.ceil(other)\n                if next_bh.floor(other) == business_hour.apply(other):\n                    bd -= 1\n            else:\n                other = next_bh.floor(other)\n \n        r = 0  # remaining business hours\n\n        offset = pd.offsets.CustomBusinessHour(start=self.start, end=self.end)\n        businesshours = int((offset._to_time(self.end) - offset._to_time(self.start)).seconds / 3600)\n\n        if n == 0:\n            dc = 0\n        else:\n            dc = np.arange(1 if n >= 0 else -1, -1, -1) \n            bd, r = divmod((other + pd.TimedeltaIndex(dc * businesshours, \"h\")) - other, pd.Timedelta(hours=1))\n\n        skip_bd = pd.offsets.CustomBusinessDay(n=bd)\n        other = skip_bd.rollforward(other) if n >= 0 else skip_bd.rollback(other)\n        \n        if r != 0:\n            partial_business_hour = pd.offsets.CustomBusinessHour(\n                start=self.start, end=self.end\n            )\n            other = partial_business_hour.rollforward(other) if n >= 0 else partial_business_hour.rollback(other)\n            while r > 0:\n                next_part_bh = partial_business_hour.apply(other)\n                minutes = (next_part_bh + partial_business_hour - other).seconds // 60\n                business_hour_remaining = pd.offsets.CustomBusinessHour(\n                    start=self.start, end=self.end\n                )\n                other = business_hour_remaining.apply(other) + pd.TimedeltaIndex(r * minutes, \"T\")\n                r = 0 if other.weekday() in self.start.weekday else 1\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.frequencies import to_offset"
            ]
        }
    ]
}