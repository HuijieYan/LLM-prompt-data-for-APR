{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # Reset timezone and nanosecond\n        other = other.replace(tzinfo=None, nanosecond=0)\n        n = self.n\n\n        # Adjust other based on the number of business days to handle\n        if n >= 0:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                other -= timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        # Get total business hours by sec in one business day\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # Adjust by business days\n        if bd != 0:\n            other += timedelta(days=bd)\n\n        # Adjust remaining business hours\n        if r != 0:\n            remaining_hours = timedelta(minutes=r)\n            if n >= 0:\n                while remaining_hours > timedelta(0):\n                    closing_time = self._get_closing_time(self._prev_opening_time(other))\n                    business_hours_left = closing_time - other\n                    if remaining_hours < business_hours_left:\n                        other += remaining_hours\n                        remaining_hours = timedelta(0)\n                    else:\n                        remaining_hours -= business_hours_left\n                        other = self._next_opening_time(closing_time)\n            else:\n                while remaining_hours > timedelta(0):\n                    opening_time = self._next_opening_time(other)\n                    business_hours_left = opening_time - other\n                    if remaining_hours > business_hours_left or remaining_hours == business_hours_left:\n                        other += remaining_hours\n                        remaining_hours = timedelta(0)\n                    else:\n                        remaining_hours -= business_hours_left\n                        other = self._get_closing_time(self._next_opening_time(opening_time - timedelta(seconds=1)))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "imports": []
        }
    ]
}