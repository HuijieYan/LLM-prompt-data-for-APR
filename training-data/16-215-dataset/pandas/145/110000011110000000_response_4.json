{
    "pandas": [
        {
            "bugID": 145,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left: \"ABMDataFrame\", right: Any, func, str_rep: str = None, axis: Any = None) -> \"ABMDataFrame\":\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : scalar or DataFrame\n    func : arithmetic or comparison operator\n    str_rep : str or None, default None\n    axis : {None, 0, 1, \"index\", \"columns\"}\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    # Note: we use iloc to access columns for compat with cases\n    #       with non-unique columns.\n    right = lib.item_from_zerodim(right)\n    if lib.is_scalar(right) or np.ndim(right) == 0:\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n    elif isinstance(right, ABCDataFrame.ABCDataFrame):\n        try:\n            assert isinstance(right, ABCDataFrame) and right.index.equals(left.index)\n        except AssertionError as e:\n            raise IndexingError(\"DataFrame with different index is not relevant for this operation\")\n        def column_op(a: ABMDataFrame, b: ABMDataFrame) -> Dict:\n            a_shape = a.shape\n            b_shape = b.shape\n            if a_shape != b_shape:\n                raise ValueError(f\"Shapes of DataFrame's are not aligned: {a_shape}, {b_shape}\")\n            return {i: func(a.iloc[:, i], b.iloc[:, i]) for i in range(len(a.columns))}\n    elif isinstance(right, ABMSeries.ABSeries) and axis == \"columns\":\n        try:\n            assert right.index.equals(left.columns)\n        except AssertionError as e:\n            raise IndexingError(\"Index of the Series is not aligned with the columns of the DataFrame\")\n        def column_op(a: ABMDataFrame, b: ABMSeries) -> Dict:\n            try:\n                return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n            except Exception as e:\n                return e\n    elif isinstance(right, ABMSeries.ABSeries):\n        try:\n            assert right.index.equals(left.index)\n        except AssertionError as e:\n            raise IndexingError(\"Indices of the Series are not aligned with the DataFrame\")\n        def column_op(a: ABMDataFrame, b: ABMSeries) -> Dict:\n            return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n    else:\n        raise NotImplementedError(f\"Unsupported type for right operand: {type(right).__name__}\")\n\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\n    return new_data",
            "imports": [
                "import numpy as np",
                "import pandas as pd",
                "import pandas.core.common as com",
                "from pandas.core.ops import lib",
                "import pandas.core.dtypes.common as com",
                "from pandas.core.construction import ops",
                "import pandas.core.computation.expressions as expressions",
                "from typing import Any, Dict",
                "from pandas.core import frame as ABCDataFrame",
                "from pandas.core import generic as ABMDataFrame",
                "from pandas.core import generic as ABMSeries",
                "from pandas.core.indexing import IndexingError"
            ]
        }
    ]
}