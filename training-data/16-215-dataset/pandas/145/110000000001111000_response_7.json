{
    "pandas": [
        {
            "bugID": 145,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : scalar or DataFrame\n    func : arithmetic or comparison operator\n    str_rep : str or None, default None\n    axis : {None, 0, 1, \"index\", \"columns\"}\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    \n    # \ucc98\ub9ac\ud558\uae30 \uc27d\ub3c4\ub85d right \uac12\uc744 zero dimension\uc5d0\uc11c \uaebc\ub0c4\n    right = np.squeeze(right)\n    \n    # right\uac00 scalar\uc774\uac70\ub098 zero dimension Array \uc77c \ub54c \ud574\ub2f9 \uac12\uc744 \uace0\uc815\ub41c \uac12\uc744 \ub9ac\ud134\ud558\ub3c4\ub85d \uc870\uc815\ud558\uae30\n    if is_scalar(right):\n        right_dict = {i: right for i in range(len(left.columns))}\n        new_data = expressions.evaluate(right_dict, str_rep, left, right)\n        \n    elif isinstance(right, pd.DataFrame):\n        right_columns_matched = right.columns.equals(left.columns)\n        right_index_matched = right.index.equals(left.index)\n\n        if right_columns_matched and right_index_matched:\n            new_data = left.apply(lambda a: func(a, right))\n\n        elif right_columns_matched and axis == \"columns\":\n            if right.index.equals(left.index):\n                new_data = left.apply(lambda a: a.apply(func, b=right, axis=1))\n            else:\n                raise ValueError(\"Index of the right DataFrame should match the index of the left DataFrame\")\n\n        else:\n            raise ValueError(\"Columns of the right DataFrame should match the columns of the left DataFrame\")\n    \n    elif isinstance(right, pd.Series):\n        if right.index.equals(left.index):\n            new_data = left.apply(lambda a: a.apply(func, b=right))\n        elif right.index.equals(left.columns):\n            new_data = left.apply(lambda a: func(a, right))\n        else:\n            raise ValueError(\"Indexes of right Series should either match with index or columns of the left DataFrame\")\n    \n    return new_data",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "import pandas.core.computation.expressions as expressions",
                "from pandas.api.types import is_scalar"
            ]
        }
    ]
}