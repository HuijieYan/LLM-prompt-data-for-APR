{
    "pandas": [
        {
            "bugID": 145,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : scalar or DataFrame\n    func : arithmetic or comparison operator\n    str_rep : str or None, default None\n    axis : {None, 0, 1, \"index\", \"columns\"}\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    if axis is not None:\n        raise NotImplementedError(\"axis argument is not supported yet\")\n\n    if not isinstance(func, str):\n        raise ValueError(\"`func` must be a string representing the operation (e.g., '+', '-', '*', '/', '==', '<', '>', etc.)\")\n\n    if not isinstance(left, NDFrame) or not isinstance(right, (ABCDataFrame, ABCSeries)) and not is_scalar(right):\n        raise TypeError(\"Unsupported types: Not a DataFrame, Series, or scalar\")\n\n    right = extract_array(right, extract_numpy=True)\n\n    lf = left\n    if isinstance(right, ABCDataFrame):\n        assert right._indexed_same(lf), \"Index of DataFrame does not match\"\n    elif isinstance(right, ABCSeries):\n        assert right.index.equals(lf.index), \"Index of Series does not match\"\n        if axis == 'columns':\n            assert right.index.equals(lf.columns), \"Index of Series does not match columns of DataFrame\"\n            lf = lf.T\n\n    new_data = algorithms.dispatch_to_series(frame=lf, right=right, func=func)\n    return new_data",
            "imports": [
                "import numpy as np",
                "import pandas.core.computation.expressions as expressions",
                "from pandas.core.indexing import _LocIndexer",
                "from pandas.core.construction import extract_array",
                "from pandas.core.frame import DataFrame, _shared_docs",
                "from pandas.core.generic import NDFrame, ABCDataFrame, ABCSeries",
                "import pandas.core.algorithms as algorithms",
                "from pandas.core.dtypes.common import is_list_like, is_scalar"
            ]
        }
    ]
}