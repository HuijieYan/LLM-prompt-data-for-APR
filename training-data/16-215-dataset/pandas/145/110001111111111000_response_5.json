{
    "pandas": [
        {
            "bugID": 145,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : scalar or DataFrame\n    func : arithmetic or comparison operator\n    str_rep : str or None, default None\n    axis : {None, 0, 1, \"index\", \"columns\"}\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    right = ensure_index(right)\n\n    if lib.is_scalar(right) or np.ndim(right) == 0:\n        def column_op(a, b):\n            result = na_arithmetic_op(a, b, func, str_rep, eval_kwargs={})\n            return {i: result for i in range(len(a.columns))}\n    else:\n        right = ensure_index(right)\n        \n        def column_op(a, b):\n            mask = notna(a)\n            if np.any(mask):\n                with np.errstate(all=\"ignore\"):\n                    result = np.empty(a.size, dtype=a.dtype)\n                    result[mask] = np.fromiter((func(a[mask], val) for val in b), a.dtype, count=np.sum(mask))\n            else:\n                result = np.empty(1, dtype=a.dtype)\n\n            return {i: result for i in range(len(a.columns))}\n\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\n\n    return new_data",
            "imports": [
                "import pandas as pd",
                "import numpy as np",
                "import pandas.core.computation.expressions as expressions",
                "from pandas.core.dtypes.common import is_scalar",
                "from pandas.core.indexes.api import ensure_index",
                "from pandas.core.ops.array_ops import na_arithmetic_op",
                "from pandas.core.ops.mask_ops import masked_arith_op",
                "from pandas.core.ops.common import _str_type, _bool_arith_check"
            ]
        }
    ]
}