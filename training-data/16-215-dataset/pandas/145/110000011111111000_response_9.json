{
    "pandas": [
        {
            "bugID": 145,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : scalar or DataFrame\n    func : arithmetic or comparison operator\n    str_rep : str or None, default None\n    axis : {None, 0, 1, \"index\", \"columns\"}\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    right = maybe_upcast_putmask(right, left, axis, try_mask=False)\n\n    scalar = is_scalar(right)\n    if scalar:\n        right = ops.fill_zeros(right, left)\n        right = left._constructor_sliced(right, index=left.columns)\n        # left._is_mixed_type\n        if False:  # multi-col, \"special\" boolean should be properly handled\n            result = libops.vec_binop(left.values, right.values, func)\n        else:\n            result = dispatch_to_series(left, right, func, str_rep=str_rep, axis=axis)\n        return _maybe_match_name(result, left)\n\n    elif isinstance(right, ABCDataFrame) and axis == \"columns\":\n        raise NotImplementedError(right)\n    elif isinstance(right, ABCSeries) and axis == \"columns\":\n        raise NotImplementedError(right)\n    elif isinstance(right, ABCSeries):\n        raise NotImplementedError(right)\n    else:\n        raise NotImplementedError(right)",
            "imports": [
                "import pandas as pd",
                "import numpy as np",
                "from pandas.api.types import is_scalar",
                "from pandas.core.dtypes.generic import ABCSeries, ABCDataFrame",
                "from pandas.core import ops",
                "from pandas.core.computation.common import _bool_arith_check",
                "from pandas.core.dtypes.common import is_bool_dtype, is_numeric_dtype",
                "from pandas.core.dtypes.ops import _maybe_match_name, dispatch_to_series",
                "from pandas.core.dtypes.cast import maybe_upcast_putmask",
                "from pandas.core.computation.expressions import (\n    _TEST_MODE,\n    _store_test_result,\n    evaluate,\n    _evaluate,\n    eval_standard,\n    express,\n    use_numexpr,\n    _numexpr_default,\n)"
            ]
        }
    ]
}