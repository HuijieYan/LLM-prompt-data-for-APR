{
    "pandas": [
        {
            "bugID": 21,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 915,
            "file_name": "pandas/core/series.py",
            "replace_code": "def _get_with(self, key):\n        # other: fancy integer or otherwise\n        if isinstance(key, slice):\n            # _convert_slice_indexer to determine if this slice is positional\n            #  or label-based, and if the latter, convert to positional\n            slobj = self.index._convert_slice_indexer(key, kind=\"getitem\")\n            return self._slice(slobj)\n        \n        if isinstance(key, ABCDataFrame):\n            raise TypeError(\n                \"Indexing a Series with DataFrame is not \"\n                \"supported, use the appropriate DataFrame column\"\n            )\n\n        if isinstance(key, tuple):\n            return self._get_values_tuple(key)\n    \n        if not is_list_like(key):\n            # e.g. scalars that aren't recognized by lib.is_scalar, GH#32684\n            return self.loc[key]\n        \n        if not hasattr(key, '__len__') and not isinstance(key, ABCSeries):\n            key = [key]\n\n        if isinstance(key, (list, np.ndarray, ABCIndexClass, ABCSeries)):\n            key_type = lib.infer_dtype(key)\n            \n            if key_type == \"boolean\":\n                return self.loc[key]\n            \n            if key_type in ['floating', 'integer', 'integer_na']:\n                try:\n                    return self._get_keys(key)\n                except (TypeError, KeyError, IndexError):\n                    if len(self) and (dtype == 'integer' or dtype == 'integer_na'):\n                        return np.nan\n                    raise KeyError(\"None of the keys provided were in the range of the index\")\n\n        return self.reindex(key)",
            "import_list": []
        }
    ]
}