{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n    cloc_numbers = [index._get_level_number(i) if isinstance(i, tuple) else i for i in clocs]\n\n    clevels = [index.levels[i] for i in cloc_numbers]\n    ccodes = [index.codes[i] for i in cloc_numbers]\n    cnames = [index.names[i] for i in cloc_numbers]\n    rloc_numbers = [i for i in range(index.nlevels) if i not in cloc_numbers]\n    rloc_names = [index.names[i] for i in rloc_numbers]\n\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    multi_index_params = [list(rloc_names)] + [obs_ids] + [list(i) for i in recons_codes]\n\n    if len(rloc_names) == 0:\n        r_index = Index(obs_ids, name='__placeholder__')\n    else:\n        r_index = MultiIndex.from_product(multi_index_params)\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = r_index\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n    else:\n        dummy = data.copy()\n        dummy.index = r_index\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = clevels[0] if len(clevels) == 1 else clevels \n        new_codes = recons_codes[0] if len(recons_codes) == 1 else recons_codes\n\n        if isinstance(unstacked, Series):\n            new_columns = MultiIndex(levels=[unstacked.index] + new_levels, codes=[obs_ids] + new_codes, names=[None] + cnames)\n            unstacked.index = new_columns\n        else:\n            new_columns = MultiIndex(levels=[new_levels, unstacked.columns], codes=[new_codes, unstacked.columns], names=[cnames, data.columns.name])\n            unstacked.columns = new_columns\n\n    return unstacked",
            "imports": []
        }
    ]
}