{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    clevels = [index._get_level_number(i) for i in clocs]\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy.index.droplevel(clocs)\n        unstacked = dummy.unstack(fill_value=fill_value)\n        return unstacked\n    else:\n        if isinstance(data.columns, MultiIndex):\n            result = data\n            for i in range(len(clocs)):\n                level_number = index._get_level_number(clocs[i])\n                result = result.unstack(level_number, fill_value=fill_value)\n                clocs = [v if i > v else v - 1 for v in clocs]\n            return result\n        else:\n            dummy = data.copy()\n            dummy.index = dummy.index.droplevel(clocs)\n            unstacked = dummy.unstack(fill_value=fill_value)\n            if isinstance(unstacked, Series):\n                unstcols = unstacked.index\n            else:\n                unstcols = unstacked.columns\n            new_levels = [unstcols.levels[0]] + clevels\n            new_names = [data.columns.name] + [index.names[i] for i in clevels]\n            new_codes = [unstcols.codes[0]]\n            for rec in recons_codes:\n                new_codes.append(rec.take(unstcols.codes[-1]))\n            new_columns = MultiIndex(\n                levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n            )\n            if isinstance(unstacked, Series):\n                unstacked.index = new_columns\n            else:\n                unstacked.columns = new_columns\n        \n        return unstacked",
            "imports": []
        }
    ]
}