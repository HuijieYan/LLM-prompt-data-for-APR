{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # Get the index\n    index = data.index\n\n    # Separate the levels and codes of index based on clocs and rlocs\n    clevels, ccodes = zip(*[(index.levels[i], index.codes[i]) for i in clocs])\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n    rlevels, rcodes = zip(*[(index.levels[i], index.codes[i]) for i in rlocs])\n\n    # Get the shape of the clevels\n    shape = [len(x) for x in clevels]\n\n    # Group the index based on ccodes\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n    # Compress the group index\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n\n    # Reconstruct the codes\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    # Create a dummy index based on rlocs and obs_ids\n    if rlocs == []:\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(\n            levels=rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=rindex.names + [\"__placeholder__\"],\n            verify_integrity=False\n        )\n\n    # Copy the data and change its index to dummy_index\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = clevels\n        new_names = index.names[clocs]\n        new_codes = recons_codes\n    else:\n        dummy = data.copy()\n        dummy.index = dummy_index\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = list(unstacked.index.levels)\n        new_levels.insert(0, [index.levels[clocs[0]]])\n        new_names = [index.names[clocs[0]]] + list(index.names[clocs[1:]])\n        new_codes = [unstacked.index.codes[0]]\n        for rec in recons_codes:\n            new_codes.append(rec.take(unstacked.index.codes[-1]))\n\n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "imports": []
        }
    ]
}