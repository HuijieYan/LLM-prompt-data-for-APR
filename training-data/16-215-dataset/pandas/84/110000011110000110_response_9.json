{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    shape = [index.levshape[i] for i in clocs]\n    group_index, _ = index.group_info\n\n    comp_ids, obs_group_ids = index.recons_group_index_form(group_index, shape)\n    recons_codes = index.decons_group_index(obs_group_ids, shape,\n                                           obs_is_labels=False)\n\n    if len(rlocs) == 0:\n        dummy_index = pd.Index(obs_group_ids, name=\"__placeholder__\")\n    else:\n        dummy_index = pd.MultiIndex.from_arrays(index.levels[rlocs] + [obs_group_ids],\n                                                names=index.names[rlocs] + [\"__placeholder__\"])\n\n    if isinstance(data, pd.Series):\n        dummy = data.reindex(index=dummy_index, copy=True)\n        unstacked = dummy.unstack(level=\"__placeholder__\", fill_value=fill_value)\n        new_levels = index.levels[clocs]\n        new_names = index.names[clocs]\n        new_codes = recons_codes\n    else:\n        if isinstance(data.columns, pd.MultiIndex):\n            result = data\n            for i in range(len(clocs)):\n                val = clocs[i]\n                result = result.unstack(level=val, fill_value=fill_value)\n                clocs = [v if i > v else v - 1 for v in clocs]\n\n            return result\n\n        dummy = data.reindex(index=dummy_index, copy=True)\n        unstacked = dummy.unstack(level=\"__placeholder__\", fill_value=fill_value)\n        new_levels = unstacked.columns.levels[0,:].tolist() + index.levels[clocs]\n        new_names = [data.columns.name] + index.names[clocs] \n        new_codes = pd.Index(recons_codes).reindex(unstacked.columns.labels[-1])\n\n    new_columns = pd.MultiIndex.from_arrays(new_codes, names=new_names)\n\n    if isinstance(unstacked, pd.Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": [
                "import pandas as pd"
            ]
        }
    ]
}