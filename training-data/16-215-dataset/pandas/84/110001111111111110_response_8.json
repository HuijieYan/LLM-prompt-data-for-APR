{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This function only deals with MultiIndexes\n    # Check if the index is a MultiIndex\n    if not isinstance(data.index, pd.MultiIndex):\n        raise ValueError(\"The index of the input data should be a MultiIndex\")\n\n    index = data.index\n\n    clevels = [index.levels[index.names.index(i)] for i in clocs]\n    cloc_codes = [index.codes[index.names.index(i)] for i in clocs]\n\n    shape = [len(x) for x in clevels]\n    \n    group_index = get_group_index(cloc_codes, shape, sort=False, xnull=False)\n    \n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, cloc_codes, xnull=False)\n    \n    if isinstance(data, pd.Series):\n        # Unstack for Series\n        new_columns = pd.MultiIndex.from_product(clevels, names=clocs)\n        unstacked = pd.Series(data.values[obs_ids], index=new_columns)\n    else:\n        # Unstack for DataFrame\n        new_columns = pd.MultiIndex.from_product(clevels, names=clocs)\n        new_data = data.to_records(index=True, convert_datetime64=True)\n        unstacked = pd.DataFrame(new_data[obs_ids], columns=new_columns)\n\n    return unstacked",
            "imports": []
        }
    ]
}