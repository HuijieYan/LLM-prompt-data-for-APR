{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n    rlocs = list(set(range(index.nlevels)) - set(clocs))\n    cnames = index.names\n    rnames = [cnames[i] for i in rlocs]\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n\n    if rlocs == []:\n        # Everything is in clocs, so the dummy df has a regular index\n        dummy_index = pd.Index(index.get_level_values(clocs[-1]), name=cnames[clocs[-1]])\n    else:\n        obs_ids, _ = pd.factorize(index.get_level_values(tuple(rlocs)))\n        dummy_index = pd.MultiIndex(\n            levels=(rlevels + [obs_ids],) + (index.levels[clocs[-1]],),\n            codes=(rcodes + [obs_ids.codes],) + (index.codes[clocs[-1]],),\n            names=rnames + [cnames[clocs[-1]]],\n        )\n\n    if isinstance(data, pd.Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n        unstacked = dummy.unstack(fill_value=fill_value)\n    else:\n        dummy = data.copy()\n        dummy.index = dummy_index\n        unstacked = dummy.unstack(fill_value=fill_value)\n\n    return unstacked",
            "imports": [
                "import pandas as pd"
            ]
        }
    ]
}