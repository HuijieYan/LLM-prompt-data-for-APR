{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    levels = data.index.names\n\n    if isinstance(clocs, tuple):\n        clocs = [clocs]\n\n    clocs_index = [levels.index(c) for c in clocs]\n    rlocs_index = [i for i in range(len(levels)) if i not in clocs_index]\n\n    clevels = [data.index.levels[i] for i in clocs_index]\n    ccodes = [data.index.codes[i] for i in clocs_index]\n    cnames = [data.index.names[i] for i in clocs_index]\n    rlevels = [data.index.levels[i] for i in rlocs_index]\n    rcodes = [data.index.codes[i] for i in rlocs_index]\n    rnames = [data.index.names[i] for i in rlocs_index]\n\n    shape = [len(x) for x in clevels]\n\n    group_index = pd.MultiIndex.from_product(clevels, names=cnames).codes\n\n    obs_ids, comp_ids = pd.factorize(group_index)\n\n    obs_ids = obs_ids % shape[0]\n    comp_ids = comp_ids % shape[0]\n\n    recons_codes = [comp_ids[obs_ids], obs_ids]\n\n    new_columns = pd.MultiIndex.from_product(clevels, names=cnames)\n    new_index = pd.MultiIndex.from_product(rlevels, names=rnames)\n\n    dummy = data.copy()\n    dummy.index = pd.MultiIndex.from_arrays(rcodes + recons_codes, names=rnames + cnames)\n\n    unstacked = dummy.unstack(clocs_index[0])\n\n    if isinstance(unstacked, pd.Series):\n        unstacked = unstacked.unstack(fill_value=fill_value)\n    else:\n        unstacked = unstacked.unstack(fill_value=fill_value).unstack(fill_value=fill_value)\n\n    if not isinstance(data, pd.Series):\n        unstacked.columns = new_columns\n\n    unstacked.index = new_index\n\n    return unstacked",
            "import_list": [
                "import pandas as pd"
            ]
        }
    ]
}