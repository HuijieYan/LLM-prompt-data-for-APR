{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    shape = [len(index.levels[i]) for i in clocs]\n    group_index = get_group_index(\n        [index.codes[i] for i in clocs], shape, sort=False, xnull=False\n    )\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(\n        comp_ids, obs_ids, shape, [index.codes[i] for i in clocs], xnull=False\n    )\n\n    new_columns = []\n    new_codes = []\n    for i in range(len(clocs)):\n        codes = recons_codes[i]\n        for j, code in enumerate(codes):\n            new_codes.append(code)\n            new_columns.append(index.levels[clocs[i]][code])\n\n    new_columns.extend(index.levels[i] for i in rlocs)\n    new_codes.extend(index.codes[i] for i in rlocs)\n    new_names = [index.names[i] for i in rlocs]\n\n    new_index = MultiIndex(\n        levels=new_columns,\n        codes=new_codes,\n        names=new_names + [\"__placeholder__\"],\n        verify_integrity=False,\n    )\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = new_index\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n    else:\n        dummy = data.copy()\n        dummy.index = new_index\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\n    return unstacked",
            "import_list": []
        }
    ]
}