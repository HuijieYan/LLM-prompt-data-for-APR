{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n\n\tif len(clocs) == 0:\n\t    return data\n\n\t# NOTE: This doesn't deal with hierarchical columns yet\n\n\tindex = data.index\n\n\tclocs = [index._get_level_number(i) for i in clocs]\n\n\trlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n\tclevels = [index.levels[i] for i in clocs]\n\tccodes = [index.codes[i] for i in clocs]\n\tcnames = [index.names[i] for i in clocs]\n\trlevels = [index.levels[i] for i in rlocs]\n\trcodes = [index.codes[i] for i in rlocs]\n\trnames = [index.names[i] for i in rlocs]\n\n\tshape = [len(x) for x in clevels]\n\tgroup_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n\tcomp_ids, obs_ids = compress_group_index(group_index, sort=False)\n\trecons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n\tif rlocs == []:\n\t    # Everything is in clocs, so the dummy df has a regular index\n\t    dummy_index = Index(obs_ids, name=\"__placeholder__\")\n\telse:\n\t    dummy_index = pd.MultiIndex(\n\t        levels=rlevels + [obs_ids],\n\t        codes=rcodes + [comp_ids],\n\t        names=rnames + [\"__placeholder__\"],\n\t        verify_integrity=False,\n\t    )\n\n\tif isinstance(data, pd.Series):\n\t    dummy = data.copy()\n\t    dummy.index = dummy_index\n\n\t    unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\t    new_levels = clevels\n\t    new_names = cnames\n\t    new_codes = recons_codes\n\telse:\n\t    if isinstance(data.columns, pd.MultiIndex):\n\t        result = data\n\t        for i in range(len(clocs)):\n\t            val = clocs[i]\n\t            result = result.unstack(val, fill_value=fill_value)\n\t            clocs = [v if i > v else v - 1 for v in clocs]\n\n\t        return result\n\n\t    dummy = data.copy()\n\t    dummy.index = dummy_index\n\n\t    unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\t    if isinstance(unstacked, pd.Series):\n\t        unstcols = unstacked.index\n\t    else:\n\t        unstcols = unstacked.columns\n\t    new_levels = [unstcols.levels[0]] + clevels\n\t    new_names = [data.columns.name] + cnames\n\n\t    new_codes = [unstcols.codes[0]]\n\t    for rec in recons_codes:\n\t        new_codes.append(rec.take(unstcols.codes[-1]))\n\n\tnew_columns = pd.MultiIndex(\n\t    levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n\t)\n\n\tif isinstance(unstacked, pd.Series):\n\t    unstacked.index = new_columns\n\telse:\n\t    unstacked.columns = new_columns\n\n\treturn unstacked",
            "import_list": [
                "import pandas as pd",
                "import pandas.core.indexes.multi as mulidx",
                "from pandas.core.interface import Index",
                "from pandas.core.reshape.util import (\n    decons_obs_group_ids,\n    get_group_index,\n    compress_group_index,\n)"
            ]
        }
    ]
}