{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    if pd.api.types.is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = pd.api.types.pandas_dtype(dtype)\n\n    if issubclass(dtype.type, str):\n        return pd.api.types.lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n\n    elif pd.api.types.is_datetime64_dtype(arr):\n        if pd.api.types.is_object_dtype(dtype):\n            return pd.api.types.tslib.ints_to_pydatetime(arr.view(np.int64))\n        elif dtype == np.int64:\n            return arr.view(dtype)\n        if dtype.kind == \"M\":\n            return arr.astype(dtype)\n        raise TypeError(\"cannot astype a datetimelike from {} to {}\".format(arr.dtype, dtype))\n\n    elif pd.api.types.is_timedelta64_dtype(arr):\n        if pd.api.types.is_object_dtype(dtype):\n            return pd.api.types.tslib.ints_to_pytimedelta(arr.view(np.int64))\n        elif dtype == np.int64:\n            return arr.view(dtype)\n\n        if dtype in [_INT64_DTYPE, _TD_DTYPE]:\n            if dtype.kind == \"m\":\n                mask = pd.isna(arr)\n                result = arr.astype(dtype).astype(np.float64)\n                result[mask] = np.nan\n                return result\n        elif dtype == _TD_DTYPE:\n            return arr.astype(_TD_DTYPE, copy=copy)\n        raise TypeError(\"cannot astype a timedelta from {} to {}\".format(arr.dtype, dtype))\n\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    elif pd.api.types.is_object_dtype(arr):\n        if np.issubdtype(dtype.type, np.integer):\n            return pd.api.types.lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n        elif pd.api.types.is_datetime64_dtype(dtype):\n            return astype_nansafe(pd.to_datetime(arr).values, dtype, copy=copy)\n        elif pd.api.types.is_timedelta64_dtype(dtype):\n            return astype_nansafe(pd.to_timedelta(arr).values, dtype, copy=copy)\n\n    if dtype.name in (\"datetime64\", \"timedelta64\"):\n        raise ValueError(\"The '{}' dtype has no unit. Please pass in '{}[ns]' instead.\".format(dtype.name, dtype.name))\n\n    if copy or pd.api.types.is_object_dtype(arr) or pd.api.types.is_object_dtype(dtype):\n        return arr.astype(dtype, copy=True)\n\n    return arr.view(dtype)",
            "imports": [
                "import numpy as np",
                "import pandas as pd"
            ]
        }
    ]
}