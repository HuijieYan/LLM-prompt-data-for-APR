{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy=True, skipna=False):\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = np.dtype(dtype)\n\n    if is_datetime64_any_dtype(dtype):\n        raise ValueError(\"The dtype was a datetime64/timedelta64 dtype, but it had no unit.\")\n\n    if is_timedelta64_any_dtype(dtype):\n        raise ValueError(\"The dtype was a datetime64/timedelta64 dtype, but it had no unit.\")\n\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if is_datetime64_any_dtype(arr):\n        if is_object_dtype(dtype):\n            return pd._libs.tslibs.ints_to_pydatetime(arr.view(np.int64))\n        elif dtype == np.int64:\n            raise ValueError(\"Cannot convert NaT values to integer\")\n\n        if dtype.kind == \"M\":\n            return arr.astype(dtype)\n\n    if is_timedelta64_any_dtype(arr):\n        if is_object_dtype(dtype):\n            return pd._libs.tslibs.ints_to_pytimedelta(arr.view(np.int64))\n        elif dtype == np.int64:\n            raise ValueError(\"Cannot convert NaT values to integer\")\n\n        if dtype.kind == \"m\":\n            mask = pd.isnull(arr)\n            result = arr.astype(dtype).astype(np.float64)\n            result[mask] = np.nan\n            return result\n        elif dtype == np.dtype('m'):\n            return arr.astype(np.int64)\n\n    if np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    if is_object_dtype(arr) and np.issubdtype(dtype, np.integer):\n        return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n\n    if is_object_dtype(dtype) and is_datetime64_any_dtype(arr):\n        return astype_nansafe(pd.to_datetime(arr).values, dtype, copy=copy)\n    elif is_object_dtype(dtype) and is_timedelta64_any_dtype(arr):\n        return astype_nansafe(pd.to_timedelta(arr).values, dtype, copy=copy)\n\n    if dtype.name in (\"datetime64\", \"timedelta64\"):\n        msg = (\n            f\"The '{dtype.name}' dtype has no unit. Please pass in \"\n            f\"'{dtype.name}[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    if copy or is_object_dtype(arr) or is_object_dtype(dtype):\n        return arr.astype(dtype, copy=True)\n\n    return arr.view(dtype)",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas.api.types import is_datetime64_any_dtype, is_timedelta64_any_dtype, is_extension_array_dtype",
                "import pandas._libs.lib as lib"
            ]
        }
    ]
}