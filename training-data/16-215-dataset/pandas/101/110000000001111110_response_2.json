{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy=True, skipna=False):\n    \"\"\"\n    Cast the elements of an array to a given dtype in a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n\n    if pd.api.types.is_categorical_dtype(arr):\n        if pd.api.types.is_integer_dtype(dtype) and not skipna:\n            return arr.astype(dtype, copy=copy)\n\n    if pd.api.types.is_categorical(arr) and pd.api.types.is_integer_dtype(dtype) and pd.api.types.is_float_dtype(dtype):\n        return arr.astype(dtype, copy=copy)\n\n    if pd.api.types.is_datetime64_any_dtype(arr) or pd.api.types.is_timedelta64_dtype(arr):\n        if pd.api.types.is_object_dtype(dtype):\n            return arr.astype(dtype, copy=copy)\n        elif pd.api.types.is_integer_dtype(dtype):\n            return arr.view(dtype).astype(dtype, copy=copy)\n\n    if pd.api.types.is_object_dtype(arr):\n        if pd.api.types.is_datetime64_any_dtype(dtype):\n            return pd.to_datetime(arr).values.astype(dtype, copy=copy)\n        elif pd.api.types.is_timedelta64_dtype(dtype):\n            return pd.to_timedelta(arr).values.astype(dtype, copy=copy)\n\n    if dtype.kind in [\"O\", \"f\"]:\n        return arr.astype(dtype, copy=copy)\n\n    if np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    return arr.astype(dtype, copy=copy)",
            "imports": [
                "import numpy as np",
                "import pandas as pd"
            ]
        }
    ]
}