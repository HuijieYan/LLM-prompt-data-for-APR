{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy=True, skipna=False):\n    \"\"\"\n    Cast the elements of an array to a given dtype in a NaN-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n\n    if isinstance(dtype, pd.CategoricalDtype):\n        return pd.Series(arr).astype(dtype)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = np.dtype(dtype)\n\n    if dtype.kind in [\"U\", \"S\"]:\n        return arr.astype(dtype)\n\n    elif np.issubdtype(dtype, np.datetime64):\n        if np.issubdtype(arr.dtype, np.datetime64):\n            if np.isnat(arr).any():\n                return arr.astype(dtype)\n            else:\n                raise ValueError(\"Cannot convert NaT values to integer\")\n        else:\n            raise TypeError(\n                f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\"\n            )\n\n    elif np.issubdtype(dtype, np.timedelta64):\n        if np.issubdtype(arr.dtype, np.timedelta64):\n            if np.isnat(arr).any():\n                return arr.astype(dtype)\n            else:\n                raise ValueError(\"Cannot convert NaT values to integer\")\n        else:\n            raise TypeError(\n                f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\"\n            )\n\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n        if np.isnan(arr).any():\n            raise ValueError(\"Cannot convert NaN values to integer\")\n        else:\n            return arr.astype(dtype)\n\n    elif np.issubdtype(arr.dtype, np.object_):  # noqa\n        return arr.astype(dtype)\n\n    else:\n        return arr.astype(dtype, copy=copy)",
            "imports": [
                "import numpy as np",
                "import pandas as pd",
                "import pytest"
            ]
        }
    ]
}