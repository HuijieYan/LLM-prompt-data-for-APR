{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy=True, skipna=False):\n    \"\"\"\n    Cast the elements of an array to a given dtype in a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n\n    if isinstance(dtype, np.dtype):\n        dtype = np.dtype(dtype)\n    else:\n        dtype = np.dtype(dtype)\n\n    if np.issubdtype(dtype, np.unicode_):\n        return np.array(arr, dtype=dtype)\n\n    elif np.issubdtype(arr.dtype, np.datetime64):\n        if np.issubdtype(dtype, np.object_):\n            return pd.Timestamp.to_pydatetime(arr)\n        elif dtype == np.int64:\n            return arr.astype(dtype)\n\n        if np.issubdtype(dtype, np.datetime64):\n            return arr.astype(dtype)\n\n        raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n\n    elif np.issubdtype(arr.dtype, np.timedelta64):\n        if np.issubdtype(dtype, np.object_):\n            return pd.Timedelta.to_pytimedelta(arr)\n\n        if np.issubdtype(dtype, np.timedelta64):\n            if dtype == np.timedelta64:\n                return arr.astype(dtype, copy=copy)\n            else:\n                mask = np.isnan(arr).view(int)\n                result = arr.astype(dtype).astype(float)\n                result[mask] = np.nan\n                return result\n\n        raise TypeError(f\"cannot astype a timedelta from [{arr.dtype}] to [{dtype}]\")\n\n    elif np.issubdtype(arr.dtype, float) and np.issubdtype(dtype, int):\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    elif np.issubdtype(arr.dtype, np.object_):\n        if np.issubdtype(dtype, int):\n            return arr.astype(dtype)\n        elif np.issubdtype(dtype, np.datetime64):\n            from pandas import to_datetime\n            return astype_nansafe(to_datetime(arr).values, dtype, copy=copy)\n        elif np.issubdtype(dtype, np.timedelta64):\n            from pandas import to_timedelta\n            return astype_nansafe(to_timedelta(arr).values, dtype, copy=copy)\n\n    if dtype.name in (\"datetime64\", \"timedelta64\"):\n        msg = (\n              f\"The '{dtype.name}' dtype has no unit. Please pass in \"\n              f\"'{dtype.name}[ns]' instead.\"\n            )\n        raise ValueError(msg)\n\n    if copy or np.issubdtype(arr.dtype, np.object_) or np.issubdtype(dtype, np.object_):\n        return arr.astype(dtype, copy=copy)\n  \n    return arr.view(dtype)",
            "import_list": [
                "import numpy as np",
                "from pandas import to_datetime",
                "from pandas import to_timedelta"
            ]
        }
    ]
}