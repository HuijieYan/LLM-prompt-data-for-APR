{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype in a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not to skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype is a datetime64/timedelta64 dtype, but it had no unit.\n    TypeError\n        In case of failure to cast to the specified dtype.\n    \"\"\"\n    if not isinstance(dtype, np.dtype):\n        dtype = np.dtype(dtype)\n\n    # Dispatch on extension dtype if needed\n    if hasattr(dtype, 'construct_array_type'):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if dtype.kind in ('O', 'S', 'U'):\n        return arr.astype(dtype)\n\n    elif dtype.kind == 'M':\n        if np.issubdtype(arr.dtype, np.datetime64):\n            if dtype.kind == \"M\":\n                if dtype.name != arr.dtype.name:\n                    dtype = arr.dtype\n            return arr.astype(dtype)\n\n    elif dtype.kind == 'm':\n        if np.issubdtype(arr.dtype, np.timedelta64) and np.issubdtype(dtype, np.datetime64):\n            if dtype.kind == \"m\":\n                if dtype.name != arr.dtype.name:\n                    dtype = arr.dtype\n            return np.array([np.timedelta64('NAT', 'ns')], dtype=dtype)\n\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n        return arr.astype(dtype)\n\n    elif arr.dtype.kind == 'O':\n        if np.issubdtype(dtype, np.integer):\n            return arr.astype(dtype)\n        elif np.issubdtype(dtype, np.datetime64):\n            return arr.astype(dtype)\n        elif np.issubdtype(dtype, np.timedelta64):\n            return arr.astype(dtype)\n\n    elif arr.dtype.kind in [\"datetime64\", \"timedelta64\"]:\n        raise ValueError(f\"The '{arr.dtype.name}' dtype has no unit. Please pass in '{arr.dtype}' instead.\")\n\n    if not copy and arr.dtype.kind in [\"O\", \"S\", \"U\"]:\n        return arr.astype(dtype)\n    else:\n        return arr.astype(dtype, copy=True)",
            "imports": [
                "import numpy as np",
                "import pytest"
            ]
        }
    ]
}