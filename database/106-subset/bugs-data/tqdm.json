{
  "project": "tqdm",
  "bugs": [
    {
      "id": 4,
      "buggy_code_blocks": [
        {
          "filename": "tqdm/_tqdm.py",
          "source_code": "@staticmethod\n    def format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False,\n                     unit='it', unit_scale=False, rate=None, bar_format=None,\n                     postfix=None, unit_divisor=1000, **extra_kwargs):\n        \"\"\"\n        Return a string-based progress bar given some parameters\n        Parameters\n        ----------\n        n  : int\n            Number of finished iterations.\n        total  : int\n            The expected total number of iterations. If meaningless (), only\n            basic progress statistics are displayed (no ETA).\n        elapsed  : float\n            Number of seconds passed since start.\n        ncols  : int, optional\n            The width of the entire output message. If specified,\n            dynamically resizes the progress meter to stay within this bound\n            [default: None]. The fallback meter width is 10 for the progress\n            bar + no limit for the iterations counter and statistics. If 0,\n            will not print any meter (only stats).\n        prefix  : str, optional\n            Prefix message (included in total width) [default: ''].\n            Use as {desc} in bar_format string.\n        ascii  : bool, optional\n            If not set, use unicode (smooth blocks) to fill the meter\n            [default: False]. The fallback is to use ASCII characters\n            (1-9 #).\n        unit  : str, optional\n            The iteration unit [default: 'it'].\n        unit_scale  : bool or int or float, optional\n            If 1 or True, the number of iterations will be printed with an\n            appropriate SI metric prefix (k = 10^3, M = 10^6, etc.)\n            [default: False]. If any other non-zero number, will scale\n            `total` and `n`.\n        rate  : float, optional\n            Manual override for iteration rate.\n            If [default: None], uses n/elapsed.\n        bar_format  : str, optional\n            Specify a custom bar string formatting. May impact performance.\n            [default: '{l_bar}{bar}{r_bar}'], where\n            l_bar='{desc}: {percentage:3.0f}%|' and\n            r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '\n              '{rate_fmt}{postfix}]'\n            Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,\n              percentage, rate, rate_fmt, rate_noinv, rate_noinv_fmt,\n              rate_inv, rate_inv_fmt, elapsed, elapsed_s,\n              remaining, remaining_s, desc, postfix, unit.\n            Note that a trailing \": \" is automatically removed after {desc}\n            if the latter is empty.\n        postfix  : *, optional\n            Similar to `prefix`, but placed at the end\n            (e.g. for additional stats).\n            Note: postfix is usually a string (not a dict) for this method,\n            and will if possible be set to postfix = ', ' + postfix.\n            However other types are supported (#382).\n        unit_divisor  : float, optional\n            [default: 1000], ignored unless `unit_scale` is True.\n        Returns\n        -------\n        out  : Formatted meter and stats, ready to display.\n        \"\"\"\n        # sanity check: total\n        if total and n > total:\n            total = None\n\n        # apply custom scale if necessary\n        if unit_scale and unit_scale not in (True, 1):\n            total *= unit_scale\n            n *= unit_scale\n            if rate:\n                rate *= unit_scale  # by default rate = 1 / self.avg_time\n            unit_scale = False\n        format_interval = tqdm.format_interval\n        elapsed_str = format_interval(elapsed)\n        # if unspecified, attempt to use rate = average speed\n        # (we allow manual override since predicting time is an arcane art)\n        if rate is None and elapsed:\n            rate = n / elapsed\n        inv_rate = 1 / rate if rate else None\n        format_sizeof = tqdm.format_sizeof\n        rate_noinv_fmt = ((format_sizeof(rate) if unit_scale else\n                           '{0:5.2f}'.format(rate))\n                          if rate else '?') + unit + '/s'\n        rate_inv_fmt = ((format_sizeof(inv_rate) if unit_scale else\n                         '{0:5.2f}'.format(inv_rate))\n                        if inv_rate else '?') + 's/' + unit\n        rate_fmt = rate_inv_fmt if inv_rate and inv_rate > 1 else rate_noinv_fmt\n        if unit_scale:\n            n_fmt = format_sizeof(n, divisor=unit_divisor)\n            total_fmt = format_sizeof(total, divisor=unit_divisor) \\\n                if total else None\n        else:\n            n_fmt = str(n)\n            total_fmt = str(total)\n        try:\n            postfix = ', ' + postfix if postfix else ''\n        except TypeError:\n            pass\n        # total is known: we can predict some stats\n        if total:\n            # fractional and percentage progress\n            frac = n / total\n            percentage = frac * 100\n            remaining = (total - n) / rate if rate else 0\n            remaining_str = format_interval(remaining) if rate else '?'\n            # format the stats displayed to the left and right sides of the bar\n            if prefix:\n                # old prefix setup work around\n                bool_prefix_colon_already = (prefix[-2:] == \": \")\n                l_bar = prefix if bool_prefix_colon_already else prefix + \": \"\n            else:\n                l_bar = ''\n            l_bar += '{0:3.0f}%|'.format(percentage)\n            r_bar = '| {0}/{1} [{2}<{3}, {4}{5}]'.format(\n                n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt, postfix)\n            if ncols == 0:\n                return l_bar[:-1] + r_bar[1:]\n            if bar_format:\n                # Custom bar formatting\n                # Populate a dict with all available progress indicators\n                format_dict = dict(\n                    n=n, n_fmt=n_fmt, total=total, total_fmt=total_fmt,\n                    percentage=percentage,\n                    rate=inv_rate if inv_rate and inv_rate > 1 else rate,\n                    rate_fmt=rate_fmt, rate_noinv=rate,\n                    rate_noinv_fmt=rate_noinv_fmt, rate_inv=inv_rate,\n                    rate_inv_fmt=rate_inv_fmt,\n                    elapsed=elapsed_str, elapsed_s=elapsed,\n                    remaining=remaining_str, remaining_s=remaining,\n                    l_bar=l_bar, r_bar=r_bar,\n                    desc=prefix or '', postfix=postfix, unit=unit,\n                    # bar=full_bar,  # replaced by procedure below\n                    **extra_kwargs)\n                # auto-remove colon for empty `desc`\n                if not prefix:\n                    bar_format = bar_format.replace(\"{desc}: \", '')\n                # Interpolate supplied bar format with the dict\n                if '{bar}' in bar_format:\n                    # Format left/right sides of the bar, and format the bar\n                    # later in the remaining space (avoid breaking display)\n                    l_bar_user, r_bar_user = bar_format.split('{bar}')\n                    l_bar = l_bar_user.format(**format_dict)\n                    r_bar = r_bar_user.format(**format_dict)\n                else:\n                    # Else no progress bar, we can just format and return\n                    return bar_format.format(**format_dict)\n            # Formatting progress bar space available for bar's display\n            if ncols:\n                N_BARS = max(1, ncols - len(RE_ANSI.sub('', l_bar + r_bar)))\n            else:\n                N_BARS = 10\n            # format bar depending on availability of unicode/ascii chars\n            if ascii:\n                bar_length, frac_bar_length = divmod(\n                    int(frac * N_BARS * 10), 10)\n                bar = '#' * bar_length\n                frac_bar = chr(48 + frac_bar_length) if frac_bar_length \\\n                    else ' '\n            else:\n                bar_length, frac_bar_length = divmod(int(frac * N_BARS * 8), 8)\n                bar = _unich(0x2588) * bar_length\n                frac_bar = _unich(0x2590 - frac_bar_length) \\\n                    if frac_bar_length else ' '\n            # whitespace padding\n            if bar_length < N_BARS:\n                full_bar = bar + frac_bar + \\\n                    ' ' * max(N_BARS - bar_length - 1, 0)\n            else:\n                full_bar = bar + \\\n                    ' ' * max(N_BARS - bar_length, 0)\n            # Piece together the bar parts\n            return l_bar + full_bar + r_bar\n        # no total: no progressbar, ETA, just progress stats\n        else:\n            return ((prefix + \": \") if prefix else '') + \\\n                '{0}{1} [{2}, {3}{4}]'.format(\n                    n_fmt, unit, elapsed_str, rate_fmt, postfix)"
        }
      ],
      "features": {
        "class_definition": null,
        "variable_definitions": null,
        "error_message": "=================================================== test session starts ===================================================\nplatform darwin -- Python 3.7.9, pytest-7.4.2, pluggy-1.2.0\nrootdir: /Users/jerry/Documents/GitHub/PyRepair/benchmarks/BugsInPy_Cloned_Repos/tqdm:4\nplugins: timeout-2.1.0, cov-4.1.0, mock-3.11.1\ntimeout: 60.0s\ntimeout method: signal\ntimeout func_only: False\ncollected 1 item                                                                                                          \n\ntqdm/tests/tests_tqdm.py FE                                                                                         [100%]\n\n========================================================= ERRORS ==========================================================\n____________________________________________ ERROR at teardown of test_nototal ____________________________________________\n\n    def posttest():\n        if getattr(tqdm, \"_instances\", False):\n            n = len(tqdm._instances)\n            if n:\n                tqdm._instances.clear()\n                raise EnvironmentError(\n>                   \"{0} `tqdm` instances still in existence POST-test\".format(n))\nE               OSError: 1 `tqdm` instances still in existence POST-test\n\ntqdm/tests/tests_tqdm.py:132: OSError\n======================================================== FAILURES =========================================================\n______________________________________________________ test_nototal _______________________________________________________\n\n    @with_setup(pretest, posttest)\n    def test_nototal():\n        \"\"\"Test unknown total length\"\"\"\n        with closing(StringIO()) as our_file:\n>           for i in tqdm((i for i in range(10)), file=our_file, unit_scale=10):\n\ntqdm/tests/tests_tqdm.py:779: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntqdm/_tqdm.py:927: in __init__\n    self.display()\ntqdm/_tqdm.py:1297: in display\n    self.sp(self.__repr__() if msg is None else msg)\ntqdm/_tqdm.py:966: in __repr__\n    return self.format_meter(**self.format_dict)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nn = 0, total = None, elapsed = 0, ncols = None, prefix = '', ascii = True, unit = 'it', unit_scale = 10, rate = None\nbar_format = None, postfix = None, unit_divisor = 1000, extra_kwargs = {}\n\n    @staticmethod\n    def format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False,\n                     unit='it', unit_scale=False, rate=None, bar_format=None,\n                     postfix=None, unit_divisor=1000, **extra_kwargs):\n        \"\"\"\n        Return a string-based progress bar given some parameters\n    \n        Parameters\n        ----------\n        n  : int\n            Number of finished iterations.\n        total  : int\n            The expected total number of iterations. If meaningless (), only\n            basic progress statistics are displayed (no ETA).\n        elapsed  : float\n            Number of seconds passed since start.\n        ncols  : int, optional\n            The width of the entire output message. If specified,\n            dynamically resizes the progress meter to stay within this bound\n            [default: None]. The fallback meter width is 10 for the progress\n            bar + no limit for the iterations counter and statistics. If 0,\n            will not print any meter (only stats).\n        prefix  : str, optional\n            Prefix message (included in total width) [default: ''].\n            Use as {desc} in bar_format string.\n        ascii  : bool, optional\n            If not set, use unicode (smooth blocks) to fill the meter\n            [default: False]. The fallback is to use ASCII characters\n            (1-9 #).\n        unit  : str, optional\n            The iteration unit [default: 'it'].\n        unit_scale  : bool or int or float, optional\n            If 1 or True, the number of iterations will be printed with an\n            appropriate SI metric prefix (k = 10^3, M = 10^6, etc.)\n            [default: False]. If any other non-zero number, will scale\n            `total` and `n`.\n        rate  : float, optional\n            Manual override for iteration rate.\n            If [default: None], uses n/elapsed.\n        bar_format  : str, optional\n            Specify a custom bar string formatting. May impact performance.\n            [default: '{l_bar}{bar}{r_bar}'], where\n            l_bar='{desc}: {percentage:3.0f}%|' and\n            r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '\n              '{rate_fmt}{postfix}]'\n            Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,\n              percentage, rate, rate_fmt, rate_noinv, rate_noinv_fmt,\n              rate_inv, rate_inv_fmt, elapsed, elapsed_s,\n              remaining, remaining_s, desc, postfix, unit.\n            Note that a trailing \": \" is automatically removed after {desc}\n            if the latter is empty.\n        postfix  : *, optional\n            Similar to `prefix`, but placed at the end\n            (e.g. for additional stats).\n            Note: postfix is usually a string (not a dict) for this method,\n            and will if possible be set to postfix = ', ' + postfix.\n            However other types are supported (#382).\n        unit_divisor  : float, optional\n            [default: 1000], ignored unless `unit_scale` is True.\n    \n        Returns\n        -------\n        out  : Formatted meter and stats, ready to display.\n        \"\"\"\n    \n        # sanity check: total\n        if total and n > total:\n            total = None\n    \n        # apply custom scale if necessary\n        if unit_scale and unit_scale not in (True, 1):\n>           total *= unit_scale\nE           TypeError: unsupported operand type(s) for *=: 'NoneType' and 'int'\n\ntqdm/_tqdm.py:323: TypeError\n==================================================== warnings summary =====================================================\nvenv/lib/python3.7/site-packages/nose/importer.py:12\n  /Users/jerry/Documents/GitHub/PyRepair/benchmarks/BugsInPy_Cloned_Repos/tqdm:4/venv/lib/python3.7/site-packages/nose/importer.py:12: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\n    from imp import find_module, load_module, acquire_lock, release_lock\n\ntqdm/tests/tests_tqdm.py::test_nototal\n  /Users/jerry/Documents/GitHub/PyRepair/benchmarks/BugsInPy_Cloned_Repos/tqdm:4/venv/lib/python3.7/site-packages/_pytest/nose.py:24: PytestRemovedIn8Warning: Support for nose tests is deprecated and will be removed in a future release.\n  tqdm/tests/tests_tqdm.py::test_nototal is using nose method: `pretest` (setup)\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#support-for-tests-written-for-nose\n    call_optional(func.obj, \"setup\", func.nodeid)\n\ntqdm/tests/tests_tqdm.py::test_nototal\n  /Users/jerry/Documents/GitHub/PyRepair/benchmarks/BugsInPy_Cloned_Repos/tqdm:4/venv/lib/python3.7/site-packages/_pytest/nose.py:25: PytestRemovedIn8Warning: Support for nose tests is deprecated and will be removed in a future release.\n  tqdm/tests/tests_tqdm.py::test_nototal is using nose method: `posttest` (teardown)\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#support-for-tests-written-for-nose\n    func.addfinalizer(lambda: call_optional(func.obj, \"teardown\", func.nodeid))\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n================================================= short test summary info =================================================\nFAILED tqdm/tests/tests_tqdm.py::test_nototal - TypeError: unsupported operand type(s) for *=: 'NoneType' and 'int'\nERROR tqdm/tests/tests_tqdm.py::test_nototal - OSError: 1 `tqdm` instances still in existence POST-test\n========================================= 1 failed, 3 warnings, 1 error in 0.45s ==========================================",
        "test_code_blocks": [
          {
            "filename": "tqdm/tests/tests_tqdm.py",
            "test_code": "@with_setup(pretest, posttest)\ndef test_nototal():\n    \"\"\"Test unknown total length\"\"\"\n    with closing(StringIO()) as our_file:\n        for i in tqdm((i for i in range(10)), file=our_file, unit_scale=10):\n            pass\n        assert \"100it\" in our_file.getvalue()"
          }
        ],
        "raised_issue_descriptions": null
      }
    }
  ]
}