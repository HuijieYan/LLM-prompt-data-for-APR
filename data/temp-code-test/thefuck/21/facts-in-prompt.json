{
    "1": "Assume that the following list of imports are available in the current environment, so you don't need to import them when generating a fix.\n```python\nfrom thefuck.specific.git import git_support\n```\n\n## The source code of the buggy function\n```python\n# The relative path of the buggy file: thefuck/rules/git_fix_stash.py\n\n# this is the buggy function you need to fix\n@git_support\ndef match(command):\n    return (command.script.split()[1] == 'stash'\n            and 'usage:' in command.stderr)\n\n```",
    "2": "",
    "3": "",
    "4": "## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: tests/rules/test_git_fix_stash.py\n\ndef test_not_match():\n    assert not match(Command(\"git\", stderr=git_stash_err))\n```\n\n\n",
    "5": "### The error message from the failing test\n```text\ndef test_not_match():\n>       assert not match(Command(\"git\", stderr=git_stash_err))\n\ntests/rules/test_git_fix_stash.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n<decorator-gen-8>:2: in match\n    ???\nthefuck/specific/git.py:32: in git_support\n    return fn(command)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncommand = Command(script=git, stdout=, stderr=\nusage: git stash list [<options>]\n   or: git stash show [<stash>]\n   or: git stas... [-k|--[no-]keep-index] [-q|--quiet]\n\t\t       [-u|--include-untracked] [-a|--all] [<message>]]\n   or: git stash clear\n)\n\n    @git_support\n    def match(command):\n>       return (command.script.split()[1] == 'stash'\n                and 'usage:' in command.stderr)\nE       IndexError: list index out of range\n\nthefuck/rules/git_fix_stash.py:8: IndexError\n\n```\n",
    "6": "## Runtime values and types of variables inside the buggy function\nEach case below includes input parameter values and types, and the values and types of relevant variables at the function's return, derived from executing failing tests. If an input parameter is not reflected in the output, it is assumed to remain unchanged. Note that some of these values at the function's return might be incorrect. Analyze these cases to identify why the tests are failing to effectively fix the bug.\n\n### Case 1\n#### Runtime values and types of the input parameters of the buggy function\ncommand.script, value: `'git'`, type: `str`\n\ncommand, value: `Command(script=git, stdout=, stderr=\nusage: git stash list [<options>]\n   or: git stash show [<stash>]\n   or: git stash drop [-q`, type: `Command`\n\ncommand.stderr, value: `'\\nusage: git stash list [<options>]\\n   or: git stash show [<stash>]\\n   or: git stash drop [-q`, type: `str`\n\n#### Runtime values and types of variables right before the buggy function's return\nsplited_script, value: `['git']`, type: `list`\n\n",
    "7": "## Expected values and types of variables during the failing test execution\nEach case below includes input parameter values and types, and the expected values and types of relevant variables at the function's return. If an input parameter is not reflected in the output, it is assumed to remain unchanged. A corrected function must satisfy all these cases.\n\n### Expected case 1\n#### The values and types of buggy function's parameters\ncommand.script, value: `'git'`, type: `str`\n\ncommand, value: `Command(script=git, stdout=, stderr=\nusage: git stash list [<options>]\n   or: git stash show [<stash>]\n   or: git stash drop [-q`, type: `Command`\n\ncommand.stderr, value: `'\\nusage: git stash list [<options>]\\n   or: git stash show [<stash>]\\n   or: git stash drop [-q`, type: `str`\n\n",
    "8": "## A GitHub issue for this bug\n\nThe issue's title:\n```text\ngit_fix_stash rule fails when script is just git\n```\n\nThe issue's detailed description:\n```text\nthefuck master \ud83d\udd27  git\nusage: git [--version] [--help] [-C <path>] [-c name=value]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p|--paginate|--no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n\nThe most commonly used git commands are:\n   add        Add file contents to the index\n   bisect     Find by binary search the change that introduced a bug\n   branch     List, create, or delete branches\n   checkout   Checkout a branch or paths to the working tree\n   clone      Clone a repository into a new directory\n   commit     Record changes to the repository\n   diff       Show changes between commits, commit and working tree, etc\n   fetch      Download objects and refs from another repository\n   grep       Print lines matching a pattern\n   init       Create an empty Git repository or reinitialize an existing one\n   log        Show commit logs\n   merge      Join two or more development histories together\n   mv         Move or rename a file, a directory, or a symlink\n   pull       Fetch from and integrate with another repository or a local branch\n   push       Update remote refs along with associated objects\n   rebase     Forward-port local commits to the updated upstream head\n   reset      Reset current HEAD to the specified state\n   rm         Remove files from the working tree and from the index\n   show       Show various types of objects\n   status     Show the working tree status\n   tag        Create, list, delete or verify a tag object signed with GPG\n\n'git help -a' and 'git help -g' lists available subcommands and some\nconcept guides. See 'git help <command>' or 'git help <concept>'\nto read about a specific subcommand or concept.\nthefuck master \ud83d\udde1  fuck\n[WARN] Rule git_fix_stash:\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.4/dist-packages/thefuck/types.py\", line 211, in is_match\n    if compatibility_call(self.match, command):\n  File \"/usr/local/lib/python3.4/dist-packages/thefuck/utils.py\", line 224, in compatibility_call\n    return fn(*args)\n  File \"<string>\", line 2, in match\n  File \"/usr/local/lib/python3.4/dist-packages/thefuck/specific/git.py\", line 32, in git_support\n    return fn(command)\n  File \"/usr/local/lib/python3.4/dist-packages/thefuck/rules/git_fix_stash.py\", line 8, in match\n    return (command.script.split()[1] == 'stash'\nIndexError: list index out of range\n----------------------------\n```\n\n",
    "9": "Following these steps:\n1. Analyze the buggy function and its relationship with test code, corresponding error message, the runtime input/output values, the expected input/output values, the GitHub issue.\n2. Identify potential error locations within the buggy function.\n3. Explain the cause of the bug using the buggy function, the failing test, the corresponding error message, the actual input/output variable values, the expected input/output variable values, the GitHub Issue information.\n4. Suggest a strategy for fixing the bug.\n5. Given the buggy function below, provide a corrected version. The corrected version should pass the failing test, satisfy the expected input/output values, resolve the issue posted in GitHub.\n",
    "1.3.3": "Assume that the following list of imports are available in the current environment, so you don't need to import them when generating a fix.\n```python\nfrom thefuck.specific.git import git_support\n```\n\n",
    "source_code_body": "# this is the buggy function you need to fix\n@git_support\ndef match(command):\n    return (command.script.split()[1] == 'stash'\n            and 'usage:' in command.stderr)\n\n"
}