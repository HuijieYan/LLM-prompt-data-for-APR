{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    \n    if input_tensors is None:\n        input_layers = []\n        input_tensors = []\n        \n        for layer in model._input_layers:\n            input_tensor = Input(batch_shape=layer.batch_input_shape,\n                                 dtype=layer.dtype,\n                                 sparse=layer.sparse,\n                                 name=layer.name)\n            input_tensors.append(input_tensor)\n            # Cache newly created input layer.\n            layer_map[layer] = input_tensor\n        \n    else:\n        input_tensors = to_list(input_tensors)\n        \n        for i, x in enumerate(input_tensors):\n            input_layer = model._input_layers[i]\n            \n            if not K.is_keras_tensor(x):\n                input_tensor = Input(tensor=x, name='input_wrapper_for_' + input_layer.name)\n                layer_map[input_layer] = input_tensor\n                input_tensors[i] = input_tensor\n\n        input_tensors = to_list(input_tensors)\n                \n    tensor_map = {original_tensor: new_tensor for original_tensor, new_tensor in zip(model.inputs, input_tensors)}\n    \n    for layer in model._input_layers:\n        layer_map[layer] = input_tensor\n    \n    for layer in model.layers:\n        layer_config = layer.get_config()\n        new_layer = layer.__class__.from_config(layer_config)\n        layer_map[layer] = new_layer\n    \n    for node in model._nodes_by_depth:\n        reference_output_tensors = node.output_tensors\n        computed_data = []\n        \n        for x in node.input_tensors:\n            if x in tensor_map:\n                computed_data.append(tensor_map[x])\n\n        if len(computed_data) == len(node.input_tensors):\n            kwargs = node.arguments if node.arguments else {}\n            computed_tensors = [x[0] for x in computed_data]\n            computed_masks = [x[1] for x in computed_data]\n\n            if has_arg(node.outbound_layer.call, 'mask'):\n                kwargs['mask'] = computed_masks\n\n            output_tensors = to_list(node.outbound_layer(computed_tensors, **kwargs))\n\n            if has_arg(node.outbound_layer.call, 'mask'):\n                output_masks = to_list(node.outbound_layer.compute_mask(computed_tensors, computed_masks))\n                for output_tensor, output_mask in zip(reference_output_tensors, output_tensors, output_masks):\n                    tensor_map[output_tensor] = (output_tensor, output_mask)\n            else:\n                for output_tensor in reference_output_tensors:\n                    tensor_map[output_tensor] = (output_tensor, None)\n                    \n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    \n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}