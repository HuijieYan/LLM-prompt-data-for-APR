{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}\n    tensor_map = {}\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=(None,)+tensor_shape[1:]) for tensor_shape in model.input_shape]\n\n    for original_input, new_input in zip(model.inputs, input_tensors):\n        tensor_map[original_input] = (new_input, None)\n\n    for depth, nodes in model._nodes_by_depth.items():\n        for node in nodes:\n            layer = node.outbound_layer\n            if layer not in layer_map:\n                layer_config = layer.get_config()\n                cloned_layer = layer.__class__.from_config(layer_config)\n                layer_map[layer] = cloned_layer\n            else:\n                cloned_layer = layer_map[layer]\n\n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n            computed_data = []\n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n\n            if len(computed_data) == len(reference_input_tensors):\n                kwargs = node.arguments if node.arguments else {}\n                computed_tensors = [x[0] for x in computed_data]\n                computed_masks = [x[1] for x in computed_data]\n                if has_arg(cloned_layer.call, 'mask') and 'mask' not in kwargs:\n                    kwargs['mask'] = computed_masks\n                output_tensors = cloned_layer(computed_tensors, **kwargs)\n                output_masks = cloned_layer.compute_mask(computed_tensors, computed_masks)\n                \n                if isinstance(output_tensors, list):\n                    output_tensors = to_list(output_tensors)\n                else:\n                    output_tensors = [output_tensors]\n\n                if isinstance(output_masks, list):\n                    output_masks = to_list(output_masks)\n                else:\n                    output_masks = [output_masks]\n\n                for x, y, mask in zip(reference_output_tensors, output_tensors, output_masks):\n                    tensor_map[x] = (y, mask)\n\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}