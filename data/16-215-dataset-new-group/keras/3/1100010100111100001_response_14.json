{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got', model)\n    \n    layer_map = {}  # Cache for created layers\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    \n    for layer in model._input_layers:\n        input_tensor = Input(batch_shape=layer.batch_input_shape, dtype=layer.dtype, sparse=layer.sparse, name=layer.name)\n        layer_map[layer] = input_tensor\n        tensor_map[layer] = (input_tensor, None)  # tensor, mask\n    \n    if input_tensors is not None:\n        for i, x in enumerate(input_tensors):\n            if not K.is_keras_tensor(x):\n                name = model._input_layers[i].name\n                input_tensor = Input(tensor=x, name='input_wrapper_for_' + name)\n                layer_map[model._input_layers[i]] = input_tensor\n                tensor_map[model._input_layers[i]] = (input_tensor, None)  # tensor, mask\n            else:\n                tensor_map[model._input_layers[i]] = (x, None)  # tensor, mask\n    \n    for depth in range(len(model._nodes_by_depth)):\n        nodes = model._nodes_by_depth.get(depth, [])\n        for node in nodes:\n            layer = node.outbound_layer\n            if layer not in layer_map:\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n            else:\n                layer = layer_map[layer]\n                if isinstance(layer, InputLayer):\n                    continue\n    \n            reference_input_tensors = node.input_tensors\n            computed_tensors = []\n            computed_masks = []\n            for x in reference_input_tensors:\n                computed_data = tensor_map.get(x)\n                if computed_data:\n                    computed_tensors.append(computed_data[0])\n                    computed_masks.append(computed_data[1])\n    \n            kwargs = node.arguments if node.arguments else {}\n            output_tensors = to_list(layer(computed_tensors, **kwargs))\n            output_masks = to_list(layer.compute_mask(computed_tensors, computed_masks))\n    \n            for x, y, mask in zip(node.output_tensors, output_tensors, output_masks):\n                tensor_map[x] = (y, mask)\n    \n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    \n    return Model([tensor_map[x][0] for x in model.inputs], output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}