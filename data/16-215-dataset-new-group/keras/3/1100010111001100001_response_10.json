{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    input_layers = {}  # Cache for input layers.\n\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.batch_input_shape, dtype=layer.dtype,\n                               sparse=layer.sparse, name=layer.name) for layer in model._input_layers]\n    else:\n        input_tensors = to_list(input_tensors)\n\n    for original_layer, input_tensor in zip(model._input_layers, input_tensors):\n        layer_map[original_layer] = input_tensor\n        input_layers[input_tensor] = original_layer\n\n    for layer in model.layers:\n        if layer not in layer_map:\n            # Clone layer by recreating it from the configuration.\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n\n    for node in model._nodes_by_depth:\n        inbound_layers = [layer_map[l] for l in node.inbound_layers]\n        new_node = node.__class__.from_config(node.get_config())\n        new_node.inbound_layers = inbound_layers\n\n    # Create the cloned model by mapping input and output tensors through the layer_map\n    output_tensors = [tensor_map[x] for x in model.outputs]\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}