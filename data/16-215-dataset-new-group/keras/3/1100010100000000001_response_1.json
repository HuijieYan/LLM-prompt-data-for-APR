{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    \n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    if input_tensors is None:\n        input_tensors = [Input(shape=layer.output_shape[1:]) for layer in model.layers]\n\n    layer_map = {}\n    tensor_map = {}\n    \n    for original_input, new_input in zip(model.inputs, input_tensors):\n        layer_map[original_input] = new_input\n        tensor_map[original_input] = new_input\n\n    for layer in model.layers:\n        cloned_layer = layer.__class__.from_config(layer.get_config())\n        layer_map[layer] = cloned_layer\n        for orig_input, new_input in zip(layer.input, cloned_layer.input):\n            tensor_map[orig_input] = new_input\n            layer_map[orig_input] = new_input\n        for orig_output, new_output in zip(layer.output, cloned_layer.output):\n            tensor_map[orig_output] = new_output\n            layer_map[orig_output] = new_output\n\n    inputs = [layer_map[x] for x in model.inputs]\n\n    output_tensors = [tensor_map[x] for x in model.outputs]\n\n    return Model(inputs, output_tensors, name='cloned_' + model.name)",
            "import_list": []
        }
    ]
}