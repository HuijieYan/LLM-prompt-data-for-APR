{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    \n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_layers = []\n        input_tensors = []\n        \n        for layer in model._input_layers:\n            input_layer = Input(batch_shape=layer.batch_input_shape[1:], dtype=layer.dtype, sparse=layer.sparse)\n            input_tensors.append(input_layer)\n            layer_map[layer] = input_layer\n        \n        for _original, _cloned in zip(model._input_layers, input_tensors):\n            layer_map[_original] = _cloned\n    else:\n        # Ensure that all input tensors are Keras layers.\n        input_tensors = to_list(input_tensors)\n        _input_tensors = []\n        \n        for i, x in enumerate(input_tensors):\n            if not K.is_keras_tensor(x):\n                name = model._input_layers[i].name\n                input_layer = Input(tensor=x, shape=model._input_layers[i].batch_input_shape[1:], name='input_wrapper_for_' + name)\n                _input_tensors.append(input_layer)\n                layer_map[x] = input_layer\n            else:\n                _input_tensors.append(x)\n        input_tensors = _input_tensors\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    for depth in model._nodes_by_depth.keys():\n        for node in model._nodes_by_depth[depth]:\n            layer = node.outbound_layer\n            \n            if layer not in layer_map:\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n                # continue if the layer is InputLayer\n                if isinstance(layer, InputLayer):\n                    continue\n            else:\n                layer = layer_map[layer]\n                \n            reference_input_tensors = node.input_tensors\n            computed_input = [tensor_map[x][0] for x in reference_input_tensors if x in tensor_map]\n\n            if len(computed_input) == len(reference_input_tensors):\n                kwargs = node.arguments if node.arguments else {}\n                if len(computed_input) == 1:\n                    computed_tensor = computed_input[0]\n                    output_tensors = layer(computed_tensor, **kwargs)\n                    output_tensors = to_list(output_tensors)\n                else:\n                    output_tensors = layer(computed_input, **kwargs)\n                    output_tensors = to_list(output_tensors)\n                \n                for x, y in zip(node.output_tensors, output_tensors):\n                    tensor_map[x] = (y, None)\n\n    output_tensors = [tensor_map[x][0] for x in model.outputs if x in tensor_map]\n    model = Model(input_tensors, output_tensors, name=model.name)\n    return model",
            "import_list": []
        }
    ]
}