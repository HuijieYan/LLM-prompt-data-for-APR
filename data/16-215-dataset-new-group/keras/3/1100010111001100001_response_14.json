{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    input_layers = []\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = []\n        for layer in model.inputs:\n            input_layer = Input(batch_shape=layer.shape, dtype=layer.dtype, name=layer.name)\n            input_tensors.append(input_layer)\n            input_layers.append(input_layer)\n\n    for layer in model.inputs:\n        input_layers.append(layer)\n\n    layer_map = {}\n    for layer in model.layers:\n        new_layer = layer.__class__.from_config(layer.get_config())\n        layer_map[layer] = new_layer\n\n    tensor_map = {x: y for x, y in zip(model.inputs, input_tensors)}\n\n    for layer in model.layers:\n        if layer not in layer_map:\n            layer_map[layer] = layer\n\n    for node in model.nodes:\n        outbound_layer = node.outbound_layer\n        if outbound_layer not in layer_map:\n            new_outbound_layer = outbound_layer.__class__.from_config(outbound_layer.get_config())\n            layer_map[outbound_layer] = new_outbound_layer\n\n    for node in model.nodes:\n        outbound_layer = node.outbound_layer\n        reference_input_tensors = [tensor_map[x] for x in node.input_tensors]\n        computed_data = [(x, None) for x in reference_input_tensors]\n\n        for x in computed_data:\n            tensor_map[x[0]] = x\n\n    output_tensors = [tensor_map[x] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}