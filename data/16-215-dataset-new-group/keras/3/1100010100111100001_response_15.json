{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n        \n    layer_map = {}  # Cache for created layers.\n    initial_input_layers = model._get_all_node_layers(model.inputs)\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [Input(batch_shape=layer.batch_input_shape,\n                               dtype=layer.dtype,\n                               sparse=layer.sparse,\n                               name=layer.name) for layer in initial_input_layers]\n    new_input_layers = [layer.__class__.from_config(layer.get_config()) for layer in input_tensors]\n    layer_map = {init: new for init, new in zip(initial_input_layers, new_input_layers)}\n\n    tensor_map = {x: y for x, y in zip(model.inputs, input_tensors)}\n    \n    nodes = model._nodes_by_depth\n    for depth in sorted(nodes.keys(), reverse=True):\n        depth_nodes = nodes[depth]\n        for node in depth_nodes:\n            outbound_layer = node.outbound_layer\n\n            if outbound_layer not in layer_map:\n                new_layer = outbound_layer.__class__.from_config(outbound_layer.get_config())\n                layer_map[outbound_layer] = new_layer\n\n            inbound_tensors = node.input_tensors\n            output_tensors = node.output_tensors\n\n            computed_data = []\n            for x in inbound_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n\n            if len(computed_data) == len(inbound_tensors):\n                kwargs = node.arguments if node.arguments is not None else {}\n                output_tensors = []\n                masks = []\n                for i, x in enumerate(computed_data):\n                    tensor, mask = x\n                    if has_arg(outbound_layer.call, 'mask'):\n                        kwargs['mask'] = mask\n                    out = outbound_layer(tensor, **kwargs)\n                    output_tensors = to_list(out) if i == 0 else output_tensors + to_list(out)\n                    masks = to_list(outbound_layer.compute_mask(tensor, mask))\n\n                for i, y in enumerate(output_tensors):\n                    tensor_map[output_tensors[i]] = (y, masks[i])\n                    \n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}