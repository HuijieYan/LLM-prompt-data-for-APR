{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    layer_map = {}\n    tensor_map = {}\n\n    if input_tensors is None:\n        input_layers = []\n        input_tensors = []\n        for layer in model._input_layers:\n            input_layer_config = layer.get_config()\n            input_layer = layer.__class__.from_config(input_layer_config)\n            input_tensors.append(input_layer.output)\n            layer_map[layer] = input_layer\n\n        for original, cloned in zip(model._input_layers, input_tensors):\n            layer_map[original] = cloned\n    else:\n        input_tensors = to_list(input_tensors)\n        input_layers = model._input_layers\n        layer_config_map = {layer.name: layer for layer in input_layers}\n        input_tensors = [layer_config_map[name].output for name in input_layers]\n\n    for x, y in zip(model.input, input_tensors):\n        tensor_map[x] = y\n\n    for layer in model.layers:\n        if layer not in layer_map:\n            layer_map[layer] = layer.__class__.from_config(layer.get_config())\n        cloned_layer = layer_map[layer]\n\n        inbound_nodes = layer._inbound_nodes\n        for node in inbound_nodes:\n            input_tensors = [tensor_map[x] for x in node.input_tensors]\n            kwargs = node.arguments\n\n            if len(input_tensors) == 1:\n                input_tensors = input_tensors[0]\n            output_tensors = to_list(cloned_layer(input_tensors, **kwargs))\n\n            for original, cloned in zip(node.output_tensors, output_tensors):\n                tensor_map[original] = cloned\n\n    output_tensors = [tensor_map[x] for x in model.output]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}