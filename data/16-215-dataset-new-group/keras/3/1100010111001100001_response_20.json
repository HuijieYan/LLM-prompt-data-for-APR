{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    if input_tensors is None:\n        input_tensors = [Input(shape=layer.output_shape[1:]) for layer in model.layers if isinstance(layer, InputLayer)]\n    \n    layer_map = {}\n    for layer in model.layers:\n        config = layer.get_config()\n        cloned_layer = layer.__class__.from_config(config)\n        layer_map[layer] = cloned_layer\n\n    all_inputs = [layer.input for layer in model.layers if hasattr(layer, 'input')]\n    all_outputs = [layer.output for layer in model.layers if hasattr(layer, 'output')]\n    from_output_to_input = {}\n    for ii, layer in enumerate(model.layers):\n        for node in layer._inbound_nodes:\n            input_tensors = [layer_map[lay].output for lay in node.inbound_layers]\n            if len(input_tensors) == 1:\n                input_tensors = input_tensors[0]\n            elif len(input_tensors) == 0:\n                input_tensors = []\n            from_output_to_input[layer_map[layer.output]] = input_tensors\n            \n    new_output_tensors = [from_output_to_input[out] for out in all_outputs]\n    \n    return Model(input_tensors, new_output_tensors)",
            "import_list": []
        }
    ]
}