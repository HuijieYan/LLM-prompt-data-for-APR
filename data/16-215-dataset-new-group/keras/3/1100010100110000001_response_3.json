{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    # Create new input tensors if not provided\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.input.shape[1:]) for layer in model._input_layers]\n    else:\n        input_tensors = to_list(input_tensors)\n\n    # Map the input tensors to the model's input layers\n    for original, cloned in zip(model._input_layers, input_tensors):\n        layer_map[original] = cloned\n\n    # Iterate over every node in the reference model, in depth order\n    for depth, nodes in model._nodes_by_depth.items():\n        for node in nodes:\n            layer = node.outbound_layer\n\n            # Get or create layer\n            if layer not in layer_map:\n                # Clone layer\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n                layer = new_layer\n            else:\n                # Reuse previously cloned layer\n                layer = layer_map[layer]\n                # Don't call InputLayer multiple times\n                if isinstance(layer, InputLayer):\n                    continue\n\n            # Gather inputs to call the new layer\n            reference_input_tensors = node.input_tensors\n\n            # If all previous input tensors are available in tensor_map, then call node.inbound_layer on them\n            if all(x in tensor_map for x in reference_input_tensors):\n                # Get the corresponding input tensors for the new layer\n                inputs = [tensor_map[x][0] for x in reference_input_tensors]\n\n                # Call layer\n                output_tensors = to_list(\n                    layer.call(inputs, **node.arguments))\n\n                # Update tensor_map\n                for x, y in zip(node.output_tensors, output_tensors):\n                    tensor_map[x] = (y, None)  # tensor, mask\n\n    # Check that we did compute the model outputs, then instantiate a new model from inputs and outputs\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}