{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    layer_map[model.layers[0]] = Input(batch_shape=model.input_shape)\n\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.get_input_shape_at(0)) for layer in model.layers]\n    else:\n        input_tensors = to_list(input_tensors)\n\n    for original_tensor, input_tensor in zip(model.inputs, input_tensors):\n        tensor_map[original_tensor] = input_tensor\n\n    for layer in model.layers:\n        if layer not in layer_map:\n            layer_config = layer.get_config()\n            cloned_layer = layer.__class__.from_config(layer_config)\n            layer_map[layer] = cloned_layer\n\n    for layer in model.layers:\n        new_input_tensors = [tensor_map[t] for t in layer.get_input_at(0)]\n        kwargs = {}\n        if hasattr(layer, 'arguments'):\n            kwargs = layer.arguments\n        new_output_tensors = to_list(layer(new_input_tensors, **kwargs))\n        for original_tensor, new_tensor in zip(layer.get_output_at(0), new_output_tensors):\n            tensor_map[original_tensor] = new_tensor\n\n    output_tensors = [tensor_map[out] for out in model.outputs]\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}