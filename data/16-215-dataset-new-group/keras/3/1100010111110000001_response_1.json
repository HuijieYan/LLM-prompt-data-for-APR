{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    # ... (existing code)\n\n    # Check that we did compute the model outputs,\n    # then instantiate a new model from inputs and outputs.\n    cloned_input_tensors = []\n    for x in model.inputs:\n        if x not in tensor_map:\n            new_placeholder = Input(shape=x.shape[1:])\n            tensor_map[x] = (new_placeholder, None)  # tensor, mask\n            cloned_input_tensors.append(new_placeholder)\n        else:\n            tensor, _ = tensor_map[x]\n            cloned_input_tensors.append(tensor)\n\n    depth_keys = list(model._nodes_by_depth.keys())\n    depth_keys.sort()\n\n    output_tensors = []\n    for depth in depth_keys:\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n\n            # Gather inputs to call the new layer.\n            input_data = []\n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    input_data.append(tensor_map[x])\n\n            if len(input_data) == len(reference_input_tensors):\n                layer = node.outbound_layer\n                kwargs = node.arguments if node.arguments else {}\n\n                computed_tensors = [x[0] for x in input_data]\n                computed_masks = [x[1] for x in input_data]\n\n                if has_arg(layer.call, 'mask'):\n                    if 'mask' not in kwargs:\n                        kwargs['mask'] = computed_masks\n\n                output = layer(computed_tensors, **kwargs)\n\n                if isinstance(output, list):\n                    output_tensors.extend(output)\n                    for out, ref_out in zip(output, reference_output_tensors):\n                        tensor_map[ref_out] = (out, None)  # tensor, mask\n                else:\n                    output_tensors.append(output)\n                    tensor_map[reference_output_tensors[0]] = (output, None)  # tensor, mask\n\n    return Model(cloned_input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}