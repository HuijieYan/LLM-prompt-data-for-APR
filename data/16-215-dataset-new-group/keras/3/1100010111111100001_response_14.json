{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    # Create a new dict to cache created layers\n    layer_map = {}\n    # Create a new dict to map {reference_tensor: (corresponding_tensor, mask)}\n    tensor_map = {}\n\n    # Handle the case where input_tensors are not provided by creating placeholders\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.batch_input_shape[1:], dtype=layer.dtype, name=layer.name) for layer in model._input_layers]\n\n    # Initialize the input tensor map\n    for original_input, new_input in zip(model.inputs, input_tensors):\n        tensor_map[original_input] = (new_input, None)\n\n    # Iterate over every node in the reference model, in depth order\n    for depth in range(len(model._nodes_by_depth)):\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            outbound_layer = node.outbound_layer\n\n            if outbound_layer not in layer_map:\n                layer_config = outbound_layer.get_config()\n                new_layer = outbound_layer.__class__.from_config(layer_config)\n                layer_map[outbound_layer] = new_layer\n            else:\n                new_layer = layer_map[outbound_layer]\n\n            input_tensors = [tensor_map[x][0] for x in node.input_tensors if x in tensor_map]\n\n            computed_tensors = to_list(new_layer(input_tensors))\n\n            for x, y in zip(node.output_tensors, computed_tensors):\n                tensor_map[x] = (y, None)\n\n    # Check that we did compute the model outputs, then instantiate a new model from inputs and outputs\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}