{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ' + str(type(model)))\n\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead')\n\n    input_layers = model._input_layers\n    input_tensors = input_tensors or [Input(batch_shape=layer.input_shape) for layer in input_layers]\n\n    layers_map = {}\n    \n    for layer in model.layers:\n        layers_map[layer] = layer.__class__.from_config(layer.get_config())  # Clone the layer\n    \n    for o_node in model.outputs:\n        node = model.outbound_nodes.get(o_node._keras_history)\n        cloned_node = Node(node.inbound_layers, node.node_indices, node.tensor_indices, node.inbound_tensors, node.output_tensors)\n        layers_map[o_node] = cloned_node  # Entry for output layer in map\n    \n    input_tensors_map = dict(zip(model.inputs, input_tensors))\n\n    # Iterate over every node in the reference model\n    for depth, nodes in model._nodes_by_depth.items():\n\n        for node in nodes:\n            outbound_layer = node.outbound_layer\n            if outbound_layer not in layers_map:\n                cloned_layer = Layer.__new__(outbound_layer.__class__)\n                cloned_layer.__dict__ = outbound_layer.__dict__.copy() # Clone layer\n                layers_map[outbound_layer] = cloned_layer\n            else:\n                cloned_layer = layers_map[outbound_layer]\n\n            ref_input_tensors = []\n            ref_output_tensors = node.output_tensors\n            for t in node.input_tensors:\n                if t in input_tensors_map:\n                    ref_input_tensors.append(input_tensors_map[t])\n\n            if len(ref_input_tensors) == len(node.input_tensors):\n                kwargs = node.arguments if node.arguments else {}\n                output = cloned_layer(ref_input_tensors, **kwargs)\n\n                for t, o in zip(node.output_tensors, output):\n                    layers_map[t] = o\n\n    output_tensors = [layers_map[o_node] for o_node in model.outputs]\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}