{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    layer_map = {}  # Cache for created layers\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.input_shape, dtype=layer.dtype) for layer in model.layers if getattr(layer, '_keras_history', None)]\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    for layer in model.layers:\n        if layer not in layer_map:\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n            layer = new_layer\n        else:\n            layer = layer_map[layer]\n\n        if len(layer._output_layers) > 1 and layer.supports_masking:\n            # Layer with multiple outputs\n            reference_output_tensors = layer._inbound_nodes[0].input_tensors\n            computed_data = [tensor_map[x] for x in reference_output_tensors if x in tensor_map]\n            if len(computed_data) == len(reference_output_tensors):\n                kwargs = layer._inbound_nodes[0].arguments if layer._inbound_nodes else {}\n                if len(computed_data) == 1:\n                    computed_tensor, computed_mask = computed_data[0]\n                    if getattr(layer.call, 'mask', None) and 'mask' not in kwargs:\n                        kwargs['mask'] = computed_mask\n                    output_tensors = to_list(layer(computed_tensor, **kwargs))\n                    computed_tensors = to_list(computed_tensor)\n                    computed_masks = to_list(computed_mask)\n                else:\n                    computed_tensors = [x[0] for x in computed_data]\n                    computed_masks = [x[1] for x in computed_data]\n                    if getattr(layer.call, 'mask', None) and 'mask' not in kwargs:\n                        kwargs['mask'] = computed_masks\n                    output_tensors = to_list(layer(computed_tensors, **kwargs))\n                \n                for x, y, mask in zip(layer.output, output_tensors, to_list(layer.compute_mask(computed_tensors, computed_masks))):\n                    tensor_map[x] = (y, mask)\n                    \n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    \n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": [
                "from keras.models import Model",
                "from keras.layers import Input"
            ]
        }
    ]
}