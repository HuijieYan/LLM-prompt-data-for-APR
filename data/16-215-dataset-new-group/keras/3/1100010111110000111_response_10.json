{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    \n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.batch_input_shape, dtype=layer.dtype, sparse=layer.sparse) for layer in model._input_layers]\n    else:\n        input_tensors = to_list(input_tensors)\n        for i, x in enumerate(input_tensors):\n            if not K.is_keras_tensor(x):\n                input_tensor = Input(tensor=x)\n                original_input_layer = get_source_inputs(x)\n                newly_created_input_layer = input_tensor._keras_history[0]\n                layer_map[original_input_layer] = newly_created_input_layer\n                input_tensors[i] = input_tensor\n    \n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n    \n    for layer in model.layers:\n        # Clone layer.\n        new_layer = layer.__class__.from_config(layer.get_config())\n        layer_map[layer] = new_layer\n    \n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n    \n    for node in model.node_order:\n        inbound_tensors = node.input_tensors\n        outbound_tensors = node.output_tensors\n        # Call layer.\n        if node.arguments:\n            kwargs = node.arguments\n        else:\n            kwargs = {}\n        computed_tensors = [tensor_map[t][0] for t in inbound_tensors]\n        mask = None\n        if has_arg(layer.call, 'mask'):\n            if 'mask' not in kwargs:\n                mask = computed_data[0][1]\n        output_tensors = to_list(layer.call(computed_tensors[0], **kwargs))\n        computed_tensors = [computed_tensors[0]]\n        computed_mask = [mask]\n        tensor_map[outbound_tensors[0]] = (output_tensors[0], mask)\n    \n    output_tensors = [tensor_map[out][0] for out in model.outputs]\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": [
                "from keras.engine.topology import get_source_inputs",
                "from keras.layers import Input",
                "from keras.models import Model",
                "from keras.utils.generic_utils import has_arg",
                "from keras.utils.generic_utils import to_list"
            ]
        }
    ]
}