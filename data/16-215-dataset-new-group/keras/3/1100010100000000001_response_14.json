{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_layers = []\n        input_tensors = []\n        for layer in model._input_layers:\n            input_tensor = Input(batch_shape=layer.batch_input_shape[0], dtype=layer.dtype, name=layer.name)\n            input_tensors.append(input_tensor)\n            layer_map[layer] = input_tensor\n        for layer in model.layers:\n            layer_map[layer] = layer\n    else:\n        if not isinstance(input_tensors, list):\n            input_tensors = [input_tensors]\n\n        # Make sure that all input tensors come from a Keras layer.\n        _input_tensors = []\n        for i, x in enumerate(input_tensors):\n            if not K.is_keras_tensor(x):\n                raise ValueError(\"Input tensors should all come from a Keras layer.\")\n            _input_tensors.append(x)\n        input_tensors = _input_tensors\n\n    for i in range(len(model.inputs)):\n        tensor_map[model._input_layers[i]] = input_tensors[i]\n\n    # Clone layers and create mapping of input/output tensors\n    for layer in model.layers:\n        new_layer = layer.__class__.from_config(layer.get_config())\n        new_layer.build(layer.get_input_shape_at(0))\n        layer_map[layer] = new_layer\n        for i in range(len(layer.inbound_nodes)):\n            node = layer.inbound_nodes[i]\n            for x in node.input_tensors:\n                if x in tensor_map:\n                    node.input_tensors[node.input_tensors.index(x)] = tensor_map[x]\n            for x in node.output_tensors:\n                tensor_map[x] = new_layer(node.input_tensors, **node.arguments)\n\n    if not any(output_tensor in tensor_map for output_tensor in model.outputs):\n        raise ValueError(\"Failed to clone model outputs\")\n\n    output_tensors = [tensor_map[output] for output in model.outputs]\n    return Model(tensor_map[model.inputs], output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}