{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n\n    clone_map = {}\n    layer_weights = {}  # Cache for layer weights.\n    \n    # Clone the input layers\n    if input_tensors is None:\n        input_tensors = [Input(tensor=K.placeholder(shape=shape, dtype=dtype))\n                         for shape, dtype in zip(model.input_shape, model.input_dtype)]\n    else:\n        input_tensors = to_list(input_tensors)\n\n    for i, layer in enumerate(model.layers):\n        layer_configs = topology.Layer.get_config(layer)\n        new_layer = topology.Layer.from_config(layer_configs)\n        clone_map[layer] = new_layer\n        \n        # Get the layer weights\n        weights = layer.get_weights()\n        layer_weights[layer] = weights\n\n    # Get the output tensor(s)\n    x = input_tensors\n    for layer in model.layers:\n        x = clone_map[layer](x, **kwargs)\n        \n    cloned_model = Model(inputs=input_tensors, outputs=x, name=model.name)\n    \n    # Set the layer weights\n    for layer in cloned_model.layers:\n        if layer in layer_weights:\n            layer.set_weights(layer_weights[layer])\n\n    return cloned_model",
            "import_list": [
                "from keras.engine import topology"
            ]
        }
    ]
}