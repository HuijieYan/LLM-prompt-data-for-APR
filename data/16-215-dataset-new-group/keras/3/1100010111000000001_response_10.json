{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got {}'.format(model))\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead: {}'.format(model))\n    \n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.input.shape) for layer in model._input_layers]\n\n    node_mapping = {}\n    for layer in model.layers:\n        config = layer.get_config()\n        replica = layer.__class__.from_config(config)\n        node_mapping[layer] = replica\n\n    created_tensors = dict(zip(model.inputs, input_tensors))\n    for original, replica in zip(model.inputs, input_tensors):\n        tensor_map[original] = replica\n\n    for layer in model.layers:\n        replica = node_mapping[layer]\n        input_tensors = []  # Gather inputs to call the new layer.\n        for inbound_node in layer._inbound_nodes:\n            node_key = make_node_key(inbound_layer, node_index, tensor_index)\n            inbound_tensors = []\n            for original_tensor in inbound_node.input_tensors:\n                if original_tensor in tensor_map:\n                    inbound_tensors.append(tensor_map[original_tensor])\n                else:\n                    new_input_tensor = Input(batch_shape=original_tensor.shape)\n                    input_layers.append(new_input_tensor)\n                    tensor_map[original_tensor] = new_input_tensor\n                    inbound_tensors.append(new_input_tensor)\n            compute_tensor, compute_mask = original_node.compat_call(inbound_tensors, node_key, tensor_index)\n            tensor_map[compute_tensor] = compute_tensor\n    \n    new_tensors = [tensor_map[tensor] for tensor in model.outputs]\n\n    return Model(input_tensors, new_tensors, name=model.name)",
            "import_list": []
        }
    ]
}