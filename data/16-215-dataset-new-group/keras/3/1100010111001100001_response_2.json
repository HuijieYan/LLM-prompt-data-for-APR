{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {} \n    tensor_map = {}  \n    input_layers = model.inputs  # use the existing input layers\n    \n    if input_tensors is not None:\n        if len(input_tensors) != len(input_layers):\n            raise ValueError('Number of input tensors should match the number of input layers')\n\n        for i, x in enumerate(input_tensors):\n            if not K.is_keras_tensor(x):\n                name = model.inputs[i].name\n                input_tensor = Input(tensor=x, name='input_wrapper_for_' + name)\n                input_layers[i] = input_tensor  # update the existing input layer with new input tensor\n                x._keras_history = (input_tensor, 0, 0)  # update the history\n        input_tensors = input_layers  # update input_tensors\n\n    for i, x in enumerate(input_tensors):\n        tensor_map[model.inputs[i]] = (x, None)\n\n    for layer in model.layers:\n        if layer in layer_map:\n            continue\n        new_layer = layer.__class__.from_config(layer.get_config())\n        layer_map[layer] = new_layer\n\n    for node in model._nodes_by_depth[0]:\n        layer = node.outbound_layer\n\n        if layer not in layer_map:\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n            layer = new_layer\n        else:\n            layer = layer_map[layer]\n        \n        reference_input_tensors = node.input_tensors\n        reference_output_tensors = node.output_tensors\n        \n        computed_data = []  \n        for x in reference_input_tensors:\n            if x in tensor_map:\n                computed_data.append(tensor_map[x])\n\n        if len(computed_data) == len(reference_input_tensors):\n            kwargs = node.arguments if node.arguments else {}\n            output_tensors = to_list(layer([x[0] for x in computed_data], **kwargs))\n            tensor_map.update(zip(reference_output_tensors, output_tensors))\n\n    # Check that we did compute the model outputs\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}