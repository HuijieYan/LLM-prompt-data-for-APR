{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    \n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [Input(batch_shape=layer.batch_input_shape[1:], dtype=layer.dtype, sparse=layer.sparse, name=layer.name+'_input') for layer in model._input_layers]\n    else:\n        # Make sure that all input tensors come from a Keras layer.\n        input_tensors = to_list(input_tensors)\n\n    for original_layer, input_tensor in zip(model._input_layers, input_tensors):\n        layer_map[original_layer] = input_tensor._keras_history[0]\n    \n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    for depth in range(len(model._nodes_by_depth)):\n        for node in model._nodes_by_depth[depth]:\n            outbound_layer = node.outbound_layer\n\n            # Get or create layer.\n            if outbound_layer not in layer_map:\n                # Clone layer\n                outbound_layer_config = outbound_layer.get_config()\n                new_layer = outbound_layer.__class__.from_config(outbound_layer_config)\n                layer_map[outbound_layer] = new_layer\n            else:\n                # Reuse previously cloned layer.\n                new_layer = layer_map[outbound_layer]\n\n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n\n            computed_data = []  # List of tuples (input, mask).\n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n\n            computed_tensors, computed_masks = [], []\n            kwargs = node.arguments if node.arguments else {}\n            for computed_tensor, computed_mask in computed_data:\n                if 'mask' not in kwargs and hasattr(new_layer, 'supports_masking') and new_layer.supports_masking:\n                    kwargs['mask'] = computed_mask\n                if len(computed_data) == 1:\n                    computed_tensors = [computed_tensor]\n                    computed_masks = [computed_mask] if computed_mask else []\n                else:\n                    computed_tensors.append(computed_tensor)\n                    if computed_mask:\n                        computed_masks.append(computed_mask)\n\n            output_tensors = to_list(new_layer(computed_tensors, **kwargs))\n            output_masks = to_list(new_layer.compute_mask(computed_tensors, computed_masks))\n\n            for original_output, new_output, mask in zip(reference_output_tensors, output_tensors, output_masks):\n                tensor_map[original_output] = (new_output, mask)\n\n    # Check the model outputs in tensor_map, then instantiate a new model from inputs and outputs.\n    output_tensors = []\n    for output in model.outputs:\n        if output in tensor_map:\n            output_tensors.append(tensor_map[output][0])\n        else:\n            raise ValueError('Could not compute output ', output)\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}