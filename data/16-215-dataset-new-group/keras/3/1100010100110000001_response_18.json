{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    input_map = {}\n    for layer in model._input_layers:\n        if input_tensors is None:\n            new_input = Input(batch_shape=layer.batch_input_shape, dtype=layer.dtype, sparse=layer.sparse, name=layer.name)\n            input_map[layer.name] = new_input\n\n    layers_map = {}\n    for layer in model.layers:\n        new_layer = layer.__class__.from_config(layer.get_config())\n        layers_map[layer.name] = new_layer\n\n    for node in model._nodes_by_depth:\n        for layer in model._nodes_by_depth[node]:\n            inbound_layers = model._network_nodes[layer]\n            if len(inbound_layers) == 0:\n                input_tensors = input_map[model._input_layers[0].name]\n            else:\n                input_tensors = [layers_map[name] for name in inbound_layers]\n            \n            if len(input_tensors) == 1:\n                output_tensors = layers_map[layer.name](input_tensors[0])\n            else:\n                output_tensors = layers_map[layer.name](input_tensors)\n                \n            if not isinstance(output_tensors, list):\n                output_tensors = [output_tensors]\n                \n            for i, output in enumerate(output_tensors):\n                layers_map[layer.outbound_nodes[i].id] = output\n\n    inputs = [input_map[name] for name in model.input_names]\n    outputs = [layers_map[name] for name in model.output_names]\n    return Model(inputs, outputs, name=model.name)",
            "import_list": []
        }
    ]
}