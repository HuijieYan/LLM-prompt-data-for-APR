{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [Input(batch_shape=layer.batch_input_shape,\n                               dtype=layer.dtype,\n                               sparse=layer.sparse,\n                               name=layer.name) for layer in model.input_layers]\n    else:\n        input_tensors = to_list(input_tensors)\n\n    layer_map = {}\n    tensor_map = {}\n  \n    for layer, input_tensor in zip(model._input_layers, input_tensors):\n        layer_map[layer] = input_tensor\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    for layer in model.layers:\n        if layer not in layer_map:\n            # Clone layer.\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n        else:\n            # Reuse previously cloned layer.\n            layer = layer_map[layer]\n            if isinstance(layer, InputLayer):\n                continue\n\n        input_tensors = [tensor_map[x][0] for x in layer.input_tensors]\n        kwargs = layer.arguments if layer.arguments else {}\n        if has_arg(layer.call, 'mask') and 'mask' not in kwargs:\n            kwargs['mask'] = [tensor_map[x][1] for x in layer.input_tensors]\n\n        output_tensors = to_list(layer(input_tensors, **kwargs))\n        output_masks = to_list(layer.compute_mask(input_tensors, [tensor_map[x][1] for x in layer.input_tensors]))\n\n        for index, x in enumerate(layer.output_tensors):\n            tensor_map[x] = (output_tensors[index], output_masks[index])\n\n    return Model(input_tensors, [tensor_map[x][0] for x in model.outputs], name=model.name)",
            "import_list": []
        }
    ]
}