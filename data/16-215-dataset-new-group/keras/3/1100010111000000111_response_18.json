{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [Input(tensor=layer.input) for layer in model.layers if isinstance(layer, InputLayer)]\n    else:\n        # Make sure that all input tensors come from a Keras layer.\n        input_tensors = to_list(input_tensors)\n        input_tensors = [Input(tensor=x) if not K.is_keras_tensor(x) else x for x in input_tensors]\n\n    for layer in model.layers:\n        if isinstance(layer, InputLayer):\n            layer_map[layer] = layer\n\n    for layer in model.layers:\n        if layer not in layer_map:\n            # Clone layer.\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n\n    for layer in model.layers:\n        if isinstance(layer, InputLayer):\n            continue\n        reference_input_tensors = layer.input\n        reference_output_tensors = layer.output\n        computed_data = []  # List of tuples (input, mask).\n        for x in reference_input_tensors:\n            if x in tensor_map:\n                computed_data.append(tensor_map[x])\n\n        if len(computed_data) == len(reference_input_tensors):\n            kwargs = layer.get_config()\n            output_tensors = to_list(layer(computed_data[0][0], **kwargs))\n            tensor_map[reference_output_tensors] = output_tensors\n\n    output_tensors = [tensor_map[x] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}