{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument '\n                         'to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument '\n                         'to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.input.shape[1:],\n                               dtype=layer.input.dtype,\n                               sparse=layer.input.sparse,\n                               name=layer.input.name)\n                         for layer in model._input_layers]\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    for original_input_layer, input_tensor in zip(model._input_layers, input_tensors):\n        layer_map[original_input_layer] = input_tensor\n\n    for layer in model.layers:\n        if layer not in layer_map:\n            layer_config = layer.get_config()\n            new_layer = layer.__class__.from_config(layer_config)\n            layer_map[layer] = new_layer\n\n    for node in model.nodes:\n        outbound_layer = node.outbound_layer\n\n        if outbound_layer not in layer_map:\n            layer_config = outbound_layer.get_config()\n            new_layer = outbound_layer.__class__.from_config(layer_config)\n            layer_map[outbound_layer] = new_layer\n\n    for node in model.nodes:\n        reference_input_tensors = node.input_tensors\n        reference_output_tensors = node.output_tensors\n        computed_data = []\n\n        for x in reference_input_tensors:\n            if x in tensor_map:\n                computed_data.append(tensor_map[x])\n\n        if len(computed_data) == len(reference_input_tensors):\n            layer = node.outbound_layer\n            kwargs = node.arguments if node.arguments else {}\n\n            if len(computed_data) == 1:\n                computed_tensor, _ = computed_data[0]\n                output_tensors = [layer(computed_tensor, **kwargs)]\n            else:\n                computed_tensors, _ = zip(*computed_data)\n                output_tensors = [layer(computed_tensors, **kwargs)]\n            \n            for x, y in zip(reference_output_tensors, output_tensors):\n                tensor_map[x] = (y, None)\n\n    model_output_tensors = []\n    for x in model.outputs:\n        assert x in tensor_map, 'Could not compute output ' + str(x)\n        tensor, _ = tensor_map[x]\n        model_output_tensors.append(tensor)\n\n    return Model(input_tensors, model_output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}