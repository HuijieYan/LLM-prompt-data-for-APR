{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}\n    tensor_map = {}\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.batch_input_shape, dtype=layer.dtype, sparse=layer.sparse, name=layer.name) for layer in model._input_layers]\n        layer_map = {orig: new for orig, new in zip(model._input_layers, input_tensors)}\n    else:\n        for i, tensor in enumerate(input_tensors):\n            if not K.is_keras_tensor(tensor):\n                name = model._input_layers[i].name\n                input_tensor = Input(tensor=tensor, name='input_wrapper_for_' + name)\n                input_tensors[i] = input_tensor\n                layer_map[model._input_layers[i]] = input_tensor\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)\n\n    for depth in sorted(model._nodes_by_depth.keys(), reverse=True):\n        for node in model._nodes_by_depth[depth]:\n            layer = node.outbound_layer\n            if layer not in layer_map:\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n\n            ref_input_tensors = node.input_tensors\n            ref_output_tensors = node.output_tensors\n\n            computed_data = []\n            for tensor in ref_input_tensors:\n                if tensor in tensor_map:\n                    computed_data.append(tensor_map[tensor])\n\n            if len(computed_data) == len(ref_input_tensors):\n                kwargs = node.arguments if node.arguments else {}\n                computed_tensors, computed_masks = zip(*computed_data) if computed_data else ([], [])\n                if 'mask' in kwargs and len(computed_tensors) == 1:\n                    kwargs['mask'] = computed_masks[0]\n                output_tensors = to_list(layer_map[layer](computed_tensors, **kwargs))\n                output_masks = to_list(layer_map[layer].compute_mask(computed_tensors, computed_masks))\n                for orig_tensor, new_tensor, mask in zip(ref_output_tensors, output_tensors, output_masks):\n                    tensor_map[orig_tensor] = (new_tensor, mask)\n\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}