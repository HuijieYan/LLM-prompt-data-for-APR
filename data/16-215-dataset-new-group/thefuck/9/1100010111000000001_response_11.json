{
    "thefuck": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 9,
            "start_line": 11,
            "file_name": "thefuck/rules/git_push.py",
            "replace_code": "def get_new_command(command):\n    script_parts = command.script_parts[:]\n    \n    # Remove --set-upstream or -u option and its argument\n    for option in ['--set-upstream', '-u']:\n        if option in script_parts:\n            index = script_parts.index(option)\n            if index + 1 < len(script_parts):\n                script_parts.pop(index)  # Remove the option\n                script_parts.pop(index)  # Remove the argument\n    \n    # Extract git push command from stderr\n    stderr_lines = command.stderr.split('\\n')\n    for line in stderr_lines[::-1]:  # Reverse search to find the last occurrence\n        if 'git push' in line:\n            push_command = line.split('git push', 1)[1].strip()\n            break\n    else:  # If no git push command is found in stderr\n        return \" \".join(command.script_parts)  # Return original command\n    \n    # Replace the argument in the script with the extracted git push command\n    return replace_argument(\" \".join(script_parts), 'push', push_command)",
            "import_list": []
        }
    ]
}