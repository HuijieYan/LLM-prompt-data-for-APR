{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n        required_params: List[ModelField],\n        received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    sequence_shapes = (params.ParamSubShape.LIST, params.ParamSubShape.SET, params.ParamSubShape.TUPLE)\n    sequence_types = (list, set, tuple)\n\n    for field in required_params:\n        field_info = get_field_info(field)\n        field_alias = field.alias\n        field_shape = field.shape\n\n        value: Any = None\n        if received_body is not None:\n            if field_shape in sequence_shapes and isinstance(received_body, FormData):\n                value = received_body.getlist(field_alias)\n            else:\n                value = received_body.get(field_alias)\n        \n        if value is None or (isinstance(field_info, params.Form) and value == \"\") or \\\n                (isinstance(field_info, params.Form) and field_shape in sequence_shapes and len(value) == 0):\n            if field.required:\n                if PYDANTIC_1:\n                    errors.append(\n                        ErrorWrapper(MissingError(), loc=(\"body\", field_alias))\n                    )\n                else:  # pragma: nocover\n                    errors.append(\n                        ErrorWrapper(  # type: ignore\n                            MissingError(),\n                            loc=(\"body\", field_alias),\n                            config=BaseConfig,\n                        )\n                    )\n            else:\n                field_default = field.get_default()\n                values[field_alias] = field_default\n            continue\n\n        if field_shape in sequence_shapes and isinstance(field_info, params.Form) and lenient_issubclass(field.type_, bytes):\n            if isinstance(value, UploadFile):\n                value = await value.read()\n            elif isinstance(value, sequence_types):\n                awaitables = [sub_value.read() for sub_value in value]\n                contents = await asyncio.gather(*awaitables)\n                value = sequence_shapes[field_shape](contents)\n        \n        v_, errors_ = field.validate(value, values, loc=(\"body\", field_alias))\n        if isinstance(errors_, ErrorWrapper):\n            errors.append(errors_)\n        elif isinstance(errors_, list):\n            errors.extend(errors_)\n        else:\n            values[field.name] = v_\n    \n    return values, errors",
            "import_list": []
        }
    ]
}