{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    repeat_values = {}\n    \n    # Iterate through the required params\n    for field in required_params:\n        # Initialize an empty list to accumulate values for repeated keys\n        repeat_values[field.alias] = []\n        \n    if received_body:\n        # Iterate through each key, value pair in the received body\n        for key, value in received_body.items():\n            if key in repeat_values:\n                # If the key is found in repeat_values dict, append the value to the list\n                repeat_values[key].append(value)\n        \n        # Iterate again through the required params to process the accumulated values\n        for field in required_params:\n            # Check if there are repeated values for the field alias\n            if repeat_values[field.alias]:\n                if field.shape in sequence_shapes and isinstance(\n                    received_body, FormData\n                ):\n                    # If it's a sequence shape, assign the list of values to the field alias\n                    value = repeat_values[field.alias]\n                else:\n                    # If not a sequence shape, assign the last value as the field alias\n                    value = repeat_values[field.alias][-1]\n            else:\n                # If no repeat values, assign value from the received body\n                value = received_body.get(field.alias)\n                \n            # Rest of the validation logic remains unchanged\n\n            # ...\n\n    return values, errors",
            "import_list": []
        }
    ]
}