{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n\n    for field in required_params:\n        field_info = get_field_info(field)\n        field_alias = field.alias\n        value = None\n\n        if received_body is not None:\n            if field.shape in sequence_shapes and isinstance(received_body, FormData):\n                value = received_body.getlist(field_alias)\n            else:\n                value = received_body.get(field_alias)\n\n        if value is None or (isinstance(field_info, params.Form) and value == \"\") \\\n                or (isinstance(field_info, params.FormEnum) and value == \"\"):\n            if field.required:\n                errors.append(\n                    ErrorWrapper(MissingError(), loc=(\"body\", field_alias))\n                )\n            else:\n                values[field.name] = deepcopy(field.default)\n            continue\n\n        if (\n            isinstance(field_info, params.File)\n            and lenient_issubclass(field.type_, bytes)\n            and isinstance(value, UploadFile)\n        ):\n            value = await value.read()\n        elif (\n            field.shape in sequence_shapes\n            and isinstance(field_info, params.File)\n            and lenient_issubclass(field.type_, bytes)\n            and isinstance(value, sequence_types)\n        ):\n            awaitables = [sub_value.read() for sub_value in value]\n            contents = await asyncio.gather(*awaitables)\n            value = sequence_shape_to_type[field.shape](contents)\n\n        v_, errors_ = field.validate(value, values, loc=(\"body\", field_alias))\n        if isinstance(errors_, ErrorWrapper):\n            errors.append(errors_)\n        elif isinstance(errors_, list):\n            errors.extend(errors_)\n        else:\n            values[field.name] = v_\n\n    return values, errors",
            "import_list": []
        }
    ]
}