{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params and received_body:\n        for field in required_params:\n            values[field.name] = None\n            if field.alias in received_body:\n                value = received_body.getlist(field.alias) if isinstance(received_body, FormData) else received_body[field.alias]\n                if isinstance(value, list) and not value:\n                    value = None\n                if value is not None:\n                    if isinstance(field, params.Form) and field.shape in sequence_shapes:\n                        values[field.name] = value\n                    else:\n                        if isinstance(field_info, params.File) and lenient_issubclass(field.type_, bytes) and all(isinstance(sub_value, UploadFile) for sub_value in value):\n                            value = [await sub_value.read() for sub_value in value]\n                        v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n                        if isinstance(errors_, ErrorWrapper):\n                            errors.append(errors_)\n                        elif isinstance(errors_, list):\n                            errors.extend(errors_)\n                        else:\n                            values[field.name] = v_\n                elif field.required:\n                    if PYDANTIC_1:\n                        errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias)))\n                    else:  # pragma: nocover\n                        errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias), config=BaseConfig))\n            elif field.required:\n                if PYDANTIC_1:\n                    errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias)))\n                else:  # pragma: nocover\n                    errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias), config=BaseConfig))\n    return values, errors",
            "import_list": []
        }
    ]
}