{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    fields_dict = {field.alias: field for field in required_params}\n    if received_body is not None:\n        for alias, value in received_body.multi_items():\n            if alias in fields_dict:\n                field = fields_dict[alias]\n                if field.shape in sequence_shapes:\n                    value = received_body.getlist(alias)\n                    if value:\n                        value = value if len(value) > 1 else value[0]\n                if isinstance(field_info, params.File) and lenient_issubclass(field.type_, bytes):\n                    if isinstance(value, UploadFile):\n                        value = await value.read()\n                    elif isinstance(value, sequence_types):\n                        awaitables = [sub_value.read() for sub_value in value]\n                        contents = await asyncio.gather(*awaitables)\n                        value = sequence_shape_to_type[field.shape](contents)\n                v_, errors_ = field.validate(value, values, loc=(\"body\", alias))\n                if isinstance(errors_, ErrorWrapper):\n                    errors.append(errors_)\n                elif isinstance(errors_, list):\n                    errors.extend(errors_)\n                else:\n                    values[field.name] = v_\n            else:\n                errors.append(ErrorWrapper(MissingError(), loc=(\"body\", alias)))\n                \n    for field in required_params:\n        if field.alias not in values:\n            if field.required:\n                errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias)))\n            else:\n                values[field.name] = deepcopy(field.default)\n    return values, errors",
            "import_list": []
        }
    ]
}