{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n\n    if isinstance(received_body, FormData):\n        # Collect repeated key=value pairs as a list\n        form_data = received_body\n        repeated_params = {}\n        for key, value in form_data.items():\n            if key in repeated_params:\n                if isinstance(repeated_params[key], list):\n                    repeated_params[key].append(value)\n                else:\n                    repeated_params[key] = [repeated_params[key], value]\n            else:\n                repeated_params[key] = value\n\n        # Update received body with collected repeated key=value pairs as lists\n        received_body = {}\n        for key, value in repeated_params.items():\n            if isinstance(value, list):\n                received_body[key] = value\n            else:\n                received_body[key] = value\n\n    for field in required_params:\n        value: Any = None\n        if received_body is not None:\n            if field.shape in sequence_shapes and isinstance(\n                    received_body, FormData):\n                value = received_body.getlist(field.alias)\n            else:\n                value = received_body.get(field.alias)\n        # ... (rest of the function logic remains the same)\n\n    return values, errors",
            "import_list": []
        }
    ]
}