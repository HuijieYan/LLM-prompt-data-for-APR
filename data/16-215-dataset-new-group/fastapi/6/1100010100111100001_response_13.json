{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        for field in required_params:\n            if received_body is not None:\n                field_name = field.alias\n                field_info = get_field_info(field)\n                value: Any = None\n                if field.shape == 1 and isinstance(received_body, FormData):\n                    value = received_body.getlist(field_name)\n                    if field.sub_fields:\n                        sub_field = field.sub_fields[0]\n                        sub_values = []\n                        for sub_value in value:\n                            v, e = sub_field.validate(sub_value, values, loc=(\"body\", field_name))\n                            values[field.name] = v\n                            errors.extend(e)\n                    else:\n                        if field.type_ in {list, set}:\n                            value = field_info.parse(value)\n                            values[field.name] = value\n                        elif lenient_issubclass(field.type_, str):\n                            value = ', '.join(value)\n                            values[field.name] = value\n                else:\n                    value = received_body.get(field_name)\n                    if (\n                        value is None\n                        or (isinstance(field_info, params.Form) and value == \"\")\n                        or (\n                            isinstance(field_info, params.Form)\n                            and field.shape in sequence_shapes\n                            and len(value) == 0\n                        )\n                    ):\n                        if field.required:\n                            if PYDANTIC_1:\n                                errors.append(\n                                    ErrorWrapper(MissingError(), loc=(\"body\", field_name))\n                                )\n                            else:  # pragma: nocover\n                                errors.append(\n                                    ErrorWrapper(  # type: ignore\n                                        MissingError(),\n                                        loc=(\"body\", field_name),\n                                        config=BaseConfig,\n                                    )\n                                )\n                        else:\n                            values[field.name] = deepcopy(field.default)\n                    else:\n                        if (\n                            isinstance(field_info, params.File)\n                            and lenient_issubclass(field.type_, bytes)\n                            and isinstance(value, UploadFile)\n                        ):\n                            value = await value.read()\n                        v_, errors_ = field.validate(value, values, loc=(\"body\", field_name))\n                        if isinstance(errors_, ErrorWrapper):\n                            errors.append(errors_)\n                        elif isinstance(errors_, list):\n                            errors.extend(errors_)\n                        else:\n                            values[field.name] = v_\n    return values, errors",
            "import_list": []
        }
    ]
}