{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        field_info_map = {field.alias: get_field_info(field) for field in required_params}\n        for field in required_params:\n            if field.alias in received_body:\n                field_info = field_info_map[field.alias]\n                value: Any = received_body[field.alias]\n                for k, v in field_info.__dict__.items():\n                    if k in [\"max_length\", \"min_length\"] and isinstance(v, int):\n                        val_len = len(value)\n                        if (\n                            k == \"max_length\" and val_len > v\n                        ) or (\n                            k == \"min_length\" and val_len < v\n                        ):\n                            err = ErrorWrapper(\n                                MissingError(),\n                                loc=(\"body\", field.alias),\n                            )\n                            errors.append(err)\n                            break\n\n                if isinstance(value, list) or isinstance(value, tuple):\n                    values[field.name] = value\n                elif isinstance(value, str):\n                    values[field.name] = Field.default_\n                else:\n                    err = ErrorWrapper(\n                        MissingError(),\n                        loc=(\"body\", field.alias),\n                    )\n                    errors.append(err)\n    return values, errors",
            "import_list": []
        }
    ]
}