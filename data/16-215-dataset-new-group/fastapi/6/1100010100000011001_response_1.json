{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    # remove the assignment of `received_body` inside the loop\n    if required_params and len(required_params) == 1 and not any(getattr(get_field_info(field), \"embed\", False) for field in required_params):\n        received_body = {required_params[0].alias: received_body}\n    \n    # move the rest of the code outside the condition and use a new variable name for the loop variable\n    for field in required_params:\n        field_info = get_field_info(field)\n        embed = getattr(field_info, \"embed\", None)\n        value: Any = None\n        if received_body is not None:\n            if field.shape in sequence_shapes and isinstance(received_body, FormData):\n                value = received_body.getlist(field.alias)\n            else:\n                value = received_body.get(field.alias)\n        if (value is None\n            or (isinstance(field_info, params.Form) and value == \"\")\n            or (isinstance(field_info, params.Form) and field.shape in sequence_shapes and len(value) == 0)):\n            if field.required:\n                if PYDANTIC_1:\n                    errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias)))\n                else:  # pragma: nocover\n                    errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias), config=BaseConfig))\n            else:\n                values[field.name] = deepcopy(field.default)\n            continue\n        if (isinstance(field_info, params.File) and lenient_issubclass(field.type_, bytes) and isinstance(value, UploadFile)):\n            value = await value.read()\n        elif (field.shape in sequence_shapes and isinstance(field_info, params.File) and lenient_issubclass(field.type_, bytes) and isinstance(value, sequence_types)):\n            awaitables = [sub_value.read() for sub_value in value]\n            contents = await asyncio.gather(*awaitables)\n            value = sequence_shape_to_type[field.shape](contents)\n        v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n        if isinstance(errors_, ErrorWrapper):\n            errors.append(errors_)\n        elif isinstance(errors_, list):\n            errors.extend(errors_)\n        else:\n            values[field.name] = v_\n    return values, errors",
            "import_list": []
        }
    ]
}