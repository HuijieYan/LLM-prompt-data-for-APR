{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        for field in required_params:\n            alias = field.alias\n            value = None\n            if received_body is not None:\n                if field.shape in sequence_shapes and isinstance(received_body, FormData):\n                    value = received_body.getlist(alias)\n                else:\n                    value = received_body.get(alias)\n            if value is not None:\n                if field.shape in sequence_shapes:\n                    v_list = []\n                    for sub_value in value:\n                        validate_result, validate_errors = field.validate(sub_value, values, loc=(\"body\", alias))\n                        if isinstance(validate_errors, ErrorWrapper):\n                            errors.append(validate_errors)\n                        elif isinstance(validate_errors, list):\n                            errors.extend(validate_errors)\n                        else:\n                            v_list.append(validate_result)\n                    values[field.name] = v_list\n                else:\n                    validate_result, validate_errors = field.validate(value, values, loc=(\"body\", alias))\n                    if isinstance(validate_errors, ErrorWrapper):\n                        errors.append(validate_errors)\n                    elif isinstance(validate_errors, list):\n                        errors.extend(validate_errors)\n                    else:\n                        values[field.name] = validate_result\n            elif field.required:\n                errors.append(ErrorWrapper(MissingError(), loc=(\"body\", alias)))\n            else:\n                values[field.name] = deepcopy(field.default)\n    return values, errors",
            "import_list": []
        }
    ]
}