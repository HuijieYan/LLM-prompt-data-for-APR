{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n\n    if received_body is None:\n        return values, errors\n\n    # Collect all values for the same key into a list\n    collected_data = {key: [item[1] for item in group] for key, group in groupby(received_body.items())}\n\n    for field in required_params:\n        field_info = get_field_info(field)\n        field_alias = field.alias\n        value = collected_data.get(field_alias)\n\n        if value is None or (isinstance(field_info, params.Form) and value == \"\") or (\n            isinstance(field_info, params.Form) and len(value) == 0\n        ):\n            if field.required:\n                if PYDANTIC_1:\n                    errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field_alias)))\n                else:\n                    errors.append(\n                        ErrorWrapper(\n                            MissingError(),\n                            loc=(\"body\", field_alias),\n                            config=BaseConfig,\n                        )\n                    )\n            else:\n                values[field.name] = deepcopy(field.default)\n            continue\n\n        if isinstance(field_info, params.File) and isinstance(value, list):\n            value = [await item.read() if isinstance(item, UploadFile) else item for item in value]\n\n        v_, errors_ = field.validate(value, values, loc=(\"body\", field_alias))\n        if isinstance(errors_, ErrorWrapper):\n            errors.append(errors_)\n        elif isinstance(errors_, list):\n            errors.extend(errors_)\n        else:\n            values[field.name] = v_\n\n    return values, errors",
            "import_list": [
                "import asyncio",
                "from copy import deepcopy",
                "from itertools import groupby",
                "from typing import Any, Dict, List, Tuple, Union",
                "from fastapi import params",
                "from fastapi.utils import PYDANTIC_1, get_field_info",
                "from pydantic import BaseModel",
                "from pydantic.error_wrappers import ErrorWrapper",
                "from pydantic.errors import MissingError",
                "from pydantic.fields import Field as ModelField",
                "from starlette.datastructures import FormData, UploadFile"
            ]
        }
    ]
}