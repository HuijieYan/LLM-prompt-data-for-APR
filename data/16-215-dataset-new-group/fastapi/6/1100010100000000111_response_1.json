{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n\n    for field in required_params:\n        value: Any = None\n        if received_body is not None:\n            if field.shape in sequence_shapes and isinstance(\n                received_body, FormData\n            ):\n                value = received_body.getlist(field.alias)\n            else:\n                value = received_body.getlist(field.alias)\n\n        if not value:\n            if field.required:\n                if PYDANTIC_1:\n                    errors.append(\n                        ErrorWrapper(MissingError(), loc=(\"body\", field.alias))\n                    )\n                else:  # pragma: nocover\n                    errors.append(\n                        ErrorWrapper(  # type: ignore\n                            MissingError(),\n                            loc=(\"body\", field.alias),\n                            config=BaseConfig,\n                        )\n                    )\n            else:\n                values[field.name] = deepcopy(field.default)\n        else:\n            if isinstance(field_info, params.File) and lenient_issubclass(field.type_, bytes):\n                value = [await v.read() if isinstance(v, UploadFile) else v for v in value]\n\n            v, err = field.validate(value, values, loc=(\"body\", field.alias))\n            if isinstance(err, ErrorWrapper):\n                errors.append(err)\n            elif isinstance(err, list):\n                errors.extend(err)\n            else:\n                values[field.name] = v\n\n    return values, errors",
            "import_list": []
        }
    ]
}