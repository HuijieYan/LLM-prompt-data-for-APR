{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n\n    if required_params:\n        field = required_params[0]\n        field_info = get_field_info(field)\n\n        if len(required_params) == 1 and not getattr(field_info, \"embed\", None):\n            received_body = {field.alias: received_body}\n\n        for field in required_params:\n            value: Any = None\n            \n            if received_body is not None:\n                if isinstance(received_body, FormData):\n                    value = received_body.getlist(field.alias) if field.shape in sequence_shapes else received_body.get(field.alias)\n            \n            if value is None or (isinstance(field_info, params.Form) and isinstance(value, str) and value == \"\") or (isinstance(field_info, params.Form) and field.shape in sequence_shapes and len(value) == 0):\n                if field.required:\n                    error_type = ListError if isinstance(field.type_, list) else (SetError if isinstance(field.type_, set) else TupleError)\n                    errors.append(ErrorWrapper(error_type(), loc=(\"body\", field.alias)))\n                else:\n                    values[field.name] = deepcopy(field.default)\n            else:\n                if field.shape in sequence_shapes and lenient_issubclass(field.type_, bytes) and isinstance(value, sequence_types):\n                    awaitables = [sub_value.read() for sub_value in value]\n                    contents = await asyncio.gather(*awaitables)\n                    value = sequence_shape_to_type[field.shape](contents)\n                v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n                \n                if isinstance(errors_, ErrorWrapper):\n                    errors.append(errors_)\n                elif isinstance(errors_, list):\n                    errors.extend(errors_)\n                else:\n                    values[field.name] = v_\n\n    return values, errors",
            "import_list": []
        }
    ]
}