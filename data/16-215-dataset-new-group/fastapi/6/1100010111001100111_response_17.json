{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n\n    # Process repeated keys with the same name\n    for field in required_params:\n        value: Any = None\n        values[field.name] = None\n\n        if received_body is not None:\n            if isinstance(received_body, FormData):\n                if field.alias in received_body:\n                    value = received_body.getlist(field.alias)\n                    values[field.name] = value\n\n        if values[field.name] is None:\n            if field.required:\n                if PYDANTIC_1:\n                    errors.append(\n                        ErrorWrapper(MissingError(), loc=(\"body\", field.alias))\n                    )\n                else:  # pragma: nocover\n                    errors.append(\n                        ErrorWrapper(  # type: ignore\n                            MissingError(), loc=(\"body\", field.alias), config=BaseConfig\n                        )\n                    )\n            else:\n                values[field.name] = deepcopy(field.default)\n        else:\n            if field.sub_fields:\n                for sub_field in field.sub_fields:\n                    sub_values, sub_errors = await request_body_to_args(\n                        sub_field, received_body\n                    )\n                    values.update(sub_values)\n                    errors.extend(sub_errors)\n            else:\n                v_, errors_ = field.validate(\n                    values[field.name], values, loc=(\"body\", field.alias)\n                )\n                if isinstance(errors_, ErrorWrapper):\n                    errors.append(errors_)\n                elif isinstance(errors_, list):\n                    errors.extend(errors_)\n\n    return values, errors",
            "import_list": []
        }
    ]
}