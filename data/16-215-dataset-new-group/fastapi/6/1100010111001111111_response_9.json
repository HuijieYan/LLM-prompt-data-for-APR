{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    for field in required_params:\n        if received_body is not None:\n            value: Any = received_body.getlist(field.alias) if field.shape in [1, 3] else received_body.get(field.alias)\n            if value is None or value == \"\" or (field.shape in [1, 3] and len(value) == 0):\n                if field.required:\n                    errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias)))\n                else:\n                    values[field.name] = deepcopy(field.default)\n            else:\n                if field.shape in [2, 3] and hasattr(field.type_, \"__origin__\") and field.type_.__origin__ in (List, set, tuple):\n                    value = [value] if field.shape == 2 else value\n                elif (\n                    isinstance(field.default, UploadFile) and lenient_issubclass(field.type_, bytes)\n                    and isinstance(value, UploadFile)\n                ):\n                    value = await value.read()\n                elif (\n                    field.shape in [2, 3] and isinstance(value, (list, set, tuple))\n                    and all(isinstance(v, UploadFile) for v in value)\n                ):\n                    awaitables = [sub_value.read() for sub_value in value]\n                    contents = await asyncio.gather(*awaitables)\n                    value = field.type_(contents)\n                if (v := field.validate(value, values, loc=(\"body\", field.alias))) is not None:\n                    if isinstance(v, ErrorWrapper):\n                        errors.append(v)\n                    else:\n                        values[field.name] = v\n    return values, errors",
            "import_list": [
                "from fastapi.datastructures import UploadFile",
                "from fastapi.params import File, Form",
                "from pydantic.error_wrappers import ErrorWrapper",
                "from pydantic.fields import ModelField",
                "from pydantic.main import BaseConfig",
                "from starlette.datastructures import FormData",
                "from typing import Any, Dict, List, Tuple, Union",
                "import asyncio",
                "from copy import deepcopy"
            ]
        }
    ]
}