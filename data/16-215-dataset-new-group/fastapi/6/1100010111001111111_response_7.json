{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    \n    if received_body:\n        body_values: Dict[str, Union[List, Set, Tuple]] = {}\n        for field in required_params:\n            if field.alias in received_body:\n                value = received_body.getlist(field.alias)\n                if len(value) > 1:\n                    if (\n                        field.shape in sequence_shapes\n                        and isinstance(field_info, params.Form)\n                    ):\n                        body_values[field.alias] = set(value) if field.shape == 2 else tuple(value)\n                    else:\n                        body_values[field.alias] = value\n                else:\n                    body_values[field.alias] = value[0]\n\n        for field in required_params:\n            if field.alias in body_values:\n                value = body_values[field.alias]\n                if (\n                    isinstance(field_info, params.File)\n                    and lenient_issubclass(field.type_, bytes)\n                    and isinstance(value, UploadFile)\n                ):\n                    value = await value.read()\n                elif (\n                    field.shape in sequence_shapes\n                    and isinstance(field_info, params.File)\n                    and lenient_issubclass(field.type_, bytes)\n                    and isinstance(value, sequence_types)\n                ):\n                    awaitables = [sub_value.read() for sub_value in value]\n                    contents = await asyncio.gather(*awaitables)\n                    value = sequence_shape_to_type[field.shape](contents)\n                v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n                if isinstance(errors_, ErrorWrapper):\n                    errors.append(errors_)\n                elif isinstance(errors_, list):\n                    errors.extend(errors_)\n                else:\n                    values[field.name] = v_\n            elif field.required:\n                errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias)))\n\n    return values, errors",
            "import_list": []
        }
    ]
}