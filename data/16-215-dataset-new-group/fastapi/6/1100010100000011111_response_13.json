{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n\n    if required_params and received_body:\n        for field in required_params:\n            values[field.name] = received_body.get(field.alias)\n\n            if values[field.name] is not None:\n                # If the value is a list, convert it to a single value or validate each item separately\n                if field.shape in [List, Tuple] and isinstance(values[field.name], list):\n                    if field.sub_fields:\n                        for i, item in enumerate(values[field.name]):\n                            v_, errors_ = field.validate(item, values, loc=(\"body\", field.alias, i))\n                            if isinstance(errors_, ErrorWrapper):\n                                errors.append(errors_)\n                            elif isinstance(errors_, list):\n                                errors.extend(errors_)\n                            else:\n                                values[field.name][i] = v_\n                    else:\n                        if len(field.sub_fields) == 1:\n                            sub_field = field.sub_fields[0]\n                            awaitables = [sub_field.validate(item, values, loc=(\"body\", field.alias, i)) for i, item in enumerate(values[field.name])]\n                            validations = await asyncio.gather(*awaitables)\n                            errors.extend([err for val, err in validations])\n                            values[field.name] = [val for val, err in validations]\n\n                else:\n                    v_, errors_ = field.validate(values[field.name], values, loc=(\"body\", field.alias))\n                    if isinstance(errors_, ErrorWrapper):\n                        errors.append(errors_)\n                    elif isinstance(errors_, list):\n                        errors.extend(errors_)\n                    else:\n                        values[field.name] = v_\n            else:\n                if field.required:\n                    errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias)))\n\n    return values, errors",
            "import_list": []
        }
    ]
}