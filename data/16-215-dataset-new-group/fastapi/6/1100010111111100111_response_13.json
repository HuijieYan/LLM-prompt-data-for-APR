{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n        required_params: List[ModelField],\n        received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]\n]:\n    values = {}\n    errors = []\n\n    if required_params:\n        field = required_params[0]\n        field_info = get_field_info(field)\n        embed = getattr(field_info, \"embed\", None)\n        field_aliases = [field.alias for field in required_params]\n        received_body_dict = dict(received_body.items()) if isinstance(received_body, FormData) else received_body\n\n        for field in required_params:\n            alias = field.alias\n            if alias in received_body_dict:\n                value = received_body_dict[alias]\n                \n                # Handle repeated keys\n                if field.shape in sequence_shapes and isinstance(value, list):\n                    values[field.name] = value\n                else:\n                    values[field.name] = value\n\n            else:\n                if field.required:\n                    errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias)))\n                else:\n                    values[field.name] = deepcopy(field.default)\n\n    return values, errors",
            "import_list": [
                "from fastapi.dependencies.utils import get_field_info",
                "from pydantic import params, sequence_shapes",
                "from pydantic.error_wrappers import ErrorWrapper",
                "from pydantic.fields import Field as ModelField",
                "from fastapi.datastructures import FormData",
                "from typing import Any, Dict, List, Optional, Tuple, Union",
                "import asyncio",
                "from copy import deepcopy"
            ]
        }
    ]
}