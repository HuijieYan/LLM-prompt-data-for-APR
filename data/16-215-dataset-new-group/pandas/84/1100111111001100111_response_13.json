{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    if isinstance(data, Series):\n        unstacked = data.unstack(level=clocs)\n        new_columns = unstacked.columns\n    else:\n        unstacked = data.unstack(level=clocs, fill_value=fill_value)\n        new_columns = unstacked.columns\n\n    # Update levels, codes and names based on the unstacked result\n    levels, codes, names = [], [], []\n    for idx, col in unstacked.columns.levels[1:]:\n        cols = list(unstacked.columns.get_level_values(0))\n        idx_val = unstacked.columns.get_loc((clocs[0], idx))\n        codes.append(unstacked.columns.labels[1][idx_val])\n        names.append(unstacked.columns.names[1])\n        levels.append(cols[idx_val])\n\n    new_levels = [index.levels[i] for i in rlocs] + levels\n    new_codes = [index.codes[i] for i in rlocs] + codes\n    new_names = [index.names[i] for i in rlocs] + names\n\n    new_index = MultiIndex(\n        levels=new_levels,\n        codes=new_codes,\n        names=new_names,\n        verify_integrity=False\n    )\n\n    unstacked.index = new_index\n\n    return unstacked",
            "import_list": []
        }
    ]
}