{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    clevels = [index.levels[i] for i in clocs]\n    ccodes = [index.codes[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    rlocs = list(set(range(index.nlevels)) - set(clocs))\n\n    if len(rlocs) == 0:\n        obs_ids = np.arange(index.nunique())\n    else:\n        shape = [len(x) for x in index.levels[rlocs]]\n\n        cobs = decons_obs_group_ids(compress_group_index(ccodes, shape, xnull=False), index.codes[rlocs], shape, xnull=False)\n\n        obs_ids = cobs[1]\n\n    if not isinstance(data, Series):\n        dummy = compat.copy(data)\n\n    dummy.index = MultiIndex(labels=dummy.index._reindex_for_asfreq(obs_ids), levels=index.levels[rlocs] + [obs_ids], names=index.names[rlocs] + [\"__placeholder__\"])\n\n    if isinstance(data, Series):\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n    else:\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value).swaplevel(i=-2, j=-1)\n\n    levels = index.levels[clocs] + [unstacked.index.levels[-1]]\n\n    columns = MultiIndex(levels=levels, codes=None, names=index.names.take(clocs) + [\"__placeholder__\"])\n\n    if isinstance(unstacked, Series):\n        unstacked.index = columns\n    else:\n        unstacked.columns = columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}