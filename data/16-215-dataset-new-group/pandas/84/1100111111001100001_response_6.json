{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    cloc_indices = [index._get_level_number(i) for i in clocs]\n\n    rloc_indices = [i for i in range(index.nlevels) if i not in cloc_indices]\n\n    clevels = [index.levels[i] for i in cloc_indices]\n    ccodes = [index.codes[i] for i in cloc_indices]\n    cnames = [index.names[i] for i in cloc_indices]\n    rlevels = [index.levels[i] for i in rloc_indices]\n    rcodes = [index.codes[i] for i in rloc_indices]\n    rnames = [index.names[i] for i in rloc_indices]\n\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n    \n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    \n    if rloc_indices == []:\n        # If all levels are in clocs, use regular index\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(\n            levels=rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=rnames + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n    else:\n        # If columns are MultiIndex, apply unstack iteratively\n        result = data\n        for i in range(len(cloc_indices)):\n            val = cloc_indices[i]\n            result = result.unstack(val, fill_value=fill_value)\n            cloc_indices = [v if i > v else v - 1 for v in cloc_indices]\n\n        return result\n\n    # Reconstruct the MultiIndex based on the unstacked data\n    new_columns = MultiIndex.from_product([clevels[0], unstacked.columns], names=cnames + unstacked.columns.names)\n    unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}