{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    # Transform the clocs into a list of level numbers\n    # The original code is incorrect and returns a level number instead of a list, which causes issues in the subsequent code blocks\n    clocs = [index._get_level_number(name) for name in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    if rlocs == []:\n        # Everything is in clocs, so the dummy df has a regular index\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        # Construct a MultiIndex for dummy_index including elements from rlocs\n        # The original method of constructing dummy_index is incorrect and causes issues with multi-level columns\n        # Construct a MultiIndex including elements from rlocs and repurpose for summary index for levels from clocs\n        dummy_index = MultiIndex(\n            levels=[\n                index.levels[i] for i in rlocs\n            ] + [obs_ids],\n            codes=[index.codes[i] for i in rlocs] + [comp_ids],\n            names=[index.names[i] for i in rlocs] + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    # Copy the data frame and update index to dummy_index\n    dummy = data.copy()\n    dummy.index = dummy_index\n\n    # Unstack the dummy using \"__placeholder__\" as the unstacking level\n    unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\n    return unstacked",
            "import_list": []
        }
    ]
}