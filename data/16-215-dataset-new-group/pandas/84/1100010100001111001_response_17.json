{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    levels = [index.levels[index._get_level_number(i)] for i in clocs]\n    codes = [index.codes[index._get_level_number(i)] for i in clocs]\n    names = [index.names[index._get_level_number(i)] for i in clocs]\n\n    shape = [len(x) for x in levels]\n    group_index = get_group_index(codes, shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n\n    if len(levels) == 1:\n        # Two index level categorizations\n        dummy_index = MultiIndex(\n            levels=[obs_ids, levels[0]],\n            codes=[comp_ids, codes[0]],\n            names=['__placeholder__', names[0]],\n            verify_integrity=False,\n        )\n    else:\n        # Three index level categorizations\n        rlocs = [i for i in range(index.nlevels) if i not in [index._get_level_number(i) for i in clocs]]\n        rlevels = [index.levels[i] for i in rlocs]\n        rcodes = [index.codes[i] for i in rlocs]\n        rnames = [index.names[i] for i in rlocs]\n\n        dummy_index = MultiIndex(\n            levels=rlevels + [obs_ids, levels[index._get_level_number(clocs[0])]],\n            codes=rcodes + [comp_ids, codes[index._get_level_number(clocs[0])]],\n            names=rnames + ['__placeholder__', names[index._get_level_number(clocs[0])]],\n            verify_integrity=False,\n        )\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack('__placeholder__', fill_value=fill_value)\n        new_levels = levels\n        new_names = names\n        new_codes = codes + [recons_codes[0]]\n    else:\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack('__placeholder__', fill_value=fill_value)\n        unstcols = unstacked.index\n        new_levels = [unstcols.levels[-1]] + levels\n        new_names = [None] + names\n        new_codes = [unstcols.codes[-1]]\n        for rec in recons_codes:\n            new_codes.append(rec.take(unstcols.codes[-1]))\n\n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}