{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # Retrieve the index information\n    index = data.index\n\n    # Get the level numbers for the selected columns\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    # Define the column levels and codes\n    clevels = [index.levels[i] for i in clocs]\n    ccodes = [index.codes[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n\n    # Define the remaining row levels and codes\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    # Perform the grouping of the column index\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    # Create the dummy index for unstacking\n    if rlocs == []:\n        # If everything is in clocs, the dummy df has a regular index\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n       # If there are remaining row levels, create a MultiIndex\n        dummy_index = MultiIndex(\n            levels=rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=rnames + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    # Copy the data and set the new index\n    dummy = data.copy()\n    dummy.index = dummy_index\n\n    # Unstack the dummy dataframe, set new levels, names, and codes\n    unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\n    if isinstance(data, Series):\n        new_levels = clevels\n        new_names = cnames\n        new_codes = recons_codes\n    else:\n        new_levels = [unstacked.columns.levels[-1]] + clevels\n        new_names = [data.columns.name] + cnames\n        new_codes = [unstacked.columns.codes[-1]]\n        for rec in recons_codes:\n            new_codes.append(rec.take(unstacked.columns.codes[-1]))\n\n    # Create the new column MultiIndex\n    new_columns = MultiIndex(\n        levels=new_levels,\n        codes=new_codes,\n        names=new_names,\n        verify_integrity=False\n    )\n\n    # Update the unstacked DataFrame with the new columns\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}