{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n    \n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n    clevels = [index.get_level_values(i) for i in clocs]\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n    rlevels = [index.get_level_values(i) for i in rlocs]\n    cnames = [index.names[i] for i in clocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index([clev.codes for clev in clevels], shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, [clev.codes for clev in clevels], xnull=False)\n\n    if rlocs == []:\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex.from_arrays(rlevels + [obs_ids], names=rnames + [\"__placeholder__\"], verify_integrity=False)\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = clevels\n        new_names = cnames\n        new_codes = recons_codes\n    else:\n        result = data\n        if isinstance(result.columns, MultiIndex):\n            for idx, val in enumerate(clocs):\n                result = result.unstack(level=val, fill_value=fill_value)\n        else:\n            dummy = data.copy()\n            dummy.index = dummy_index\n            unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n            unstcols = unstacked.index if isinstance(unstacked, Series) else unstacked.columns\n            new_levels = (unstcols.levels[0],) + tuple(clevels)\n            new_names = (data.columns.name,) + tuple(cnames)\n            new_codes = (unstcols.codes[0],) + recons_codes\n\n        new_columns = MultiIndex.from_arrays(new_levels, names=new_names, verify_integrity=False)\n        if isinstance(unstacked, Series):\n            unstacked.index = new_columns\n        else:\n            unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}