{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # Find the levels and respective index from which to unstack\n    index = data.index\n\n    if isinstance(clocs, tuple):  # If clocs contains multiple levels\n        cloc_level_numbers = [index._get_level_number(i) for i in clocs]\n        rloc_level_numbers = [i for i in range(index.nlevels) if i not in cloc_level_numbers]\n\n        # Handling if there is only one column remaining after clocs are removed\n        cloc_i = cloc_level_numbers[0]\n        result = data\n        while len(result.columns) > 1:\n            result = result.unstack(clocs[cloc_i], fill_value=fill_value)\n            cloc_level_numbers = [v if cloc_i > v else v - 1 for v in cloc_level_numbers]\n\n    else:  # If clocs contains a single level\n        cloc_level_number = index._get_level_number(clocs)\n        rloc_level_numbers = [i for i in range(index.nlevels) if i != cloc_level_number]\n        result = data.unstack(clocs, fill_value=fill_value)\n\n    return result",
            "import_list": []
        }
    ]
}