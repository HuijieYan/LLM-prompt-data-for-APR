{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # extract the index from the data\n    index = data.index\n\n    # identify the level numbers for the column locations\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    # obtain the remaining (row) locations\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    # separate levels, codes, and names for both column and row locations\n    clevels = [index.levels[i] for i in clocs]\n    ccodes = [index.codes[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    # define the shape based on the levels of the column locations\n    shape = [len(x) for x in clevels]\n\n    # use get_compressed_ids to get the group index\n    group_index = get_group_index(ccodes, shape, sort=False)\n\n    # compress the group index to get comp_ids and obs_ids\n    comp_ids, obs_ids = get_compressed_ids(group_index, sort=False)\n\n    # deconstruct the compressed ids to get the recons_codes\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes)\n\n    if not rlocs:\n        # if there are no remaining locations, create a regular index\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        # create a MultiIndex with row locations and compressed ids\n        dummy_index = MultiIndex(\n            levels=rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=rnames + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    # unstack the data based on the type of input (Series or DataFrame)\n    # and handle hierarchical columns appropriately\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n    else:\n        if isinstance(data.columns, MultiIndex):\n            unstacked = data.unstack(clocs, fill_value=fill_value)\n        else:\n            dummy = data.copy()\n            dummy.index = dummy_index\n            unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\n    return unstacked",
            "import_list": []
        }
    ]
}