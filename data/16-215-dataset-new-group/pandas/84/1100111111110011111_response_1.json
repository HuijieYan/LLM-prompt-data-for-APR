{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n    index = data.index\n    if clocs:\n        clocs = [index._get_level_number(i) if not isinstance(i, int) else i for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    if len(clocs) == 0:\n        # Everything is in rlocs, unstack is not needed\n        return data\n    elif len(clocs) == 1:\n        unstacked = data.unstack(clocs[0], fill_value=fill_value)\n        if isinstance(unstacked, Series):\n            unstacked.index = MultiIndex.from_tuples(\n                [(clocs[0], unstacked.index)],\n                names=[tuple(index.names[i] for i in rlocs)] + [index.names[clocs[0]]]\n            )\n        else:\n            unstacked.columns = MultiIndex.from_tuples(\n                [(clocs[0], c) for c in unstacked.columns],\n                names=[index.names[clocs[0]]] + [tuple(index.names[i] for i in rlocs)]\n            )\n    else:\n        # MultiIndex unstack\n        from itertools import product\n        unstacked_data = {}\n        stacked_index = data.index\n        rest_index = Index([stacked_index.levels[i] for i in rlocs])\n        new_index_arrays = [combinations for combinations in product(*[data.index.levels[i] for i in rlocs])]\n        for combinations in new_index_arrays:\n            unstacked_data[combinations] = data.loc[combinations].unstack(clocs)\n        new_index = MultiIndex.from_tuples(new_index_arrays, names=[tuple(index.names[i] for i in rlocs)])\n        # Construct a big DataFrame with new_index\n        unstacked = DataFrame(unstacked_data, index=new_index)\n    return unstacked",
            "import_list": [
                "from itertools import product"
            ]
        }
    ]
}