{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # Obtain the index from the data\n    index = data.index\n\n    # Get the level numbers for clocs\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    # Determine the remaining levels for rlocs\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    # Handle the case where clocs contain all levels\n    if not rlocs:\n        dummy_index = index.copy()\n    else:\n        # Construct the dummy index\n        dummy_index = MultiIndex.from_tuples(index, names=[index.names[i] for i in rlocs] + [\"__placeholder__\"])\n\n    # Unstack the data\n    unstacked = data.unstack(clocs, fill_value=fill_value)\n\n    if isinstance(data, Series):\n        new_columns = MultiIndex.from_tuples(unstacked.columns)\n        unstacked.columns = new_columns\n    else:\n        new_columns = MultiIndex.from_tuples(unstacked.columns, names=[index.names[i] for i in rlocs] + [index.names[i] for i in clocs])\n\n    unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}