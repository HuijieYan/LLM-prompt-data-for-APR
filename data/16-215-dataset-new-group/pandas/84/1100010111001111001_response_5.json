{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    new_names = list(index.names)\n    new_levels = [index.levels[i] for i in rlocs]\n    new_codes = [index.codes[i] for i in rlocs]\n\n    # For each level in clocs, perform unstack\n    for level in clocs:\n        clevels = index.levels[level]\n        ccodes = index.codes[level]\n\n        for rloc in rlocs:\n            new_levels.append(index.levels[rloc])\n            new_codes.append(index.codes[rloc])\n            new_names.append(index.names[rloc])\n\n        # Create the unstacked DataFrame\n        unstacked = data.unstack(level, fill_value=fill_value)\n\n        # If the unstacked object is a Series, convert it to a DataFrame\n        if isinstance(unstacked, pd.Series):\n            unstacked = unstacked.to_frame()\n\n        # Reconstruct the index after unstacking\n        new_index = pd.MultiIndex(\n            levels=new_levels,\n            codes=new_codes,\n            names=new_names,\n            verify_integrity=False\n        )\n\n        # Set the new index for the unstacked DataFrame\n        unstacked.index = new_index\n\n        # Modify the levels, names, and codes for the subsequent unstacking\n        new_levels = [unstacked.index.levels[i] for i in range(len(clocs))]\n        new_codes = [unstacked.index.codes[i] for i in range(len(clocs))]\n        new_names = list(unstacked.index.names)\n\n    return unstacked",
            "import_list": []
        }
    ]
}