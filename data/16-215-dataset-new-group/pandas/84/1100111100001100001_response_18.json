{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # Deal with both hierarchical and non-hierarchical columns\n    if isinstance(data.columns, MultiIndex):\n        result = data\n        for i in range(len(clocs)):\n            val = clocs[i]\n            result = result.unstack(val, fill_value=fill_value)\n            clocs = [v if i > v else v - 1 for v in clocs]\n\n        return result\n\n    # Splitting the rest of the logic based on the type of input data\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy.index.remove_unused_levels()\n\n        unstacked = dummy.unstack(clocs, fill_value=fill_value)\n        new_levels = dummy.index.levels + [clocs]\n        new_names = list(dummy.index.names) + [None]\n        new_codes = dummy.index.codes + [unstacked.index.codes[-1]]\n    else:\n        dummy = data.copy()\n        dummy.index = dummy.index.remove_unused_levels()\n\n        unstacked = dummy.unstack(clocs, fill_value=fill_value)\n        new_levels = dummy.index.levels + [unstacked.index.levels[-1]]\n        new_names = list(dummy.index.names) + [None]\n        new_codes = dummy.index.codes + [unstacked.index.codes[-1]]\n\n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n    \n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}