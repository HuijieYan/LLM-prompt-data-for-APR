{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    clevels = [index.levels[i] for i in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index([index.codes[i] for i in clocs], shape)\n\n    comp_ids, obs_ids = compress_group_index(group_index)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, [index.codes[i] for i in clocs])\n\n    ix = Index(obs_ids, name=\"__placeholder__\")\n    idx = rlevels[0].append([ix])\n\n    arr = [], []\n\n    for level, name in zip(clocs, index.names):\n        arr.append(index.levels[level])\n        arr.append(recons_codes.pop(0))\n\n    arr.append(idx)\n    arr.append(index)\n\n    new_columns = pd.MultiIndex.from_product(arr, names=[*data.columns.names[:-1], \"__placeholder__\"])\n\n    unstacked = data.values.reshape(-1, order=\"F\").reshape(-1, len(obs_ids)).T\n    if isinstance(data, Series):\n        unstacked = Series(unstacked.ravel(), index=new_columns).unstack(\"__placeholder__\", fill_value=fill_value)\n    else:\n        unstacked = DataFrame(unstacked, index=data.index, columns=new_columns).unstack(\"__placeholder__\",\n                                                                                         fill_value=fill_value)\n    return unstacked",
            "import_list": []
        }
    ]
}