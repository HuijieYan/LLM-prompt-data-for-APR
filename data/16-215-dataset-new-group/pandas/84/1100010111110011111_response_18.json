{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    # If all locations are empty but one is all, just unstack without\n    # checking the levels\n    if len(clocs) == index.nlevels and all(index.get_level_values(i).nunique() == 1 for i in clocs):\n        return data._unstack_fast(clocs=clocs, fill_value=fill_value)\n\n    column_unstacks = [l for l in clocs if not isinstance(l, int)]\n    if column_unstacks:  # pragma: no cover\n        raise TypeError(f\"Unsupported unstack type: {column_unstacks}\")\n\n    emits = data._unstack_to_simple(clocs, fill_value)\n\n    levels, labels = get_level_values(emits, index, level=clocs)\n\n    erecons, eobs_ids = nlevels, get_recons_and_obs_ids(emits, index, egroups_labels)\n\n    if data.ndim == 1:\n        return Series(erecons, index=MultiIndex(levels, erecons, names=index[level].names))\n    else:\n        return DataFrame(erecons, index=MultiIndex(levels, erecons, names=index[level].names))",
            "import_list": []
        }
    ]
}