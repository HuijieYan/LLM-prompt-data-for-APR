{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n    cnames = [cloc[0] if isinstance(cloc, tuple) else cloc for cloc in clocs]\n\n    if len(cnames) == 1:\n        clocs = [index._get_level_number(cnames[0])]\n    elif len(cnames) == 2:\n        clocs = [index._get_level_number(cnames[0]), index._get_level_number(cnames[1])]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    if len(cnames) == 2:\n        shape = [len(index.levels[clocs[0]]), len(index.levels[clocs[1]])]\n        group_index = get_group_index([index.codes[i] for i in clocs], shape, sort=False, xnull=False)\n\n        comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n        recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, [index.codes[i] for i in clocs], xnull=False)\n\n        if rlocs == []:\n            # Everything is in clocs, so the dummy df has a regular index\n            dummy_index = Index(obs_ids, name=\"__placeholder__\")\n        else:\n            levels_rlocs = [index.levels[i] for i in rlocs]\n            codes_rlocs = [index.codes[i] for i in rlocs]\n            names_rlocs = [index.names[i] for i in rlocs]\n\n            dummy_index = MultiIndex(\n                levels=levels_rlocs + [obs_ids],\n                codes=codes_rlocs + [comp_ids],\n                names=names_rlocs + [\"__placeholder__\"],\n                verify_integrity=False\n            )\n\n        # Truncated for brevity\n\n    return unstacked",
            "import_list": []
        }
    ]
}