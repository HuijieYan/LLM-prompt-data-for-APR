{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    clocs = [i if isinstance(i, (list, tuple)) else [i] for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in [x for sublist in clocs for x in sublist]]\n\n    clevels = [index.get_level_values(i).unique() for i in clocs]\n    rlevels = [index.get_level_values(i).unique() for i in rlocs]\n\n    rewound_cols = []\n    for i in range(len(clocs)):\n        unwound_cols = data.unstack(clocs[i], fill_value=fill_value)\n        rewound_cols.append(unwound_cols)\n\n    result = rewound_cols[0]\n    for i in range(1, len(clocs)):\n        result = result.unstack(clocs[i], fill_value=fill_value)\n\n    rewound_index = index.remove_unused_levels()\n    new_index = rewound_index.reorder_levels(rlocs + clocs)\n\n    result.index = new_index\n\n    return result",
            "import_list": []
        }
    ]
}