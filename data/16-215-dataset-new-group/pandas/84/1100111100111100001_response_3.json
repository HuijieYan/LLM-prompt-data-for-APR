{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    clevels = [index.levels[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    group_index = get_group_index(index.codes, shape=[len(x) for x in clevels], sort=False, xnull=False)\n\n    comp_ids, obs_ids, _ = get_compressed_ids(group_index, shape=[len(x) for x in clevels], compress=True, sort=False)\n\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape=[len(x) for x in clevels], orig_codes=index.codes, compress=True, sort=False)\n\n    # Create the dummy index\n    dummy_index = MultiIndex(levels=rlevels + [obs_ids], codes=rlocs + [comp_ids], names=rnames + [\"__placeholder__\"], verify_integrity=False)\n\n    # Store original columns and index\n    original_columns = data.columns\n    original_index = data.index\n\n    # Resetting the index to the dummy index for unstacking\n    data = data.set_index(dummy_index)\n\n    # Unstacking\n    unstacked = data.unstack(\"__placeholder__\", fill_value=fill_value)\n\n    # Regathering new levels, codes, and names\n    new_levels = clevels + [unstacked.columns.levels[-1]]\n    new_names = cnames + [None]\n    new_codes = recons_codes + [unstacked.columns.codes[-1]]\n\n    # Creating the new MultiIndex columns\n    new_columns = MultiIndex(levels=new_levels, codes=new_codes, names=new_names)\n\n    # Assigning the new MultiIndex columns back to the unstacked dataframe\n    unstacked.columns = new_columns\n\n    # Resetting the index back to the original index\n    unstacked.index = original_index\n\n    return unstacked",
            "import_list": []
        }
    ]
}