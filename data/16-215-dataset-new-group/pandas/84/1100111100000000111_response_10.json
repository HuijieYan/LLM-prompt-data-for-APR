{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, level, fill_value=None):\n    if len(level) == 0:\n        return data\n\n    index = data.index\n\n    columns_level = [index._get_level_number(i) for i in level]\n    columns_labels = sorted(set(range(index.nlevels)) - set(columns_level))\n    rows_level = [index._get_level_number(i) for i in columns_labels]\n    \n    comp_ids, obs_ids = get_compressed_ids(index.get_level_values(level[0]))\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, [len(set(index.get_level_values(i))) for i in columns_level], index.codes, xnull=False)\n    \n    if not rows_level:\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(\n            levels=index.levels[rows_level] + [obs_ids],\n            codes=[index.codes[i] for i in rows_level] + [comp_ids],\n            names=[index.names[i] for i in rows_level] + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        result = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n    else:\n        if isinstance(data.columns, MultiIndex):\n            result = data\n            for i in range(len(level)):\n                val = level[i]\n                result = result.unstack(val, fill_value=fill_value)\n        else:\n            dummy = data.copy()\n            dummy.index = dummy_index\n\n            result = dummy.unstack(level[-1], fill_value=fill_value)\n            if isinstance(result, Series):\n                new_columns = MultiIndex(\n                    levels=[result.index.levels[0]] + [index.levels[i] for i in columns_level],\n                    codes=[result.index.codes[0]] + recons_codes,\n                    names=[data.columns.name] + [index.names[i] for i in columns_level],\n                    verify_integrity=False\n                )\n                result.index = new_columns\n            else:\n                new_columns = MultiIndex(\n                    levels=[result.columns.levels[0]] + [index.levels[i] for i in columns_level],\n                    codes=[result.columns.codes[0]] + recons_codes,\n                    names=[data.columns.name] + [index.names[i] for i in columns_level],\n                    verify_integrity=False\n                )\n                result.columns = new_columns\n\n    return result",
            "import_list": []
        }
    ]
}