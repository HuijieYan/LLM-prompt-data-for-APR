{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, level, fill_value=None):\n    if not isinstance(data, DataFrame):\n        raise NotImplementedError(\"_unstack_multiple is presently only implemented as method on DataFrame\")\n\n    if isinstance(level, (str, int)):\n        level = [level]\n\n    if len(level) == 0:\n        return data\n\n    index = data.index\n    rlocs = [index._get_level_number(i) for i in index.names if i not in level]\n    clocs = [index._get_level_number(i) for i in level]\n\n    clevels, rlevels = zip(*[(index.levels[i], index.levels[j]) for i in clocs for j in rlocs])\n    ccodes = list(index.codes[i] for i in clocs)\n    rcodes = list(index.codes[i] for i in rlocs)\n\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index(ccodes, shape, xnull=False)\n    comp_ids, obs_ids = compress_group_index(group_index, xnull=False)\n    recons_codes = decons_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    dummy_index = MultiIndex(\n        levels=rlevels + [obs_ids],\n        codes=rcodes + [comp_ids],\n        names=index.names[:len(rlocs)] + [\"__placeholder__\"],\n        verify_integrity=False)\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels, new_codes = clevels, recons_codes\n        new_names = index.names[:len(clocs)]\n    else:\n        dummy = data.copy()\n        dummy.index = dummy_index\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        if isinstance(unstacked, Series):\n            unstcols = unstacked.index\n        else:\n            unstcols = unstacked.columns\n        new_levels = rlevels + [unstcols.levels[-1]]\n        new_names = index.names[:len(rlocs)] + [unstcols.names[-1]]\n        new_codes = list(rcodes) + [list(recons_codes[j].take(unstcols.codes[-1]))\n                                   for j in range(len(ccodes))]\n\n    new_columns = MultiIndex(levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False)\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n    return unstacked",
            "import_list": []
        }
    ]
}