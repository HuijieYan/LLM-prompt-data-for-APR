{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    original_data = data.copy()\n\n    if len(clocs) == 0:\n        return data\n\n    level_values = [[(-1, i, j), None] for i, j in zip(data.index.names, clocs)]\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    rlocs = [-1]  # setting for a single level\n\n    clevels = [index.levels[i] for i in clocs]\n    ccodes = [index.codes[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    rlevels = index.levels[rlocs[0]]\n    rcodes = index.codes[rlocs[0]]\n    rnames = index.names[rlocs[0]]\n\n    # New level to unstack by\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    # The <if> and <else> blocks are modified to ensure the correct unstacking using the restructured multi-level index\n    if isinstance(data, Series):\n        dummy_index = data.index.take(recons_codes[0])\n        dummy_index = dummy_index.set_names(level_values[0][1], level_values[0][0])\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(fill_value=fill_value)\n        new_levels = [rlevels] + clevels\n        new_names = [rnames] + cnames\n        new_codes = recons_codes\n    else:\n        dummy_index = data.index.take(recons_codes[-1])\n\n        dummy_index = dummy_index.set_names(level_values[-1][1], level_values[-1][0])\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(fill_value=fill_value)\n        new_levels = clevels\n        new_names = cnames\n        new_codes = recons_codes[1:]\n\n    new_columns = MultiIndex(levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False)\n    unstacked = unstacked.reorder_levels(rlocs[0], axis=1)\n\n    unstacked.columns = new_columns\n    return unstacked",
            "import_list": [
                "import pandas as pd",
                "from pandas.core.indexes.api import Index, MultiIndex",
                "from pandas.core.series import Series",
                "from pandas.core.sorting import compress_group_index, decons_obs_group_ids, get_compressed_ids, get_group_index",
                "import numpy as np"
            ]
        }
    ]
}