{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    # Extract the indices for the remaining columns\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    # Divide the list of locations based on their types (in this case single elements or tuples)\n    if not isinstance(clocs[0], tuple):\n        clocs = [clocs]  # in case it's not a tuple, convert it to a list with a single tuple\n\n    cnames = [index.names[i] for i in clocs[0]]\n    rnames = [index.names[i] for i in rlocs]\n\n    clevel_codes, clevel_names = zip(*[(index.codes[i], index.levels[i]) for i in clocs[0]])\n    rlevel_codes, rlevel_names = zip(*[(index.codes[i], index.levels[i]) for i in rlocs])\n\n    # Generate MultiIndex for the dummy DataFrame\n    dummy_index = MultiIndex(\n        levels=rlevel_names + clevel_names,\n        codes=rlevel_codes + clevel_codes,\n        names=rnames + cnames,\n        verify_integrity=False,\n    )\n\n    # Create the dummy DataFrame\n    dummy = data.copy()\n    dummy.index = dummy_index\n\n    # Unstack the dummy DataFrame\n    unstacked = dummy.unstack(list(cnames), fill_value=fill_value)\n\n    return unstacked",
            "import_list": []
        }
    ]
}