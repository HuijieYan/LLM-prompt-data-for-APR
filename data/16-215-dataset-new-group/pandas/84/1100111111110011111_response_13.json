{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n    \n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    cloc_num = [\n        Index._get_level_number(index, unstack) if isinstance(unstack, tuple) else index._get_level_number(unstack)\n        for unstack in clocs\n    ]\n    \n    rlocs = [i for i in range(index.nlevels) if i not in cloc_num]\n    \n    if len(rlocs) == 0:\n        dummy_index = Index(\n            data.index.codes[cloc_num[0]], name=\"__placeholder__\"\n        )\n    else:\n        dummy_index = MultiIndex(\n            levels=(index.levels[i] for i in rlocs) + [index.codes[i] for i in rlocs],\n            names=(index.names[i] for i in rlocs) + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = index.levels[cloc_num]\n        new_names = index.names[cloc_num]\n        new_codes = index.codes[cloc_num]\n    else:\n        if isinstance(data.columns, MultiIndex):\n            result = data\n            for i in range(len(cloc_num)):\n                val = cloc_num[i]\n                result = result.unstack(val, fill_value=fill_value)\n                cloc_num = [v if i > v else v - 1 for v in cloc_num]\n                \n            return result\n\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        \n        if isinstance(unstacked, Series):\n            unstcols = unstacked.index\n        else:\n            unstcols = unstacked.columns\n        new_levels = [unstcols.levels[0]] + index.levels[cloc_num]\n        new_names = [data.columns.name] + index.names[cloc_num]\n\n        new_codes = [unstcols.codes[0]]\n        recons_codes = decons_obs_group_ids(unstacked.index)\n        for rec in recons_codes:\n            new_codes.append(rec.take(unstcols.codes[-1]))\n\n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}