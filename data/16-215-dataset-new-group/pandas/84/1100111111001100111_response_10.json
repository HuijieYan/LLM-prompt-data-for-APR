{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    if isinstance(data, Series):\n        return data.unstack(clocs, fill_value=fill_value)\n    elif isinstance(data.columns, (Index, MultiIndex)):\n        result = data\n        for cloc in clocs:\n            result = result.unstack(cloc, fill_value=fill_value)\n        return result\n    else:\n        clevel = index.get_level_values(clocs[0])\n        nlevs = index.nlevels\n        do_unstack = False\n        if False in [x in index.names for x in clevel.names]:\n            do_unstack = True\n\n        if do_unstack:\n            unstacked_values = []\n            new_index_levels = index.levels + [clevel]\n            for level_values in index.levels[0]:\n                unstacked_values_schema = []\n                for unstack_values in level_values:\n                    idx = list(index[code] == unstack_values for code in index.codes)\n                    unstacked_values_schema.append(data[tuple(idx)])\n                unstacked_values.append(unstacked_values_schema)\n            \n            result_index = MultiIndex(levels=new_index_levels, names=index.names + [clevel.name])\n            unstacked_values_flat = [item for sublist in unstacked_values for item in sublist]\n            return DataFrame(data=np.vstack(unstacked_values_flat), index=result_index, columns=data.columns)\n        else:\n            levels = list(index.levels) + [clevel]\n            new_index = MultiIndex.from_product(levels, names=index.names + [clevel.name])\n            unstacked_values = data.unstack(clocs, fill_value=fill_value).to_numpy().flatten('F')\n            return Series(data=unstacked_values, index=new_index)",
            "import_list": []
        }
    ]
}