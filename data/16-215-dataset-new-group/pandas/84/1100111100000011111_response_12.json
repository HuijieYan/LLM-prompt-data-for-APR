{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n    \n    clevels = [index.levels[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    for i, level in enumerate(clevels):\n        comp_ids, obs_ids = get_compressed_ids(level.labels, index.levels[-1].nunique(), sort=False)\n        vals = level[obs_ids]\n        name = level.name\n        \n        if i == 0:\n            new_index = MultiIndex(names=rnames + [(name, '__placeholder__')], verify_integrity=False)\n        else:\n            new_index = new_index + MultiIndex(names=[name], verify_integrity=False)\n        \n        new_index = new_index + MultiIndex(levels=[vals], names=['__placeholder__'], verify_integrity=False)\n\n    new_columns = MultiIndex(names=rnames + cnames, verify_integrity=False)\n\n    if isinstance(data, Series):\n        dummy = data.reindex(new_index)\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n    else:\n        if isinstance(data.columns, MultiIndex):\n            result = data\n            for i in range(len(clocs)):\n                val = clocs[i]\n                result = result.unstack(val, fill_value=fill_value)\n                clocs = [v if i > v else v - 1 for v in clocs]\n\n            return result\n\n        dummy = data.reindex(new_index)\n        \n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\n    unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}