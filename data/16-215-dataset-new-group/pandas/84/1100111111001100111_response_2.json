{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    clevels = [index.levels[i] for i in clocs]\n    ccodes = [index.codes[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    \n    if rlocs == []:\n        # Everything is in clocs, so the dummy df has a regular index\n        dummy_index = Index(compress_group_index(ccodes, shape, xnull=False), name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(\n            levels=index.levels[rlocs] + [compress_group_index(ccodes, shape, xnull=False)],\n            codes=index.codes[rlocs] + [decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)],\n            names=index.names[rlocs] + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    dummy = data.copy()\n    dummy.index = dummy_index\n    unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\n    if isinstance(unstacked, Series):\n        columns = MultiIndex.from_tuples(\n            [unstacked.name],\n            names=index.names[rlocs] + cnames\n        )\n    else:\n        columns = MultiIndex(\n            levels=[unstacked.columns.levels[0]] + clevels,\n            codes=[unstacked.columns.codes[0]] + recons_codes,\n            names=[data.columns.name] + cnames\n        )\n\n    unstacked.columns = columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}