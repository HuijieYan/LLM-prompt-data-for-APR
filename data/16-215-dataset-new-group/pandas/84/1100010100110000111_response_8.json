{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    ...\n    if rlocs == []:\n        # Everything is in clocs, so the dummy df has a regular index\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(\n            levels=rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=[name for names in rnames for name in names] + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n    ...\n    if isinstance(unstacked, Series):\n        unstcols = unstacked.index\n        new_levels = [unstcols.levels[i] if i < len(unstcols.levels) else clevels[j] for j, i in enumerate(clocs)]\n        new_names = [unstcols.names[i] if i < len(unstcols.names) else cnames[j] for j, i in enumerate(clocs)]\n        new_codes = recons_codes + [unstacked.index.codes[-1]]\n    else:\n        unstcols = unstacked.columns\n        new_levels = [unstcols.levels[i] if i < len(unstcols.levels) else clevels[j] for j, i in enumerate(clocs)]\n        new_names = [unstcols.names[i] if i < len(unstcols.names) else cnames[j] for j, i in enumerate(clocs)]\n        new_codes = [unstcols.codes[i] if i < len(unstcols.levels) else unstacked.columns.codes[-1] for i in range(len(unstcols.levels))] + recons_codes\n\n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n    ...",
            "import_list": []
        }
    ]
}