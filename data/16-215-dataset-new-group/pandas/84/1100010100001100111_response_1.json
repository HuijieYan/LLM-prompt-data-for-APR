{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    if rlocs == []:\n        # When everything is in clocs, a normal index can be used\n        dummy_index = Index(range(len(data)), name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(\n            levels=[index.levels[i] for i in rlocs] + [range(len(data))],\n            codes=index.codes[rlocs] + [range(len(data))],\n            names=[index.names[i] for i in rlocs] + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    new_columns = []\n    for i in range(len(clocs)):\n        unstacked = data.unstack(i, fill_value=fill_value)\n        level_0_name, level_1_name = data.columns.names\n        new_columns.append(\n            unstacked.columns.set_levels(\n                [level_0_name if name is None else name for name in unstacked.columns.levels[0]], level=0\n            ).set_levels(\n                [new_names[i] if name is None else name for name in unstacked.columns.levels[1]], level=1\n            )\n        )\n\n    unstacked = data.copy()\n    unstacked.columns = MultiIndex.from_arrays(new_columns)\n\n    if rlocs == []:\n        unstacked.index = new_columns[0]\n    else:\n        unstacked.index = dummy_index\n\n    return unstacked",
            "import_list": []
        }
    ]
}