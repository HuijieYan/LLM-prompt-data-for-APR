{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    clevels = [index.names[i] for i in clocs]\n    rlevels = [index.names[i] for i in range(index.nlevels) if i not in clocs]\n\n    shape = [len(index.levels[i]) for i in clocs]\n    group_index = get_group_index([index.codes[i] for i in clocs], shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, [index.codes[i] for i in clocs], xnull=False)\n\n    new_index_levels = [index.levels[i] for i, _ in enumerate(index.levels) if i in clocs] + [obs_ids]\n    new_index_codes = [index.codes[i] for i, _ in enumerate(index.codes) if i in clocs] + [comp_ids]\n\n    new_columns = MultiIndex(\n        levels=new_index_levels,\n        codes=new_index_codes,\n        names=clevels + ['__placeholder__'],\n        verify_integrity=False\n    )\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = new_columns\n        unstacked = dummy.unstack('__placeholder__', fill_value=fill_value)\n    else:\n        dummy = data.copy()\n        dummy.index = new_columns\n        unstacked = dummy.unstack('__placeholder__', fill_value=fill_value)\n        unstacked.columns = MultiIndex.from_tuples(unstacked.columns, names=clevels)\n\n    return unstacked",
            "import_list": []
        }
    ]
}