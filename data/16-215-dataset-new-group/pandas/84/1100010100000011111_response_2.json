{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    obs_ids = np.arange(len(index))\n    if not clocs:\n        new_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        new_index = MultiIndex.from_product([obs_ids] + [index.levels[i] for i in clocs])\n        obs_labels = [index.labels[i] for i in clocs] + [None]\n        new_index = new_index.set_labels(obs_labels)\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = new_index\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\n        new_levels = [index.levels[i] for i in clocs]\n        new_names = [index.names[i] for i in clocs]\n        new_codes = [index.codes[i] for i in clocs]\n    else:\n        dummy = data.copy()\n        dummy.index = new_index\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\n        code_info = [(unstacked.index.labels[i], unstacked.index.levels[i]) for i in range(len(clocs))]\n        new_levels = [info[1] for info in code_info]\n        new_names = [index.names[i] for i in clocs]\n        new_codes = [info[0] for info in code_info]\n\n    new_names = [\"__placeholder__\"] + new_names\n    new_levels = [obs_ids] + new_levels\n    new_codes = [np.arange(len(obs_ids))] + new_codes\n\n    new_columns = MultiIndex.from_arrays(new_codes, names=new_names)\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}