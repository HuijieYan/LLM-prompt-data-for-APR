{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n    \n    index = data.index\n    \n    if isinstance(clocs, tuple):\n        clocs = list(clocs)\n    \n    # Handle hierarchical columns\n    if isinstance(data.columns, MultiIndex):\n        result = data\n        for i in range(len(clocs)):\n            val = clocs[i]\n            result = result.unstack(val, fill_value=fill_value)\n            if isinstance(clocs[i], tuple):\n                clocs = [v if i > v else v - 1 for v in clocs]\n        return result\n\n    # Handling cases where everything is in clocs\n    if isinstance(clocs, tuple):\n        clocs = list(clocs)\n        \n    cloc_numbers = [index._get_level_number(i) for i in clocs]\n    rloc_numbers = [i for i in range(index.nlevels) if i not in cloc_numbers]\n\n    clevel_values = [index.levels[i] for i in cloc_numbers]\n    ccode_values = [index.codes[i] for i in cloc_numbers]\n    cname_values = [index.names[i] for i in cloc_numbers]\n    rlevel_values = [index.levels[i] for i in rloc_numbers]\n    rcode_values = [index.codes[i] for i in rloc_numbers]\n    rname_values = [index.names[i] for i in rloc_numbers]\n\n    shape = [len(x) for x in clevel_values]\n    \n    # Perform unstacking operations and handle MultiIndex properly\n    dummy = data.copy()\n    dummy.index = dummy.index.droplevel(rname_values)\n    unstacked = dummy.unstack(clocs, fill_value=fill_value)\n\n    return unstacked",
            "import_list": []
        }
    ]
}