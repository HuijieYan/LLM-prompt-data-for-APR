{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # Get the index\n    index = data.index\n\n    # Obtain the proper level numbers for the tuple names\n    cnames = []\n    clevel_numbers = []\n    for cloc in clocs:\n        if isinstance(cloc, tuple):\n            level_number = index._get_level_number(cloc)\n            clevel_numbers.append(level_number)\n            cnames.append(cloc)\n        else:\n            clevel_numbers.append(index._get_level_number(cloc))\n            cnames.append(index.names[cloc])\n\n    rlocs = [i for i in range(index.nlevels) if i not in clevel_numbers]\n\n    clevels = [index.levels[i] for i in clevel_numbers]\n    ccodes = [index.codes[i] for i in clevel_numbers]\n\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    # Create a MultiIndex for the unstacked data\n    new_levels = rlevels + clevels + [obs_ids]\n    new_codes = rcodes + recons_codes + [comp_ids]\n    \n    new_names = index.names[rlocs] + cnames + [\"__placeholder__\"]\n    \n    new_index = MultiIndex(\n        levels=new_levels,\n        codes=new_codes,\n        names=new_names,\n        verify_integrity=False,\n    )\n\n    # Unstack the data using the created MultiIndex\n    unstacked = data.copy()\n    unstacked.index = new_index\n    unstacked = unstacked.unstack(\"__placeholder__\", fill_value=fill_value)\n\n    return unstacked",
            "import_list": []
        }
    ]
}