{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n    columns = data.columns\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    if isinstance(columns, MultiIndex):\n        result = data\n        for val in clocs:\n            result = result.unstack(val, fill_value=fill_value)\n        \n        return result\n    else:\n        clevels = [index.levels[i] for i in clocs]\n        ccodes = [index.codes[i] for i in clocs]\n        cnames = [index.names[i] for i in clocs]\n        rlevels = [index.levels[i] for i in rlocs]\n        rcodes = [index.codes[i] for i in rlocs]\n        rnames = [index.names[i] for i in rlocs]\n\n        shape = [len(x) for x in clevels]\n        group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n        comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n        recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n        # Construct dummy index\n        if rlocs == []:\n            dummy_index = Index(obs_ids, name=\"__placeholder__\")\n        else:\n            dummy_index = MultiIndex(\n                levels=rlevels + [obs_ids],\n                codes=rcodes + [comp_ids],\n                names=rnames + [\"__placeholder__\"],\n                verify_integrity=False,\n            )\n\n        if isinstance(data, Series):\n            dummy = data.copy()\n            dummy.index = dummy_index\n            unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\n            new_levels = clevels + [unstacked.index.levels[0]]\n            new_codes = recons_codes + [unstacked.index.codes[-1]]\n            new_names = cnames + [data.index.names[0]]\n\n            new_index = MultiIndex(levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False)\n            unstacked.index = new_index\n\n            return unstacked\n        else:\n            dummy = data.copy()\n            dummy.index = dummy_index\n            unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\n            new_levels = [unstacked.columns.levels[0]] + clevels\n            new_codes = [unstacked.columns.codes[0]]\n\n            new_codes.extend(rec.take(unstacked.columns.codes[-1]) for rec in recons_codes)\n\n            new_names = [columns.names[0]] + cnames\n\n            new_columns = MultiIndex(\n                levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n            )\n            unstacked.columns = new_columns\n\n            return unstacked",
            "import_list": []
        }
    ]
}