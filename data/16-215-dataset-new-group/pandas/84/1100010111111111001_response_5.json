{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    if len(clocs) == 2:\n        cloc_tuples = [(index.names[i], clocs[i]) for i in range(len(clocs))]\n        clocs = next(i for i, v in enumerate(index.levels) if all(v[j] == t[1] for j, t in enumerate(cloc_tuples)))\n\n    new_data = data.unstack(clocs, fill_value=fill_value)\n    \n    # Rename levels and create the new MultiIndex for columns\n    new_columns = [index.levels[clocs]] + [index.levels[i] for i in range(index.nlevels) if i != clocs]\n    new_names = [index.names[clocs]] + [index.names[i] for i in range(index.nlevels) if i != clocs]\n    new_index = index.droplevel(clocs)\n    \n    # Update the index and columns of the new data\n    if len(new_data.columns) == len(new_columns):\n        new_data.columns = pd.MultiIndex.from_arrays(new_columns, names=new_names)\n    if len(new_data.index) == len(new_index):\n        new_data.index = new_index\n    \n    return new_data",
            "import_list": []
        }
    ]
}