{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index, Rindex = data.index, data.index\n\n    clocs = level = [Rindex]\n    for loc in clocs:\n        level.append(\n            Rindex.get_level_values(\n                loc if isinstance(loc, (int, str)) else loc[0]\n            )\n        )\n\n    dataT = data.T\n    unstacked = dataT.unstack(\n        clocs, fill_value=fill_value)\n    xx = unstacked.index.map(lambda xx: level[1][xx[0]])\n    xx2 = unstacked.index.map(lambda xx2: (xx2[1]))\n\n    if unstacked.columns.nlevels > 1:\n        unstackedIndex = pd.MultiIndex.from_product(\n            [unstacked.index, unstacked.columns])\n        unstackedIndex.set_names(Rindex.levels, inplace=True)\n    else:\n        unstackedIndex = pd.MultiIndex.from_arrays(\n            [np.array(xx), np.array(xx2)],\n            names=[\n                Rindex.names[p]\n                if p < len(Rindex.names)\n                else clocs[p - len(Rindex.names)]\n                for p in range(len(xx))\n            ]\n        )\n\n    unstacked.index = unstackedIndex\n    return unstacked.T",
            "import_list": []
        }
    ]
}