{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    levels = data.index.levels\n    codes = data.index.codes\n    names = data.index.names\n\n    if len(clocs) == 1:\n        cloc = clocs[0]\n        to_unstack = data.unstack(level=cloc, fill_value=fill_value)\n        return to_unstack\n\n    # Now dealing with hierarchical columns\n    df_dict = {\"__placeholder__\": data}\n    for c in clocs:\n        temp_dict = {}\n        for code_i in range(len(levels[c])):\n            locs = []\n            for i in range(len(levels)):\n                loc = slice(None)\n                if i == c:\n                    loc = levels[i][code_i]\n                locs.append(loc)\n            locs = tuple(locs)\n            df_part = df_dict[\"__placeholder__\"].loc[locs]\n            temp_dict[levels[c][code_i]] = df_part\n        df_dict = temp_dict\n\n    df_result = None\n    for key, value in df_dict.items():\n        if df_result is None:\n            df_result = value.unstack(fill_value=fill_value)\n        else:\n            df_result = df_result.combine_first(value.unstack(fill_value=fill_value))\n\n    return df_result",
            "import_list": []
        }
    ]
}