{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, level, fill_value=None):\n    if not isinstance(level, list):\n        clocs = [data.index.names.index(level)]\n    else:\n        clocs = [data.index.names.index(i) for i in level]\n\n    index = data.index\n    rlocs = [i for i in range(data.index.nlevels) if i not in clocs]\n    \n    group_index = get_group_index([index.get_level_values(i) for i in clocs], sort=False, xnull=False)\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, [index.get_level_values(i) for i in clocs], xnull=False)\n\n    if not rlocs:\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(levels=[index.levels[i] for i in rlocs] + [obs_ids],\n                                 codes=[index.codes[i] for i in rlocs] + [comp_ids],\n                                 names=[index.names[i] for i in rlocs] + [\"__placeholder__\"],\n                                 verify_integrity=False,\n                                 )\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = data.index.levels\n        new_names = data.index.names\n        new_codes = recons_codes\n    else:\n        if isinstance(data.columns, MultiIndex):\n            result = data\n            for i in range(len(clocs)):\n                val = clocs[i]\n                result = result.unstack(val, fill_value=fill_value)\n                clocs = [v if i > v else v - 1 for v in clocs]\n            return result\n        else:\n            dummy = data.copy()\n            dummy.index = dummy_index\n            unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n            if isinstance(unstacked, Series):\n                unstcols = unstacked.index\n            else:\n                unstcols = unstacked.columns\n            new_levels = [unstcols.levels[0]]\n            new_names = [data.columns.name]\n            new_codes = [unstcols.codes[0]]\n            for rec in recons_codes:\n                new_codes.append(rec.take(unstcols.codes[-1]))\n\n    if isinstance(unstacked, Series):\n        unstacked.index = MultiIndex(levels=[new_levels[0]] + [index.levels[i] for i in clocs],\n                                     codes=[new_codes[0]] + recons_codes,\n                                     names=[new_names[0]] + [index.names[i] for i in clocs],\n                                     verify_integrity=False\n                                     )\n    else:\n        unstacked.columns = MultiIndex(levels=[new_levels[0]] + [index.levels[i] for i in clocs],\n                                       codes=[new_codes[0]] + recons_codes,\n                                       names=[new_names[0]] + [index.names[i] for i in clocs],\n                                       verify_integrity=False\n                                       )\n\n    return unstacked",
            "import_list": []
        }
    ]
}