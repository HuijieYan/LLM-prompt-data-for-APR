{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # index and level manipulation\n    index = data.index\n    levels = index.levels\n    \n    # Extracting the level numbers directly from the level names\n    level_numbers = []\n    for loc in clocs:\n        if isinstance(loc, tuple):\n            level_num = tuple([levels[i].names.index(name) for i, name in enumerate(loc)])\n        else:\n            level_num = levels[loc].names.index(loc)\n            \n        level_numbers.append(level_num)\n\n    # Setup for dummy index\n    from itertools import product\n    if isinstance(data, Series):\n        dummy_index = MultiIndex.from_tuples(product(*[levels[loc] for loc in level_numbers]))\n    else:\n        dummy_index = MultiIndex.from_tuples(product(*[levels[loc] for loc in level_numbers]))\n    \n    dummy = data.copy()\n    dummy.index = dummy_index\n    \n    # Unstacking using the conventional method\n    unstacked = dummy.unstack(level_numbers[-1], fill_value=fill_value)\n    \n    return unstacked",
            "import_list": [
                "from itertools import product"
            ]
        }
    ]
}