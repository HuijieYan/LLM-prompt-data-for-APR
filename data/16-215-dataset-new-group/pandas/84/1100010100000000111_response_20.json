{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    result = data\n\n    if isinstance(clocs, (list, tuple)) and all(isinstance(c, (str, tuple)) for c in clocs):\n        col_names = [clocs] if isinstance(clocs, str) or not any(isinstance(c, (list, tuple)) for c in clocs) else list(clocs)\n        levels_values = sum(col_names, ())\n        remaining_levels = [lev for lev in index.names if lev not in levels_values]\n\n        result = result.unstack(col_names, fill_value=fill_value)\n\n        new_columns = [col_name if isinstance(col_name, str) else '-'.join(col_name) for col_name in col_names]\n        new_columns = Index(result.columns.map(lambda x: x[1]).tolist(), name=new_columns)\n\n        return result.set_axis(new_columns, axis=1)\n\n    # For single-level unstack\n    if len(clocs) == 1:\n        loc = index._get_level_number(clocs[0])\n        result = result.unstack(loc, fill_value=fill_value)\n    elif isinstance(clocs, list) and all(isinstance(i, int) for i in clocs):\n        # Handling unstack based on integers (level position)\n        result = result.unstack(clocs)\n    else:\n        raise ValueError(f\"Invalid input for clocs: {clocs}\")\n\n    return result",
            "import_list": []
        }
    ]
}