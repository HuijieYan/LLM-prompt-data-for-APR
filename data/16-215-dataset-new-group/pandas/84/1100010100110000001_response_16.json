{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if not clocs:\n        return data\n\n    # NOTE: Handle hierarchical columns\n\n    index = data.index\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    clevel_objs, cloc_values = zip(*[(index.levels[i], index.codes[i]) for i in clocs])\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n    rlevel_objs, rloc_values = zip(*[(index.levels[i], index.codes[i]) for i in rlocs])\n\n    if isinstance(data, Series):\n        dummy_index = MultiIndex.from_arrays([index] + [[i] * len(index) for i in range(len(clevel_objs))], names=index.names + [None] * len(clocs))\n        dummy = data.reindex(index=dummy_index)\n        unstacked = dummy.unstack(fill_value=fill_value)\n        new_columns = MultiIndex.from_product(clevel_objs)\n        unstacked.columns = new_columns\n    else:\n        new_level_vals = [rloc_values] + [cloc_values]\n        new_level_objs = list(rlevel_objs) + list(clevel_objs)\n        new_columns = MultiIndex.from_product(new_level_objs)\n        result = data.reindex(index=MultiIndex.from_arrays(new_level_vals, names=index.names + [None] * len(clocs)))\n        unstacked = result.unstack(fill_value=fill_value)\n\n    return unstacked",
            "import_list": []
        }
    ]
}