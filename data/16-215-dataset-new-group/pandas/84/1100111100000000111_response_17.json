{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, level, fill_value=None):\n    if not isinstance(level, (list, tuple)):\n        level = [level]\n\n    # Get the level numbers\n    level_numbers = [data.index._get_level_number(l) for l in level]\n\n    # Validate that all levels are found in the index\n    if not all(isinstance(ln, int) for ln in level_numbers):\n        raise KeyError(f'Level(s) {level} not found in the index')\n\n    # Extract remaining levels\n    rest_levels = [i for i in range(data.index.nlevels) if i not in level_numbers]\n    rest_level_names = [data.index.names[i] for i in rest_levels]\n    rest_level_levels = [data.index.levels[i] for i in rest_levels]\n    rest_level_codes = [data.index.codes[i] for i in rest_levels]\n\n    # Unstack the DataFrame\n    unstacked_data = data.unstack(level, fill_value=fill_value)\n\n    # If the result is a Series\n    if isinstance(unstacked_data, Series):\n        unstacked_levels = unstacked_data.index.levels\n        unstacked_codes = unstacked_data.index.codes\n        new_levels = unstacked_levels + rest_level_levels\n        new_codes = unstacked_codes + rest_level_codes\n        new_names = [unstacked_data.index.names[i] if i < len(unstacked_data.index.names) else rest_level_names[i - len(unstacked_data.index.names)] for i in range(len(new_levels))]\n        unstacked_data.index = MultiIndex(levels=new_levels, codes=new_codes, names=new_names)\n\n    # If the result is a DataFrame\n    else:\n        unstacked_levels = unstacked_data.columns.levels\n        unstacked_codes = unstacked_data.columns.codes\n        new_levels = rest_level_levels + unstacked_levels\n        new_codes = rest_level_codes + unstacked_codes\n        new_names = [rest_level_names[i] if i < len(rest_level_names) else unstacked_data.columns.names[i - len(rest_level_names)] for i in range(len(new_levels))]\n        unstacked_data.columns = MultiIndex(levels=new_levels, codes=new_codes, names=new_names)\n\n    return unstacked_data",
            "import_list": []
        }
    ]
}