{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n    \n    # Retrieve the index\n    index = data.index\n\n    # Extract level numbers from clocs\n    cloc_numbers = [index._get_level_number(i) if isinstance(i, str) else i for i in clocs]\n\n    # Get remaining level numbers\n    rloc_numbers = [i for i in range(index.nlevels) if i not in cloc_numbers]\n    \n    # Extract levels, codes, and names\n    clevels = [index.levels[i] for i in cloc_numbers]\n    ccodes = [index.codes[i] for i in cloc_numbers]\n    cnames = [index.names[i] for i in cloc_numbers]\n    rlevels = [index.levels[i] for i in rloc_numbers]\n    rcodes = [index.codes[i] for i in rloc_numbers]\n    rnames = [index.names[i] for i in rloc_numbers]\n    \n    # Get the shape\n    shape = [len(x) for x in clevels]\n    \n    # Compress the group index\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n    \n    # Check if there are no remaining levels\n    if not rloc_numbers:\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n        unstacked = data.reindex(dummy_index, fill_value=fill_value).to_frame().unstack(\"__placeholder__\")\n        unstacked.index = MultiIndex.from_arrays(unstacked.index.values, names=cnames+['__placeholder__'])\n        unstacked.columns = unstacked.columns.droplevel()\n        return unstacked\n    else:\n        dummy_index = MultiIndex(\n            levels=rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=rnames + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n        dummy = data.reindex(dummy_index, fill_value=fill_value)\n        unstacked = dummy.to_frame().unstack('__placeholder__')\n        \n        # Construct the new level order and names\n        if isinstance(data, Series):\n            new_levels_order = [data.index, *clevels]\n            new_names = data.index.names + cnames\n        else:\n            new_levels_order = [unstacked.columns.levels[0], *clevels]\n            new_names = [data.columns.names, *cnames]\n\n        # Create the new MultiIndex from the new level order and names\n        new_multiindex = MultiIndex.from_arrays(new_levels_order, names=new_names)\n        \n        # Update the index or columns based on whether data is a Series or DataFrame\n        if isinstance(unstacked, Series):\n            unstacked.index = new_multiindex\n        else:\n            unstacked.columns = new_multiindex\n        \n        return unstacked",
            "import_list": []
        }
    ]
}