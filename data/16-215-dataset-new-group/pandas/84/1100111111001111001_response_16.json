{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n    levels = index.levels\n    codes = index.codes\n    names = index.names\n    nlevels = index.nlevels\n\n    # Process clocs to deal with hierarchical columns\n    clocs_num = [index._get_level_number(i) for i in clocs]\n\n    rlocs = [i for i in range(nlevels) if i not in clocs_num]\n\n    shape = [len(levels[i]) for i in clocs_num]\n    group_index = get_group_index(codes[clocs_num], shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, codes[clocs_num], xnull=False)\n\n    # Reconstructing the index based on unstacked result\n    if rlocs == []:\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(\n            levels=levels[rlocs] + [obs_ids],\n            codes=codes[rlocs] + [comp_ids],\n            names=names[rlocs] + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    # Unstack the data\n    dummy = data.copy()\n    dummy.index = dummy_index\n    unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\n    if isinstance(unstacked, Series):\n        unstacked.index = MultiIndex(\n            levels=[unstacked.index.levels[0]] + levels[clocs_num],\n            codes=[unstacked.index.codes[0]] + recons_codes,\n            names=[data.index.name] + names[clocs_num],\n            verify_integrity=False\n        )\n    else:\n        unstacked.columns = MultiIndex(\n            levels=[unstacked.columns.levels[0]] + levels[clocs_num],\n            codes=[unstacked.columns.codes[0]] + recons_codes,\n            names=[data.columns.name] + names[clocs_num],\n            verify_integrity=False\n        )\n\n    return unstacked",
            "import_list": []
        }
    ]
}