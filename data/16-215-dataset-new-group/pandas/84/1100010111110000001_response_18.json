{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    clevels = [index.levels[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n\n    new_levels = rlevels + clevels\n    new_names = index.names\n\n    level_to_drop = np.zeros(index.nlevels, dtype=bool)\n    level_to_drop[clocs] = True\n\n    result = data\n    for i in range(len(clocs)):\n        level = clocs[i]\n        values = result.values\n        new_index = result.index.droplevel(level_to_drop)\n        if isinstance(result, DataFrame):\n            new_columns = [new_index] if i == 0 else [cdiv(new_columns[0], new_index, name=cnames[i-1])]\n            new_columns =  [new_columns[0][j][:idx] + [cci(new_columns[0][j][idx], result.columns[i].key) for idx in reversed(range(len(new_columns[0][j])))] for j in range(len(new_columns[0]))]\n            result = result._copy_with_new_index(new_columns, new_index, transpose=True)\n\n            loc = len(result.index)\n        else:\n            if i:\n                name = cnames[i-1]\n            else:\n                name = None\n            new_index.name = name\n            result = result.view()\n            result.index = new_index\n            result.name = name\n            # GH#6401\n            result = result.reshape(-1, order='F')\n\n    return result",
            "import_list": []
        }
    ]
}