{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n    \n    index = data.index\n    shape = []\n    ccodes = []\n    new_columns = []\n    \n    clocs = [index._get_level_number(i) if not isinstance(i, int) else i for i in clocs]\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    clevels = [index.levels[i] for i in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n\n    if len(rlocs) == 0:\n        dummy_index = Index(get_compressed_ids(index.codes, multi_index=True), name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(get_compressed_ids(index.codes, multi_index=True) + (new_fake_codes, len(levels)),\n                                 levels=rlevels + [obs_ids],\n                                 codes=rcodes + [comp_ids],\n                                 verify_integrity=False,\n                                 names=names + [\"__placeholder__\"])\n\n    dummy = data.copy()\n    dummy.index = dummy_index\n\n    if isinstance(data, Series):\n        unstacked = dummy.unstack(\"__placeholder__\")\n        new_columns = clevels\n    else:\n        unstacked = dummy.unstack(\"__placeholder__\")\n        unstackedCols = unstacked.index if isinstance(unstacked, Series) else unstacked.columns\n        unstackedCols_newlevels = [unstackedCols.levels[0]] + clevels\n        \n        new_labels = [unstackedCols.labels[0]]\n        for lc in clevels:\n            new_labels.append(recons_codes.take(unstackedCols.labels[-1]))\n        \n        unstackedCols_newlabels = new_labels\n\n        new_columns = (unstackedCols_newlevels, unstackedCols_newlabels)\n    \n    if isinstance(unstacked, Series):\n        unstacked.index = MultiIndex(new_columns)\n    else:\n        unstacked.columns = MultiIndex(new_columns)\n    \n    return unstacked",
            "import_list": []
        }
    ]
}