{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    if len(rlocs) == 0:\n        # No renaming needed when all levels will be in columns\n        dummy_index = Index(data.index, name=\"__placeholder__\")\n    else:\n        obs_ids, comp_ids = get_unique_index_with_indexer(index, clocs)\n        dummy_index = MultiIndex.from_arrays(\n            [data.index.remove_unused_levels().remove_unused_levels().set_names(None).values] + [obs_ids],\n            names=[None, \"__placeholder__\"],\n        )\n\n    unstacked = data.copy()\n    stubname = \"__placeholder__\"\n    unstacked.columns = unstacked.columns.remove_unused_levels().insert(0, stubname)\n\n    idx_parts = []\n    if len(rlocs) > 0:\n        idx = (unstacked.index.to_frame(index=False)\n                      .set_index(clocs, append=True)\n                      .reorder_levels(list(range(index.nlevels - 1)) + [-1]))\n    else:\n        idx = Index(comp_ids)\n\n    new_levels = [None] * len(clocs)\n    new_names = [None] * len(clocs)\n    for i, c in enumerate(clocs):\n        if isinstance(c, str):\n            new_levels[i], new_names[i], codes = idx.group_info[0], c, idx.codes[i]\n        else:\n            new_levels[i], new_names[i], codes = idx.levels[c], None, idx.codes[i]\n        idx_parts.append(codes.compress(codes != -1)\n                            .reshape((1, -1) * (isinstance(c, str))))\n\n    idx_values = vstack(idx_parts)\n    idx_values.flags.writeable = False\n\n    new_columns = MultiIndex.from_tuples(idx_values, names=new_names)\n    unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}