{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    import pandas as pd\n    if len(clocs) == 0:\n        return data\n\n    # Get the indexes of the columns and the remaining levels\n    index = data.index\n    clocs = [index._get_level_number(i) if i in index.names else None for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    # Get the columns values\n    clevels = [index.levels[i] for i in clocs if i is not None]\n    ccodes = [index.codes[i] for i in clocs if i is not None]\n    cnames = [index.names[i] for i in clocs if i is not None]\n\n    # Get the remaining levels\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    shape = [len(x) for x in ccodes]\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    if rlocs == []:\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(\n            levels=rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=rnames + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    # Create a DataFrame by setting the index to the dummy index\n    dummy = data.copy()\n    dummy.index = dummy_index\n\n    # Unstack the dummy DataFrame\n    unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\n    # Check if the unstacked object is a Series or DataFrame\n    if isinstance(unstacked, pd.Series):\n        unstcols = unstacked.index\n    else:\n        unstcols = unstacked.columns\n\n    # New levels, names, and codes\n    new_levels = [stuple.levels[0] if isinstance(stuple, pd.core.index.MultiIndex) else stuple for stuple in [unstcols, clevels][::] + clevels]\n    new_names = [unstcols.names[0] if isinstance(unstuple, pd.core.index.MultiIndex)else unstuple for unstuple in [data.columns.name] + cnames]\n    new_codes = [unstuple.codes[0] if isinstance(unstuple, pd.core.index.MultiIndex) else unstuple for unstuple in clevcodes + recons_codes]\n    \n    new_columns = pd.MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    if isinstance(unstacked, pd.Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": [
                "import pandas as pd"
            ]
        }
    ]
}