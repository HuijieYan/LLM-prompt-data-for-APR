{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n    recons_codes = []\n\n    if index.nlevels == 1:\n        dummy_index = Index(index, name='__placeholder__')  # Regular index\n    else:\n        rows = list(index)\n        for c in clocs:  # Reverse the order so that we can pop from the end\n            col = index.get_level_values(c).unique()\n            rows.append(index.get_level_values(c))\n\n            # Reverse the codes\n            recons_codes.append(list(range(len(rows[-1])) * len(col)))\n\n        shape = [len(x) for x in rows]\n        comp_ids, obs_ids = get_compressed_ids(rows, shape, sort=False, xnull=False)\n        recons_codes.reverse()\n\n        dummy_index = MultiIndex(levels=rows + [obs_ids],\n                                 codes=recons_codes + [comp_ids],\n                                 names=index.names + ['__placeholder__'],\n                                 verify_integrity=False)\n\n    dummy = data.copy()\n    dummy.index = dummy_index\n    unstacked = dummy.unstack('__placeholder__', fill_value=fill_value)\n    return unstacked",
            "import_list": []
        }
    ]
}