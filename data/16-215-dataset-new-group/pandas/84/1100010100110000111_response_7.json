{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    cloc_numbers = [index._get_level_number(i) if isinstance(i, tuple) else i for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in cloc_numbers]\n\n    clevel_tuples = [i for i in clocs if isinstance(i, tuple)]\n    clevel_numbers = [index._get_level_number(i) for i in clocs if not isinstance(i, tuple)]\n\n    clevels = [index.levels[i] for i in clevel_numbers]\n    clevel_names = [index.names[i] for i in clevel_numbers]\n  \n    if isinstance(data, Series):\n        # Use the appropriate level numbers\n        dummy = data.reorder_levels(cloc_numbers)\n        unstacked = dummy.unstack(fill_value=fill_value)\n  \n        idx_names = [name if hasattr(name, 'index') else name for name in clevel_tuples]\n        new_names = idx_names + clevel_names\n\n        new_columns = MultiIndex.from_product(clevels + [index.levels[i] for i in rlocs],\n                                              names=new_names)\n        \n    else:\n        # Create a separate branch for the case where data is an instance of DataFrame\n        result = data\n        # Unstack the MultiIndex\n        for i in range(len(clevel_tuples)):\n            result = result.unstack(clevel_tuples[i], fill_value=fill_value)\n\n        unstacked = result\n\n        new_levels = []\n        if isinstance(unstacked.columns, MultiIndex):\n            new_levels = unstacked.columns.levels\n        else:\n            new_levels.append(unstacked.columns)\n        new_levels.extend(clevels)\n\n        new_columns = MultiIndex.from_product(new_levels, names=clevel_names)\n\n    unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}