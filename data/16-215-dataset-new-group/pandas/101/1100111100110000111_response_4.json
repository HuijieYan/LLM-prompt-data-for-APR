{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 101,
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True):\n    \"\"\"\n    Cast the elements of an array to a given dtype in a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n\n    # dispatch on extension dtype if needed\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if is_datetime_or_timedelta_dtype(dtype):\n        if is_datetime_or_timedelta_dtype(arr.dtype):\n            if str(dtype) in (\"datetime64\", \"timedelta64\"):\n                if \"ns\" not in str(dtype):\n                    msg = (\n                        f\"The '{dtype.name}' dtype has no unit. Please pass in \"\n                        f\"'{dtype.name}[ns]' instead.\"\n                    )\n                    raise ValueError(msg)\n\n        if is_object_dtype(dtype):\n            if is_datetime64_dtype(arr):\n                return tslib.ints_to_pydatetime(arr.view(np.int64))\n            elif is_timedelta64_dtype(arr):\n                return tslibs.ints_to_pytimedelta(arr.view(np.int64))\n\n            if is_datetime64_dtype(dtype):\n                return astype_nansafe(to_datetime(arr).values, dtype, copy=copy)\n            elif is_timedelta64_dtype(dtype):\n                return astype_nansafe(to_timedelta(arr).values, dtype, copy=copy)\n\n        if is_datetime64tz_dtype(arr):\n            return arr.view(dtype)\n\n        if is_timedelta64_ns_dtype(arr) and \"m\" in dtype.kind:\n            mask = isna(arr)\n            result = arr.astype(dtype).astype(np.float64)\n            result[mask] = np.nan\n            return result\n\n    if is_unsigned_integer_dtype(dtype) and is_float_dtype(arr.dtype):\n        raise ValueError(\"Cannot convert float values to unsigned integer\")\n\n    if is_integer_dtype(dtype) and is_object_dtype(arr.dtype):\n        return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n\n    if copy or is_object_dtype(arr) or is_object_dtype(dtype):\n        return arr.astype(dtype, copy=True)\n\n    return arr.view(dtype)",
            "import_list": []
        }
    ]
}