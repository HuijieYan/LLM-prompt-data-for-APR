{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 101,
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy=True, skipna=False):\n    if not isinstance(arr, np.ndarray):\n        raise TypeError('arr should be a numpy array')\n\n    if np.issubdtype(dtype, np.integer):\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    elif is_datettime64_dtype(arr) or is_timedelta64_dtype(arr):\n        if is_datetime64_dtype(arr) and not hasattr(dtype, 'str'):\n            return tslib.ints_to_pydatetime(arr)\n\n        elif is_timedelta64_dtype(arr) and not hasattr(dtype, 'str'):\n            return tslib.ints_to_pytimedelta(arr)\n\n    elif hasattr(arr, 'dtype') and hasattr(arr.dtype, 'name'):\n        arr_dtype_name = arr.dtype.name\n        if arr_dtype_name in (\"datetime64\", \"timedelta64\"):\n            raise ValueError(\"The 'arr' array dtype has no unit. Please pass in '[dtype.name][ns]' instead.\")\n\n    if copy or hasattr(arr, 'dtype') and (hasattr(arr.dtype, 'type') or hasattr(dtype, 'type')) is np.object_:\n        return arr.astype(dtype, copy=True)\n\n    return arr.view(dtype)",
            "import_list": [
                "import numpy as np",
                "from pandas._libs import lib, tslib",
                "from .common import _INT64_DTYPE, _TD_DTYPE, ensure_str, is_datetime64_dtype, is_timedelta64_dtype"
            ]
        }
    ]
}