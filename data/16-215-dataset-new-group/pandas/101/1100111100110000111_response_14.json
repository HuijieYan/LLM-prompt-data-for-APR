{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 101,
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool=True, skipna: bool=False):\n    if issubclass(dtype.type, (np.datetime64, np.timedelta64)) and len(dtype.str) == 0:\n        raise ValueError(f\"The '{dtype}' dtype has no unit. Please pass in '{dtype}[ns]' instead.\")\n\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if is_integer(dtype):\n        if isinstance(arr, (np.datetime64, np.timedelta64)) and isna(arr):\n            return np.nan\n        else:\n            return arr.astype(dtype, copy=copy)\n\n    if is_float(dtype) and isinstance(arr, (np.datetime64, np.timedelta64)) and isna(arr):\n        return np.nan\n\n    if isinstance(arr, (np.datetime64, np.timedelta64)) and is_object_dtype(dtype):\n        if is_datetime64_dtype(dtype):\n            return tslibs.ints_to_pydatetime(arr.view('i8'))\n        elif is_timedelta64_dtype(dtype):\n            return tslibs.ints_to_pytimedelta(arr.view('i8'))\n\n    if np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    return arr.astype(dtype, copy=copy)",
            "import_list": []
        }
    ]
}