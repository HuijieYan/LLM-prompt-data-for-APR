{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 101,
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype in a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted, but may fail if, for example, the item sizes don't align.\n    skipna: bool, default False\n        Whether or not to skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n\n    # dispatch on extension dtype if needed\n    if isinstance(dtype, np.dtype) and hasattr(dtype, \"construct_array_type\"):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = np.dtype(dtype)\n\n    if dtype.kind == 'O':\n        return arr.astype(dtype)\n\n    if np.issubdtype(dtype, np.datetime64):\n        if dtype.name != 'datetime64[ns]':\n            raise ValueError(f\"The '{dtype.name}' dtype has no unit. Please pass in '{dtype.name}[ns]' instead.\")\n        else:\n            result = arr.astype(dtype)\n            result[arr == np.datetime64('NaT')] = np.datetime64('NaT')\n            return result\n\n    if np.issubdtype(dtype, np.timedelta64):\n        if dtype.name != 'timedelta64[ns]':\n            raise ValueError(f\"The '{dtype.name}' dtype has no unit. Please pass in '{dtype.name}[ns]' instead.\")\n        else:\n            result = arr.astype(dtype)\n            result[arr == np.timedelta64('NaT')] = np.timedelta64('NaT')\n            return result\n\n    if np.issubdtype(dtype, np.integer):\n        if np.isnan(arr).any():\n            raise ValueError(\"Cannot convert NaN values to integer\")\n\n    return arr.astype(dtype, copy=copy)",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}