{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 101,
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    if dtype == 'int':\n        if is_object_dtype(arr):\n            try:\n                arr = arr.astype(int)\n                return arr\n            except ValueError as e:\n                if 'cannot convert float NaN to integer' in str(e):\n                    # Handling NaN values\n                    arr = arr.where(arr.notna(), np.nan)\n                    return arr.astype('Int64')\n                else:\n                    raise\n        elif is_datetime64_dtype(arr):\n            return arr.view('int64')\n        elif is_timedelta64_dtype(arr):\n            return arr.view('int64')\n        elif is_categorical_dtype(arr):\n            return arr.astype('Int64')\n    else:\n        if is_extension_array_dtype(dtype):\n            return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n        if not isinstance(dtype, np.dtype):\n            dtype = pandas_dtype(dtype)\n\n        if issubclass(dtype.type, str):\n            return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)",
            "import_list": []
        }
    ]
}