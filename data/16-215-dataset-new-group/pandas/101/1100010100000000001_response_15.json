{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 101,
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n    if isna(arr).any():\n        if is_datetime_or_timedelta_dtype(dtype):\n            locs = isna(arr)\n            arr = arr.copy()\n            arr[locs] = np.nan\n\n    # dispatch on extension dtype if needed\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = pandas_dtype(dtype)\n\n    if is_datetime64tz_dtype(dtype) or is_datetime64tz_dtype(arr):\n        return tslib.array_with_unit(arr, dtype, copy=copy)\n\n    if is_bool_dtype(dtype):\n        return lib.astype_bool(arr.ravel(), copy=copy).reshape(arr.shape)\n\n    # must coerce\n    if issubclass(dtype.type, str):\n        return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n\n    if is_object_dtype(dtype) and (is_object_dtype(arr) or is_string_dtype(arr)):\n        if np.issubdtype(dtype, np.floating):\n            arr = ensure_object(arr)\n\n    if is_datetime64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslib.ints_to_pydatetime(arr.view(np.int64))\n        if is_datetime64tz_dtype(dtype):\n            return tslib.ints_to_pydatetime(arr.view(np.int64))\n        if dtype == np.int64:\n            return arr.view(dtype)\n\n        if dtype.kind in [\"M\", \"m\"]:\n            if dtype.kind != \"M\" or arr.view(np.int_).flags.fnc:\n                raise TypeError(f\"Cannot convert non-finite values (NA or inf) to integer\")\n\n            return arr.view(dtype)\n\n        raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n\n    elif is_timedelta64_dtype(arr):\n        if is_datetime64_dtype(dtype):\n            warnings.warn(\"Casting to datetime64, but the input object is of dtype timedelta64\", \n                          RuntimeWarning)\n            if dtype == np.dtype(\"datetime64[ns]\"):\n                return _c.cast_scalar_to_dateutil(arr)\n\n            raise TypeError(f\"cannot astype a timedelta to [{dtype}]\")\n\n        if is_object_dtype(dtype):\n            return tslibs.ints_to_pytimedelta(arr.view(np.int64))\n        if dtype == np.int64:\n            return arr.view(dtype)\n\n    if not is_dtype_equal(arr, dtype):\n        return arr.astype(dtype, copy=copy)\n    return arr",
            "import_list": []
        }
    ]
}