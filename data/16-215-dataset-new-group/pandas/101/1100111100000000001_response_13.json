{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 101,
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy=True, skipna=False):\n    \"\"\"\n    Cast the elements of an array to a given dtype in a nan-safe manner.\n    \n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna : bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n    \n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n    if is_extension_array_dtype(dtype):\n        return dtype._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = pandas_dtype(dtype)\n\n    if is_object_dtype(dtype):\n        mask = isna(arr)\n        if is_datetime64_dtype(arr):\n            return arr.astype(dtype)\n        elif is_timedelta64_dtype(arr):\n            return arr.astype(dtype)\n        elif dtype.name in [\"datetime64\", \"timedelta64\"]:\n            msg = (f\"The '{dtype.name}' dtype has no unit. Please pass in \"\n                   f\"'{dtype.name}[ns]' instead.\")\n            raise ValueError(msg)\n\n    return arr.astype(dtype, copy=copy)",
            "import_list": [
                "import numpy as np",
                "from pandas._libs import lib, tslib",
                "from .common import (\n    is_extension_array_dtype,\n    is_datetime64_dtype,\n    is_timedelta64_dtype,\n    _INT64_DTYPE,\n    _TD_DTYPE,\n    is_object_dtype,\n    pandas_dtype,\n    isna\n)",
                "from pandas import to_timedelta",
                "from pandas import to_datetime"
            ]
        }
    ]
}