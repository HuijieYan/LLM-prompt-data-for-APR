{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(obj, key=None, axis=0, level=None, sort=True, observed=False, mutated=False, validate=True):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None or (is_list_like(key) and not all(is_list_like(k) and len(e) == 1 for k in key)):\n        return obj._get_axis(0)._get_level_group_key(level, key, axis=axis)\n\n    if isinstance(key, (Series, Index, np.ndarray, list, tuple)):\n        return obj._get_axis(0)._get_level_group_key(), [com.asarray_tuplesafe(key)], obj\n\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        return grouper, {key.key}, obj\n\n    warnings.warn(\n        \"'by' argument is not a multiple key as expected. 'by' should be a list-like object.\",\n        FutureWarning,\n        stacklevel=5,\n    )\n\n    keys = com.asarray_tuplesafe(key)\n    match_axis_length = len(keys) == len(group_axis)\n\n    if match_axis_length and not all(k in obj.index for k in keys):\n        return obj._get_axis(0)._get_level_group_key(level, key, axis=axis)\n\n    if level is not None:\n        level = com._check_level(level, group_axis, name=obj.index.name)\n        level = [level] * len(keys)\n\n    groupings = []\n\n    for i, gpr in enumerate(keys):\n        level = level[i] if level is not None else None\n\n        ping = Grouping(\n            group_axis, gpr, name=gpr, obj=obj, level=level, sort=sort, observed=observed, in_axis=True\n        )\n        groupings.append(ping)\n\n    if not groupings:\n        raise ValueError(\"No group keys passed!\")\n\n    # create the internals grouper\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, [], obj",
            "import_list": []
        }
    ]
}