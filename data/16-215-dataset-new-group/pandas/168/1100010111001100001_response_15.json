{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    # validate that the passed level is compatible with the axis of the object\n    if level is not None:\n        # Check for MultiIndex instance and perform appropriate actions\n        if isinstance(group_axis, MultiIndex):\n            level_list = ensure_categorical(level)\n            key = group_axis.get_level_values(level_list)\n        else:\n            # Handle non-MultiIndex instances for level parameter\n            if not isinstance(level, list):\n                level_list = [level]\n                nlevels = 1\n            else:\n                level_list = level\n                nlevels = len(level)\n\n            if nlevels == 0:\n                raise ValueError(\"No group keys passed!\")\n            elif nlevels > 1:\n                raise ValueError(\"Multiple levels are only valid with MultiIndex\")\n            elif nlevels == 1:\n                if isinstance(level_list[0], str):\n                    if obj.index.name != level_list[0]:\n                        raise ValueError(\n                            \"Level name {} is not the name of the index\".format(level_list[0])\n                        )\n                elif level_list[0] > 0 or level_list[0] < -1:\n                    raise ValueError(\"Level > 0 or level < -1 only valid with MultiIndex\")\n\n        level = None",
            "import_list": []
        }
    ]
}