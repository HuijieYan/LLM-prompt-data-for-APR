{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    # Process a list-like level\n    if is_list_like(level):\n        groupings = []\n        exclusions = []\n        for lev in level:\n            key_lev = key if is_scalar(lev) else None\n            if isinstance(group_axis, MultiIndex):\n                key = (group_axis.get_level_values(lev) if is_scalar(lev) \n                       else (group_axis.get_level_values(l) for l in lev)\n                      )\n                level = None\n            else:\n                key = (group_axis if is_scalar(lev) else None)\n                levels = lev if is_scalar(lev) else [None] * len(lev)\n\n                for gpr, lv in zip(key, levels):\n                    group_setup = setup_grouping(\n                        obj,\n                        gpr,\n                        lv,\n                        group_axis=group_axis,\n                        obj=obj,\n                        name=gpr,\n                        level=lv,\n                        sort=sort,\n                        observed=observed,\n                    )\n                    groupings.append(group_setup[0])\n                    exclusions.append(group_setup[1])\n    else:\n        # Existing single level validation code\n        if isinstance(group_axis, MultiIndex):\n            if is_list_like(level) and len(level) == 1:\n                level = level[0]\n\n            if key is None and is_scalar(level):\n                key = group_axis.get_level_values(level)\n                level = None",
            "import_list": []
        }
    ]
}