{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        if isinstance(level, int):\n            if group_axis.name != level:\n                raise ValueError(\"level name {} is not the name of the index\".format(level))\n            limit = [level]\n        elif isinstance(level, str):\n            if group_axis.name != level:\n                raise ValueError(\"level name {} is not the name of the index\".format(level))\n            limit = [group_axis.name]\n        elif isinstance(level, list):\n            if not all(isinstance(l, int) for l in level):\n                raise ValueError(\"All levels in the list must be integers\")\n            if not all(isinstance(unique, int) for unique in set(level)):\n                raise ValueError(\"Level lists cannot have duplicated values\")\n            if not all(l < group_axis.nlevels for l in level):\n                raise ValueError(\"Level exceeds length of MultiIndex\")\n            limit = level\n        if key is not None and key not in group_axis.names:\n            raise ValueError(\"Key {} is not in the names of the index\".format(key))\n    else:\n        limit = range(group_axis.nlevels)\n\n    if isinstance(key, Grouper):\n        key = key.key\n\n    if isinstance(key, str):\n        key = [key]\n\n    if not isinstance(key, list):\n        if key is not None:\n            key = [key]\n        keys = ensure_categorical(obj, key, group_axis)\n    else:\n        keys = cinputs\n\n    if axis == 0:\n        indexmap = {\"x\": obj.index, \"y\": obj.columns}\n    else:\n        indexmap = {\"x\": obj.columns, \"y\": obj.index}\n\n    second_axis = obj._get_axis(1 - axis)\n    \n    if all(key in indexmap[second_axis.name] for key in keys):\n        return BaseGrouper(group_axis, keys, sort=sort, observed=observed), [], obj\n    else:\n        raise ValueError(\"group keys are not found\")",
            "import_list": [
                "import pandas as pd",
                "import numpy as np"
            ]
        }
    ]
}