{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n\n    # validate that the passed single level is compatible with the passed\n    # axis of the object\n    if level is not None:\n        if is_list_like(level):\n            nlevels = len(level)\n            if nlevels == 1:\n                level = level[0]\n            elif nlevels == 0:\n                raise ValueError(\"No group keys passed!\")\n            else:\n                raise ValueError(\"multiple levels only valid with MultiIndex\")\n        if isinstance(level, str):\n            if obj.index.name != level and group_axis.name != level:\n                raise ValueError(\n                    \"level name {} is not the name of the index or columns\"\n                    .format(level)\n                )\n        elif level > 0 or level < -1:\n            raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n\n    keys = [key] if is_scalar(key) else key\n\n    groupings = []\n    exclusions = []\n\n    for i, (group_key, grp_level) in enumerate(zip(keys, [level] * len(keys))):    \n        if isinstance(group_key, Grouper) and group_key.key is not None:\n            # Add key to exclusions\n            exclusions.append(group_key.key)\n            in_axis, group_key, grp_level, level_type = False, group_key.key, None, \"Index\"\n        else:\n            if axis == 1 and is_label_like(group_key) and is_list_like(group_key):\n                level_type = \"Columns\"\n            else:\n                level_type = \"Index\"\n            \n            if level_type == \"Columns\":\n                if group_key in obj:\n                    if validate:\n                        obj._check_label_or_level_ambiguity(group_key, axis=1)\n                    in_axis, name = True, group_key\n                    if isinstance(obj, DataFrame) and group_key in obj.columns:\n                        group_key = obj[group_key]\n                    exclusions.append(name)\n                elif obj._is_level_reference(group_key):\n                    in_axis, name, grp_level, group_key = False, None, group_key, None\n                else:\n                    raise KeyError(group_key)\n            else:  # Index level/reference\n                if group_key in obj:\n                    in_axis, name = True, group_key\n                    if group_key in group_axis:\n                        group_key = group_axis.get_level_values(group_key)\n                    exclusions.append(group_key)\n                else:\n                    raise KeyError(group_key)\n\n        # Create the Grouping\n        ping = (\n            Grouping(\n                group_axis,\n                group_key,\n                obj=obj,\n                name=name,\n                level=grp_level,\n                sort=sort,\n                observed=observed,\n                in_axis=in_axis,\n            )\n        )\n        groupings.append(ping)\n\n    if not groupings and len(obj):\n        raise ValueError(\"No group keys passed!\")\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}