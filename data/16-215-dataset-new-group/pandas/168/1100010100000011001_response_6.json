{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n    group_axis_name = obj.index.name\n\n    if level is not None:\n        if isinstance(group_axis, MultiIndex):\n            # Check for MultiIndex and handle accordingly\n            if is_list_like(level) and len(level) == 1:\n                level = level[0]\n            if key is None and is_scalar(level):\n                key = group_axis.get_level_values(level)\n                level = None\n        else:\n            # Handle index and level for non-MultiIndex\n            if is_list_like(level):\n                nlevels = len(level)\n                if nlevels == 1:\n                    level = level[0]\n                elif nlevels == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n            if isinstance(level, str):\n                if group_axis_name != level:\n                    raise ValueError(f\"level name {level} is not the name of the index\")\n            elif level != 0 and level != -1:\n                raise ValueError(\"level 0 or -1 only valid with MultiIndex\")\n            level = None\n            key = group_axis\n\n    if isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    if isinstance(key, tuple):\n        if all(is_hashable(element) for element in key):\n            if key not in obj and set(key).issubset(obj):\n                warnings.warn(\n                    (\n                        \"Interpreting tuple 'by' as a list of keys, rather than \"\n                        \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n                        \"the future, a tuple will always mean a single key.\"\n                    ),\n                    FutureWarning,\n                    stacklevel=5,\n                )\n                key = list(key)\n            else:\n                key = [key]\n\n    keys = [key] if not isinstance(key, list) else key\n    match_axis_length = len(keys) == len(group_axis)\n\n    # Create Grouping objects for each key\n    groupings = []\n    exclusions = []\n    for i, key in enumerate(keys):\n        gpr = key if isinstance(key, str) else None\n\n        if is_categorical_dtype(gpr) and len(gpr) != len(group_axis):\n            raise ValueError(\n                (\n                    \"Length of grouper ({len_gpr}) and axis ({len_axis})\"\n                    \" must be same length\".format(\n                        len_gpr=len(gpr), len_axis=len(group_axis)\n                    )\n                )\n            )\n\n        ping = Grouping(\n            group_axis,\n            gpr,\n            obj=obj,\n            name=None if isinstance(key, str) else gpr,\n            level=level,\n            sort=sort,\n            observed=observed,\n            in_axis=True if isinstance(key, str) else False,\n        )\n        groupings.append(ping)\n\n    if len(groupings) == 0 and len(obj) > 0:\n        raise ValueError(\"No group keys passed!\")\n    elif len(groupings) == 0:\n        groupings.append(Grouping(Index([], dtype='int'), np.array([], dtype=np.intp)))\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}