{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n\n    is_list_like, is_scalar, is_categorical_dtype, isinstance = com.is_list_like, is_scalar, pd.api.types.is_categorical_dtype, isinstance\n    \n    if level is not None and isinstance(group_axis, MultiIndex):\n        if group_axis._get_level_number(level) == -1 and is_scalar(key):\n            key = group_axis.get_level_values(key)\n            level = None\n            keys = [key]\n        elif is_list_like(level) and len(level) == 1:\n            level = level[0]\n        \n        if is_list_like(level):\n            nlevels = len(level)\n            if nlevels == 1:\n                level = level[0]\n            elif nlevels == 0:\n                raise ValueError(\"No group keys passed!\")\n            else:\n                raise ValueError(\"multiple levels only valid with MultiIndex\")\n    \n    else:  \n        if isinstance(level, str):\n            if obj.index.name != level:\n                raise ValueError(\"level name {} is not the name of the index\".format(level))\n        elif not isinstance(level, (int, str)):\n            raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n\n        if level > 0 or level < -1:\n            raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n\n    if isinstance(key, (Grouper, BaseGrouper)):\n        if key.key is None:\n            return grouper, set(), obj\n        else:\n            return key, {key.key}, obj\n    elif is_list_like(key):\n        try: \n            key_lookup = obj.loc(axis=axis)[key]\n            key = key_lookup.name\n        except Exception:\n            pass\n    elif isinstance(key, tuple):\n        if set(key).issubset(obj.index.names):\n            msg = (\n            \"Interpreting tuple 'by' as a list of keys, rather than \"\n            \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n            \"the future, a tuple will always mean a single key.\"\n            )\n            warnings.warn(msg, FutureWarning)    \n            key = list(key)\n    \n    if not isinstance(key, list):\n        key = [key]\n    keys = [com.asarray_tuplesafe(key)]\n\n    modified, groupings = False, []\n    \n    for i, gpr in enumerate(keys):\n        level = None\n        if is_categorical_dtype(obj) and len(gpr) != obj.shape[axis]:\n            raise ValueError(f\"Length of grouper ({len(gpr)}) and axis ({obj.shape[axis]}) must be the same\")\n        if isinstance(gpr, Grouper) and gpr.key is not None:\n            exclusions.add(group_axis.get_level_values(gpr.name))\n        else:\n            groupings.append(Grouping(\n                group_axis, gpr, obj=obj, name=name, level=level, sort=sort,\n                observed=observed, in_axis=in_axis)\n            )\n    if not groupings:\n        raise ValueError(\"No group keys passed!\")\n        \n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, set(), obj",
            "import_list": []
        }
    ]
}