{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        if isinstance(group_axis, MultiIndex):\n            if is_list_like(level) and len(level) == 1:\n                level = level[0]\n\n            if key is None and is_scalar(level):\n                key = group_axis.get_level_values(level)\n                level = None\n\n        else:\n            if is_list_like(level):\n                nlevels = len(level)\n                if nlevels == 1:\n                    level = level[0]\n                elif nlevels == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n            if obj.index.name != level and isin(level, obj.columns):\n                key = obj[level]\n                level = None\n            else:\n                raise ValueError(f\"level name {level} is not the name of the index or a column\")\n\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        return (grouper, {key.key}, obj) if key.key is not None else (grouper, [], obj)\n\n    elif isinstance(key, BaseGrouper):\n        return (key, [], obj)\n\n    if is_scalar(key):\n        key = [key]\n    elif not is_list_like(key):\n        key = list(key)\n\n    if len(key) == len(group_axis):\n        if isinstance(obj, DataFrame):\n            if any(k not in obj.columns for k in key):\n                raise KeyError(f\"key {key} not found in dataframe columns\")\n        else:\n            if any(k != obj.index.name for k in key):\n                raise KeyError(f\"key {key} not found in index name\")\n\n    groupings = []\n    exclusions = []\n\n    for gpr in key:\n        level = None\n\n        if gpr in obj.columns:\n            exclusions.append(gpr)\n            key = obj[gpr]\n            in_axis = True\n        elif gpr in obj.index:\n            if validate:\n                obj._check_label_or_level_ambiguity(gpr)\n                exclusions.append(gpr)\n            level = group_axis.freq.grouper(level=gpr)\n            in_axis = False\n        else:\n            raise KeyError(gpr)\n\n        if is_categorical_dtype(key) and len(key) != obj.shape[axis]:\n            raise ValueError(f\"Length of grouper ({len(key)}) and axis ({obj.shape[axis]}) must be same length\")\n\n        groupings.append(\n            Grouping(\n                group_axis,\n                key,\n                level,\n                gpr,\n                sort,\n                observed,\n                in_axis,\n            )\n        )\n\n    if not groupings and len(obj):\n        raise ValueError(\"No group keys passed!\")\n\n    return BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated), exclusions, obj",
            "import_list": []
        }
    ]
}