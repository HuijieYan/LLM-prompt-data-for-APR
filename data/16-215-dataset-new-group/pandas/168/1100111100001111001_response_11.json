{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    group_axis = obj._data.axes[axis] \n    if level is not None and axis==1:\n        if obj.index.__class__.__name__=='MultiIndex':\n            if is_list_like(level) and len(level) == 1:\n                level = level[0]\n            if key is None and is_scalar(level):\n                key = group_axis.get_level_values(level)\n                level = None\n        else:\n            if is_list_like(level):\n                if len(level) > 1:\n                    raise ValueError(\"level={level} must be no more than 1 level\".format(level=level))\n                level = level[0] if len(level)==1 else level\n                if is_scalar(level) and not isinstance(level, str) and obj.index.name != level:\n                    raise ValueError(\"level name {level} is not the name of the index\".format(level=level))\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return  grouper, [], obj\n        else:\n            return  grouper, {key.key}, obj\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n    elif isinstance(key, tuple):\n        key = list(key)\n        if set(key).issubset(obj.columns):\n            msg = (\"Interpreting tuple 'by' as a list of keys, rather than a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n            \"the future, a tuple will always mean a single key.\")\n            warnings.warn(msg, FutureWarning, stacklevel=5)\n            key = list(key)\n\n    if not isinstance(key, list):\n        keys = [key]\n        match_axis_length = False\n    else:\n        keys = key\n        match_axis_length = len(keys) == group_axis.shape[0]\n\n    if isinstance(level, (list, tuple)):\n        fill_value = [None] * len(level)\n    else:\n        fill_value = [None] * len(keys)\n\n    groupings = []\n    exclusions = []\n    for i, (gpr, lev) in enumerate(zip(keys, fill_value)):\n        # create the Grouping\n        levels = group_axis if lev is None else lev\n        # allow us to passing the actual Grouping as the gpr\n        ping = (\n        Grouping(\n            group_axis,\n            gpr,\n            obj=obj,\n            level=levels,\n            sort=sort,\n            observed=observed,\n            in_axis=axis,\n        )\n        if not isinstance(gpr, Grouping)\n        else gpr\n    )\n    groupings.append(ping)\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    return BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated), exclusions, obj",
            "import_list": []
        }
    ]
}