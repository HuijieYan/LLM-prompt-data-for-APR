{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    \n    group_axis = obj._get_axis(axis)\n    if level is not None:\n        if isinstance(group_axis, MultiIndex):\n            if is_list_like(level):\n                level = level[0]\n            if key is None and is_scalar(level):\n                key = group_axis.get_level_values(level)\n                level = None\n        else:\n            if is_list_like(level):\n                level = level[0]\n            if isinstance(level, str):\n                if obj.index.name != level:\n                    raise ValueError(\n                        \"level name {} is not the name of the index\".format(level)\n                    )\n            elif level > 0 or level < -1:\n                raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n            level = None\n            key = group_axis\n\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key.key}, obj\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n    elif isinstance(key, tuple):\n        keys = list(key)\n    else:\n        keys = [key]\n\n    match_axis_length = len(keys) == len(group_axis)\n    # what are we after, exactly?\n    any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n    any_groupers = any(isinstance(g, Grouper) for g in keys)\n    any_arraylike = any(\n        isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys\n    )\n    \n    # if this is an index replacement\n    if (not any_callable and not any_arraylike and not any_groupers and match_axis_length and level is None):\n        if isinstance(obj, DataFrame):\n            all_in_index = all(g in obj.index for g in keys)\n            all_in_columns = all(g in obj.columns for g in keys)\n        else:\n            all_in_columns = all(g in obj.columns for g in keys)\n        if not all_in_columns & all_in_index:\n            keys = [com.asarray_tuplesafe(keys)]\n          \n    levels = [level] * len(keys)\n    groupings = []\n    exclusions = []\n\n    for i, (grp, lvl) in enumerate(zip(keys, levels)):\n        if not isinstance(grp, Grouper):\n            if _is_label_like(grp):\n                in_axis, name = True, grp\n                exclusions.append(name)\n            else:\n                try:\n                    obj._data.items.get_loc(grp)\n                    in_axis, name = True, grp\n                    exclusions.append(name)\n                except Exception:\n                    in_axis, name = False, None\n        else:\n            in_axis, name = False, None\n      \n        if isinstance(lvl, (tuple, list)):\n            if grp is None:\n                keys = [None] * len(lvl)\n                \n        if isinstance(grp, Grouper) and grp.key is not None:\n            exclusions.append(grp.key)\n            in_axis, name = False, None\n        \n        if is_categorical_dtype(grp) and len(grp) != obj.shape[axis]:\n            raise ValueError(\n                (\n                    \"Length of grouper ({len_gpr}) and axis ({len_axis})\"\n                    \" must be same length\".format(\n                        len_gpr=len(grp), len_axis=obj.shape[axis]\n                    )\n                )\n            )\n        ping = Grouping(group_axis, grp, obj=obj, name=name, level=lvl, sort=sort, observed=observed, in_axis=in_axis)\n        groupings.append(ping)\n\n    if (len(groupings) == 0 and len(obj)) or (len(groupings) == 0):\n        groupings.append(Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp)))\n        \n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": [
                "from pandas.core.groupby.grouper import Grouping",
                "from pandas.core.groupby.ops import BaseGrouper",
                "from pandas.core.index import MultiIndex, Index",
                "from pandas.core.series import Series",
                "from pandas.core.arrays.ordinal import Categorical"
            ]
        }
    ]
}