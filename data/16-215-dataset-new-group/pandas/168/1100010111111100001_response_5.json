{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    # ... (remaining implementations of _get_grouper)\n\n    # number of levels in keys\n    nlevels = None\n    if is_list_like(level):\n        nlevels = len(level)\n    \n    # a tuple key will always mean an actual key, not an iterable of keys\n    if nlevels == 1:\n        level = level[0]\n    elif nlevels == 0:\n        raise ValueError(\"No group keys passed!\")\n    elif nlevels > 1:\n        raise ValueError(\"Multiple levels are only valid with a MultiIndex\")\n\n    # if object is a DataFrame, check if values in the keys are present in columns or index names\n    all_in_columns_index = all(g in obj.columns or g in obj.index.names for g in keys)\n    \n    if not all_in_columns_index:\n        keys = [com.asarray_tuplesafe(keys)]\n\n    if level and isinstance(level, str) and obj.index.name != level:\n        raise ValueError(f\"Level name '{level}' is not the name of the index\")\n\n    # If key is not a list, convert it to a list\n    if not isinstance(key, list):\n        key = [key]\n\n    # set 'keys' to 'key' if their lengths are equal to group_axis, and check for ambiguities\n    if len(key) == len(group_axis):\n        keys = key\n        groups = obj[key]\n        axis_name = obj._get_axis_name(axis)\n        obj._check_label_or_level_ambiguity(groups, axis=axis)\n\n    # default levels to the length of keys, if undefined\n    if not levels:\n        levels = [None] * len(keys)\n\n    # Create groupings with Grouping obj\n    groupings = []\n    exclusions = []\n    for i, (k, l) in enumerate(zip(keys, levels)):\n        if isinstance(k, Grouping) and k.key is not None:\n            exclusions.append(k.key)\n        if not isinstance(k, Grouper):\n            gpr = obj[k]\n            in_axis = True\n            name = k\n        else:\n            in_axis = False\n            name = None\n            exclusions.append(k.key)\n            if k.key is not None:\n                obj._check_label_or_level_ambiguity(k.key)\n        if is_categorical_dtype(k) and len(k) != obj.shape[axis]:\n            raise ValueError(\"Length of grouper and axis must be the same length\")\n\n        # Create the Grouping and add to groupings list\n        ping = Grouping(\n            group_axis,\n            gpr,\n            name=name,\n            level=l,\n            sort=sort,\n            observed=observed,\n            in_axis=in_axis,\n        )\n        groupings.append(ping)\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys were passed!\")\n\n    # Create the internal grouper\n    grouper = BaseGrouper(\n        group_axis, groupings, sort=sort, level=level, mutated=mutated\n    )\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}