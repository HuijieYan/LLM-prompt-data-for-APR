{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a Grouper object, used in GroupBy operations\n    \"\"\"\n\n    group_axis = obj._get_axis(axis)\n\n    # Handle single level group\n    if level is not None:\n        if is_list_like(level) and len(level) == 1:\n            level = level[0]\n        # Check for level name and axis compatibility\n        if obj.index._get_level_values(level).is_monotonic:\n            if is_scalar(level) and obj.index.names[level] != level:\n                level = level[0]\n            if obj.index.names[level] is not None:\n                level = None\n\n    # Handle keys in a passed-in Grouper object\n    if isinstance(key, Grouper):\n        binner, grouper, _ = key._get_grouper(obj, validate=False)\n        return grouper\n\n    # Handle BaseGrouper already existing\n    elif isinstance(key, BaseGrouper):\n        return key\n\n    # Handle tuple keys\n    is_tuple = isinstance(key, tuple)\n    if is_tuple:\n        if key in obj and key not in obj and set(key).issubset(obj):\n            keys = list(key)\n\n    # Use key as list if it's not already\n    if not isinstance(key, list):\n        keys = [key]\n    else:\n        match_axis_length = len(keys) == len(group_axis)\n\n    # Establish whether the Grouper is for an index replacement\n    if (\n        not any(callable(g) or isinstance(g, dict) for g in keys)\n        and not any(\n            isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys\n        )\n        and not any(isinstance(g, Grouper) for g in keys)\n        and match_axis_length\n        and level is None\n    ):\n        if isinstance(obj, DataFrame):\n            all_in_columns_index = all(\n                g in obj.columns or g in obj.index.names for g in keys\n            )\n        elif isinstance(obj, Series):\n            all_in_columns_index = all(g in obj.index.names for g in keys)\n        if not all_in_columns_index:\n            keys = [com.asarray_tuplesafe(keys)]\n\n    # Establish levels if levels is a list\n    if isinstance(level, (tuple, list)):\n        if key is None:\n            keys = [None] * len(level)\n        levels = level\n    else:\n        levels = [level] * len(keys)\n\n    groupers = []\n\n    for i, (grp, level) in enumerate(zip(keys, levels)):\n        ...\n\n    if len(groupers) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    if len(groupers) == 0:\n        groupers.append(_T() if isinstance(obj, DataFrame) else _U())\n\n    grouper = BaseGrouper(group_axis, groupers, sort=sort, mutated=mutated)\n    return grouper",
            "import_list": []
        }
    ]
}