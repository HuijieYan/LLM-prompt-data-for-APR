{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n\n    # validate that the passed single level is compatible with the passed\n    # axis of the object\n    if level is not None:\n        # If level is a list-like object with one element, use that element as the level\n        if is_list_like(level) and len(level) == 1:\n            level = level[0]\n\n        # If the passed key is None and the level is a scalar\n        # Get the level values from group_axis\n        if key is None and is_scalar(level):\n            key = group_axis.get_level_values(level)\n            level = None\n\n    # a passed-in Grouper, directly convert\n    if isinstance(key, Grouper):\n        # Call the _get_grouper method of the key object\n        # Pass validate=False to disable validation\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        # If key.key is None, return the grouper, an empty set, and obj\n        if key.key is None:\n            return grouper, set(), obj\n        else:\n            return grouper, {key.key}, obj\n\n    # already have a BaseGrouper, just return it\n    elif isinstance(key, BaseGrouper):\n        return key, set(), obj\n\n    # In the future, a tuple key will always mean an actual key,\n    # not an iterable of keys. In the meantime, we attempt to provide\n    # a warning. We can assume that the user wanted a list of keys when\n    # the key is not in the index. We just have to be careful with\n    # unhashable elements of `key`. Any unhashable elements implies that\n    # they wanted a list of keys.\n    # https://github.com/pandas-dev/pandas/issues/18314\n    is_tuple = isinstance(key, tuple)\n    all_hashable = is_tuple and all(is_hashable(x) for x in key)\n    if is_tuple and (all_hashable or set(key).issubset(obj)):\n        # Convert the tuple key to a list of keys\n        key = list(key)\n\n    if not isinstance(key, list):\n        keys = [key]\n        match_axis_length = False\n    else:\n        keys = key\n        match_axis_length = len(keys) == len(group_axis)\n\n    # Check the type of keys being passed in\n    any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n    any_groupers = any(isinstance(g, Grouper) for g in keys)\n    any_list_like = any(is_list_like(g) for g in keys)\n\n    # If all keys are scalar and match the axis length, group by them directly\n    if (\n        not any_callable\n        and not any_list_like\n        and not any_groupers\n        and match_axis_length\n        and level is None\n    ):\n        keys_in_axis = [ax in group_axis.names for ax in keys]\n        if all(keys_in_axis):\n            keys = [group_axis.get_level_values(k) if k in group_axis.names else k for k in keys]\n\n    if isinstance(level, (tuple, list)):\n        # If level is a tuple or list, assign it to levels\n        levels = level\n    else:\n        # Otherwise, assign level to every element in keys\n        levels = [level] * len(keys)\n\n    groupings = []\n    exclusions = set()\n\n    for gpr, lev in zip(keys, levels):\n        if is_scalar(gpr):\n            gpr = [gpr]\n        elif is_list_like(gpr) and len(gpr) == 1:\n            gpr = gpr[0]\n\n        if not isinstance(gpr, (BaseGrouper, Grouping)):\n            # Create a Grouping for each passed key\n            ping = Grouping(\n                group_axis,\n                gpr,\n                obj=obj,\n                name=gpr if isinstance(gpr, str) else group_axis.names[gpr],\n                level=lev,\n                sort=sort,\n                observed=observed,\n            )\n        else:\n            ping = gpr\n\n        groupings.append(ping)\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    elif len(groupings) == 0:\n        groupings.append(Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp)))\n\n    # Create the internals grouper\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}