{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n\n    # handle the case where the key is a list\n    if isinstance(key, list):\n        if len(key) == 1:\n            key = key[0]\n        else:\n            raise ValueError(\"Multiple levels only valid with MultiIndex\")\n\n    # handle the case where the level is a list\n    if isinstance(level, list):\n        if key is None:\n            key = [group_axis] * len(level)\n        levels = level\n    else:\n        levels = [level] * len(key)\n\n    # handle the case where the passed key is a Grouper\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key.key}, obj\n\n    # handle the case where the passed key is already a BaseGrouper\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    # handle the future use case where a tuple key will always mean a single key\n    # not an iterable of keys\n    if isinstance(key, tuple):\n        # raise a FutureWarning for using tuple 'by' as a list of keys instead of a single key\n        msg = (\n            \"Interpreting tuple 'by' as a list of keys, rather than \"\n            \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n            \"the future, a tuple will always mean a single key.\"\n        )\n        warnings.warn(msg, FutureWarning, stacklevel=5)\n        key = list(key)\n\n    if not isinstance(key, list):\n        keys = [key]\n    else:\n        keys = key\n\n    exclusions = []\n    groupings = []\n\n    # check if the actual grouper should be obj[key]\n    for gpr, lvl in zip(keys, levels):\n        if isinstance(gpr, Grouper):\n            if gpr.key is not None:\n                exclusions.append(gpr.key)\n            ping = gpr\n        else:\n            ping = Grouping(\n                group_axis,\n                gpr,\n                obj=obj,\n                level=lvl,\n                sort=sort,\n                observed=observed,\n            )\n        groupings.append(ping)\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}