{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(obj, key=None, axis=0, level=None, sort=True, observed=False, mutated=False, validate=True):\n    group_axis = obj._get_axis(axis)\n\n    exclusions = []\n\n    if level is not None:\n        # Check if level is a single label, then get level values\n        if level in group_axis:\n            key = level\n            level = None\n        elif is_list_like(level):\n            if len(level) > 1:\n                raise ValueError(\"Multiple levels only valid with MultiIndex\")\n            key = level[0]\n            level = None\n        else:\n            if level != obj.index.name:\n                raise ValueError(\"Level name is not the name of the index\")\n            level = None\n\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        return grouper, [key.key], obj\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n    elif isinstance(key, (tuple, list)) and len(key) == 1:\n        key = key[0]\n\n    if not is_scalar(key):\n        if key not in obj and set(key).issubset(obj):\n            msg = (\"Interpreting tuple 'by' as a list of keys, rather than a single key.\" \n                   \" Use 'by=[...]' instead of 'by=(...)'. In the future, a tuple will always \"\n                   \"mean a single key.\")\n            warnings.warn(msg, FutureWarning, stacklevel=5)\n            key = list(key)\n\n    if not is_list_like(key):\n        keys = [key]\n    else:\n        keys = key\n        match_axis_length = len(keys) == len(group_axis)\n\n    groupings = []\n    \n    for key in keys:\n        in_axis = key in group_axis\n        name = key if in_axis else None\n        level = None if in_axis else key\n        exclusions.append(name)\n\n        if is_categorical_dtype(key) and len(key) != obj.shape[axis]:\n            raise ValueError(f\"Length of grouper and axis must be the same length: {len(key)} != {obj.shape[axis]}\")\n\n        ping = Grouping(group_axis, key, obj=obj, name=name, level=level, sort=sort, observed=observed, in_axis=in_axis)\n        groupings.append(ping)\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    elif len(groupings) == 0:\n        groupings.append(Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp)))\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}