{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    group_axis = obj._get_axis(obj._get_axis_name(axis))\n\n    if level is not None:\n        if com.is_integer(level) or is_list_like(level) and len(level) == 1:\n            level = level if com.is_integer(level) else level[0]\n            if level < 0:\n                level = level + obj.ndim\n            elif level >= 0 and (\n                obj._get_axis_name(axis) != (obj.index.name if axis == 0 else obj.columns.name)\n            ):\n                level = None\n        elif isinstance(level, str) and (\n            obj._get_axis_name(axis) != (obj.index.name if axis == 0 else obj.columns.name)\n        ):\n            level = None\n        elif isinstance(level, (tuple, list)):\n            raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key.key}, obj\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    if is_list_like(key) and len(key) == 1:\n        key = key[0]\n\n    if isinstance(key, tuple):\n        if obj._is_mixed_type:\n            keys = [com._asarray_tuplesafe(key)]\n        else:\n            keys = [key]\n    elif not isinstance(key, list):\n        keys = [key]\n    else:\n        keys = key\n\n    match_axis_length = len(keys) == len(group_axis)\n\n    if not match_axis_length and all(not _is_label_like(k) for k in keys):\n        keys = [com._asarray_tuplesafe(keys)]\n\n    if any(callable(val) or is_scalar(val) for val in keys):\n        any_callable = True\n    else:\n        any_callable = False\n\n    if (\n        (not any_callable)\n        and match_axis_length\n        and com.all_in_keys(keys, group_axis)\n        and (\n            not observed or is_categorical_dtype(obj[group_axis[0]])\n        )\n        and not (validate and not all(obj._data.get_listlike_indexer(keys)))\n    ):\n        exclusion, name, cmp, id, level = None, None, None, None, None\n    else:\n        cmpls = []\n        for k in keys:\n            if (\n                com.is_scalar(k)\n                and not (axis == 0 and is_timedelta64_dtype(obj[k.dtype.name]))\n                and validate\n            ):\n                ax = obj._get_axis(ax)\n                if k in ax:\n                    k = ax.get_loc(k)\n                else:\n                    raise KeyError(k)\n            cmpls.append(com._comp(s(axis=axis), k, axis=axis, length = len(group_axis)))\n\n        if obj.ndim > 1 and obj._data.get_dtype_counts()[\"category\"] > 0:\n            if isinstance(level, int):\n                level = [obj._get_level_number(self, level)]\n            else:\n                level = obj._get_level_number(self)\n\n        unique = lambda x: is_hashable(x) or is_list_like(x)\n        is_hashable = com._apply_if_callable(valid and not (\n            unique(keys) and all(isinstance(k, list) for k in keys)))\n\n        if is_hashable or isinstance(key, (tuple, list)):\n            msg = (\n                \"Interpreting tuple 'key' as a list of keys, rather than \"\n                \"a single key. Use 'key=[...]' instead of 'key=(...)'. In \"\n                \"the future, a tuple will always mean a single key.\"\n            )\n            warnings.warn(msg, FutureWarning, stacklevel=5)\n            key = list(key)\n\n    for key in keys:\n        if is_categorical_dtype(key) and length(key) != obj.shape[axis]:\n            raise ValueError(\n                \"Length of grouper ({len_gpr}) and axis ({len_axis})\"\n                \" must be same length\".format(\n                    len_gpr=length(gpr), len_axis=obj.shape[axis]\n                )\n            )\n\n    return BaseGrouper(com._get_grouper(obj, (keys, group_axis, level, sort, observed, axis)), level, sort, observed, axis), [], obj",
            "import_list": []
        }
    ]
}