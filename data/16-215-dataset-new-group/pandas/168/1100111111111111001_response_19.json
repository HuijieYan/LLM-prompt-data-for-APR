{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n    key_name = key.name if isinstance(key, Grouper) else None\n\n    level_values = None\n    if level is not None:\n        value = None\n        if isinstance(level, (list, tuple)):\n            value = level[0]\n        elif isinstance(level, str):\n            if level != obj.index.name:\n                raise ValueError(f\"level name {level} is not the name of the index\")\n        elif level > 0 or level < -1:\n            raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n        if value is not None:\n            if isinstance(group_axis, MultiIndex):\n                level_values = group_axis.get_level_values(value) \n                level = None  # reset level if present\n\n    if isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    elif isinstance(key, Grouper):\n        # extract the grouper to avoid retrieving the groups again\n        if key.get_grouper(obj).key is None:\n            return key, [], obj\n        else:\n            return key, {key.get_grouper(obj).key}, obj\n        \n    elif isinstance(key, tuple):\n        if key not in obj and set(key).issubset(obj):\n            key = list(key)\n            warnings.warn((\"Interpreting tuple 'by' as a list of keys, rather than \"\n                           \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n                           \"the future, a tuple will always mean a single key.\"), \n                           FutureWarning, stacklevel=5)\n\n    if not isinstance(key, list):\n        key = [key]\n\n    match_axis_length = len(key) == len(group_axis)\n    any_callable = any(callable(g) or isinstance(g, dict) for g in key)\n    any_arraylike = any(\n        isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in key\n    )\n\n    all_in_columns_index = all(\n        g in obj.columns or g in obj.index.names for g in key\n    )\n    if not all_in_columns_index and match_axis_length and not any_callable and not any_arraylike:\n        key = [key]\n\n    for i, k in enumerate(key):\n        name_arg, groups = None, level_values\n        if is_in_obj(k):\n            exclusions.append(k.name)\n        elif is_in_axis(k):\n            name_arg = k\n            if validate:\n                obj._check_label_or_level_ambiguity(k)\n            groups = obj[k]\n            exclusions.append(name_arg)\n        elif isinstance(k, Grouper) and k.key is not None:\n            exclusions.add(k.key)\n\n        g = Grouping(\n            group_axis,\n            k,\n            name=name_arg,\n            level=groups,\n            sort=sort,\n            observed=observed\n        )\n        groupings.append(g)\n    \n    # if no group keys were passed\n    if not groupings and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    \n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": [
                "from pandas.core.groupby import Grouper, Grouping",
                "import pandas as pd",
                "from pandas.testing import assert_frame_equal",
                "from pandas import MultiIndex"
            ]
        }
    ]
}