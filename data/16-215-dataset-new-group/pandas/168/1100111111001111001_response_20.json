{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        if isinstance(group_axis, MultiIndex):\n            if is_list_like(level) and len(level) == 1:\n                level = level[0]\n                key = group_axis.get_level_values(level)\n                level = None\n            else:\n                if is_list_like(level):\n                    nlevels = len(level)\n                    if nlevels == 1:\n                        level = level[0]\n                    elif nlevels == 0:\n                        raise ValueError(\"No group keys passed!\")\n                    else:\n                        raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n    if isinstance(key, (Grouper, BaseGrouper)):\n        if key.key is None:\n            return key, [], obj\n        else:\n            return key, {key.key}, obj\n    \n    if isinstance(key, tuple):\n        if isinstance(key, tuple) & (is_hashable(key)):\n            if key not in obj & set(key).issubset(obj):\n                warnings.warn(\"Interpreting tuple 'by' as a list of keys, rather than a single key. Use 'by=[...]' instead of 'by=(...)'. In the future, a tuple will always mean a single key.\", FutureWarning, stacklevel=5)\n                key = list(key)\n    \n    if not isinstance(key, list):\n        keys = [key]\n        match_axis_length = False\n    else:\n        keys = key\n        match_axis_length = len(keys) == group_axis.size\n\n    any_callable = any(callable(x) or isinstance(x, dict) for x in keys)\n    any_groupers = any(isinstance(x, Grouper) for x in keys)\n    any_arraylike = any(isinstance(x, (list, tuple, Series, Index, np.ndarray)) for x in keys)\n    \n    if not (any_callable or any_arraylike or any_groupers) and match_axis_length and (level is None):\n        if isinstance(obj, DataFrame):\n            all_in_columns_index = all([g in obj.columns or g in obj.index.names for g in keys])\n        elif isinstance(obj, Series):\n            all_in_columns_index = all([g in obj.index.names for g in keys])\n\n        if not all_in_columns_index:\n            keys = [com.asarray_tuplesafe(keys)]\n\n    groupings = [Grouping(group_axis, g, obj=obj, name=None, level=None, sort=sort, observed=observed, in_axis=is_in_axis(g)) for g in keys]\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    else:\n        grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n        return grouper, [], obj",
            "import_list": []
        }
    ]
}