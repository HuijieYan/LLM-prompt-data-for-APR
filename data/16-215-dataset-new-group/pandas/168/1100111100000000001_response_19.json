{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        if is_categorical_dtype(group_axis):\n            if not isinstance(group_axis, MultiIndex):\n                if is_list_like(level):\n                    if len(level) == 1:\n                        level = level[0]\n                    else:\n                        raise ValueError(\"multiple levels only valid with MultiIndex\")\n                elif isinstance(level, str):\n                    if obj.index.name != level:\n                        raise ValueError(\n                            \"level name {} is not the name of the index\".format(level)\n                        )\n                elif level > 0 or level < -1:\n                    raise ValueError(\n                        \"level > 0 or level < -1 only valid with MultiIndex\"\n                    )\n                key = group_axis\n\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        return (grouper, {key.key} if key.key else None, obj)\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n    else:\n        if isinstance(key, tuple) and isinstance(key, hashable):\n            if key not in obj and set(key).issubset(obj):\n                msg = (\n                    \"Interpreting tuple 'by' as a list of keys, rather than \"\n                    \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n                    \"the future, a tuple will always mean a single key.\"\n                )\n                warnings.warn(msg, FutureWarning, stacklevel=5)\n                key = list(key)\n\n            if not isinstance(key, list):\n                keys = [key]\n                match_axis_length = False\n                all_in_columns_index = all(\n                    g in obj.columns or g in obj.index.names for g in keys\n                )\n                if not all_in_columns_index:\n                    keys = [com.asarray_tuplesafe(keys)]\n            else:\n                keys = key\n                match_axis_length = len(keys) == len(group_axis)\n        else:\n            keys = [key]\n            match_axis_length = len(keys) == len(group_axis)\n\n        groupings = []\n        exclusions = []\n        ...\n        # Other remaining code as it is in the original function\n        ...\n\n        return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}