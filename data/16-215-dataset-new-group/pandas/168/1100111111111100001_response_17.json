{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_gpr_for_key(obj, gpr, categorical_grouper):\n    if isinstance(gpr, Grouper):\n        bin_grouper, group_grouper, obj = gpr._get_grouper(obj, validate=False)\n        if gpr.key is None:\n            return group_grouper, [], obj\n        else:\n            return group_grouper, {gpr.key}, obj\n    elif isinstance(gpr, BaseGrouper):\n        return gpr, [], obj\n    msg = (\n        \"Interpreting tuple 'by' as a list of keys, rather than \"\n        \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n        \"the future, a tuple will always mean a single key.\"\n    )\n    if isinstance(gpr, tuple):\n        warnings.warn(msg, FutureWarning, stacklevel=5)\n        gpr = list(gpr)\n    if isinstance(gpr, list):\n        if isinstance(obj, DataFrame):\n            exists_in_columns = list(filter(lambda x: x in obj.columns, gpr))\n            all_exist_columns = all(g in obj.columns for g in gpr)\n        else:\n            exists_in_columns = list(filter(lambda x: x in obj.index.names, gpr))\n            all_exist_columns = all(g in obj.index.names for g in gpr)\n        if all_exist_columns:\n            msg = (\n                \"Column %s exist, but betwen column and index do not same\" % exists_in_columns\n            )\n            raise KeyError(msg)\n        if len(exists_in_columns) == 0 and all_exist_columns:\n            raise KeyError(gpr)\n    return is_in_axis(gpr), gpr.name, obj[gpr]",
            "import_list": []
        }
    ]
}