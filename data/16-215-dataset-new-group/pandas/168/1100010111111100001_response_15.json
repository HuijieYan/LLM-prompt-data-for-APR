{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        if isinstance(group_axis, MultiIndex):\n            if is_list_like(level) and len(level) == 1:\n                level = level[0]\n            if key is None and is_scalar(level):\n                key = group_axis.get_level_values(level)\n                level = None\n        else:\n            if is_list_like(level):\n                nlevels = len(level)\n                if nlevels == 1:\n                    level = level[0]\n                elif nlevels == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n            if isinstance(level, str):\n                level = group_axis._get_level_number(level)\n            if level > 0 or level < -1:\n                raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n            level = None\n            key = group_axis\n\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key.key}, obj\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    is_tuple = isinstance(key, tuple)\n    if is_tuple:\n        if all(map(lambda k: k in obj, key)) and not all(map(lambda k: obj._is_label_reference(k) or obj._is_level_reference(k), key)):\n            warnings.warn(\n                \"Interpreting tuple 'key' as a list of keys, rather than \" \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \" \"the future, a tuple will always mean a single key.\",\n                FutureWarning,\n                stacklevel=5,\n            )\n            key = list(key)\n    \n    if not isinstance(key, list):\n        keys = [key]\n    else:\n        keys = key\n\n    keys = [com._asarray_tuplesafe(k) for k in keys]\n\n    any_callable = any([callable(g) or isinstance(g, dict) for g in keys])\n    any_groupers = any([isinstance(g, Grouper) for g in keys])\n    any_arraylike = any([is_list_like(g) for g in keys])\n\n    if not (\n        any_callable\n        or any_groupers\n        or any_arraylike\n        or len(keys) == len(group_axis)\n        or level\n    ):\n        if isinstance(obj, DataFrame):\n            if all([g in obj.columns for g in keys]):\n                keys = [com._asarray_tuplesafe(keys)]\n\n    if level:\n        if isinstance(level, (tuple, list)):\n            if key is None:\n                keys = [obj] * len(level)\n        else:\n            level = [level] * len(keys)\n\n    groupings = []\n    for i, (k, lv) in enumerate(zip(keys, level if level else [])):\n        key = obj if not _is_label_like(k) else k\n        create_key = not isinstance(key, Grouping)\n\n        groupings.append(\n            Grouping(\n                group_axis,\n                k,\n                obj=obj,\n                name=None if create_key else k,\n                level=lv,\n                sort=sort,\n                observed=observed,\n                in_axis=_consolidate(key, group_axis),\n            )\n        )\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, [], obj",
            "import_list": []
        }
    ]
}