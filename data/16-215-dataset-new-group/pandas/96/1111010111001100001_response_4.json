{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if other.time() in self.start:\n            return other\n\n        n = self.n\n    \n        # adjust other to reduce number of cases to handle\n        if n >= 0:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                other = other - timedelta(seconds=1)\n                if other.time() not in self.start or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n\n        # remaining business hours to adjust\n        bhour_remain = timedelta(minutes=n * 60)\n\n        # handle adjusting business days if needed\n        if abs(n) // len(self.weekmask) > 0:\n            other = self.next_bday.rollforward(other)\n        \n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n        # adjust timing based on business hours\n        while bhour_remain != timedelta(0):\n            if n > 0:\n                interval_closing = self._get_closing_time(other)\n                bhour = interval_closing - other\n            else:\n                interval_opening = self._next_opening_time(other)\n                bhour = interval_opening - other - timedelta(seconds=1)\n\n            if bhour_remain < bhour:\n                other += bhour_remain\n                bhour_remain = timedelta(0)\n            else:\n                bhour_remain -= bhour\n                if n > 0:\n                    other = self._next_opening_time(other) + bhour_remain\n                else:\n                    other = self._get_closing_time(self._next_opening_time(other + bhour_remain) - timedelta(seconds=1))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}