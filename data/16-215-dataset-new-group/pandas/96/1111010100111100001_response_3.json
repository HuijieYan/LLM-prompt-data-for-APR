{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        businessdays = n // 8\n        hours = n % 8\n\n        if n >= 0:\n            # Move to next business day if necessary\n            while other.weekday() > 4 or other.date() in self.holidays:\n                other += timedelta(days=1)\n\n            # Skip weekends and holidays\n            for _ in range(businessdays):\n                other += timedelta(days=1)\n                while other.weekday() > 4 or other.date() in self.holidays:\n                    other += timedelta(days=1)\n\n            # Adjust for business hours\n            if other.time() >= self.end[0]:  # After business hours\n                other = datetime(other.year, other.month, other.day, self.start[0].hour, self.start[0].minute)\n                other += timedelta(days=1)\n        else:\n            # Move to previous business day if necessary\n            while other.weekday() > 4 or other.date() in self.holidays:\n                other -= timedelta(days=1)\n\n            # Skip weekends and holidays\n            for _ in range(abs(businessdays)):\n                other -= timedelta(days=1)\n                while other.weekday() > 4 or other.date() in self.holidays:\n                    other -= timedelta(days=1)\n\n            # Adjust for business hours\n            if other.time() < self.start[0]:  # Before business hours\n                other = datetime(other.year, other.month, other.day, self.end[0].hour, self.end[0].minute)\n                other -= timedelta(days=1)\n\n        # Adjust for business hours if n != 0\n        if hours:\n            business_seconds = (self.end[0].hour - self.start[0].hour) * 3600 + (self.end[0].minute - self.start[0].minute) * 60\n            direction = hours // abs(hours)\n            remaining_seconds = abs(hours) * business_seconds * direction\n            while remaining_seconds != 0:\n                if direction == 1 and other.time() < self.end[0]:\n                    bhour = (datetime(other.year, other.month, other.day, self.end[0].hour, self.end[0].minute) - other).total_seconds()\n                    if remaining_seconds < bhour:\n                        other += timedelta(seconds=remaining_seconds)\n                        remaining_seconds = 0\n                    else:\n                        remaining_seconds -= bhour\n                        other = datetime(other.year, other.month, other.day, self.start[0].hour, self.start[0].minute) + timedelta(days=1)\n                elif direction == -1 and other.time() > self.start[0]:\n                    bhour = (other - datetime(other.year, other.month, other.day, self.start[0].hour, self.start[0].minute)).total_seconds()\n                    if remaining_seconds < bhour:\n                        other -= timedelta(seconds=remaining_seconds)\n                        remaining_seconds = 0\n                    else:\n                        remaining_seconds -= bhour\n                        other = datetime(other.year, other.month, other.day, self.end[0].hour, self.end[0].minute) - timedelta(days=1)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}