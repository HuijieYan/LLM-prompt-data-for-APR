{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            business_hours_per_day = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n            business_days, remaining_hours = divmod(abs(n), business_hours_per_day // 60)\n\n            if n < 0:\n                business_days, remaining_hours = -business_days, -remaining_hours\n            \n            adjusted_datetime = other\n            if n > 0:  # Forward adjustment\n                while business_days > 0:\n                    adjusted_datetime = self._next_opening_time(adjusted_datetime)\n                    business_days -= 1\n                \n                remaining = self._get_closing_time(adjusted_datetime) - adjusted_datetime\n                if remaining_hours > 0 and remaining > timedelta(minutes=remaining_hours):\n                    adjusted_datetime += timedelta(minutes=remaining_hours)\n                else:\n                    adjusted_datetime = self._next_opening_time(adjusted_datetime + remaining)\n            else:  # Backward adjustment\n                while business_days > 0:\n                    adjusted_datetime = self._prev_opening_time(adjusted_datetime)\n                    business_days -= 1\n                \n                remaining = adjusted_datetime - self._get_closing_time(adjusted_datetime)\n                if remaining_hours > 0 and remaining > timedelta(minutes=remaining_hours):\n                    adjusted_datetime -= timedelta(minutes=remaining_hours)\n                else:\n                    adjusted_datetime = self._get_closing_time(adjusted_datetime + remaining)\n            \n            return adjusted_datetime\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}