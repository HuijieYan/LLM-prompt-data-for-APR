{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        if n > 0:\n            start_dt = datetime.combine(other.date(), self.start[0])\n            end_dt = datetime.combine(other.date(), self.end[0])\n        else:\n            end_dt = datetime.combine(other.date(), self.start[0])\n            start_dt = datetime.combine(other.date(), self.end[0])\n\n        if n > 0 and other.time() < self.end[0] or n < 0 and other.time() >= self.end[0]:\n            next_start = start_dt\n            next_end = end_dt\n        else:\n            next_start = end_dt\n            next_end = end_dt\n\n        # Skip holidays if they are on the end of period\n        if next_end.time() == self.end[0] and next_end.date() in self.holidays:\n            next_end += self\n\n        while n < 0 and next_end.time() == self.start[0]:\n            next_end -= self\n\n            if next_end.time() != self.start[0] and next_end.date() in self.holidays:\n                next_end -= self\n\n        while n > 0 and next_end.time() != self.end[0]:\n            next_end += self\n\n            if next_end.time() == self.end[0] and next_end.date() in self.holidays:\n                next_end += self\n\n        return next_end\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}