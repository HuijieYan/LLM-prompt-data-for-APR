{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # reset timezone and nanosecond\n        other = other.replace(\n            hour=other.hour,\n            minute=other.minute,\n            second=other.second,\n            microsecond=other.microsecond,\n            tzinfo=None,\n        )\n        n = self.n\n\n        if n >= 0:\n            if other.time() > self.end[0] or not self.is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() < self.start[0]:\n                other = other.replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(days=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        # Adjusting input datetime based on business days\n        if n != 0:\n            if n > 0:\n                skip_bd = BusinessDay(n=n)\n                while not self.is_on_offset(other):\n                    other = other + skip_bd\n            else:  # For negative n\n                adjustment = BusinessDay(n=n)\n                while not self.is_on_offset(other):\n                    other = other - adjustment\n\n        # Adjust remaining business hours\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end)\n        )\n\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        if n >= 0:\n            while r > 0:\n                next_opening = self._next_opening_time(other)\n                bhour = next_opening - other\n                if bhour <= timedelta(minutes=r):\n                    r -= bhour.seconds // 60\n                    other = next_opening\n                else:\n                    other += timedelta(minutes=r)\n                    break\n        else:\n            while r < 0:\n                prev_opening = self._prev_opening_time(other)\n                bhour = other - prev_opening\n                if bhour.seconds // 60 >= abs(r):\n                    other = prev_opening\n                    r += bhour.seconds // 60\n                else:\n                    other -= timedelta(minutes=abs(r))\n                    break\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}