{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # adjust other to reduce number of cases to handle\n            if self._is_on_offset(other):\n                return other\n\n            if self.n >= 0:\n                other = self._next_opening_time(other)\n                while not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                other = other - timedelta(seconds=1)  # Move to previous business day\n                if self._is_on_offset(other):\n                    return other\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n            bd = abs(self.n) // 60 // 24  # Business days\n            other += BusinessDay(bd)  # Adjust by business days\n            remaining_minutes = abs(self.n) % (60 * 24)  # Remaining business hours\n            delta = timedelta(minutes=remaining_minutes)\n\n            if self.n >= 0:\n                while delta > timedelta(0):\n                    next_opening = self._next_opening_time(other)\n                    business_hours = self._get_closing_time(self._prev_opening_time(other)) - other\n                    if delta >= business_hours:\n                        other = next_opening\n                        delta -= business_hours\n                    else:\n                        other += delta\n                        delta = timedelta(0)\n            else:\n                while delta > timedelta(0):\n                    next_opening = self._next_opening_time(other)\n                    business_hours = next_opening - other\n                    if delta > business_hours:\n                        other = next_opening\n                        delta -= business_hours\n                    else:\n                        other += delta\n                        delta = timedelta(0)\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import apply_wraps"
            ]
        }
    ]
}