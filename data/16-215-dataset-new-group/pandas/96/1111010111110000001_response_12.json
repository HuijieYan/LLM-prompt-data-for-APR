{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        business_day_offset = 0\n        \n        # Check if the given datetime `other` is on a business hour offset\n        if self._is_on_offset(other):\n            # Handling the BusinessHour offsets\n            business_hours = self._get_business_hours_by_sec(self.start, self.end)\n            \n            # If n is negative and `other` is at the start of a business day\n            if n < 0 and other.time() in self.start:\n                other = self._adjust_to_prev_business_day(other)\n                business_day_offset = -1\n            \n            # Calculate the business days and remaining hours\n            business_day_offset, remaining_seconds = divmod(abs(n * 60), business_hours)\n            \n            # Adjust the date with business days offset\n            adjusted_datetime = self._adjust_with_business_days_offset(other, business_day_offset)\n            \n            # Add the remaining seconds to the adjusted datetime\n            adjusted_datetime = self._add_remaining_seconds(adjusted_datetime, remaining_seconds)\n            \n            return adjusted_datetime\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}