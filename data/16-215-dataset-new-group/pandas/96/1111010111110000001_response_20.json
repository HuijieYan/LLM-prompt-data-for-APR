{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # Adjust timezone and nanosecond\n            other_ts = other.replace(\n                microsecond=0, tzinfo=None\n            )  # use replace to ensure consistency\n\n            n = self.n\n\n            # Perform adjustment for positive and negative business hours\n            if n >= 0:\n                if other.time() in self.end or not self._is_on_offset(other_ts):\n                    other_ts = self._next_opening_time(other_ts)\n            else:\n                if other.time() in self.start:\n                    other_ts -= timedelta(seconds=1)\n                if not self._is_on_offset(other_ts):\n                    other_ts = self._next_opening_time(other_ts)\n                    other_ts = self._get_closing_time(other_ts)\n\n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n\n            # Adjust by business days\n            if bd != 0:\n                skip_bd = BusinessDay(n=bd)\n                if not self._is_on_offset(other_ts):\n                    prev_open = self._prev_opening_time(other_ts)\n                    remain = other_ts - prev_open\n                    other_ts = prev_open + skip_bd + remain\n                else:\n                    other_ts += skip_bd\n\n            # Remaining business hours to adjust\n            bhour_remain = timedelta(minutes=r)\n\n            # Perform the necessary adjustments for business hours\n            while bhour_remain != timedelta(0):\n                if n >= 0:\n                    ...\n                else:\n                    ...\n\n            return other_ts\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}