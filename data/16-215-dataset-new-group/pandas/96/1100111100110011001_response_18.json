{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # adjust the other to disregard timezone and nanosecond\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        \n        n = self.n\n    \n        if n >= 0:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                other = other - timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                next_open = self._next_opening_time(other)\n                other = self._get_closing_time(next_open)\n    \n        # remaining business hours by seconds in a business day\n        business_hours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n    \n        bd, r = divmod(abs(n * 60), business_hours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n    \n        # adjust by business days first\n        if bd != 0:\n            skip_bd = self.next_bday\n            if not skip_bd.is_on_offset(other):\n                prev_open = self._prev_opening_time(other)\n                remain = other - prev_open\n                other = prev_open + skip_bd + remain\n            else:\n                other += skip_bd\n    \n        # remaining business hours to adjust\n        b_hour_remain = timedelta(minutes=r)\n    \n        if n >= 0:\n            while b_hour_remain != timedelta(0):\n                prev_open_time = self._prev_opening_time(other)\n                b_hour = self._get_closing_time(prev_open_time) - other\n                    \n                if b_hour_remain < b_hour:\n                    # finish adjusting if possible\n                    other += b_hour_remain\n                    b_hour_remain = timedelta(0)\n                else:\n                    # go to next business time interval\n                    b_hour_remain -= b_hour\n                    other = self._next_opening_time(other + b_hour)\n        else:\n            while b_hour_remain != timedelta(0):\n                b_hour = self._next_opening_time(other) - other\n                if b_hour_remain >= b_hour or (b_hour_remain == b_hour and getattr(other, \"nanosecond\", 0) != 0):\n                    # finish adjusting if possible\n                    other += b_hour_remain\n                    b_hour_remain = timedelta(0)\n                else:\n                    # go to next business time interval\n                    b_hour_remain -= b_hour\n                    other = self._get_closing_time(self._next_opening_time(other) - timedelta(seconds=1))\n    \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}