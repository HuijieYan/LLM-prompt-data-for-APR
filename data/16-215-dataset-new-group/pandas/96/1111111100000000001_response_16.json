{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if not isinstance(other, datetime):\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n    \n    other = datetime(\n        other.year,\n        other.month,\n        other.day,\n        other.hour,\n        other.minute,\n        other.second,\n        other.microsecond,\n    )\n    \n    n = self.n\n    start_time = other.time()\n    \n    if n >= 0:\n        if start_time in self.end or not self._is_on_offset(other):\n            other = self._next_opening_time(other)\n    else:\n        if start_time in self.start:\n            other -= timedelta(seconds=1)\n        \n        if not self._is_on_offset(other):\n            other = self._next_opening_time(other)\n            other = self._get_closing_time(other)\n\n    if n < 0:\n        n = -n\n        other, start_time = self._get_previous_opening_time(other), other.time()\n\n    business_hours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n    total_minutes = abs(n * 60)\n    \n    if total_minutes == 0:\n        return other\n\n    business_days = total_minutes // business_hours\n    remaining_minutes = total_minutes % business_hours\n\n    if n >= 0:\n        delta = self._adjust_positive_offset(other, business_days, remaining_minutes)\n    else:\n        delta = self._adjust_negative_offset(other, business_days, remaining_minutes)\n\n    return other + delta",
            "import_list": []
        }
    ]
}