{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n        total_minutes = self.n * 60\n        businessdays, remaining_minutes = divmod(abs(total_minutes), businesshours // 60)\n\n        if total_minutes < 0:\n            businessdays, remaining_minutes = -businessdays, -remaining_minutes\n\n        # Adjust by business days first\n        if businessdays != 0:\n            other += timedelta(days=businessdays)\n            if businessdays > 0:\n                while not self._is_on_offset(other) or other.time() not in self.start:\n                    other = self._next_opening_time(other)\n            else:\n                while not self._is_on_offset(other) or other.time() not in self.end:\n                    other = self._prev_opening_time(other)\n\n        # Adjust remaining business hours\n        if remaining_minutes != 0:\n            current_time = other.time()\n            if self.n >= 0:\n                while remaining_minutes > 0:\n                    next_open = self._next_opening_time(other)\n                    bhour = self._get_closing_time(next_open) - other.replace(hour=next_open.hour, minute=next_open.minute)\n                    if remaining_minutes < bhour.total_seconds() // 60:\n                        other += timedelta(minutes=remaining_minutes)\n                        remaining_minutes = 0\n                    else:\n                        remaining_minutes -= bhour.total_seconds() // 60\n                        other = next_open\n            else:\n                while remaining_minutes > 0:\n                    prev_open = self._prev_opening_time(other)\n                    bhour = other.replace(hour=prev_open.hour, minute=prev_open.minute) - prev_open\n                    if remaining_minutes < bhour.total_seconds() // 60 or (remaining_minutes == bhour.total_seconds() // 60 and other.nanosecond != 0):\n                        other -= timedelta(minutes=remaining_minutes)\n                        remaining_minutes = 0\n                    else:\n                        remaining_minutes -= bhour.total_seconds() // 60\n                        other = self._get_closing_time(prev_open)\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}