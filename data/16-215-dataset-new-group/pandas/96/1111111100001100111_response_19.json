{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        start_time = other.replace(hour=self.start[0].hour, minute=self.start[0].minute)\n        end_time = other.replace(hour=self.end[0].hour, minute=self.end[0].minute)\n        \n        if n > 0:\n            # Shift to the next opening time if the given time is not on offset\n            if other.time() not in self.end or not self.is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            # Shift to the previous opening time if the given time is not on offset\n            if other.time() not in self.start or not self._is_on_offset(other):\n                other = self._prev_opening_time(other)\n        \n        if n > 0:\n            other += timedelta(days=n)\n            # If the shifted datetime is not on the offset, move to the next opening time\n            while other.time() not in self.start or not self.is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            other -= timedelta(days=abs(n))\n            # If the shifted datetime is not on the offset, move to the previous opening time\n            while other.time() not in self.start or not self._is_on_offset(other):\n                other = self._prev_opening_time(other)\n        \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}