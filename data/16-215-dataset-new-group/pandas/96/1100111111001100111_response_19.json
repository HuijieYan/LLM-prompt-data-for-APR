{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # Reset timezone and nanosecond\n        other = other.replace(tzinfo=None, microsecond=0, nanosecond=0)\n        # Set the adjusted datetime (other) to the next business hour if it falls outside or on the holiday\n        if self._is_on_offset(other) or other in self.holidays:\n            other = self._next_opening_time(other)\n        \n        # Get the total business hours by second in one business day\n        businesshours = np.timedelta64(1, 'h') * sum([(e - s) for s, e in zip(self.start, self.end)])\n        \n        # Calculate the number of business hours represented by 'n' \n        n_business_hours = self.n * businesshours / np.timedelta64(60, 's')\n        remaining_business_hours = timedelta(minutes=n_business_hours % 60)\n\n        # Move the datetime to the next business day\n        while self._is_on_offset(other) or other in self.holidays:\n            other = self._next_opening_time(other)\n        \n        # Forward the datetime by the number of business days represented by 'n'\n        if self.n < 0:\n            remaining_business_hours = -remaining_business_hours\n        other += self.n * np.busday_offset(1, 'D', roll='forward', holidays=self.holidays) * np.timedelta64(1, 'D')    \n\n        # Update the datetime by the remaining business hours\n        other += remaining_business_hours\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta",
                "from pandas._libs.tslibs.offsets import ApplyTypeError",
                "import numpy as np"
            ]
        }
    ]
}