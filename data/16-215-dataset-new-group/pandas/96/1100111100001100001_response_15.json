{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if not isinstance(other, datetime):\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n    \n    n = self.n\n    closing_times = [self._get_closing_time(other.replace(hour=h.hour, minute=h.minute)) for h in self.start]\n    businesshours = sum((c - o).seconds for o, c in zip(self.start, closing_times))\n    \n    # Adjust by business days first\n    business_days_to_adjust = n // businesshours\n    remaining_hours = n % businesshours\n\n    if business_days_to_adjust != 0:\n        other += timedelta(days=business_days_to_adjust)\n    \n    # Handle remaining hours\n    while remaining_hours != 0:\n        for i, start_time in enumerate(self.start):\n            end_time = closing_times[i]\n            \n            if start_time <= other.time() < end_time or (i == len(self.start) - 1 and end_time <= other.time()):\n                current_interval_hours = (end_time - other).seconds // 3600\n                \n                if n >= 0:\n                    if remaining_hours <= current_interval_hours:\n                        other += timedelta(hours=remaining_hours)\n                        remaining_hours = 0\n                        break\n                    else:\n                        remaining_hours -= current_interval_hours\n                        other = other.replace(hour=end_time.hour, minute=end_time.minute)\n\n                else:\n                    if remaining_hours <= current_interval_hours:\n                        other -= timedelta(hours=remaining_hours)\n                        remaining_hours = 0\n                        break\n                    else:\n                        remaining_hours += current_interval_hours\n                        other = self._get_closing_time(self._next_opening_time(other.replace(hour=start_time.hour, minute=start_time.minute)))\n    \n    return other",
            "import_list": [
                "from datetime import timedelta, datetime"
            ]
        }
    ]
}