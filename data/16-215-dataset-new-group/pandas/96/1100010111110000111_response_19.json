{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        # adjust other to reduce number of cases to handle\n        other = as_datetime(other)\n        \n        if self._is_on_offset(other):\n            return other\n\n        if n >= 0:\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                # adjustment to move to previous business day\n                other = other - timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        # business hours in one business day\n        businesshours = (self.end - self.start).seconds / 3600\n\n        bd, r = divmod(abs(n * 60), businesshours)\n\n        if n < 0:\n            bd, r = -bd, -r\n        \n        if bd != 0:\n            businessdays = timedelta(days=bd)\n            other = other + businessdays\n            \n            if self._is_on_offset(other):\n                return other\n            else:\n                # find next opening time if not on offset\n                other = self._next_opening_time(other)\n\n        if r != 0:\n            businesshours = timedelta(minutes=r)\n            offset = other.time() - self.start\n            offset_in_mins = offset.seconds / 60 + offset.days * 24 * 60\n            while offset_in_mins > 0:\n                if n > 0:\n                    next_opening = self._next_opening_time(other + timedelta(days=1))\n                    business_left = (next_opening - other).seconds / 60\n                else:\n                    closing = self._get_closing_time(other)\n                    business_left = (closing - other).seconds / 60\n                if businesshours <= business_left:\n                    return other + businesshours\n                businesshours -= business_left\n                offset_in_mins -= business_left\n                other = next_opening\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}