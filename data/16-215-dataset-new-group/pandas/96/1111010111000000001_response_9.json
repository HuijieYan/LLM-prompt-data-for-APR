{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            other = as_datetime(other)  # Convert to pandas Timestamp\n            \n            n = self.n\n            \n            if n >= 0:\n                if not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start:\n                    other -= timedelta(seconds=1)\n                if self._is_on_offset(other):\n                    other -= self.__class__(offset=1)\n                else:\n                    other = self._get_closing_time(self._prev_opening_time(other))\n            \n            if self._is_on_offset(other):\n                curr_diff = (other - self.start[0]).seconds\n            else:\n                curr_diff = (self._next_opening_time(other) - self.start[0]).seconds\n            \n            business_hours = sum(en - st for st, en in zip(self.start, self.end))\n            bd, r = divmod(abs(n * 60 * business_hours), business_hours)\n            if n < 0:\n                bd, r = -bd, -r\n            \n            if bd != 0:\n                other = other + bd * BusinessHour(n=1)\n                \n            if r != 0:\n                while r > 0:\n                    if n >= 0:\n                        diff = self.end[0] - other.time()\n                    else:\n                        diff = other.time() - self.start[-1]\n                    \n                    if diff.seconds <= r*60:\n                        r -= diff.seconds // 60\n                        other = self._next_opening_time(other)  # move to the next business hour\n                    else:\n                        other = other + timedelta(minutes=r)\n                        r = 0\n                while r < 0:\n                    if n >= 0:\n                        diff = self.end[0] - other\n                    else:\n                        diff = other - self.start[-1]\n                    \n                    if diff.seconds <= abs(r)*60:\n                        r += diff.seconds // 60\n                        other = self._get_closing_time(other)  # move to the previous business hour\n                    else:\n                        other = other - timedelta(minutes=abs(r))\n                        r = 0\n            \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}