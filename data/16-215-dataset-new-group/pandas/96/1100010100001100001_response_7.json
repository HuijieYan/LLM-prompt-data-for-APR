{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # Adjust for business days first\n        business_days = self.n // (self.end[0].hour - self.start[0].hour)\n        other += timedelta(days=business_days)\n\n        # Calculate remaining business hours to adjust\n        remaining_hours = self.n % (self.end[0].hour - self.start[0].hour)\n        \n        # Adjust for remaining business hours\n        if self.n > 0:\n            # Move to next business hour if other time not on offset\n            if other.time() not in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n            # Add remaining business hours\n            while remaining_hours > 0:\n                diff_to_closing = self._get_closing_time(other) - other\n                if remaining_hours * 60 < diff_to_closing.total_seconds() / 60:\n                    other += timedelta(minutes=remaining_hours * 60)\n                    remaining_hours = 0\n                else:\n                    remaining_hours -= diff_to_closing.total_seconds() / 60\n                    other = self._next_opening_time(other + diff_to_closing)\n        else:\n            # Move to previous business hour if other time on start and not midnight\n            if other.time() == self.start[0] and other.time().minute != 0:\n                other = other - timedelta(minutes=1)\n            # Add remaining business hours\n            while remaining_hours > 0:\n                diff_to_opening = self._next_opening_time(other) - other\n                if remaining_hours * 60 < diff_to_opening.total_seconds() / 60:\n                    other += timedelta(minutes=remaining_hours * 60)\n                    remaining_hours = 0\n                else:\n                    remaining_hours -= diff_to_opening.total_seconds() / 60\n                    other = self._get_closing_time(self._next_opening_time(other) - timedelta(seconds=1))\n        \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}