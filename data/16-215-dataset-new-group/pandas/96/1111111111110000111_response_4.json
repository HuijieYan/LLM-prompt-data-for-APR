{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # [previous timestamp adjustments]\n\n            # Adjust business days and remaining business hours\n            bd, r = divmod(abs(n), len(self.start))\n\n            if n < 0:\n                # If n < 0, adjust for the previous opening time\n                other = other - timedelta(hours=1)\n                bd, r = -bd, -r\n\n            # Remaining business hours are adjusted based on the sign of n\n            if n >= 0:\n                while r > 0:\n                    if (bd == 0 and self._is_on_offset(other)) or bd != 0:\n                        other = other + timedelta(hours=1)\n                        r -= 1\n                    else:\n                        other = self._next_opening_time(other)\n                        bd -= 1\n            else:\n                while r > 0:\n                    other = other - timedelta(hours=1)\n                    r -= 1\n\n                    if (bd == 0 and self._is_on_offset(other)) or bd != 0:\n                        other = other + timedelta(hours=1)\n                        r -= 1\n                    else:\n                        other = self._get_closing_time(self._next_opening_time(other))\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}