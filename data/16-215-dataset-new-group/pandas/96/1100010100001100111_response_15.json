{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, pd.Timestamp):\n        n = self.n\n\n        if n >= 0:\n            # adjust to reduce the number of cases to handle\n            if self._is_on_offset(other):\n                if other.time() not in self.end:\n                    other = self._next_opening_time(other)\n            else:\n                prev_closing_time = self._get_closing_time(other)\n                other = self._next_opening_time(prev_closing_time)\n\n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # adjust by business days first, using skip_bd if necessary\n        if bd != 0:\n            skip_bd = CustomBusinessHour(n=bd)\n            other = other + skip_bd\n\n        # remaining business hours to adjust\n        if r != 0:\n            remaining_minutes = abs(n * 60) % businesshours\n            end_of_day = self.start[-1] if self.start < self.end else self.end[-1]\n            if n >= 0:\n                business_minutes_to_end_of_day = ((end_of_day.hour * 60 + end_of_day.minute) - (other.hour * 60 + other.minute))\n            else:\n                business_minutes_to_end_of_day = (other.hour * 60 + other.minute) - (end_of_day.hour * 60 + end_of_day.minute)\n\n            if business_minutes_to_end_of_day >= remaining_minutes:\n                # adjusting the time within the same business day\n                other = other + pd.Timedelta(minutes=r)\n            else:\n                # adjusting the time to the next business day\n                remaining_minutes -= business_minutes_to_end_of_day\n                other = self._next_opening_time(other + pd.Timedelta(minutes=remaining_minutes))\n\n        return other\n\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import apply_wraps",
                "from pandas.tseries.offsets import CustomBusinessHour"
            ]
        }
    ]
}