{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply_custom_business_hours(self, other):\n    adjusted_datetime = other\n    n = self.n\n\n    # Adjust the other datetime to reduce the number of cases to handle\n    if n >= 0:\n        if other.time() in self.end or not self._is_on_offset(other):\n            adjusted_datetime = self._next_opening_time(other)\n    else:\n        if other.time() in self.start:\n            # Adjustment to move to the previous business day\n            adjusted_datetime = other - timedelta(seconds=1)\n        if not self._is_on_offset(adjusted_datetime):\n            adjusted_datetime = self._next_opening_time(adjusted_datetime)\n            adjusted_datetime = self._get_closing_time(adjusted_datetime)\n\n    # Adjusting total business hours by seconds in one business day\n    businesshours = sum(\n        self._get_business_hours_by_sec(st, en)\n        for st, en in zip(self.start, self.end)\n    )\n\n    bd, r = divmod(abs(n * 60), businesshours // 60)\n    if n < 0:\n        bd, r = -bd, -r\n\n    # Adjust by business days first\n    if bd != 0:\n        skip_bd = BusinessDay(n=bd)\n        if not self.next_bday.is_on_offset(adjusted_datetime):\n            prev_open = self._prev_opening_time(adjusted_datetime)\n            remain = adjusted_datetime - prev_open\n            adjusted_datetime = prev_open + skip_bd + remain\n        else:\n            adjusted_datetime = adjusted_datetime + skip_bd\n\n    # Remaining business hours to adjust\n    bhour_remain = timedelta(minutes=r)\n\n    if n >= 0:\n        while bhour_remain != timedelta(0):\n            bhour = (\n                self._get_closing_time(self._prev_opening_time(adjusted_datetime)) - adjusted_datetime\n            )\n            if bhour_remain < bhour:\n                # Finish adjusting if possible\n                adjusted_datetime += bhour_remain\n                bhour_remain = timedelta(0)\n            else:\n                # Go to the next business time interval\n                bhour_remain -= bhour\n                adjusted_datetime = self._next_opening_time(adjusted_datetime + bhour)\n    else:\n        while bhour_remain != timedelta(0):\n            bhour = self._next_opening_time(adjusted_datetime) - adjusted_datetime\n            if (\n                bhour_remain > bhour\n                or bhour_remain == bhour\n                and getattr(other, \"nanosecond\", 0) != 0\n            ):\n                # Finish adjusting if possible\n                adjusted_datetime += bhour_remain\n                bhour_remain = timedelta(0)\n            else:\n                # Go to the next business time interval\n                bhour_remain -= bhour\n                adjusted_datetime = self._get_closing_time(\n                    self._next_opening_time(\n                        adjusted_datetime + bhour - timedelta(seconds=1)\n                    )\n                )\n\n    return adjusted_datetime",
            "import_list": []
        }
    ]
}