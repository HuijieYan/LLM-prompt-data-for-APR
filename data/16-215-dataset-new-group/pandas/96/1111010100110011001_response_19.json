{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # Calculate the number of business days and remaining business hours\n            bd, r = divmod(abs(self.n * 60), 120)\n            if self.n < 0:\n                bd, r = -bd, -r\n            \n            # Adjust the 'other' datetime value based on the number of business days\n            other = other + timedelta(days=bd)\n            \n            # Calculate the additional minutes based on the remaining business hours\n            minutes_to_adjust = r\n            current_hour = other.hour * 60 + other.minute\n            working_hours = list(range(9*60, 17*60))  # Considering 9 AM to 5 PM\n\n            # Update 'other' variable to the nearest working hour\n            if self.n >= 0:\n                if current_hour > 17*60 or current_hour not in working_hours:\n                    next_working_hour = min(filter(lambda x: x > current_hour, working_hours))\n                    minutes_to_adjust -= (next_working_hour - current_hour)\n                    other = other.replace(hour=next_working_hour//60, minute=next_working_hour%60)\n            else:\n                if current_hour < 9*60 or current_hour not in working_hours:\n                    prev_working_hour = max(filter(lambda x: x < current_hour, working_hours))\n                    minutes_to_adjust += (current_hour - prev_working_hour)\n                    other = other.replace(hour=prev_working_hour//60, minute=prev_working_hour%60)\n\n            # Update the 'other' variable based on the additional minutes to adjust\n            other = other + timedelta(minutes=minutes_to_adjust)\n            \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import timedelta"
            ]
        }
    ]
}