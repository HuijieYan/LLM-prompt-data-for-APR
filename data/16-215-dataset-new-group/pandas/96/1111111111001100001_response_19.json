{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # retrieving the time part of the datetime object\n            time_part = other.time()\n    \n            n = self.n\n    \n            # check if the given time is within the business hours\n            if time_part >= self.start and time_part <= self.end:\n                return other\n    \n            # finding the next opening time\n            if n >= 0:\n                other = self._next_opening_time(other)\n            else:\n                other = self._next_opening_time(other) - timedelta(seconds=1)\n    \n            # finding the business hours for one business day\n            businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n            \n            # finding the absolute value of the number of business days\n            bd = abs(n) // (businesshours / 60)\n            remainder = abs(n) % (businesshours / 60)\n    \n            # moving the datetime object by the number of business days\n            if n >= 0:\n                if not self.is_on_offset(other):\n                    other = self._next_opening_time(other)\n                other += timedelta(days=bd)\n            else:\n                if self.is_on_offset(other):\n                    other -= timedelta(days=bd)\n                else:\n                    other -= timedelta(days=(bd - 1))\n    \n            # adjusting the remaining business hours\n            if remainder > 0:\n                if n >= 0:\n                    current_time = self._get_closing_time(self._prev_opening_time(other))\n                    while remainder > 0:\n                        time_left_in_interval = (self._get_closing_time(self._next_opening_time(other)) - other).total_seconds()\n                        if remainder >= time_left_in_interval:\n                            other = self._next_opening_time(other)\n                            remainder -= time_left_in_interval\n                        else:\n                            other += timedelta(seconds=remainder)\n                            break\n                else:\n                    current_time = self._next_opening_time(other)\n                    while remainder > 0:\n                        time_left_in_interval = (self._next_opening_time(other) - other).total_seconds()\n                        if remainder >= time_left_in_interval:\n                            other = self._next_opening_time(other)\n                            remainder -= time_left_in_interval\n                        else:\n                            other += timedelta(seconds=remainder)\n                            break\n    \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}