{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # convert to date for simpler arithmetic\n        if not isinstance(other, date):\n            other = other.date()\n        \n        if self.is_on_offset(other):\n            return other\n        \n        n = self.n\n\n        if n >= 0:\n            while not self.is_on_offset(other):\n                other += timedelta(days=1)\n        else:\n            while not self.is_on_offset(other):\n                other -= timedelta(days=1)\n\n        # handle remaining business hours\n        businesshours = sum(\n            (en - st).total_seconds() / 3600\n            for st, en in zip(self.start, self.end)\n        )\n        \n        remaining_hours = abs(n * businesshours)\n        \n        if n < 0:\n            remaining_hours = -remaining_hours\n        \n        if remaining_hours > 0:\n            while remaining_hours > 0:\n                # calculate time until the end of the day\n                end_of_day = datetime.combine(other, max(self.end))\n                time_until_end_of_day = end_of_day - other\n\n                if remaining_hours * 3600 <= time_until_end_of_day.total_seconds():\n                    # adjust by remaining hours\n                    return other + timedelta(seconds=remaining_hours * 3600)\n                else:\n                    # move to the next business day\n                    remaining_hours -= (time_until_end_of_day.total_seconds() / 3600)\n                    other = datetime.combine(other + timedelta(days=1), min(self.start))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}