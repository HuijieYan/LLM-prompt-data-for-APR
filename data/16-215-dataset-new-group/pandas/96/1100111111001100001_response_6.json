{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        hour_offset = 0\n\n        if n >= 0:\n            if other.time() > datetime.time(17, 0):\n                hour_offset = 1\n            elif other.time() < datetime.time(15, 0):\n                hour_offset = 0\n        else:\n            if other.time() <= datetime.time(15, 0):\n                hour_offset = -1\n            elif other.time() > datetime.time(17, 0):\n                hour_offset = 0\n\n        businesshours = (self.end[0].hour - self.start[0].hour) * 3600\n\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        other += pd.offsets.BDay(n=bd)\n\n        if hour_offset < 0:\n            other = datetime(other.year, other.month, other.day, 17, 0)\n        elif hour_offset > 0:\n            other = datetime(other.year, other.month, other.day, 15, 0)\n\n        # Adjust remaining business hours\n        while r != 0:\n            if n >= 0:\n                if other.time() < datetime.time(17, 0):\n                    bhour = datetime.combine(other.date(), datetime.time(17, 0)) - other\n                else:\n                    bhour = pd.offsets.CustomBusinessHour(end='17:00', base=other)(offset=1) - other\n            else:\n                if other.time() > datetime.time(15, 0):\n                    bhour = other - datetime.combine(other.date(), datetime.time(15, 0))\n                else:\n                    bhour = other - pd.offsets.CustomBusinessHour(start='15:00', base=other)(offset=1)\n\n            if r <= bhour.seconds / 60:\n                other += timedelta(minutes=r)\n                r = 0\n            else:\n                other += bhour\n                r -= bhour.seconds / 60\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}