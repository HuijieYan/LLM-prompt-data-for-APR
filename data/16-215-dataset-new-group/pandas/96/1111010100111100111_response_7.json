{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def _apply_remaining_business_hours_adjustment(self, start_time, remaining_minutes):\n        current_time = start_time\n        if self.n >= 0:\n            while remaining_minutes > 0:\n                next_opening = self._next_opening_time(current_time)\n                next_closing = self._get_closing_time(next_opening)\n                business_hour = next_closing - current_time\n                if remaining_minutes < business_hour.seconds // 60:\n                    current_time += timedelta(minutes=remaining_minutes)\n                    remaining_minutes = 0\n                else:\n                    current_time = next_opening\n                    remaining_minutes -= business_hour.seconds // 60\n        else:\n            while remaining_minutes > 0:\n                next_opening = self._next_opening_time(current_time)\n                business_hour = next_opening - current_time\n                if remaining_minutes > business_hour.seconds // 60:\n                    current_time = self._get_closing_time(next_opening - timedelta(seconds=1))\n                    remaining_minutes -= business_hour.seconds // 60\n                else:\n                    current_time += timedelta(minutes=remaining_minutes)\n                    remaining_minutes = 0\n        return current_time",
            "import_list": []
        }
    ]
}