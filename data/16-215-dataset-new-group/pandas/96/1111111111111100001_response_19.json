{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, Timestamp):\n            n = self.n\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n\n            business_hours = sum(\n                self._get_business_hours_by_sec(bh_start, bh_end)\n                for bh_start, bh_end in zip(self.start, self.end)\n            )\n\n            if n >= 0:\n                business_time_left = (self._get_closing_time(other) - other).seconds\n                business_time_adjusted = min(n * 60 * 60, business_time_left)\n\n                while business_time_adjusted > 0:\n                    other = other + timedelta(seconds=business_time_adjusted)\n                    business_time_adjusted = 0\n            else:\n                business_time_left = (other - self._prev_opening_time(other)).seconds\n                business_time_adjusted = min(abs(n * 60 * 60), business_time_left)\n\n                while business_time_adjusted > 0:\n                    other = other - timedelta(seconds=business_time_adjusted)\n                    business_time_adjusted = 0\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}