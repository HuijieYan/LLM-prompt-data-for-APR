{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # reduce nanosecond to zero if present\n        nanosecond = getattr(other, \"nanosecond\", 0)\n        other = other.replace(nanosecond=0)\n        n = self.n\n\n        # remove timezone information\n        other = other.replace(tzinfo=None)\n\n        if n > 0:\n            # choose the next opening time if current time not in business hours or on holidays\n            if other.time() not in self.start or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            # if current time is in the start time, go to the previous day to find a business day\n            if other.time() in self.start:\n                other = other - timedelta(days=1)\n\n            # if not in business hours or on holidays, choose the next opening time\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n\n            # get the closing time\n            other = self._get_closing_time(other)\n\n        business_hours_in_seconds = sum(\n            self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end)\n        )\n        \n        # calculate business days and remaining hours\n        business_days, remaining_seconds = divmod(abs(n * 60), business_hours_in_seconds // 60)\n        if n < 0:\n            business_days, remaining_seconds = -business_days, -remaining_seconds\n\n        business_day_offset = BusinessDay(n=business_days)\n\n        # increment by the business days\n        if business_days != 0:\n            if not self.next_bday.is_on_offset(other):\n                prev_open = self._prev_opening_time(other)\n                remain = other - prev_open\n                other = prev_open + business_day_offset + remain\n            else:\n                other = other + business_day_offset\n\n        remaining_time_offset = timedelta(minutes=remaining_seconds)\n\n        # adjusting by remaining business hours\n        if n >= 0:\n            while remaining_time_offset.total_seconds() != 0:\n                business_closing_time = self._get_closing_time(self._prev_opening_time(other))\n                time_to_closing = business_closing_time - other\n                if remaining_time_offset < time_to_closing:\n                    other += remaining_time_offset\n                    remaining_time_offset = timedelta(0)\n                else:\n                    remaining_time_offset -= time_to_closing\n                    next_opening_time = self._next_opening_time(other + time_to_closing)\n                    other = next_opening_time\n        else:\n            while remaining_time_offset.total_seconds() != 0:\n                time_to_closing = self._next_opening_time(other) - other\n                if remaining_time_offset > time_to_closing or (\n                    remaining_time_offset == time_to_closing and nanosecond != 0\n                ):\n                    other += remaining_time_offset\n                    remaining_time_offset = timedelta(0)\n                else:\n                    remaining_time_offset -= time_to_closing\n                    closing_time_adjusted = self._get_closing_time(\n                        self._next_opening_time(other + time_to_closing - timedelta(seconds=1))\n                    )\n                    other = closing_time_adjusted\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}