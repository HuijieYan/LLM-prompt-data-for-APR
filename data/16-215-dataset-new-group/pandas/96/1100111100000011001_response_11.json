{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        bd, r = divmod(abs(self.n), self.businesshours // 60)\n        # Adjust for negative business days\n        if self.n < 0:\n            bd = -bd\n            r = -r\n\n        # Adjust for business days\n        if bd:\n            other_date = other.date()\n            for i in range(abs(bd)):\n                if self.n > 0:\n                    other_date += timedelta(days=1)\n                    while other_date.weekday() > 4 or other_date in self.holidays:\n                        other_date += timedelta(days=1)\n                else:\n                    other_date -= timedelta(days=1)\n                    while other_date.weekday() > 4 or other_date in self.holidays:\n                        other_date -= timedelta(days=1)\n            other = datetime.combine(other_date, other.timetz())\n\n        # Adjust for remaining business hours\n        if r:\n            business_hour_start = self.start[other.weekday()]\n            business_hour_end = self.end[other.weekday()]\n            current_time = other.timetz()\n            if self.n >= 0:  # Forward adjustment\n                if current_time >= business_hour_end:\n                    other = datetime.combine(other.date() + timedelta(days=1), business_hour_start)\n                    r -= (business_hour_end.hour - current_time.hour) * 60 + business_hour_end.minute - current_time.minute\n            else:  # Backward adjustment\n                if current_time < business_hour_start or (current_time == business_hour_start and current_time.minute == 0):\n                    other = datetime.combine(other.date() - timedelta(days=1), business_hour_end)\n                    r -= (current_time.hour - business_hour_start.hour) * 60 + current_time.minute - business_hour_start.minute\n\n            if r:\n                hours, mins = divmod(r, 60)\n                other = other + timedelta(hours=hours, minutes=mins)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}