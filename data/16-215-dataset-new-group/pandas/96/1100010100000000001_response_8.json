{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # reset timezone and nanosecond\n            other = datetime(\n                other.year,\n                other.month,\n                other.day,\n                other.hour,\n                other.minute,\n                other.second,\n                other.microsecond,\n            )\n            n = self.n\n\n            # add logic to adjust for business days\n            if n > 0:\n                # adjust for business hours\n                businesshours = sum(\n                    self._get_business_hours_by_sec(st, en)\n                    for st, en in zip(self.start, self.end)\n                )\n                timedelta_for_hours = timedelta(seconds=n * 60)\n                business_day_adjustment, remaining_hours = divmod(timedelta_for_hours, timedelta(minutes=businesshours // 60))\n                if remaining_hours < 0:\n                    remaining_hours = 0\n\n                if business_day_adjustment.days > 0:\n                    other += BusinessDay(n=business_day_adjustment.days)\n\n                # adjust for remaining business hours\n                while remaining_hours.total_seconds() > 0:\n                    closing_time = self._get_closing_time(other)\n                    time_interval = closing_time - other\n                    if remaining_hours > time_interval or (\n                            remaining_hours == time_interval and other.nanosecond != 0):\n                        # finish adjusting if possible\n                        other += remaining_hours\n                        remaining_hours = timedelta(0)\n                    else:\n                        # go to next business time interval\n                        remaining_hours -= time_interval\n                        other = self._next_opening_time(other + time_interval)\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import BaseOffset",
                "from datetime import datetime, timedelta",
                "from pandas.tseries.offsets import BusinessDay"
            ]
        }
    ]
}