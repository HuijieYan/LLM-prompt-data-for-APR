{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def adjust_business_hours(remaining, dt):\n            total_hours = (self.end[0].hour - self.start[0].hour) * 60\n            total_minutes = (self.end[0].minute - self.start[0].minute)\n\n            if self.n >= 0:  # adjust time if n is positive\n                while remaining >= timedelta(minutes=total_minutes + total_hours):\n                    dt += timedelta(days=1)\n                    dt = self._next_opening_time(dt)\n                    remaining -= timedelta(minutes=total_minutes + total_hours)\n                if remaining > timedelta(0):\n                    dt += remaining\n                return dt\n            else:  # adjust time if n is negative\n                while remaining >= timedelta(minutes=total_minutes + total_hours):\n                    dt -= timedelta(days=1)\n                    dt = self._next_opening_time(dt)\n                    remaining -= timedelta(minutes=total_minutes + total_hours)\n                if remaining > timedelta(0):\n                    dt -= remaining\n                return dt",
            "import_list": [
                "from datetime import timedelta"
            ]
        }
    ]
}