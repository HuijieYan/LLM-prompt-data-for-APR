{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            adjusted_datetime = other\n            n = self.n\n\n            while n != 0:\n                if n > 0:\n                    # move forward in time, check for start/end of business hours\n                    if adjusted_datetime.hour >= self.end.hour or not self._is_on_offset(adjusted_datetime):\n                        adjusted_datetime = self._next_opening_time(adjusted_datetime)\n                else:\n                    # move backward in time, check for start/end of business hours\n                    if adjusted_datetime.hour < self.start.hour or not self._is_on_offset(adjusted_datetime):\n                        adjusted_datetime = self._prev_opening_time(adjusted_datetime)\n                        adjusted_datetime = self._get_closing_time(adjusted_datetime)\n\n                # move by one business hour\n                adjusted_datetime += pd.Timedelta('1H') if n > 0 else pd.Timedelta('-1H')\n                business_day = adjusted_datetime.dayofweek < 5\n                if business_day:\n                    n -= 1\n\n            return adjusted_datetime\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}