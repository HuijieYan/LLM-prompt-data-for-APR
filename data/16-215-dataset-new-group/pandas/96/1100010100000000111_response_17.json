{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        # handle negative offsets correctly\n        if n < 0:\n            # reverse start and end times\n            start = self.end\n            end = self.start\n        else:\n            start = self.start\n            end = self.end\n\n        # handle the case where other is a business time\n        if other.time() in start:\n            # adjust for holidays\n            if self._is_on_offset(other) and self._is_on_holiday(other):\n                other = self._next_opening_time(other)\n\n            # get total business hours by sec in one business day\n            businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(start, end))\n            \n            # calculate the business days and remaining hours\n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n\n            # handle business days adjustment\n            if bd != 0:\n                skip_bd = BusinessDay(n=bd)\n                if not self._is_on_offset(other):\n                    if n < 0:\n                        other = self._prev_opening_time(other)\n                    else:\n                        other = self._next_opening_time(other)\n                other = other + skip_bd\n\n            # remaining business hours adjustment\n            bhour_remain = timedelta(minutes=r)\n\n            while bhour_remain != timedelta(0):\n                # business hour left in this business time interval\n                bhour = self._next_opening_time(other) - other\n                if bhour_remain < bhour:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    other = self._next_opening_time(other + bhour)\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}