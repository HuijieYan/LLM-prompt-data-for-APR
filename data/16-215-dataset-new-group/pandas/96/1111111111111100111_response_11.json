{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # The existing code to reset timezone and nanosecond\n\n        # Consider the holiday in the CustomBusinessHour frequency\n        adjusted_other = self.rollforward(other)  # Adjust for holidays\n        n = self.n\n        if n >= 0:\n            if adjusted_other not in self or not self._is_on_offset(adjusted_other):\n                adjusted_other = self._next_opening_time(adjusted_other)\n                adjusted_other = self._get_closing_time(adjusted_other)\n        else:\n            if adjusted_other.time() in self.start:\n                # adjustment to move to previous business day\n                adjusted_other = adjusted_other - timedelta(seconds=1)\n            if not self._is_on_offset(adjusted_other):\n                adjusted_other = self._next_opening_time(adjusted_other - timedelta(seconds=1))\n                adjusted_other = self._get_closing_time(adjusted_other)\n\n        # Get total business hours by sec in one business day\n        # The rest of the code for calculating business hours and adjustments can remain the same\n\n        return adjusted_other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.core.offsets import CustomBusinessHour"
            ]
        }
    ]
}