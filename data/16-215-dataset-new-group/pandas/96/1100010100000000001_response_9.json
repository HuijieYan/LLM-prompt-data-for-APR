{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def adjust_remaining_business_hours(self, other, nanosecond, n):\n    # Remaining business hours to adjust\n    businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n    bd, r = divmod(abs(n * 60), businesshours // 60)\n    if n < 0:\n        bd, r = -bd, -r\n\n    # Adjust by business days first\n    if bd != 0:\n        skip_bd = BusinessDay(n=bd)\n        if not self._is_on_offset(other):\n            other = self._next_opening_time(other)\n        other = other + skip_bd\n\n    # Remaining business hours to adjust\n    bhour_remain = timedelta(minutes=r)\n\n    while bhour_remain != timedelta(0):\n        # Business hour left in this business time interval\n        if n >= 0:\n            # For positive offsets\n            bhour = (\n                self._get_closing_time(self._prev_opening_time(other)) - other\n            )\n        else:\n            # For negative offsets\n            bhour = self._next_opening_time(other) - other\n        if (\n            bhour_remain > bhour\n            or bhour_remain == bhour\n            and nanosecond != 0\n        ):\n            # Finish adjusting if possible\n            other += bhour_remain\n            bhour_remain = timedelta(0)\n        else:\n            # Go to next business time interval\n            bhour_remain -= bhour\n            if n < 0:\n                other = self._get_closing_time(self._next_opening_time(other + bhour - timedelta(seconds=1)))\n\n    return other",
            "import_list": [
                "from pandas.tseries.offsets import apply_wraps, BusinessDay, apply_wraps",
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}