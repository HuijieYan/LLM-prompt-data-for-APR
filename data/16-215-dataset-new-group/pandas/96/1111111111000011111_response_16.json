{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # Reset timezone and nanosecond\n        other = other.replace(tzinfo=None, nanosecond=0)\n        n = self.n\n\n        # Adjust other to reduce the number of cases to handle\n        opening_time = self._next_opening_time(other)\n        if other.time() in self.end or not self._is_on_offset(other):\n            other = opening_time\n        else:\n            # If other is a non-business time due to holidays, move to the next opening time\n            while not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n\n        # Calculate the total business hours in one business day\n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n        # Calculate the number of business days and remaining minutes\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # Adjust by business days first\n        if bd != 0:\n            skip_bd = pd.offsets.BusinessDay(n=bd)\n            other = opening_time + skip_bd\n\n        # Adjust remaining business hours\n        if n >= 0:\n            while r != 0:\n                closing_time = self._get_closing_time(other)\n                diff = self._next_opening_time(closing_time) - other\n                if diff.total_seconds() // 60 <= r:\n                    other = self._next_opening_time(closing_time)\n                    r -= diff.total_seconds() // 60\n                else:\n                    other += pd.Timedelta(minutes=r)\n                    r = 0\n        else:\n            while r != 0:\n                next_opening = self._next_opening_time(other)\n                diff = next_opening - other\n                if diff.total_seconds() // 60 < r:\n                    other = self._get_closing_time(next_opening - pd.Timedelta(seconds=1))\n                    r -= diff.total_seconds() // 60\n                else:\n                    other += pd.Timedelta(minutes=r)\n                    r = 0\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}