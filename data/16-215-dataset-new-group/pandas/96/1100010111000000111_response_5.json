{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if other.date() in self.holidays:\n            raise ApplyTypeError(\"Holiday detected. Cannot combine business hour with a holiday.\")\n        \n        n = self.n\n\n        # reset timezone and nanosecond\n        other = other.replace(hour=0, minute=0, second=0, microsecond=0)\n\n        next_business_day = self.next_business_day(other.date())\n\n        if n >= 0:\n            while n > 0:\n                if other >= next_business_day:\n                    other = datetime(\n                        other.year,\n                        other.month,\n                        other.day,\n                        self.start[0].hour,\n                        self.start[0].minute,\n                    )\n                    next_business_day = self.next_business_day(other.date())\n                if other.time() not in self.end:\n                    other = self._next_opening_time(other)\n                other += timedelta(hours=1)\n                n -= 1\n            if other.time() not in self.end:\n                other = self._next_opening_time(other)\n        else:\n            while n < 0:\n                if other > next_business_day:\n                    other = datetime(\n                        other.year,\n                        other.month,\n                        other.day,\n                        self.end[0].hour,\n                        self.end[0].minute,\n                    )\n                    next_business_day = self.next_business_day(other.date())\n                if other.time() not in self.start:\n                    other = self._prev_opening_time(other)\n                other -= timedelta(hours=1)\n                n += 1\n            if other.time() not in self.start:\n                other = self._prev_opening_time(other)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}