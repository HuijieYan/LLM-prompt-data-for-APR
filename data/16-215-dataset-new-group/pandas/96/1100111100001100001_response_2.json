{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        abs_n = abs(self.n)\n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        \n        # Calculate business days to adjust\n        bd, r = divmod(abs(self.n * 60), businesshours // 60)\n        if self.n < 0:\n            bd, r = -bd, -r\n        \n        adjusted_time = other\n        \n        # Adjust by business days\n        if bd != 0:\n            adjusted_time += CustomBusinessDay(n=bd)\n        \n        # Calculate remaining business hours to adjust\n        bhour_remain = timedelta(minutes=r)\n        \n        # Adjust remaining business hours\n        while bhour_remain > timedelta(0):\n            if self.n >= 0:\n                closing_time = self._get_closing_time(adjusted_time)\n                next_opening = self._next_opening_time(adjusted_time)\n                bhour = next_opening - adjusted_time\n                if bhour_remain >= bhour:\n                    bhour_remain -= bhour\n                    adjusted_time = next_opening\n                else:\n                    adjusted_time += bhour_remain\n                    bhour_remain = timedelta(0)\n                    break\n            else:\n                opening_time = self._next_opening_time(adjusted_time)\n                closing_time = self._get_closing_time(opening_time)\n                bhour = closing_time - adjusted_time\n                if bhour_remain >= bhour:\n                    bhour_remain -= bhour\n                    adjusted_time = closing_time\n                else:\n                    adjusted_time += bhour_remain\n                    bhour_remain = timedelta(0)\n                    break\n        \n        return adjusted_time\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}