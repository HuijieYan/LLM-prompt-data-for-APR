{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, pd.Timestamp):\n        n = self.n\n        if n >= 0:\n            if other.time() not in self.end and self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                other -= pd.Timedelta(seconds=1)\n            if self._is_on_offset(other):\n                other = self._get_closing_time(other)\n    \n        # get total business hours by sec in one business day\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n    \n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n    \n        # remaining business hours to adjust\n        bhour_remain = pd.Timedelta(minutes=r)\n    \n        if bd != 0:\n            skip_bd = pd.offsets.CustomBusinessDay(n=bd, weekmask=self.weekmask, holidays=self.holidays)\n            other = other + skip_bd\n    \n        if n >= 0:\n            while bhour_remain != pd.Timedelta(0):\n                bhour = pd.Timedelta(seconds=(self._prev_opening_time(other) - other).seconds)\n                if bhour_remain < bhour:\n                    other += bhour_remain\n                    bhour_remain = pd.Timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    other = self._next_opening_time(other + bhour)\n        else:\n            while bhour_remain != pd.Timedelta(0):\n                bhour = pd.Timedelta(seconds=(self._next_opening_time(other) - other).seconds)\n                if bhour_remain >= bhour:\n                    other += bhour\n                    bhour_remain -= bhour\n                else:\n                    bhour_remain = pd.Timedelta(0)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with pd.Timestamp\")",
            "import_list": []
        }
    ]
}