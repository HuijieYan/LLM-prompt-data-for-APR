{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        # Adjust the timezone and nanosecond\n        other = other.replace(tzinfo=None, microsecond=0)\n\n        if n >= 0:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                if self._is_on_offset(other):\n                    # adjustment to move to previous business day\n                    other = other - timedelta(days=1)\n                other = self._get_closing_time(other)\n\n        # Calculate business days adjustment\n        if n != 0:\n            skip_bd = BusinessDay(n=n)\n            other += skip_bd\n\n        # Adjust remaining business hours\n        if n >= 0:\n            while n >= 0:\n                bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                if n == 0 or bhour >= timedelta(0):\n                    # finish adjusting if possible\n                    other += timedelta(hours=businesshours / 60 * n)\n                    return other\n                else:\n                    # go to next business time interval\n                    other = self._next_opening_time(other + bhour)\n        else:\n            while n < 0:\n                bhour = self._next_opening_time(other) - other\n                if n == 0 or bhour <= timedelta(0):\n                    # finish adjusting if possible\n                    other += timedelta(hours=businesshours / 60 * n)\n                    return other\n                else:\n                    # go to next business time interval\n                    other = self._get_closing_time(\n                        self._next_opening_time(other + bhour - timedelta(seconds=1))\n                    )\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}