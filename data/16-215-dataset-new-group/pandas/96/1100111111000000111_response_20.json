{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # more reliable way to remove timezone and nanosecond\n        other = as_datetime(other)\n\n        n = self.n\n\n        if n >= 0:\n            next_opening = self.next_open(other)\n            if not self.is_on_offset(next_opening):\n                next_opening = self._next_opening_time(other)\n            other = next_opening\n\n            # this is now included in _get_business_hours_by_sec\n            # businesshours = sum(self._get_business_hours_by_sec(st, en)\n            #                     for st, en in zip(self.start, self.end))\n\n            # original code start\n            bd, r = divmod(abs(n * 60), self._business_hours)\n            if n < 0:\n                bd, r = -bd, -r\n\n            if bd != 0:\n                if not self.next_bday().is_on_offset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + self._bd_offset(bd) + remain\n                else:\n                    other = other + self._bd_offset(bd)\n\n            bhour_remain = _get_offset_by_offset(str(abs(r)) + \"Min\")\n            if n < 0:\n                bhour_remain.map(lambda x: -x)\n\n            while bhour_remain != timedelta(0):\n                bhour = min(\n                    roll_yearday(end, -1) - other if n < 0 else end - other\n                    for start, end in zip(self.start, self.end) if start <= other <= end\n                )\n\n                if n < 0:\n                    bhour = -bhour\n\n                other += min(bhour, bhour_remain)\n                bhour_remain -= min(bhour, bhour_remain)\n\n        # remaining handling of negative n can be done in a similar way\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}