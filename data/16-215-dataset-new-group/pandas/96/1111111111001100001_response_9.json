{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        start_time = self.start[0]\n        end_time = self.end[0]\n\n        # Adjust the other datetime to reduce the number of cases to handle\n        other = other.replace(hour=start_time.hour, minute=start_time.minute, second=0, microsecond=0)\n        \n        # Adjust other based on business hours and holidays\n        if n >= 0:\n            if other.time() >= end_time or other.weekday() in [5, 6] or other in self.holidays:\n                other = self._next_opening_time(other)\n        else:\n            if other.time() <= start_time:\n                other -= timedelta(days=1)\n            if other.weekday() in [5, 6] or other in self.holidays:\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        # Calculate total business hours in one business day\n        businesshours = (end_time.hour - start_time.hour) * 60\n\n        bd, r = divmod(abs(n * 60), businesshours)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # Adjust by business days first\n        if bd != 0:\n            skip_bd = CustomBusinessHour(n=bd, start=start_time, end=end_time, holidays=self.holidays)\n            if not skip_bd.is_on_offset(other):\n                prev_open = self._prev_opening_time(other)\n                remain = other - prev_open\n                other = prev_open + skip_bd + remain\n            else:\n                other += skip_bd\n\n        # Remaining business hours to adjust\n        bhour_remain = timedelta(minutes=r)\n\n        if n >= 0:\n            while bhour_remain.total_seconds() > 0:\n                bhour = (datetime.combine(other.date(), end_time) - other)\n                if bhour_remain < bhour:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    other = self._next_opening_time(other + bhour)\n        else:\n            while bhour_remain.total_seconds() > 0:\n                bhour = self._next_opening_time(other) - other\n                if bhour_remain >= bhour:\n                    other += bhour\n                    bhour_remain -= bhour\n                else:\n                    bhour_remain = timedelta(0)\n                    if other.time() != end_time or other.time() == end_time and other.nanosecond != 0:\n                        other += bhour_remain\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "import pandas as pd",
                "from pandas.tseries.offsets import CustomBusinessHour",
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}