{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime.datetime):\n            n = self.n\n            start_time = datetime.datetime(\n                other.year,\n                other.month,\n                other.day,\n                self.start[0].hour,\n                self.start[0].minute\n            )\n            end_time = datetime.datetime(\n                other.year,\n                other.month,\n                other.day,\n                self.end[0].hour,\n                self.end[0].minute\n            )\n            if n >= 0:\n                if other.time() > end_time.time() or not self.is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() < start_time.time():\n                    other = other - datetime.timedelta(seconds=1)\n                if not self.is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n\n            # calculate business hours and adjust by business days\n            # remaining business hours to adjust\n            business_hours = (end_time - start_time).seconds\n            total_minutes = abs(n * 60)\n            business_days = total_minutes // business_hours\n            remaining_minutes = total_minutes % business_hours\n\n            if n < 0:\n                business_days *= -1\n                remaining_minutes *= -1\n\n            if business_days != 0:\n                skip_bd = BusinessDay(n=business_days)\n                if not self.next_bday.is_on_offset(other):\n                    other = self._prev_opening_time(other)\n                other = other + skip_bd\n\n            # adjust remaining business hours\n            remaining_timedelta = datetime.timedelta(minutes=remaining_minutes)\n\n            while remaining_timedelta != datetime.timedelta(0):\n                time_next_opening = self._next_opening_time(other)\n                time_prev_opening = self._prev_opening_time(other)\n\n                if n >= 0:\n                    business_time_remaining = time_next_opening - other\n                    if remaining_timedelta < business_time_remaining:\n                        other += remaining_timedelta\n                        remaining_timedelta = datetime.timedelta(0)\n                    else:\n                        remaining_timedelta -= business_time_remaining\n                        other = time_next_opening\n                else:\n                    business_time_remaining = other - time_prev_opening\n                    if remaining_timedelta > business_time_remaining:\n                        other -= remaining_timedelta\n                        remaining_timedelta = datetime.timedelta(0)\n                    else:\n                        remaining_timedelta -= business_time_remaining\n                        other = self._get_closing_time(\n                            self._next_opening_time(other - datetime.timedelta(seconds=1))\n                        )\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "import datetime"
            ]
        }
    ]
}