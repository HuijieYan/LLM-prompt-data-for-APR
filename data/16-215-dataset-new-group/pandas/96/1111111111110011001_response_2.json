{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # used for detecting edge condition\n            nanosecond = getattr(other, \"nanosecond\", 0)\n            # reset timezone and nanosecond\n            # other may be a Timestamp, thus not use replace\n            other = datetime(\n                other.year,\n                other.month,\n                other.day,\n                other.hour,\n                other.minute,\n                other.second,\n                other.microsecond,\n            )\n            n = self.n\n    \n            # This logic is updated to resolve the opened/closed time and to include BusinessDay object for adjustments\n            \n            # get total business hours by sec in one business day\n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n            \n            # Adjust the business day and time intervals\n            while n > 0:\n                if other.time() in self.end or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    n -= 1\n            while n < 0:\n                if other.time() in self.start or not self._is_on_offset(other):\n                    # adjustment to move to previous business day\n                    other = other - timedelta(seconds=1)\n                    # increased adjustment to make up for the day already lost\n                    n += 1\n                    nbd = BusinessDay(n=n)\n                    if not self.next_bday.is_on_offset(other):\n                        other = self._prev_opening_time(other)\n                    other = self.next_bday.apply(other)\n            \n            # Remaining increment or decrement of business hours definitions\n            bhours = divmod(abs(n * 60), businesshours // 60)\n            if n < 0:\n                bhours = (-bhours[0], -bhours[1])\n                \n            # Adjust by the remaining business days\n            if bhours[0] != 0:\n                nbd = BusinessDay(n=bhours[0])\n                other = nbd.apply(other)\n            \n            # adjust by the remaining business hours\n            bhour_remain = timedelta(minutes=bhours[1])\n\n            while bhour_remain != timedelta(0):\n                if n >= 0:\n                    # business hour left in this business time interval\n                    bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                    if bhour_remain < bhour:\n                        # finish adjusting if possible\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        # go to the next business time interval\n                        bhour_remain -= bhour\n                        other = self._next_opening_time(other + bhour)\n                else:\n                    # business hour left in the business time interval\n                    bhour = self._next_opening_time(other) - other\n                    if (\n                        bhour_remain > bhour\n                        or bhour_remain == bhour\n                        and nanosecond != 0\n                    ):\n                        # finish adjusting if possible\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        # go to the next business time interval\n                        bhour_remain -= bhour\n                        other = self._get_closing_time(self._next_opening_time(other + bhour - timedelta(seconds=1)))\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import BusinessDay",
                "from datetime import datetime, timedelta",
                "from pandas._libs.tslibs.offsets import ApplyTypeError"
            ]
        }
    ]
}