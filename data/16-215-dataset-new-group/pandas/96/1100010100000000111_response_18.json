{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # existing code remains intact\n        \n        # get total business hours by sec in one business day\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        minutes_in_hour = 60\n        seconds_in_minute = 60\n        business_minutes = businesshours / seconds_in_minute\n        \n        # calculate business days and remaining business hours\n        total_minutes = abs(self.n) * minutes_in_hour\n        bd, bhour_remain_minutes = divmod(total_minutes, business_minutes)\n        if self.n < 0:\n            bd, bhour_remain_minutes = -bd, -bhour_remain_minutes\n        \n        # handle adjustments for business days first\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            next_bday = self.next_bday(other)\n            if not self.next_bday.is_on_offset(other):\n                other = next_bday\n            else:\n                other += skip_bd\n        \n        # adjust remaining business hours\n        if bhour_remain_minutes != 0:\n            remaining_adjustment = timedelta(seconds=int(bhour_remain_minutes * seconds_in_minute))\n            # determine if we need to move to the next business time interval\n            next_opening_time = self._next_opening_time(other)\n            closing_time = self._get_closing_time(next_opening_time)\n            remaining_business_minutes = closing_time - other\n            if self.n >= 0:\n                while remaining_adjustment.total_seconds() > 0:\n                    if remaining_adjustment < remaining_business_minutes:\n                        other += remaining_adjustment\n                        remaining_adjustment = timedelta(0)\n                    else:\n                        remaining_adjustment -= remaining_business_minutes\n                        other = self._next_opening_time(other + remaining_business_minutes)\n                        remaining_business_minutes = self._get_closing_time(other) - other\n            else:\n                while remaining_adjustment.total_seconds() > 0:\n                    if remaining_adjustment > remaining_business_minutes or remaining_adjustment == remaining_business_minutes:\n                        other += remaining_adjustment\n                        remaining_adjustment = timedelta(0)\n                    else:\n                        remaining_adjustment -= remaining_business_minutes\n                        other = self._get_closing_time(self._next_opening_time(other + remaining_business_minutes - timedelta(seconds=1)))\n                        remaining_business_minutes = self._next_opening_time(other) - other\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}