{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            bd, r = divmod(abs(n), 8)\n\n            if n < 0:  # adjust sign\n                bd, r = -bd, -r\n\n            other_time = other.time()\n\n            if n > 0:  # move to next business hour\n                if other_time in self.end or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other_time in self.start:  # move to previous business day\n                    other = other - timedelta(seconds=1)\n                if not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n\n            businesshours_per_day = []\n            for st, en in zip(self.start, self.end):\n                businesshours_per_day.append(self._get_business_hours_by_sec(st, en))\n\n            if n != 0:  # adjust by business days first\n                skip_bd = BusinessDay(n=bd)\n                if not self.next_bday.is_on_offset(other):  # midnight business hour may not be on BusinessDay\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + skip_bd + remain\n                else:\n                    other = other + skip_bd\n\n            bhour_remain = timedelta(minutes=r)\n\n            if n > 0:  # for positive n\n                while bhour_remain != timedelta(0):\n                    prev_open = self._prev_opening_time(other)\n                    closing_time = self._get_closing_time(prev_open)\n                    bhour = closing_time - other\n                    if bhour_remain <= bhour:  # finish adjusting if possible\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:  # go to next business time interval\n                        bhour_remain -= bhour\n                        other = self._next_opening_time(closing_time + timedelta(seconds=1))\n            else:  # for non-positive n\n                while bhour_remain != timedelta(0):\n                    next_open = self._next_opening_time(other)\n                    bhour = next_open - other\n                    if bhour_remain > bhour or (bhour_remain == bhour and other.nanosecond != 0):  # finish adjusting if possible\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:  # go to next business time interval\n                        bhour_remain -= bhour\n                        other = self._get_closing_time(next_open - timedelta(seconds=1))\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}