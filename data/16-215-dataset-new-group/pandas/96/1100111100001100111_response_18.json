{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        other_date = other.replace(minute=0, second=0, microsecond=0)  # Reset minute, second, microsecond\n\n        if n >= 0:\n            if self._is_on_offset(other_date):\n                next_opening_time = self._next_opening_time(other_date)\n            else:\n                next_opening_time = self._next_opening_time(other_date, sign=1)\n\n            if other_date.time() in self.end or not self._is_on_offset(other_date) or other_date == next_opening_time:\n                other_date = next_opening_time\n        else:\n            if other_date.time() in self.start:\n                other_date = other_date - timedelta(hours=1)\n\n            if self._is_on_offset(other_date):\n                previous_opening_time = self._prev_opening_time(other_date)\n                if previous_opening_time.time() == self.end[0]:\n                    other_date = previous_opening_time.replace(hour=self.start[0].hour, minute=self.start[0].minute)\n                    other_date = self._prev_opening_time(other_date, second=1)\n                else:\n                    other_date = previous_opening_time\n            else:\n                next_opening_time = self._next_opening_time(other_date, sign=-1)\n                other_date = next_opening_time\n\n        return other_date\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}