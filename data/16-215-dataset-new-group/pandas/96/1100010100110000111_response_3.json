{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if self.holidays and other.date() in self.holidays:\n            raise ValueError(f\"{other.date()} is a holiday\")\n        nanosecond = getattr(other, \"nanosecond\", 0)\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        n = self.n\n\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        if bd != 0:\n            skip_bd = CustomBusinessHour(n=bd, holidays=self.holidays)\n            other = other + skip_bd\n\n        business_minutes = 60 / (businesshours // len(self.start)) # minutes in each business hour\n\n        while r > 0:\n            if n >= 0:\n                business_hour_end = datetime(\n                    other.year, \n                    other.month, \n                    other.day, \n                    self.end[0].hour, \n                    self.end[0].minute\n                )\n                minutes_to_end = (business_hour_end - other).seconds/60\n                if r >= business_minutes:\n                    other = business_hour_end\n                    r -= minutes_to_end\n                else:\n                    other = other + timedelta(minutes=r)\n                    r = 0\n            else:\n                business_hour_start = datetime(\n                    other.year, \n                    other.month, \n                    other.day, \n                    self.start[-1].hour, \n                    self.start[-1].minute\n                )\n                minutes_to_start = (other - business_hour_start).seconds/60\n                if r >= minutes_to_start: # move to next business hour\n                    other = self.start[-1]\n                    r -= minutes_to_start\n                else: # minutes remaining in current business hour\n                    other = other - timedelta(minutes=r)\n                    r = 0\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import CustomBusinessHour",
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}