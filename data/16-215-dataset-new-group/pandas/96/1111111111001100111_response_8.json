{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # Reset timezone and nanosecond\n            other = datetime(\n                other.year,\n                other.month,\n                other.day,\n                other.hour,\n                other.minute,\n                other.second,\n                other.microsecond,\n            )\n            \n            # Adjust other to reduce number of cases to handle\n            if self._is_on_offset(other):\n                return other\n            \n            next_opening = self._next_opening_time(other)\n            \n            if self.n >= 0:\n                while next_opening.time() in self.start:\n                    other = next_opening\n                    next_opening = self._next_opening_time(other)\n                \n                other = next_opening\n            else:\n                if next_opening.time() in self.start:\n                    next_opening = next_opening - timedelta(seconds=1)\n                other = next_opening\n\n            total_hours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n            business_days = divmod(abs(self.n * 60), total_hours // 60)\n            \n            if self.n < 0:\n                business_days = (-business_days[0], -business_days[1])\n                \n            hours_to_adjust = timedelta(minutes=business_days[1])\n            if business_days[0] != 0:\n                other = other + BusinessDay(n=business_days[0])\n            \n            # Remaining business hours to adjust\n            if self.n >= 0:\n                while hours_to_adjust != timedelta(0):\n                    closing_time = self._get_closing_time(self._prev_opening_time(other))\n                    hours_in_interval = closing_time - other\n\n                    if hours_to_adjust <= hours_in_interval:\n                        other += hours_to_adjust\n                        break\n                    else:\n                        hours_to_adjust -= hours_in_interval\n                        other = self._next_opening_time(other + hours_in_interval)\n            else:\n                while hours_to_adjust != timedelta(0):\n                    opening_time = self._next_opening_time(other)\n                    hours_in_interval = opening_time - other\n\n                    if hours_to_adjust >= hours_in_interval:\n                        other += hours_to_adjust\n                        break\n                    else:\n                        hours_to_adjust -= hours_in_interval\n                        other = self._get_closing_time(opening_time - timedelta(seconds=1))\n            \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "import numpy as np",
                "import pandas as pd",
                "from pandas.tseries.offsets import BusinessDay, ApplyTypeError",
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}