{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # Snap the datetime to the nearest minute\n            other = other - timedelta(minutes=other.minute, seconds=other.second, microseconds=other.microsecond)\n\n            n = self.n\n            businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n            # Adjust by business days first\n            if n != 0:\n                # Determine the number of business days to skip\n                _, r = divmod(abs(n * 60), businesshours // 60)\n                if n < 0:\n                    r = -r\n                skip_bd = BusinessDay(n=n)\n                other = self.next_bday.apply(other) if r > 0 else self.next_bday.rollback(other)\n                other += skip_bd\n\n                # If we land on a weekend or a holiday, adjust to the next business day\n                if not self.is_on_offset(other):\n                    other = self._next_opening_time(other)\n\n                # Calculate the remaining business hours to adjust\n                bhour_remain = timedelta(minutes=r)\n\n                # Adjust the remaining business hours\n                while bhour_remain != timedelta(0):\n                    bhour = self._get_closing_time(other) - other if n > 0 else other - self._next_opening_time(other)\n                    if (n > 0 and bhour_remain <= bhour) or (n < 0 and bhour_remain < bhour):\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        bhour_remain -= bhour\n                        other = self._next_opening_time(other) if n > 0 else self._get_closing_time(other)\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}