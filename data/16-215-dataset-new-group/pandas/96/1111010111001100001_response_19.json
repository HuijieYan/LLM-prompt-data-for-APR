{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        if n >= 0:\n            other = self._next_opening_time(other)\n        else:\n            other = self._prev_opening_time(other)\n\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        adjustment_period = n * 60\n        adjustment_days, adjustment_remainder = divmod(abs(adjustment_period), businesshours // 60)\n        if n < 0:\n            adjustment_days, adjustment_remainder = -adjustment_days, -adjustment_remainder\n\n        if adjustment_days != 0:\n            skip_bd = BusinessDay(n=adjustment_days)\n            other = other + skip_bd\n\n        business_hours_to_adjust = timedelta(minutes=adjustment_remainder)\n\n        if n >= 0:\n            while business_hours_to_adjust != timedelta(0):\n                bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                if business_hours_to_adjust < bhour:\n                    other += business_hours_to_adjust\n                    business_hours_to_adjust = timedelta(0)\n                else:\n                    business_hours_to_adjust -= bhour\n                    other = self._next_opening_time(other + bhour)\n        else:\n            while business_hours_to_adjust != timedelta(0):\n                bhour = self._next_opening_time(other) - other\n                if business_hours_to_adjust > bhour:\n                    other += business_hours_to_adjust\n                    business_hours_to_adjust = timedelta(0)\n                else:\n                    business_hours_to_adjust -= bhour\n                    other = self._prev_opening_time(other - bhour)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}