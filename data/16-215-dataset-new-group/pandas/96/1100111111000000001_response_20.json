{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # Reset timezone and nanosecond\n        other = other.replace(tzinfo=None, microsecond=0)\n\n        n = self.n\n\n        if n >= 0:\n            if other.time() >= self.end[0] or not self.is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() < self.start[0]:\n                other = other.replace(hour=self.end[-1].hour, minute=self.end[-1].minute)\n                other -= timedelta(days=1)\n            if not self.is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        # Business hour calculations\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n        \n        # Remaining business hours to adjust\n        bhour_remain = timedelta(minutes=r)\n\n        if bd != 0:\n            skip_bd = self.next_bday()\n            if not self.is_on_offset(other):\n                prev_open = self._prev_opening_time(other)\n                remain = other - prev_open\n                other = prev_open + skip_bd + remain\n            else:\n                other = other + skip_bd\n\n        while bhour_remain != timedelta(0):\n            if n >= 0:\n                start_of_interval = self._prev_opening_time(other)\n                bhour = self._get_closing_time(start_of_interval) - other\n                if bhour_remain >= bhour:\n                    other = self._next_opening_time(start_of_interval)\n                    bhour_remain -= bhour\n                else:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n            else:\n                start_of_interval = self._next_opening_time(other)\n                bhour = start_of_interval - other\n                if bhour_remain >= bhour:\n                    other = self._get_closing_time(start_of_interval - timedelta(seconds=1))\n                    bhour_remain -= bhour\n                else:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}