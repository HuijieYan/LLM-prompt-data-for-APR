{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            non_business_seconds = 0  # to handle non-business hours separately\n            \n            # For positive business hour adjustments\n            if n >= 0:\n                n_days, n_seconds = divmod(n * 3600, 86400)  # calculate number of days\n                dt_with_offset = other + timedelta(days=n_days)  # adjust the date\n                hour = self._next_opening_time(dt_with_offset)  # next opening time\n                \n                if hour.time() == self.start.time():\n                    # If the time is in the business hours, keep it as is\n                    # Else, move to next opening time\n                    if not self._is_on_offset(hour):\n                        hour = self._next_opening_time(hour)\n                else:\n                    # If the time is not the at the start of business hour\n                    # adjust with the opening time\n                    hour = self._next_opening_time(dt_with_offset)\n                \n                bhour = self._get_closing_time(hour) - hour\n                non_business_seconds = (other - dt_with_offset).total_seconds() % 3600\n                adjusted_time = hour + timedelta(seconds=non_business_seconds)\n                return adjusted_time + timedelta(seconds=n_seconds)\n            \n            # For negative business hour adjustments\n            else:\n                n = -n  # consider absolute value for simplicity\n                n_days, n_seconds = divmod(n * 3600, 86400)  # calculate number of days\n                dt_with_offset = other - timedelta(days=n_days)  # adjust the date\n                hour = self._prev_opening_time(dt_with_offset)  # previous opening time\n                \n                if hour.time() == self.start.time():\n                    # If the time is in the business hours, keep it as is\n                    # Else, move to prev opening time\n                    if not self._is_on_offset(hour):\n                        hour = self._prev_opening_time(hour)\n                else:\n                    # If the time is not the at the start of business hour\n                    # adjust with the previous opening time\n                    hour = self._prev_opening_time(dt_with_offset) \n                    \n                bhour = self._get_closing_time(hour) - hour\n                non_business_seconds = (dt_with_offset - other).total_seconds() % 3600\n                \n                adjusted_time = hour - timedelta(seconds=non_business_seconds)\n                \n                return adjusted_time - timedelta(seconds=n_seconds)\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}