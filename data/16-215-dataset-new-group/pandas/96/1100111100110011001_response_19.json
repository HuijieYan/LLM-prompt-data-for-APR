{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # get number of business hours in a day\n        businesshours = sum((e - s).seconds // 60 for s, e in zip(self.start, self.end))\n\n        n = self.n\n        bd, r = divmod(abs(n * 60), businesshours)\n        if n < 0:\n            bd, r = -bd, -r\n\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            other = other + skip_bd\n\n        seconds_remaining = r * 60\n\n        time = other.time()\n        for s, e in zip(self.start, self.end):\n            if time < s:\n                # before business hours, move to the start of business hours\n                other = datetime.combine(other, s)\n                break\n            elif s <= time <= e:\n                # during business hours\n                if n > 0:\n                    # find the slot within business hours\n                    diff = datetime.combine(other, e) - other\n                    if seconds_remaining >= diff.seconds:\n                        other += diff\n                        seconds_remaining -= diff.seconds\n                    else:\n                        other += timedelta(seconds=seconds_remaining)\n                        break\n                else:\n                    # find the slot within business hours\n                    diff = other - datetime.combine(other, s)\n                    if seconds_remaining >= diff.seconds:\n                        other -= diff\n                        seconds_remaining -= diff.seconds\n                    else:\n                        other -= timedelta(seconds=seconds_remaining)\n                        break\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}