{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        # implement holiday checking\n        if hasattr(self, 'holidays') and other in self.holidays:\n            raise NotImplementedError(\"Holiday handling not implemented yet\")\n\n        # reset timezone and nanosecond\n        business_day = pd.offsets.CustomBusinessDay()\n        other = other.replace(hour=self.start.hour, minute=self.start.minute, second=0, microsecond=0)\n    \n        if n >= 0:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                other -= datetime.timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n    \n        # get total business hours by sec in one business day\n        total_business_hours = sum((end - start).total_seconds() for start, end in zip(self.start, self.end))\n    \n        bd, r = divmod(abs(n * 60), total_business_hours // 60)\n\n        # adjust by business days first\n        if bd != 0:\n            skip_bd = bd * business_day\n            other = other + skip_bd\n    \n        # remaining business hours to adjust\n        bhour_remain = timedelta(minutes=r)\n    \n        start_time = self.start.hour + self.start.minute / 60\n        end_time = self.end.hour + self.end.minute / 60\n    \n        if n >= 0:\n            while bhour_remain.total_seconds() > 0:\n                bhour = (end_time - other.hour - other.minute / 60) * 3600\n                if bhour_remain.total_seconds() < bhour:\n                    # finish adjusting if possible\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    # go to next business time interval\n                    bhour_remain -= timedelta(seconds=bhour)\n                    other = self._next_opening_time(other + timedelta(seconds=bhour))\n        else:\n            while bhour_remain.total_seconds() < 0:\n                bhour = (other.hour + other.minute / 60 - start_time) * 3600\n                if bhour_remain.total_seconds() > bhour:\n                    # finish adjusting if possible\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    # go to next business time interval\n                    bhour_remain += timedelta(seconds=bhour)\n                    other = self._get_closing_time(self._next_opening_time(other))\n    \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}