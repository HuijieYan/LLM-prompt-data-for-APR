{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, pd.Timestamp):\n        other = other.to_pydatetime()\n    elif not isinstance(other, datetime):\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n\n    business_day_map = {\n        0: 0,  # Monday\n        1: 1,  # Tuesday\n        2: 2,  # Wednesday\n        3: 3,  # Thursday\n        4: 4,  # Friday\n    }\n\n    if other.weekday() in business_day_map:\n        business_day = business_day_map[other.weekday()]\n\n        # Get business hours from start to end\n        businesshours = [hours.seconds / 3600 for hours in self.end - self.start]\n\n        # Adjust the business day\n        adjusted_day = other.replace(hour=self.start[business_day].hour, minute=self.start[business_day].minute, second=0, microsecond=0)\n\n        # Check if the adjusted time is not within the business hours, adjust if needed\n        if adjusted_day.time() < self.start[business_day].time():\n            adjusted_day = self._next_opening_time(adjusted_day)\n\n        # Adjust for business hours\n        while self.n >= 0 and bhour_remain.total_seconds() > 0:\n            for i in range(business_day, len(businesshours)):\n                this_day_end = adjusted_day.replace(hour=self.end[i].hour, minute=self.end[i].minute, second=0, microsecond=0)\n                business_hours_delta = this_day_end - adjusted_day\n                if bhour_remain >= business_hours_delta:\n                    adjusted_day = this_day_end\n                    bhour_remain -= business_hours_delta\n                else:\n                    adjusted_day += timedelta(seconds=bhour_remain.total_seconds())\n                    bhour_remain = pd.Timedelta(0)\n                    break\n            else:\n                business_day += 1\n                adjusted_day = self.next_bday.rollforward(adjusted_day)\n        \n        return adjusted_day\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}