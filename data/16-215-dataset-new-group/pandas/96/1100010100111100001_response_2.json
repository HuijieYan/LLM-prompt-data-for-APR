{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply_custom_business_hour(self, other):\n    if isinstance(other, datetime):\n        # Ensure other is a datetime with timezone and nanosecond reset\n        other = other.replace(tzinfo=None, microsecond=0, nanosecond=0)\n        n = self.n\n\n        # Check if the time is within the business hours\n        if other.time() not in self.start:\n            if n >= 0:\n                other = self._next_opening_time(other)\n            else:\n                # move to the previous business day\n                other -= timedelta(days=1)\n\n        # Determine the business hour length per second\n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n        # Calculate the business days and remaining business hours to adjust\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        \n        # Adjust by business days first\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            if not self.next_bday.is_on_offset(other):\n                prev_open = self._prev_opening_time(other)\n                remain = other - prev_open\n                other = prev_open + skip_bd + remain\n            else:\n                other += skip_bd\n\n        # Remaining business hours to adjust\n        bhour_remain = timedelta(minutes=r)\n\n        if n >= 0:\n            while bhour_remain > timedelta(0):\n                # Business hour left in this business time interval\n                bhour = (self._get_closing_time(self._prev_opening_time(other)) - other)\n\n                if bhour_remain < bhour:\n                    # Finish adjusting if possible\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    # Move to the next business time interval\n                    bhour_remain -= bhour\n                    other = self._next_opening_time(other + bhour)\n        else:\n            while bhour_remain < timedelta(0):\n                # Business hour left in this business time interval\n                bhour = self._next_opening_time(other) - other\n                \n                if bhour_remain >= bhour:\n                    other += bhour_remain\n                    break\n\n                # Go to the previous business time interval\n                bhour_remain += bhour\n                other = self._get_closing_time(self._next_opening_time(other - timedelta(seconds=1)))\n        \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}