{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            nanosecond = getattr(other, \"nanosecond\", 0)\n\n            # Adjust other to reduce number of cases to handle\n            other_date = datetime.combine(other.date(), datetime.min.time())\n\n            # Define business hours\n            business_hour_open = datetime.combine(other.date(), self.start) \n            business_hour_close = datetime.combine(other.date(), self.end) \n\n            if n >= 0:\n                # Handle positive offsets\n                if other_time <= business_hour_open or not self.is_on_offset(other_date):\n                    other_date = business_hour_open\n\n                while n > 0:\n                    other_date = other_date + timedelta(hours=1)\n                    if other_date >= business_hour_close:\n                        other_date = business_hour_open\n                        n -= 1\n            else:\n                # Handle negative offsets\n                if other_date >= business_hour_close:\n                    other_date = business_hour_close - timedelta(seconds=1)\n                if self.is_on_offset(other_date):\n                    other_date = business_hour_open\n\n                while n < 0:\n                    other_date = other_date - timedelta(hours=1)\n                    if other_date < business_hour_open:\n                        other_date = business_hour_close - timedelta(seconds=1)\n                        n += 1\n\n            return other_date\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import BusinessHour"
            ]
        }
    ]
}