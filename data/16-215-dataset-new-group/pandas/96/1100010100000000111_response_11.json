{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        business_hours = self._get_business_hours()\n        \n        # Adjust for holidays\n        if other in self.holidays:\n            other = self._next_opening_time(other)\n        \n        # Calculate the total number of business days and remaining time\n        business_days, remaining_time = divmod(abs(n * 60), business_hours // 60)\n        if n < 0:\n            business_days, remaining_time = -business_days, -remaining_time\n        \n        # Adjust the date by the number of business days\n        if business_days != 0:\n            other = self._adjust_for_business_days(other, business_days)\n        \n        # Adjust remaining business hours\n        if n >= 0:\n            while remaining_time > timedelta(0):\n                remaining_in_interval = self._get_remaining_time_in_interval(other)\n                if remaining_time < remaining_in_interval:\n                    other += remaining_time\n                    remaining_time = timedelta(0)\n                else:\n                    remaining_time -= remaining_in_interval\n                    other = self._next_opening_time(other + remaining_in_interval)\n        else:\n            while remaining_time < timedelta(0):\n                remaining_in_interval = self._get_remaining_time_in_interval(other)\n                if abs(remaining_time) < remaining_in_interval:\n                    other += remaining_time\n                    remaining_time = timedelta(0)\n                else:\n                    remaining_time += remaining_in_interval\n                    other = self._next_opening_time(other - remaining_in_interval)\n        \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}