{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if isinstance(self, CustomBusinessHour):\n            other = as_datetime(other)\n            n = self.n\n\n            # Get the total business hours by sec in one business day\n            business_hours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            # Adjust for holidays\n            holidays = frozenset(self.holidays)\n            periods = pd.date_range(start=other, end=other, freq=\"B\").tolist()\n            offset = pd.offsets.CustomBusinessHour(\n                start=self.start, end=self.end, holidays=holidays\n            )\n            holidays_hours = 0\n            for p in periods:\n                # Calculate the amount of time from the previous holiday\n                delta = (p.replace(second=0, microsecond=0) - p.replace(hour=0, minute=0, second=0, microsecond=0)).total_seconds() / 3600\n                holidays_hours += (business_hours // 3600) * delta\n\n            if n >= 0:\n                # Calculate the number of increments to move forward\n                increments = n + (n // len(self.end)) * len(holidays)\n                result = other\n                for _ in range(increments):\n                    result = result + offset\n            else:\n                # Calculate the number of increments to move backward\n                increments = n - (n // len(self.start)) * len(holidays)\n                result = other\n                for _ in range(-increments):\n                    result = result - offset\n\n            return result\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}