{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n\n        if self.n >= 0:\n            # adjust for next opening time\n            other = self._next_opening_time(other) if other.time() in self.end or not self._is_on_offset(other) else other\n        else:\n            # adjust for previous closing time\n            other = other - timedelta(seconds=1) if other.time() in self.start else other\n            other = self._next_opening_time(other) if not self._is_on_offset(other) else other\n            other = self._get_closing_time(other)\n\n        # logic for adjusting business days\n        if self.n != 0:\n            other += timedelta(days=self.n)\n\n        # get adjusted total business hours\n        business_hours = sum([((e - s).seconds / 60) for s, e in zip(self.start, self.end)])\n\n        mins_to_adjust = self.n * business_hours\n\n        # adjust the business hours\n        while mins_to_adjust != 0:\n            if self.n >= 0:\n                bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                if bhour.seconds / 60 >= mins_to_adjust:\n                    other += timedelta(minutes=mins_to_adjust)\n                    mins_to_adjust = 0\n                else:\n                    mins_to_adjust -= bhour.seconds / 60\n                    other = self._next_opening_time(other + bhour)\n            else:\n                bhour = self._next_opening_time(other) - other\n                if bhour.seconds / 60 <= mins_to_adjust:\n                    other += timedelta(minutes=mins_to_adjust)\n                    mins_to_adjust = 0\n                else:\n                    mins_to_adjust += bhour.seconds / 60\n                    other = self._get_closing_time(self._next_opening_time(other) - timedelta(seconds=1))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}