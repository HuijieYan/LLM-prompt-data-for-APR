{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # used for detecting edge condition\n            nanosecond = getattr(other, \"nanosecond\", 0)\n            other = datetime(\n                other.year,\n                other.month,\n                other.day,\n                other.hour,\n                other.minute,\n                other.second,\n                other.microsecond,\n            )\n            n = self.n\n\n            if n >= 0:\n                if other.time() in self.end or not self.is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start:\n                    other -= timedelta(seconds=1)\n                if not self.is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n\n            business_hours_in_seconds = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            business_days, remaining_seconds = divmod(abs(n * 60), business_hours_in_seconds // 60)\n            if n < 0:\n                business_days, remaining_seconds = -business_days, -remaining_seconds\n\n            if business_days != 0:\n                skip_bd = BusinessDay(n=business_days)\n                if not self.next_bday.is_on_offset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + skip_bd + remain\n                else:\n                    other += skip_bd\n\n            remaining_timedelta = timedelta(minutes=remaining_seconds)\n\n            if n >= 0:\n                while remaining_timedelta != timedelta(0):\n                    interval_closing_time = self._get_closing_time(self._prev_opening_time(other))\n                    business_hours_left = interval_closing_time - other\n\n                    if remaining_timedelta < business_hours_left:\n                        other += remaining_timedelta\n                        remaining_timedelta = timedelta(0)\n                    else:\n                        remaining_timedelta -= business_hours_left\n                        other = self._next_opening_time(other + business_hours_left)\n            else:\n                while remaining_timedelta != timedelta(0):\n                    next_interval_opening_time = self._next_opening_time(other)\n                    business_hours_left = next_interval_opening_time - other\n\n                    if remaining_timedelta > business_hours_left or (remaining_timedelta == business_hours_left and nanosecond != 0):\n                        other += remaining_timedelta\n                        remaining_timedelta = timedelta(0)\n                    else:\n                        remaining_timedelta -= business_hours_left\n                        other = self._get_closing_time(self._next_opening_time(other + business_hours_left - timedelta(seconds=1)))\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}