{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        # Perform necessary adjustments based on the value of n\n        if n >= 0:\n            while n > 0:\n                # Move to the next business day if the current time is outside of business hours\n                if other.time() not in self.start or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                n -= 1\n        else:\n            while n < 0:\n                # Move to the previous business day if the current time is outside of business hours\n                if other.time() in self.start:\n                    other -= timedelta(seconds=1)\n                if not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n                n += 1\n\n        # Calculate total business hours by second in one business day\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        # Calculate business days and remaining business hours\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n\n        if n < 0:\n            bd, r = -bd, -r\n\n        # Adjust by business days first if necessary\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            # Move to the next business day\n            other += skip_bd\n\n        # Adjust the remaining business hours\n        bhour_remain = timedelta(minutes=r)\n\n        if n >= 0:\n            while bhour_remain != timedelta(0):\n                bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                if bhour_remain < bhour:\n                    # Finish adjusting if possible\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    # Move to the next business time interval\n                    bhour_remain -= bhour\n                    other = self._next_opening_time(other + bhour)\n        else:\n            while bhour_remain != timedelta(0):\n                bhour = self._next_opening_time(other) - other\n                if bhour_remain > bhour:\n                    # Finish adjusting if possible\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    # Move to the previous business time interval\n                    bhour_remain -= bhour\n                    other = self._get_closing_time(self._next_opening_time(other - timedelta(seconds=1)))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}