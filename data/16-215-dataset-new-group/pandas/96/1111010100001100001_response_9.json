{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, (date, datetime)):\n            if isinstance(other, Timestamp):\n                other = as_datetime(other)  # Convert Timestamp to datetime\n            \n            n = self.n\n            direction = 1 if n >= 0 else -1\n            iteration = abs(n)\n            \n            # Adjust other to the nearest business day first\n            for _ in range(iteration):\n                while not self._is_on_offset(other):\n                    other += timedelta(days=direction)\n        \n            # Adjust the time within the business day\n            while iteration > 0:\n                if direction == 1 and other.time() in self.end:\n                    other = self._next_opening_time(other)\n                elif direction == -1 and other.time() in self.start:\n                    other -= timedelta(seconds=1)\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n                else:\n                    if direction == 1:\n                        business_hours = (self.end[0].hour - other.hour) * 3600 + \\\n                                         (self.end[0].minute - other.minute) * 60 + \\\n                                         (self.end[0].second - other.second)\n                    else:\n                        business_hours = (other.hour - self.start[0].hour) * 3600 + \\\n                                         (other.minute - self.start[0].minute) * 60 + \\\n                                         (other.second - self.start[0].second)\n                    elapsed = min(business_hours, 60*n*60)  # Total elapsed time within business hours\n                    other += timedelta(seconds=elapsed * direction)\n                    iteration -= 1\n                \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}