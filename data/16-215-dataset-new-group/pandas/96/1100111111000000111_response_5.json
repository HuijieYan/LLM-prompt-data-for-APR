{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n\n            # reset timezone and nanosecond\n            other = other.replace(tzinfo=None, microsecond=0)\n\n            if n >= 0:\n                while n > 0:\n                    if other.hour in range(self.start.hour, self.end.hour):\n                        # move to the end of the current hour\n                        other += timedelta(hours=1 - other.hour, minutes=60 - other.minute,\n                                           seconds=60 - other.second)\n                    elif other.hour < self.start.hour:  # before business hours\n                        other = datetime(other.year, other.month, other.day,\n                                         self.start.hour, 0, 0, tzinfo=None)\n                    else:  # after business hours\n                        other = datetime(other.year, other.month, other.day + 1,\n                                         self.start.hour, 0, 0, tzinfo=None)\n\n                    if date(other.year, other.month, other.day) in self.holidays:\n                        other += timedelta(days=1)  # move to the next day if it's a holiday\n                    else:\n                        n -= 1  # reduce the count of business hours\n\n            else:  # n < 0 (moving backwards in time)\n                while n < 0:\n                    if other.hour in range(self.start.hour, self.end.hour + 1):\n                        # move to the start of the current hour\n                        other -= timedelta(hours=other.hour - self.start.hour, minutes=other.minute,\n                                           seconds=other.second)\n                    elif other.hour > self.end.hour:  # after business hours\n                        other = datetime(other.year, other.month, other.day,\n                                         self.end.hour, 0, 0, tzinfo=None)\n                    else:  # before business hours\n                        other = datetime(other.year, other.month, other.day - 1,\n                                         self.end.hour, 0, 0, tzinfo=None)\n\n                    if date(other.year, other.month, other.day) in self.holidays:\n                        other -= timedelta(days=1)  # move to the previous day if it's a holiday\n                    else:\n                        n += 1  # increase the count of business hours\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}