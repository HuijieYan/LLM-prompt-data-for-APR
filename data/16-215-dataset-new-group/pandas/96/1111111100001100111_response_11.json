{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        adjust_datetime = False\n        if self._is_on_offset(other):\n            return other\n        else:\n            adjusted_time = self._next_opening_time(other) if self.n >= 0 else self._next_opening_time(other - timedelta(seconds=1))\n            adjusted_time = self._get_closing_time(adjusted_time) if self.n < 0 else adjusted_time\n            if self.n != 0:\n                business_day = BusinessDay(n=self.n)\n                if not self.next_bday.is_on_offset(adjusted_time):\n                    prev_open = self._prev_opening_time(adjusted_time)\n                    remain = adjusted_time - prev_open\n                    adjusted_time = prev_open + business_day + remain\n                    adjust_datetime = True\n                else:\n                    adjusted_time += business_day\n                    adjust_datetime = True\n            bhour_remain = abs(self.n) * 60\n            while bhour_remain > 0:\n                if self.n >= 0:\n                    bhour = self._get_closing_time(self._prev_opening_time(adjusted_time)) - adjusted_time\n                    if bhour_remain < bhour.seconds // 60:\n                        adjusted_time += timedelta(minutes=bhour_remain)\n                        bhour_remain = 0\n                    else:\n                        bhour_remain -= bhour.seconds // 60\n                        adjusted_time = self._next_opening_time(adjusted_time + bhour)\n                else:\n                    bhour = self._next_opening_time(adjusted_time) - adjusted_time\n                    if bhour_remain < bhour.seconds // 60 or (bhour_remain == bhour.seconds // 60 and getattr(other, \"nanosecond\", 0) != 0):\n                        adjusted_time += timedelta(minutes=bhour_remain)\n                        bhour_remain = 0\n                    else:\n                        bhour_remain -= bhour.seconds // 60\n                        adjusted_time = self._get_closing_time(self._next_opening_time(adjusted_time + bhour - timedelta(seconds=1)))\n            return adjusted_time if adjust_datetime else other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}