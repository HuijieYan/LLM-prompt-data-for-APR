{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n\n            start_time = datetime(other.year, other.month, other.day, self.start[0].hour, self.start[0].minute)\n            end_time = datetime(other.year, other.month, other.day, self.end[0].hour, self.end[0].minute)\n\n            if n >= 0:\n                if other.time() > end_time.time() or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() < start_time.time():\n                    other = other - timedelta(days=1)\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n\n            businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n\n            if bd != 0:\n                skip_bd = BusinessDay(n=bd)\n                if not self.next_bday.is_on_offset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + skip_bd + remain\n                else:\n                    other = other + skip_bd\n\n            if n >= 0:\n                while r > 0:\n                    remaining_hours = (self._get_closing_time(self._prev_opening_time(other)) - other).seconds // 60\n                    if remaining_hours <= r:\n                        r -= remaining_hours\n                        other = self._next_opening_time(other)\n                    else:\n                        other += timedelta(minutes=r)\n                        r = 0\n            else:\n                while r < 0:\n                    remaining_hours = (other - self._prev_opening_time(other)).seconds // 60\n                    if -remaining_hours >= r:\n                        r += remaining_hours\n                        other -= timedelta(minutes=remaining_hours)\n                    else:\n                        other += timedelta(minutes=r)\n                        r = 0\n                \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}