{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, date):\n        other = datetime.combine(other, datetime.min.time())\n        \n    n = self.n\n    workday_seconds = (self.end - self.start).total_seconds()\n    \n    if n >= 0:\n        if other.time() >= self.end or not self.is_on_offset(other):\n            other = self._next_opening_time(other)\n    else:\n        if other.time() < self.start:\n            # adjustment to move to previous business day\n            other -= timedelta(days=1)\n        if not self.is_on_offset(other):\n            other = self._next_opening_time(other)\n            other = self._get_closing_time(other)\n\n    business_seconds = workday_seconds * len(self.start)\n    \n    bd, r = divmod(abs(n * 60), business_seconds // 60)\n    if n < 0:\n        bd, r = -bd, -r\n\n    if bd != 0:\n        business_day_shift = BusinessDay(n=bd)\n        if not self.next_bday.is_on_offset(other):\n            prev_open = self._prev_opening_time(other)\n            remain = other - prev_open\n            other = prev_open + business_day_shift + remain\n        else:\n            other += business_day_shift\n\n    remaining_business_seconds = timedelta(minutes=r * 60)\n\n    if n >= 0:\n        while remaining_business_seconds > timedelta(0):\n            # business time left in this business time interval\n            b_hour = self._get_closing_time(self._prev_opening_time(other)) - other\n            if remaining_business_seconds < b_hour:\n                other += remaining_business_seconds\n                remaining_business_seconds = timedelta(0)\n            else:\n                # go to the next business time interval\n                remaining_business_seconds -= b_hour\n                other = self._next_opening_time(other + b_hour)\n    else:\n        while remaining_business_seconds > timedelta(0):\n            # business time left in this business time interval\n            b_hour = self._next_opening_time(other) - other\n            if remaining_business_seconds > b_hour:\n                other += remaining_business_seconds\n                remaining_business_seconds = timedelta(0)\n            else:\n                # go to the next business time interval\n                remaining_business_seconds -= b_hour\n                other = self._get_closing_time(self._next_opening_time(other - timedelta(seconds=1)))\n    \n    return other",
            "import_list": []
        }
    ]
}