{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n\n            adjusted_other = other.replace(minute=0, second=0, microsecond=0)  # Reset minutes, seconds, and microseconds\n\n            business_hours_in_seconds = sum(\n                (end - start).seconds for start, end in zip(self.start, self.end)\n            )\n\n            if n >= 0:\n                if adjusted_other.time() in self.end or not self.is_on_offset(adjusted_other):\n                    # Move to the next opening time\n                    adjusted_other = self._next_opening_time(adjusted_other)\n            else:\n                if adjusted_other.time() in self.start:\n                    # Move to the previous business day\n                    adjusted_other -= timedelta(days=1)\n                if not self.is_on_offset(adjusted_other):\n                    # Move to the next opening time, and then to the closing time\n                    adjusted_other = self._next_opening_time(adjusted_other)\n                    adjusted_other = self._get_closing_time(adjusted_other)\n\n            if n >= 0:\n                business_days_to_adjust = (n * 60) // (business_hours_in_seconds // 60)\n            else:\n                business_days_to_adjust = -((-n * 60) // (business_hours_in_seconds // 60))  # Floor division\n\n            if business_days_to_adjust != 0:\n                adjusted_other += timedelta(days=business_days_to_adjust)\n\n            remaining_minutes = (n * 60) % (business_hours_in_seconds // 60)\n            remaining_time = timedelta(minutes=remaining_minutes)\n\n            while remaining_time != timedelta(0):\n                business_hour_start = self._prev_opening_time(adjusted_other)\n                business_hour_end = self._get_closing_time(business_hour_start)\n\n                if n >= 0:\n                    time_left_in_interval = business_hour_end - adjusted_other\n                    if remaining_time <= time_left_in_interval:\n                        adjusted_other += remaining_time\n                        remaining_time = timedelta(0)\n                    else:\n                        remaining_time -= time_left_in_interval\n                        adjusted_other = self._next_opening_time(business_hour_end)\n                else:\n                    time_left_in_interval = adjusted_other - business_hour_start\n                    if remaining_time >= time_left_in_interval:\n                        adjusted_other += remaining_time\n                        remaining_time = timedelta(0)\n                    else:\n                        remaining_time -= time_left_in_interval\n                        adjusted_other = self._get_closing_time(\n                            self._next_opening_time(business_hour_end - timedelta(seconds=1))\n                        )\n\n            return adjusted_other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}