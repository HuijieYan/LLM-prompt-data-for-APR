{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # reset timezone and nanosecond\n            other = as_datetime(other)\n\n            n = self.n\n\n            if n >= 0:\n                if other.time() in self.end or not self.is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start or self.is_on_offset(other):\n                    other = other - timedelta(seconds=1)\n                if not self.is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n\n            if isinstance(self, CustomBusinessHour) or isinstance(self, RollNCBH):\n                businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n            else:\n                businesshours = self._get_business_hours_by_sec(self.start, self.end)\n\n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n\n            if isinstance(self, CustomBusinessHour):\n                # Adjust by business days first\n                other = self.rollforward(other)\n                other = self.rollback(other)\n\n            if bd != 0:\n                other = self._next_opening_time(other)\n                other = self._next_opening_time(other)\n                if isinstance(self, RollNCBH):\n                    bd = 2 * bd\n\n                other = other + BusinessDay(bd)\n\n            if r != 0:\n                if self.n < 0:\n                    for _ in range(-r):\n                        other = self._get_closing_time(other - timedelta(hours=1))\n                else:\n                    for _ in range(r):\n                        other = self._next_opening_time(other)\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import CustomBusinessHour",
                "from pandas.tseries.offsets import RollNCBH"
            ]
        }
    ]
}