{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # Calculate business hours\n        business_hours = [\n            (st, en) for st, en in zip(self.start, self.end)\n        ]\n\n        # Convert the given timestamp to a datetime object if it's a Timestamp\n        if isinstance(other, pd.Timestamp):\n            other = other.to_pydatetime()\n\n        # Logic to adjust the timestamp to the nearest business hour\n        if self.n >= 0:  # Forward adjustment\n            for st, en in business_hours:\n                if st <= other.time() < en:\n                    if other.time() >= en:  # Check if the time is after the business hour\n                        other = other.replace(hour=en.hour, minute=en.minute, second=0, microsecond=0)\n                        break\n                    else:  # Check if the time is within the business hour\n                        other = other.replace(hour=st.hour, minute=st.minute, second=0, microsecond=0)\n                        break\n        else:  # Backward adjustment\n            for st, en in reversed(business_hours):\n                if st <= other.time() < en:\n                    if other.time() < st:  # Check if the time is before the business hour\n                        other = other.replace(hour=st.hour, minute=st.minute, second=0, microsecond=0)\n                        break\n                    else:  # Check if the time is within the business hour\n                        other = other.replace(hour=en.hour, minute=en.minute, second=0, microsecond=0)\n                        break\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}