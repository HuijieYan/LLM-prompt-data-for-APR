{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        business_hours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n        if n >= 0:\n            other = self._next_opening_time(other)\n            business_time_remaining = other - self._get_closing_time(other)  # Time remaining in the current business day\n            business_days_skipped, remaining_time = divmod(n * business_hours, 60)\n            if remaining_time > business_time_remaining.total_seconds() // 60:\n                business_days_skipped += 1\n                remaining_time -= business_time_remaining.total_seconds() // 60\n            other = self.next_bday.apply(other + timedelta(days=business_days_skipped)) + timedelta(minutes=remaining_time)\n        else:\n            other = self._prev_opening_time(other)\n            for _ in range(abs(n)):\n                if self.is_on_offset(other):\n                    other -= self.next_bday\n                else:\n                    other = self._prev_opening_time(other - timedelta(minutes=1))\n            other = self._get_closing_time(other)\n            business_time_remaining = other - self._prev_opening_time(other)  # Time remaining in the current business day\n            remaining_time = business_hours + (other - self._prev_opening_time(other)).total_seconds() // 60\n            while remaining_time >= business_hours:\n                other = self._get_closing_time(self._next_opening_time(other))\n                remaining_time -= business_hours\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}