{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        on_offset = self._is_on_offset(other)\n        offset_start = self._get_offset_start(other)\n        offset_end = self._get_offset_end(other)\n\n        if n >= 0:\n            if not on_offset or other == offset_end:\n                other = self._next_opening_time(other)\n        else:\n            if other == offset_start or not on_offset:\n                other = self._closest_opening_time(other - timedelta(seconds=1))\n            other = self._previous_opening_time(other)\n\n        businesshours = sum(self._get_business_hours_between_start_end(st, en) for st, en in zip(self.start, self.end))\n\n        # Calculate business days and remaining hours\n        business_days, remaining_hours = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            business_days, remaining_hours = -business_days, -remaining_hours\n\n        if business_days != 0:\n            other = self._add_business_days(other, business_days)\n\n        # Adjust remaining hours within the same business day\n        business_day_start = self._get_business_day_start(other)\n        closing_time = self._get_closing_time(business_day_start)\n        if remaining_hours != 0:\n            new_time = business_day_start + timedelta(hours=remaining_hours)\n            if remaining_hours > 0 and new_time > closing_time:\n                new_time = closing_time\n            elif remaining_hours < 0 and new_time < self.start[0]:\n                new_time = self.start[0]\n            other = self._normalize_time(other, new_time)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}