{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        \n        if n != 0:\n            if n > 0:\n                if other.time() in self.end or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() not in self.start or not self._is_on_offset(other):\n                    other = self._prev_opening_time(other)\n                    \n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n        \n            if bd != 0:\n                if n > 0:\n                    next_open = self._next_opening_time(other)\n                    prev_open = self._prev_opening_time(other)\n                    if next_open.time() == self.start[0]:\n                        next_open += timedelta(minutes=60)\n                        \n                    if next_open.time() < self.start[0]:\n                        next_open = datetime(next_open.year, next_open.month, next_open.day, self.start[0].hour, self.start[0].minute)\n                    \n                    other = next_open\n                else: \n                    prev_open = self._prev_opening_time(other)\n                    next_open = self._next_opening_time(other)\n                    prev_close = self._get_closing_time(prev_open)\n                    if next_open.time() == self.end[0]:\n                        next_open -= timedelta(minutes=60)\n                    if next_open.time() > self.end[0]:\n                        previous_day = prev_open - timedelta(days=1)\n                        other = self._get_closing_time(previous_day)\n                    else:\n                        other = self._get_closing_time(prev_open)\n            \n            while r != 0: \n                bhour = self._get_closing_time(self._prev_opening_time(other)) - other if n > 0 else self._next_opening_time(other) - other\n                if r < bhour.total_seconds() / 60:\n                    other += timedelta(minutes=r)\n                    r = 0\n                else:\n                    other = self._next_opening_time(other + bhour) if n > 0 else self._get_closing_time(self._next_opening_time(other))\n                    r -= bhour.total_seconds() / 60\n                        \n            return other\n        else:\n            return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}