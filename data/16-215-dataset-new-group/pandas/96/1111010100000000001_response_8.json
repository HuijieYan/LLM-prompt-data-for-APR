{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            # Adjust business days\n            business_day_offset = int(n * 60 / 1440)  # Business hours in a day\n            adjusted_date = other + timedelta(days=business_day_offset)\n\n            # Adjust business hours within the same day\n            business_hour_offset = int((n * 60) % 1440)  # Remaining business hours\n            remaining_hours = self._get_remaining_business_hours(other)\n\n            if n >= 0:\n                while business_hour_offset > 0:\n                    if remaining_hours < business_hour_offset:\n                        adjusted_date = self._next_opening_time(adjusted_date)\n                        remaining_hours = self._get_remaining_business_hours(adjusted_date)\n                    else:\n                        adjusted_date += timedelta(minutes=business_hour_offset)\n                        business_hour_offset = 0\n            else:\n                while business_hour_offset < 0:\n                    if remaining_hours > business_hour_offset:\n                        adjusted_date = self._get_closing_time(self._prev_opening_time(adjusted_date - timedelta(days=1)))\n                        remaining_hours = self._get_remaining_business_hours(adjusted_date)\n                    else:\n                        adjusted_date += timedelta(minutes=business_hour_offset)\n                        business_hour_offset = 0\n\n            return adjusted_date\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import timedelta"
            ]
        }
    ]
}