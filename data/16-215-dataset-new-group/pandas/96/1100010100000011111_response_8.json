{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if isinstance(self, CustomBusinessHour):\n            other = other.replace(tzinfo=None)\n            if not self._is_on_offset(other):\n                if self._is_closed_on_offset(other):\n                    other = self._next_business_hour(other)\n\n        total_periods = (self._normalize_index(other)).to_period(\"D\") - (self._normalize_index(self())) + 1\n        if total_periods < 0:\n            total_periods = 0\n        \n        total_periods = total_periods - 1\n\n        start = self.offset.index.get_loc(self._orig) - 1  \n        end = self.offset.index.get_loc(self.offset) - 1  \n        \n        new_index = self.offset[start : end].repeat(total_periods)\n        if len(new_index) == 1:\n            new_index = [new_index]\n      \n        first_index = self.offset.index.get_indexer_for([other])[0] \n        try:\n            return new_index[first_index]\n        except TypeError:\n            return new_index.to_datetime()[first_index]\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import CDay"
            ]
        }
    ]
}