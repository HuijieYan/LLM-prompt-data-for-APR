{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        business_hour_start = min(self.start)\n        business_hour_end = max(self.end)\n\n        is_after_business_hours = other.time() > business_hour_end\n        is_before_business_hours = other.time() < business_hour_start\n\n        # check if other falls within the business hours\n        if is_after_business_hours or is_before_business_hours:\n            if n >= 0:\n                other_date = other.date() + timedelta(days=1)\n                other_date = datetime.combine(other_date, business_hour_start)\n                return other_date\n            else:\n                return datetime.combine(other.date(), business_hour_end)\n        else:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other) if n >= 0 else self._prev_opening_time(other)\n            else:\n                if n < 0:\n                    other = self._get_closing_time(other)\n\n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            bd, r = divmod(abs(n * 60), businesshours / 60)\n            if n < 0:\n                bd, r = -bd, -r\n\n            bd_offset = self.apply(BDay(n=bd))\n\n            next_or_prev_opening_time = self._next_opening_time if n >= 0 else self._prev_opening_time\n            bhour = next_or_prev_opening_time(other) - other if n < 0 else self._get_closing_time(other) - other\n            adjustment = timedelta(minutes=r)\n\n            if adjustment < bhour:\n                other += adjustment\n            else:\n                other = next_or_prev_opening_time(other + bhour + adjustment)\n            return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}