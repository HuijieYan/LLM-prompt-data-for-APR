{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def _adjust_negative_remaining_hours(self, current_time, opens, closes, daily_seconds, r):\n        for open_time, close_time in zip(opens, closes):\n            opening_time = datetime.combine(current_time.date(), open_time)\n            if opening_time > current_time:\n                # Case where the current time is before the business hour starts\n                time_to_opening = opening_time - current_time\n                if r <= time_to_opening.seconds / 60:\n                    r -= time_to_opening.seconds / 60\n                    return opening_time - timedelta(minutes=r)\n                else:\n                    current_time -= timedelta(minutes=r)\n                    return current_time\n            elif opening_time <= current_time <= closing_time:\n                time_to_closing = closing_time - current_time\n                if r > time_to_closing.seconds / 60:\n                    r += time_to_closing.seconds / 60\n                    return closing_time + timedelta(minutes=-r)\n                else:\n                    return current_time - timedelta(minutes=r)\n        return self._get_closing_time(self._next_opening_time(current_time))",
            "import_list": [
                "from pandas.tseries.offsets import CustomBusinessHour, CustomBusinessDay",
                "from pandas.tseries.offsets import ApplyTypeError",
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}