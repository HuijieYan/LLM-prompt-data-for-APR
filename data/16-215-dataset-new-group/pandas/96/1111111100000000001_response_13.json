{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        if n >= 0:\n            other = self._next_opening_time(other) if other.time() in self.end or not self._is_on_offset(other) else other\n        else:\n            other = self._get_closing_time(self._next_opening_time(other)) if other.time() in self.start or not self._is_on_offset(other) else other - timedelta(seconds=1)\n        \n        if n != 0:\n            business_hours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n            bd, r = divmod(abs(n), business_hours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n\n            if bd != 0:\n                skip_bd = BusinessDay(n=bd)\n                if not self.is_on_offset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + skip_bd + remain\n                else:\n                    other = other + skip_bd\n\n            while r != timedelta(0):\n                business_hour_remain = self._get_closing_time(self._next_opening_time(other)) - other if n >= 0 else self._next_opening_time(other) - other\n                if (n >= 0 and business_hour_remain <= r) or (n < 0 and business_hour_remain >= r):\n                    other += business_hour_remain\n                    r -= business_hour_remain\n                    other = self._next_opening_time(other) if n >= 0 else self._get_closing_time(self._next_opening_time(other - timedelta(seconds=1)))\n                else:\n                    other += r if n >= 0 else self._get_closing_time(self._next_opening_time(other + r - timedelta(seconds=1)))\n                    r = timedelta(0)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}