{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # used for detecting edge condition\n        nanosecond = getattr(other, \"nanosecond\", 0)\n\n        # adjust other to reduce cases to handle\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        n = self.n\n\n        # get total business hours by sec in one business day\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end)\n        )\n\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        if bd != 0:\n            # adjust by business days first\n            skip_bd = BusinessDay(n=bd)\n            prev_open = self._prev_opening_time(other)\n\n            # midnight business hour may not be on BusinessDay\n            if not self.next_bday._is_on_offset(other):\n                remain = other - prev_open\n                other = prev_open + skip_bd + remain\n            else:\n                other = other + skip_bd\n        \n        bhour_remain = timedelta(minutes=r)\n        end_st = shift_month(other) if n < 0 else other\n\n        while bhour_remain > timedelta(0):\n            bhour = (self._next_opening_time(other) - end_st) if n < 0 else (end_st - other)\n\n            if bhour_remain < bhour or (\n                bhour_remain == bhour and nanosecond != 0\n            ):\n                # finish adjusting if possible\n                other = other + bhour_remain if n >= 0 else end_st - bhour_remain\n                bhour_remain = timedelta(0)\n            else:\n                # go to next business time interval\n                bhour_remain -= bhour\n                other = (\n                    self._get_closing_time(self._next_opening_time(end_st))\n                    if n < 0\n                    else self._next_opening_time(other) + bhour\n                )\n\n    return other",
            "import_list": []
        }
    ]
}