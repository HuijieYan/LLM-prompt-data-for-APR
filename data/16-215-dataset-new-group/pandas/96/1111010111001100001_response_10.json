{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, date):\n        other = datetime.combine(other, time(0, 0))\n    elif not isinstance(other, datetime):\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n\n    n = self.n\n\n    if n >= 0:\n        other = self._next_opening_time(other)\n    else:\n        other = self._get_closing_time(other)\n\n    businesshours = sum(\n        self._get_business_hours_by_sec(st, en)\n        for st, en in zip(self.start, self.end)\n    )\n\n    bd, r = divmod(abs(n * 60), businesshours // 60)\n    if n < 0:\n        bd, r = -bd, -r\n\n    if bd != 0:\n        if self._is_on_offset(other):\n            other = other + bd * self.next_bday\n        else:\n            other = other + bd * self.next_bday + timedelta(days=1)\n\n    bhour_remain = timedelta(minutes=r)\n\n    while bhour_remain > timedelta(0):\n        if n >= 0:\n            bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n        else:\n            bhour = self._next_opening_time(other) - other\n\n        if bhour_remain >= bhour:\n            other += bhour\n            bhour_remain -= bhour\n            if n >= 0:\n                other = self._next_opening_time(other)\n        else:\n            other += bhour_remain\n            bhour_remain = timedelta(0)\n\n    return other",
            "import_list": []
        }
    ]
}