{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        business_hours = self._get_business_hours_by_sec(self.start, self.end)\n\n        while n != 0:\n            if n > 0:\n                other = self._next_opening_time(other)\n                remaining_time = self._get_closing_time(other) - other\n                days_to_jump, remaining_time = divmod(remaining_time.total_seconds() / 60, business_hours // 60)\n                if days_to_jump:\n                    other += self.next_bday * days_to_jump\n                if remaining_time:\n                    other += timedelta(minutes=remaining_time)\n                n -= 1\n            else:\n                if self._is_on_offset(other):\n                    other = self._prev_opening_time(other)\n                while n != 0:\n                    previous_closing = self._get_closing_time(other - timedelta(days=1))\n                    remaining_time = other - previous_closing\n                    remaining_hours = abs(n * 60)\n                    if remaining_time.total_seconds() / 60 < remaining_hours:\n                        n -= 1\n                    else:\n                        other = previous_closing + timedelta(minutes=remaining_hours)\n                        n -= 1\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}