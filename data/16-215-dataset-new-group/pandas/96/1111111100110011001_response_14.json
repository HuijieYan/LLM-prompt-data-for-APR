{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end)\n        )\n        n = self.n\n        \n        # Adjust the timezone \n        dt = self._adjust_timezone(other)\n        adjusted_time = self._adjust_business_hours_minutes(dt)\n        \n        if n >= 0:\n            if self._is_off_business_offset(adjusted_time):\n                closing_time = self._get_closing_time(adjusted_time)\n                next_opening_time = self._next_opening_time(closing_time)\n                if not self._is_on_offset(next_opening_time):\n                    next_opening_time = self._next_opening_time(next_opening_time)\n                other = next_opening_time\n        else:\n            if self._is_on_offset(adjusted_time):\n                closing_time = self._get_closing_time(adjusted_time)\n                if self._is_off_business_offset(closing_time):\n                    prev_opening_time = self._prev_opening_time(closing_time)\n                    other = prev_opening_time\n                else:\n                    other = closing_time\n        \n        businessdays, remaining_hours = divmod(abs(n * 60), businesshours // 60)\n        \n        if n < 0:\n            businessdays = -businessdays\n            remaining_hours = -remaining_hours\n            \n        if businessdays:\n            other = self._add_businessdays_to_date(other, businessdays)\n        \n        if remaining_hours:\n            return self._add_businesshours_to_date(other, remaining_hours)\n        else:\n            return other\n        \n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}