{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # Adjust timezone\n        other = other.replace(tzinfo=None)\n\n        n = self.n\n\n        # Handle edge case of negative n\n        if n < 0:\n            other -= timedelta(minutes=1)\n\n        # Check if other is on offset\n        if self._is_on_offset(other):\n            return other\n\n        # Get total business hours by seconds in one business day\n        business_hours_sec = sum(self._get_business_hours_by_sec(start, end) for start, end in zip(self.start, self.end))\n\n        # Calculate business day adjustment\n        business_days, remaining_minutes = divmod(n * 60, business_hours_sec // 60)\n        \n        # Apply business day adjustment\n        other = self._next_opening_time(other) if n >= 0 else self._get_closing_time(other)\n        other += timedelta(days=business_days)\n        \n        # Adjust remaining business hours\n        while remaining_minutes > 0:\n            opening = self._next_opening_time(other) if n >= 0 else self._get_closing_time(other) + timedelta(seconds=1)\n            closing = self._next_opening_time(other + timedelta(minutes=remaining_minutes))\n            \n            if closing - opening < timedelta(minutes=15):  # minimum CBH is 15 minutes\n                remaining_minutes -= (closing - opening).total_seconds() // 60\n            else:\n                other = opening\n                break\n        \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}