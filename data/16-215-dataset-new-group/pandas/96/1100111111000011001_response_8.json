{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # reset timezone and nanosecond\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        n = self.n\n        start = other.replace(hour=0, minute=0, second=0, microsecond=0)\n        end = other.replace(hour=23, minute=59, second=59, microsecond=999999)\n        \n        # adjust other to reduce number of cases to handle\n        if n > 0:\n            if other.time() >= end.time():\n                return self._next_opening_time(other)\n        elif n < 0:\n            if other.time() <= start.time():\n                return other - timedelta(seconds=1)\n\n        businesshours = sum(\n            (en - st).total_seconds()\n            for st, en in zip(self.start, self.end)\n        )\n\n        if n < 0 and other.time() <= start.time():\n            bd = n // businesshours\n            other = self._get_closing_time(other - timedelta(days=bd))\n            \n        elif n > 0 and other.time() >= end.time():\n            bd = n // businesshours\n            other = self._next_opening_time(other + timedelta(days=bd))\n        \n        bhour_remain = n % businesshours * 60\n        if businesshours < 0:\n            bhour_remain = -bhour_remain\n        \n        if n < 0:\n            for _ in range(abs(n)):\n                other = self._prev_opening_time(other)\n                bhour = other.replace(hour=self.end[0].hour, minute=self.end[0].minute,\n                                      second=self.end[0].second, microsecond=self.end[0].microsecond) - other\n                if bhour_remain < bhour:\n                    other += timedelta(minutes=bhour_remain)\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    other = self._next_opening_time(other + bhour)\n        elif n > 0:\n            for _ in range(n):\n                other = self._next_opening_time(other)\n                bhour = other.replace(hour=self.start[0].hour, minute=self.start[0].minute,\n                                      second=self.start[0].second, microsecond=self.start[0].microsecond) - other\n                if bhour_remain < bhour:\n                    other += timedelta(minutes=bhour_remain)\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n            \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}