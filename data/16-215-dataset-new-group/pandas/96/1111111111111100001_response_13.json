{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # reset timezone and nanosecond\n        other = datetime(\n            year=other.year,\n            month=other.month,\n            day=other.day,\n            hour=other.hour,\n            minute=other.minute,\n            second=other.second,\n            microsecond=other.microsecond\n        )\n        n = self.n\n\n        bus_day = BusinessDay()  # CustomBusinessDay seems to be a subclass of BusinessDay\n\n        if n > 0:\n            if other.time() > self.end[0] or other.date() not in bus_day:\n                other = self._next_opening_time(other)\n        elif n < 0:\n            if other.time() < self.start[0] or other.date() not in bus_day:\n                other = self._prev_opening_time(other) - bus_day\n\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        \n        remaining_hours = timedelta(minutes=r)\n\n        other += bd * bus_day  # Adjust by business days first\n\n        if n > 0:\n            while remaining_hours != timedelta(0):\n                next_opening = self._next_opening_time(other)\n                bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                if remaining_hours < bhour:\n                    other += remaining_hours\n                    remaining_hours = timedelta(0)\n                else:\n                    remaining_hours -= bhour\n                    other = next_opening\n        else:\n            while remaining_hours != timedelta(0):\n                next_opening = self._next_opening_time(other)\n                bhour = next_opening - other\n                if remaining_hours > bhour:\n                    other += remaining_hours\n                    remaining_hours = timedelta(0)\n                else:\n                    remaining_hours -= bhour\n                    other = self._get_closing_time(next_opening - timedelta(seconds=1))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import BusinessDay, CustomBusinessHour"
            ]
        }
    ]
}