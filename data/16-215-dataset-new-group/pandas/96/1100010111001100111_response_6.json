{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        ...  # existing logic\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n        bd, r = divmod(abs(self.n * 60), businesshours // 60)\n        if self.n < 0:\n            bd, r = -bd, -r\n\n        if bd < 0 and BusinessDay(n=bd).rollback(other) in self.holidays:\n            bd -= 1\n        elif bd > 0 and self.next_bday.rollforward(other) in self.holidays:\n            bd += 1\n\n        bhour_remain = timedelta(minutes=r)\n\n        if self.n < 0:\n            while bhour_remain != timedelta(0):\n                remaining_business_hours = self._remaining_business_hours_before_close(other)\n                if bhour_remain < remaining_business_hours:\n                    other -= bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    other = self._prev_opening_time(self._get_closing_time(other))\n                    bhour_remain -= remaining_business_hours\n        else:\n            while bhour_remain != timedelta(0):\n                remaining_business_hours = self._remaining_business_hours_before_close(other)\n                if bhour_remain < remaining_business_hours:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    other = self._get_closing_time(self._next_opening_time(other))\n                    bhour_remain -= remaining_business_hours\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}