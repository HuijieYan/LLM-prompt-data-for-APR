{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            other = other.replace(tzinfo=self.tzinfo)  # set the timezone info properly\n            n = self.n\n            businesshours = sum((en - st).total_seconds() // 60 for st, en in zip(self.start, self.end))\n            \n            if n >= 0:\n                if other.hour == self.end.hour:\n                    other = self.next_bday._next_opening_time(other + timedelta(days=1))\n            else:\n                if other.hour == self.start.hour:\n                    other = other - timedelta(days=1)  # adjustment to move to previous business day\n            \n            bd, r = divmod(abs(n * 60), businesshours)\n            \n            if n < 0:\n                bd, r = -bd, -r\n                \n            if bd:\n                skip_bd = BusinessDay(n=bd)\n                if not skip_bd.is_on_offset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + skip_bd.offset + remain\n                else:\n                    other = other + skip_bd.offset\n            \n            if r:\n                bhours = sum((en - st).total_seconds() // 60 for st, en in zip(self.start, self.end))\n                current_hour = sum((other - st).total_seconds() // 60 for st, en in zip(self.start, self.end) if st <= other <= en)\n                if n < 0:\n                    target_hour = current_hour - r\n                    target_offset = sum(max(0, (st - other).total_seconds() // 60) for st, en in zip(self.start, self.end) if st <= other <= en and (en - other).total_seconds() // 60 < r)\n                else:\n                    target_hour = current_hour + r\n                    target_offset = sum(max(0, (en - other).total_seconds() // 60) for st, en in zip(self.start, self.end) if (st - other).total_seconds() // 60 < r)\n                \n                for st, en in zip(self.start, self.end):\n                    if st <= other <= en:\n                        if n < 0:\n                            if (en - other).total_seconds() // 60 >= r:\n                                other = other + timedelta(minutes=-r)\n                                break\n                            r -= (en - other).total_seconds() // 60\n                        else:\n                            if (other - st).total_seconds() // 60 >= r:\n                                other = other + timedelta(minutes=r)\n                                break\n                            r -= (st - other).total_seconds() // 60\n                    \n        return other",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}