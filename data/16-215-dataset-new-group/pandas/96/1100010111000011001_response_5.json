{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        if n >= 0:\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n\n            # Handle the adjustments for business days and offsets\n            bd, r = divmod(n, len(self) / 60)\n            other += BusinessDay(n=bd)\n\n            while r > 0:\n                td = self._get_open_offset(other)\n                if td < r:\n                    other += self._get_closet_offset(other) - other\n                    r -= td\n                else:\n                    other += timedelta(minutes=r)\n                    r = 0\n\n            return other\n        else:\n            if self._is_on_offset(other):\n                other = self._get_closet_offset(other) - timedelta(minutes=1)\n\n            while n < 0:\n                td = self._get_open_offset(other)\n                if td > n:\n                    other -= other - self._get_closet_offset(other)\n                    n += td\n                else:\n                    other -= timedelta(minutes=-n)\n                    n = 0\n\n            return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}