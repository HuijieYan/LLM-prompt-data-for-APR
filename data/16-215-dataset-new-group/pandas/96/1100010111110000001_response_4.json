{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if isinstance(self, BaseOffset):\n            base_time = datetime(other.year, other.month, other.day, 0, 0)\n            minutes = divmod(other.hour * 60 + other.minute, 60)[1]\n            offset = self.nanos / 60000000000\n            \n            if self.onOffset(other) and minutes >= self.n and self.next_offset(other) >= base_time:\n                return other\n            elif self.onOffset(other) and minutes >= self.n:\n                return self.next_offset(other)\n            elif self.onOffset(other) and minutes < self.n and self.negative_offset(other) > base_time:\n                return self.negative_offset(other)\n            elif self.onOffset(other) and minutes < self.n:\n                return self.negative_offset(other)\n            else:\n                if divmod(self._minutes_to_midnight(other), 60)[1] - minutes >=  self.n or self.negative_offset(other) > self.next_offset(other):\n                    return self.next_offset(other)\n                else:\n                    return self.negative_offset(other)\n        \n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import BaseOffset"
            ]
        }
    ]
}