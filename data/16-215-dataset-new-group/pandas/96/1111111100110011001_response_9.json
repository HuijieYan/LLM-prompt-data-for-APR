{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # Reset timezone and nanosecond. Using replace for Timestamp.\n        other = datetime(\n            year=other.year,\n            month=other.month,\n            day=other.day,\n            hour=other.hour,\n            minute=other.minute,\n            second=other.second,\n            microsecond=other.microsecond,\n        )\n        skip_offset = 0\n        if self._is_on_offset(other) or other.time() not in self.end:\n            skip_offset = self._next_opening_time(other) - other\n            other += skip_offset\n    \n        business_hours_sec = sum(\n            self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end)\n        )\n        day_offset = self.n * 60 / business_hours_sec\n        business_days = int(day_offset)\n        adjusted_time = other\n    \n        if business_days != 0:\n            delta = BusinessDay(n=business_days)\n            if self.next_bday.is_on_offset(other):\n                adjusted_time + delta\n            else:\n                prev_open = self._prev_opening_time(other)\n                diff = other - prev_open\n                adjusted_time = prev_open + delta + diff\n    \n        remaining_minutes = int(((day_offset - business_days) % 1) * 60)\n        next_time = self._next_opening_time(adjusted_time)\n        closing_time = self._get_closing_time(next_time)\n    \n        for _ in range(remaining_minutes):\n            if self.n >= 0:\n                if adjusted_time <= closing_time:\n                    adjusted_time += timedelta(minutes=1)\n                else:\n                    adjusted_time = self._next_opening_time(adjusted_time)\n            else:\n                if adjusted_time >= closing_time:\n                    adjusted_time -= timedelta(minutes=1)\n                else:\n                    adjusted_time = self._prev_opening_time(adjusted_time)\n    \n        return adjusted_time\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}