{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        base_no_nano = datetime(\n            other.year, other.month, other.day, other.hour, other.minute, other.second\n        )\n        n = self.n\n        start_time = self.start[0]\n        end_time = self.end[-1]\n\n        if n >= 0:\n            if other.time() > end_time or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() < start_time or not self._is_on_offset(other):\n                other = self._prev_opening_time(other)\n\n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n        bd, r = divmod(abs(n*60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            for _ in range(abs(bd)):\n                if n < 0:\n                    other = self._prev_opening_time(other) - skip_bd\n                else:\n                    other = self._next_opening_time(other + skip_bd)\n\n        remaining_hours = timedelta(minutes=r) if r != 0 else timedelta()  # define remaining_hours\n\n        if remaining_hours == timedelta(0):\n            return other\n        if n >= 0:\n            while remaining_hours:\n                bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n\n                if remaining_hours < bhour:\n                    other += remaining_hours\n                    remaining_hours = timedelta(0)\n                else:\n                    remaining_hours -= bhour\n                    other = self._next_opening_time(other + bhour)\n        else:\n            # reverse iteration from current time and remaining hours to find the previous hour to offset\n            while remaining_hours:\n                bhour = other - self._prev_opening_time(other)\n\n                if (\n                    remaining_hours > bhour\n                    or remaining_hours == bhour\n                    and original_nano != 0  # check nano flag\n                ):\n                    other += remaining_hours\n                    remaining_hours = timedelta(0)\n                else:\n                    remaining_hours -= bhour\n                    other = self._get_closing_time(self._prev_opening_time(other - bhour)) \n        return other\n    else:\n        raise ApplyTypeError(\n            \"Only know how to combine business hour with datetime\"\n        )",
            "import_list": []
        }
    ]
}