{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # reset timezone and nanosecond\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        \n        # Adjust business hours for current day\n        if other.time() >= self.start[0] and other.time() < self.end[0] and self._is_on_offset(other):\n            businesshours = self._get_business_hours_by_sec(self.start[0], self.end[0])\n        else:\n            businesshours = 0\n\n        # Calculate business day adjustment\n        total_minutes = (self.n * 60) - businesshours\n        business_days, remaining_hours = divmod(abs(total_minutes), 60)\n        if total_minutes < 0:\n            business_days, remaining_hours = -business_days, -remaining_hours\n\n        # Adjust to next business day if necessary\n        if business_days != 0:\n            other += timedelta(days=business_days)\n\n        # Adjust remaining business hours\n        if remaining_hours != 0:\n            while remaining_hours != 0:\n                if self.n >= 0:\n                    bhour = self._get_closing_time(other) - other\n                else:\n                    bhour = self._next_opening_time(other) - other\n\n                if remaining_hours < bhour.total_seconds() / 60:\n                    other += timedelta(minutes=remaining_hours)\n                    remaining_hours = 0\n                else:\n                    remaining_hours -= bhour.total_seconds() / 60\n                    if self.n >= 0:\n                        other = self._next_opening_time(other)\n                    else:\n                        other = self._next_opening_time(other - timedelta(seconds=1))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}