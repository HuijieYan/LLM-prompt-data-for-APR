{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        # Store the original timezone and nanosecond data\n        timezone = other.tzinfo\n        nanosecond = getattr(other, \"nanosecond\", 0)\n\n        # Calculate the total business hours\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        # Calculate the total minutes in the business hours\n        total_minutes = businesshours / 60\n\n        # Calculate bd and r based on n\n        bd, r = divmod(abs(n), total_minutes)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # Adjusting 'other' based on the value of n\n        if n >= 0:\n            # Adjust 'other' to the next opening time if needed\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                other = other - timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        # Adjust 'other' by business days first\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            if not self.next_bday.is_on_offset(other):\n                prev_open = self._prev_opening_time(other)\n                remain = other - prev_open\n                other = prev_open + skip_bd + remain\n            else:\n                other = other + skip_bd\n\n        # Adjust the remaining business hours\n        bhour_remain = timedelta(minutes=r)\n\n        if n >= 0:\n            # Adjust for positive n\n            while bhour_remain.total_seconds() > 0:\n                next_closing = self._get_closing_time(other)\n                bhour = next_closing - other\n                if bhour_remain < bhour:\n                    # Finish adjusting\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    other = next_closing\n        else:\n            # Adjust for negative n\n            while bhour_remain != timedelta(0):\n                next_opening = self._next_opening_time(other)\n                bhour = next_opening - other\n                if (\n                    bhour_remain > bhour\n                    or bhour_remain == bhour\n                    and nanosecond != 0\n                ):\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    other = self._get_closing_time(next_opening - timedelta(seconds=1))\n\n        # Restore the original timezone and nanosecond data to 'other'\n        other = other.replace(tzinfo=timezone, nanosecond=nanosecond)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}