{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime.datetime):\n        n = self.n\n\n        # Adjust the datetime to ignore timezone and nanosecond\n        other = other.replace(microsecond=0)\n\n        # Adjust the datetime based on given n value\n        if n >= 0:\n            while n > 0:\n                # If the current time is within business hours\n                if other.hour in range(self.start.hour, self.end.hour + 1):\n                    # Calculate remaining business hours\n                    remaining_hours = 24 - other.hour\n                    if remaining_hours < n:\n                        n -= remaining_hours\n                        other = other.replace(hour=self.start.hour, minute=0)\n                    else:\n                        other += datetime.timedelta(hours=n)\n                        n = 0\n                else:\n                    # Not within business hours, adjust to next day\n                    other = other.replace(hour=self.start.hour, minute=0)\n        else:\n            while n < 0:\n                # If the current time is within business hours\n                if other.hour in range(self.start.hour, self.end.hour + 1):\n                    if abs(n) >= other.hour - self.start.hour:\n                        n += other.hour - self.start.hour\n                        other = other.replace(hour=self.end.hour, minute=0)\n                    else:\n                        other += datetime.timedelta(hours=n)\n                        n = 0\n                else:\n                    # Not within business hours, adjust to previous day\n                    other = other.replace(hour=self.end.hour, minute=0)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "import datetime"
            ]
        }
    ]
}