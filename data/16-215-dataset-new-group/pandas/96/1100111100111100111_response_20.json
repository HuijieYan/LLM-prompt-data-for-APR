{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        holidays = self.holidays\n        business_hours = sum(\n            self._get_business_hours_by_sec(start, end)\n            for start, end in zip(self.start, self.end)\n        )\n\n        if n >= 0:\n            if not self._is_on_offset(other) or other in holidays:\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start and other not in holidays:\n                other -= timedelta(seconds=1)\n            if self._is_on_offset(other) and other not in holidays:\n                other = self._prev_opening_time(other)\n            else:\n                other = self._next_opening_time(other)\n\n        delta_minutes = n * 60\n        if n < 0:\n            delta_minutes = -delta_minutes\n\n        # Adjust by business days first\n        if abs(delta_minutes) >= business_hours:\n            bd = delta_minutes // business_hours  # Number of business days\n            delta_minutes %= business_hours  # Remaining minutes after adjusting business days\n            if delta_minutes < 0:\n                bd -= 1\n\n            skip_bd = pd.offsets.CustomBusinessDay(n=bd, holidays=holidays)\n            if not self._is_on_offset(other):\n                prev_open = self._prev_opening_time(other)\n                remain = other - prev_open\n                other = prev_open + skip_bd + remain\n            else:\n                other += skip_bd\n\n        # Adjusting remaining business hours\n        bhour_remain = timedelta(minutes=delta_minutes)\n        while bhour_remain:\n            next_opening_time = self._next_opening_time(other)\n            if n >= 0:\n                bhour = next_opening_time - other\n            else:\n                bhour = self._get_closing_time(other) - other\n            if n < 0 and bhour > bhour_remain:\n                bhour = bhour_remain\n            other += bhour\n            bhour_remain -= bhour\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}