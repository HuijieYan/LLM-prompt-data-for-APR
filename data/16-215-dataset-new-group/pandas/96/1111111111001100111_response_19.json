{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            business_hours = np.busday_count(other, other + timedelta(days=1), holidays=self.holidays) * 60\n            target_datetime = other + BusinessDay(n=n)\n            closing_day = self._get_closing_time(target_datetime)\n            adjusted_time = timedelta(minutes=0)\n            while adjusted_time < timedelta(minutes=business_hours):\n                if n >= 0:\n                    target_time = self._next_opening_time(other)\n                    if target_time.time() not in self.end:\n                        other = target_time\n                    else:\n                        next_business_day = self.next_bday + other\n                        if next_business_day.time() in self.start:\n                            other = self._prev_opening_time(other) - timedelta(seconds=1)\n                        other = self._next_opening_time(other)\n                else:\n                    if other.time() in self.start:\n                        other = self._prev_opening_time(other) - timedelta(seconds=1)\n                    other = self._just_get_closing_time(other)\n                    if other.time() in self.start:\n                        other -= timedelta(seconds=1)\n                    opening_time = self._next_opening_time(other)\n                    business_hours_interval = opening_time - other\n                    next_closing_time = self._get_closing_time(opening_time - timedelta(seconds=1))\n                    remaining_hours = next_closing_time - opening_time\n                    while remaining_hours < timedelta(minutes=0):\n                        opening_time = self._next_opening_time(opening_time)\n                        closing_time = self._get_closing_time(opening_time - timedelta(seconds=1))\n                        remaining_hours = closing_time - opening_time\n                    other = next_closing_time\n                    adjusted_time += next_closing_time - other\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}