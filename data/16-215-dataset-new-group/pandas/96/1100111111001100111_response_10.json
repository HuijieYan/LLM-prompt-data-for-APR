{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # Calculate the number of business days\n        n = self.n\n        \n        if self._is_on_offset(other):\n            nanosecond = getattr(other, \"nanosecond\", 0)\n        \n            # If it's a negative number of business days, adjust the values\n            if n < 0:\n                other -= timedelta(seconds=1)\n                n += 1\n        \n            # Get the total business hours in one business day\n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n            \n            # Calculate the number of business days and remaining business hours\n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n            \n            # Adjust the input datetime based on business days\n            if bd != 0:\n                skip_bd = BusinessDay(n=bd)\n                if not self.next_bday.is_on_offset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + skip_bd + remain\n                else:\n                    other += skip_bd\n            \n            # Adjust the remaining business hours\n            while r != timedelta(0):\n                if n >= 0:  # Positive business days\n                    next_opening = self._next_opening_time(other)\n                    bhour = self._get_closing_time(\n                        self._prev_opening_time(next_opening)) - other\n                    if r < bhour:  \n                        # Finish adjusting if possible\n                        other += r\n                        r = timedelta(0)\n                    else:\n                        r -= bhour\n                        other = next_opening  # Move to next business time interval\n                else:  # Negative business days\n                    bhour = self._next_opening_time(other) - other\n                    if r > bhour:\n                        # Finish adjusting if possible\n                        other += r\n                        r = timedelta(0)\n                    else:\n                        r -= bhour\n                        other = self._get_closing_time(\n                            self._next_opening_time(\n                                other + bhour - timedelta(seconds=1))\n                        )\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}