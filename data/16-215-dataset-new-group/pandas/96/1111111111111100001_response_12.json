{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if not isinstance(other, datetime):\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n    \n    adjust_to_opening = False\n    if self.n >= 0:\n        if other.time() in self.end or not self._is_on_offset(other):\n            other = self._next_opening_time(other)\n            adjust_to_opening = True\n    else:\n        if other.time() in self.start or not self._is_on_offset(other):\n            other = self._get_closing_time(other)\n            adjust_to_opening = True\n    \n    # Adjust to the opening time or closing time if necessary\n    if adjust_to_opening:\n        other = self._next_opening_time(other)\n    \n    # Remaining business hours to adjust\n    bhour_remain = self.n * 60\n    \n    # Adjust by business days first\n    if abs(self.n) >= 1:\n        skip_days = BusinessDay(n=abs(self.n))\n        other += skip_days\n    \n    # Adjust remaining business hours\n    if bhour_remain != 0:\n        if self.n >= 0:\n            while bhour_remain > 0:\n                # move to next business time interval\n                other = self._next_opening_time(other)\n                bhour_remain -= (self._get_closing_time(other) - other).seconds // 60\n        else:\n            while bhour_remain > 0:\n                # move to previous business time interval\n                other = self._get_closing_time(other)\n                bhour_remain -= (other - self._next_opening_time(other)).seconds // 60\n    \n    return other",
            "import_list": []
        }
    ]
}