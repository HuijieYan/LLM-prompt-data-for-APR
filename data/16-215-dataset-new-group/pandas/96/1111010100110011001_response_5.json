{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # check if it's on the offset\n            if self._is_on_offset(other):\n                return other\n\n            # identify the next opening time\n            opening_time = self._next_opening_time(other)\n\n            # in case n is positive\n            if self.n >= 0:\n                if other.time() in self.end:\n                    return opening_time\n\n                if opening_time != other:\n                    return opening_time\n                else:\n                    closing_time = self._get_closing_time(other)\n                    while other.time() >= closing_time.time():\n                        other += timedelta(days=1)\n                    return self._next_opening_time(other)\n\n            # n is negative\n            else:\n                # identify previous opening time\n                prev_opening = self._prev_opening_time(other)\n\n                if other.time() in self.start:\n                    return prev_opening - timedelta(seconds=1)\n\n                # If it's not on the same opening minute\n                if opening_time != prev_opening:\n                    return opening_time\n\n                new_time = self._get_closing_time(prev_opening - timedelta(seconds=1))\n                while other.time() <= new_time.time():\n                    other -= timedelta(days=1)\n                return self._prev_opening_time(other)\n\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}