{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            business_hours = self._get_business_hours_by_sec(self.start, self.end)\n            total_business_hours = sum(business_hours)\n\n            # Adjust other based on the specified business hours and holidays\n            if self.is_on_offset(other):\n                # If other is on a business hour, move to the next opening time\n                opening_time = self._next_opening_time(other)\n                other = opening_time\n            else:\n                # If other is not on a business hour, move to the next opening time and then get the closing time\n                if other.time() in self.start:\n                    other -= timedelta(seconds=1)  # move to the previous business day\n\n                # Move to the next opening time\n                other = self._next_opening_time(other)\n\n                # Get the closing time\n                other = self._get_closing_time(other)\n\n            # Adjust by business days\n            if self.is_on_offset(other):\n                skip_bd = pd.offsets.BusinessDay(n=1)\n                other = other + skip_bd\n\n            # Adjust remaining business hours\n            bhour_remain = self._get_closing_time(other) - other\n\n            # Add the remaining business hours to other\n            other += bhour_remain\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}