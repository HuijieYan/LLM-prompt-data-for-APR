{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n        \n        # Calculate the number of business days and remaining business hours\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        \n        # Adjust by business days first\n        if bd != 0:\n            if n >= 0:\n                other = other + timedelta(days=bd)\n            else:\n                other = other - timedelta(days=bd)\n        \n        # Adjust remaining business hours\n        if n >= 0:\n            while r > 0:\n                opening_time = self._next_opening_time(other)\n                time_interval = self._get_closing_time(opening_time) - opening_time\n                if r < time_interval.seconds // 60:\n                    other = opening_time + timedelta(minutes=r)\n                    r = 0\n                else:\n                    r -= time_interval.seconds // 60\n                    other = self._next_opening_time(other + time_interval)\n        else:\n            while r < 0:\n                closing_time = self._get_closing_time(other)\n                time_interval = closing_time - self._prev_opening_time(other)\n                if -r < time_interval.seconds // 60:\n                    other = closing_time - timedelta(minutes=-r)\n                    r = 0\n                else:\n                    r += time_interval.seconds // 60\n                    other = self._prev_opening_time(closing_time) - timedelta(seconds=1)\n        \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}