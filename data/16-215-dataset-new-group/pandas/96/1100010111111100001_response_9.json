{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if not isinstance(other, datetime):\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n\n    adjusted_time = other\n    n = self.n\n\n    # Apply custom business hour offset\n    if n >= 0:\n        if other.time() in self.end or not self._is_on_offset(other):\n            adjusted_time = self._next_opening_time(other)\n    else:\n        if other.time() in self.start:\n            adjusted_time = other - timedelta(seconds=1)\n        if not self._is_on_offset(other):\n            adjusted_time = self._next_opening_time(other)\n            adjusted_time = self._get_closing_time(adjusted_time)\n\n    # Apply total business hours by sec in one business day\n    businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n    bd, r = divmod(abs(n * 60), businesshours // 60)\n    \n    if n < 0:\n        bd, r = -bd, -r\n    \n    # Adjust by business days first\n    if bd != 0:\n        skip_bd = BusinessDay(n=bd)\n        \n        if not self.next_bday.is_on_offset(adjusted_time):\n            prev_open = self._prev_opening_time(adjusted_time)\n            remain = adjusted_time - prev_open\n            adjusted_time = prev_open + skip_bd + remain\n        else:\n            adjusted_time += skip_bd\n\n    # Remaining business hours to adjust\n    bhour_remain = timedelta(minutes=r)\n\n    if n >= 0:\n        while bhour_remain > timedelta(0):\n            bhour = self._get_closing_time(self._prev_opening_time(adjusted_time)) - adjusted_time\n            \n            if bhour_remain < bhour:\n                # Finish adjusting if possible\n                adjusted_time += bhour_remain\n                bhour_remain = timedelta(0)\n            else:\n                # Go to next business time interval\n                bhour_remain -= bhour\n                adjusted_time = self._next_opening_time(adjusted_time + bhour)\n    else:\n        while bhour_remain > timedelta(0):\n            bhour = self._next_opening_time(adjusted_time) - adjusted_time\n            \n            if bhour_remain >= bhour:\n                # Finish adjusting if possible\n                adjusted_time += bhour_remain\n                bhour_remain = timedelta(0)\n            else:\n                # Go to next business time interval\n                bhour_remain -= bhour\n                adjusted_time = self._get_closing_time(self._next_opening_time(adjusted_time + bhour - timedelta(seconds=1)))\n\n    return adjusted_time",
            "import_list": [
                "from datetime import timedelta"
            ]
        }
    ]
}