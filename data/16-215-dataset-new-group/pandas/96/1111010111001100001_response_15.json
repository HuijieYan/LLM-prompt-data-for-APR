{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            \n            # check if the date is a holiday and adjust it appropriately\n            if other in self.holidays:\n                other = self._next_opening_time(other)\n                \n            # remaining business hours to adjust\n            businesshours = sum(self._get_business_hours_by_sec(st, en)\n                                for st, en in zip(self.start, self.end))\n            \n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n            \n            # adjust by business days first\n            if bd != 0:\n                skip_bd = CustomBusinessDay(n=bd)\n                other = other + skip_bd\n            \n            # adjust remaining business hours\n            bhour_remain = timedelta(minutes=r)\n            while bhour_remain > timedelta(0):\n                if n >= 0:\n                    bhour = self._get_closing_time(other) - other\n                else:\n                    bhour = other - self._prev_opening_time(other)\n                    \n                if bhour > bhour_remain:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    if n >= 0:\n                        other = self._next_opening_time(other + bhour)\n                    else:\n                        other = self._prev_opening_time(other - timedelta(seconds=1))\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import BusinessMixin, apply_wraps, CustomBusinessDay",
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}