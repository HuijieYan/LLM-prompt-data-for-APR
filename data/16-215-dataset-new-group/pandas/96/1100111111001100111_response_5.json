{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # Retrieve nanosecond value from other if available\n        nanosecond = getattr(other, \"nanosecond\", 0)\n        other_no_tz = other.tz_localize(None)  # Remove timezone info\n        n = self.n\n\n        # Adjust other to reduce the number of cases to handle\n        if n >= 0:\n            if other_no_tz.time() in self.end or not self.is_on_offset(other_no_tz):\n                other_no_tz = CustomBusinessHour()._next_opening_time(other_no_tz)\n        else:\n            if other_no_tz.time() in self.start:\n                # Adjustment to move to previous business day\n                other_no_tz = other_no_tz - timedelta(seconds=1)\n            if not self.is_on_offset(other_no_tz):\n                other_no_tz = CustomBusinessHour()._next_opening_time(other_no_tz)\n                other_no_tz = CustomBusinessHour()._get_closing_time(other_no_tz)\n\n        # Get total business hours by sec in one business day\n        businesshours = sum(\n            CustomBusinessHour()._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # Adjust by business days first\n        if bd != 0:\n            prev_open = self._prev_opening_time(other_no_tz)\n            prev_open_no_tz = prev_open.tz_localize(None)\n            skip_bd = pd.offsets.CustomBusinessDay(n=bd)\n            \n            adjust_to_business_hour = False\n            if not CustomBusinessHour().is_on_offset(other_no_tz):\n                adjust_to_business_hour = True\n                \n                remain = other_no_tz - prev_open_no_tz\n                other_no_tz = prev_open_no_tz + skip_bd + remain\n            else:\n                other_no_tz = other_no_tz + skip_bd\n\n        # Remaining business hours to adjust\n        bhour_remain = timedelta(minutes=r)\n\n        if n >= 0:\n            # Handle adjustments for positive offsets\n            while bhour_remain != timedelta(0):\n                bhour = CustomBusinessHour()._get_closing_time(CustomBusinessHour()._prev_opening_time(other_no_tz)) - other_no_tz\n                if bhour_remain < bhour:\n                    other_no_tz = other_no_tz + bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    other_no_tz = CustomBusinessHour()._next_opening_time(other_no_tz + bhour)\n\n                if adjust_to_business_hour and self._is_on_offset(other_no_tz - timedelta(seconds=1)):\n                    adjust_to_business_hour = False\n                    other_no_tz = CustomBusinessHour()._get_closing_time(other_no_tz)\n\n        else:\n            # Handle adjustments for negative offsets\n            while bhour_remain != timedelta(0):\n                bhour = CustomBusinessHour()._next_opening_time(other_no_tz) - other_no_tz\n                if bhour_remain > bhour or (bhour_remain == bhour and nanosecond != 0):\n                    other_no_tz = other_no_tz + bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    other_no_tz = CustomBusinessHour()._get_closing_time(\n                        CustomBusinessHour()._next_opening_time(other_no_tz + bhour - timedelta(seconds=1))\n                    )\n\n        return other_no_tz\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import CustomBusinessHour",
                "from datetime import timedelta"
            ]
        }
    ]
}