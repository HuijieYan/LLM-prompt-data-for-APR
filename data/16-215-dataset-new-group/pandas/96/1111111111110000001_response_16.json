{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # Adjusting timezone and nanosecond\n            other = other.replace(tzinfo=None, microsecond=0)\n            n = self.n\n\n            # Adjusting other to align with business hours\n            if n >= 0:\n                if other.time() in self.end or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start:\n                    # Adjustment to move to the previous business day\n                    other -= timedelta(seconds=1)\n                if not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n\n            # Get total business hours by sec in one business day\n            business_hours_in_secs = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n            bd, r = divmod(abs(n * 60), business_hours_in_secs // 60)\n            if n < 0:\n                bd, r = -bd, -r\n\n            # Adjusting by business days first\n            if bd != 0:\n                 other += pd.offsets.CustomBusinessDay(n=bd)  # Adjust using CustomBusinessDay offset\n\n            # Getting the remaining business hours to adjust\n            bhour_remain = pd.offsets.CustomBusinessHour(n=0, start=self.start[0], end=self.end[0])  # Initialize the remaining hours\n            \n            if n >= 0:\n                while bhour_remain != 0:\n                    bhour = self._get_closing_time(other) - other\n                    if bhour_remain < bhour:\n                        other += bhour_remain\n                        bhour_remain = 0\n                    else:\n                        bhour_remain -= bhour\n                        other = self._next_opening_time(other + bhour)\n            else:\n                while bhour_remain != 0:\n                    bhour = self._next_opening_time(other) - other\n                    if bhour_remain > bhour or bhour_remain == bhour:\n                        other += bhour_remain\n                        bhour_remain = 0\n                    else:\n                        bhour_remain -= bhour\n                        other = self._get_closing_time(self._next_opening_time(other + bhour - pd.Timedelta(seconds=1)))\n            \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}