{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # Adjust timezone and nanosecond\n        other = other.replace(tzinfo=None, microsecond=0)\n        \n        n = self.n\n\n        opening_times = [dt.time() for dt in self.start]\n        closing_times = [dt.time() for dt in self.end]\n\n        # Adjust other to reduce the number of cases to handle\n        if n >= 0:\n            if other.time() in closing_times or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in opening_times:\n                other -= timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        # Calculate total business hours in a day\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        # Calculate the number of business days and remaining business hours\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # Adjust by business days first\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            if not self._next_bday.is_on_offset(other):\n                prev_open = self._prev_opening_time(other)\n                remaining_time = other - prev_open\n                other = prev_open + skip_bd + remaining_time\n            else:\n                other += skip_bd\n\n        # Remaining business hours to adjust\n        bhour_remain = timedelta(minutes=r)\n\n        if n >= 0:\n            while bhour_remain != timedelta(0):\n                prev_opening_time = self._prev_opening_time(other)\n                bhour = self._get_closing_time(prev_opening_time) - other\n                if bhour_remain < bhour:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    other = self._next_opening_time(other + bhour)\n        else:\n            while bhour_remain != timedelta(0):\n                bhour = self._next_opening_time(other) - other\n                if (bhour_remain > bhour or bhour_remain == bhour) and other.nanosecond != 0:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    other = self._get_closing_time(self._next_opening_time(other + bhour - timedelta(seconds=1)))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}