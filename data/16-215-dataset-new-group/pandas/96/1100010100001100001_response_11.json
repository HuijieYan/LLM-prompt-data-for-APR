{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n        \n        if n >= 0:\n            # adjust for positive n\n            other_time = other.time()\n            if other_time in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n            remaining_hours = (other - datetime.combine(other.date(), self.start[0])).total_seconds() / 3600\n            remaining_business_days, remaining_hours = divmod(remaining_hours, businesshours // 3600)\n            other = other + timedelta(days=remaining_business_days)\n            \n            if remaining_hours > 0:\n                other = self._next_opening_time(other + timedelta(hours=remaining_hours))\n        else:\n            # adjust for negative n\n            if other.time() in self.start:\n                other = other - timedelta(seconds=1)\n                \n            remaining_hours = (datetime.combine(other.date(), self.end[0]) - other).total_seconds() / 3600\n            remaining_business_days, remaining_hours = divmod(remaining_hours, businesshours // 3600)\n            \n            if remaining_hours == 0 and getattr(other, \"nanosecond\", 0) != 0:\n                remaining_hours = businesshours / 3600\n            \n            other = other - timedelta(days=remaining_business_days)\n            other = self._get_closing_time(self._next_opening_time(other + timedelta(hours=remaining_hours)))\n        \n        return other\n        # raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}