{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            other_time = other.time()\n            \n            if n >= 0:  # For positive business hours\n                if other_time in self.end or not self.is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:  # For negative business hours\n                if other_time in self.start:\n                    other = other - timedelta(minutes=1)\n                if not self.is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n            \n            bd, _ = divmod(abs(n * 60), 60)\n            if n < 0:\n                bd = -bd\n            \n            if bd != 0:\n                skip_bd = CustomBusinessDay(n=bd)\n                next_bday = other + skip_bd\n                while not self.is_on_offset(next_bday):\n                    next_bday = self._next_opening_time(next_bday)\n                other = next_bday\n            \n            # Adjust based on business hours\n            _, r = divmod(abs(n * 60), 60)\n            remaining_time = timedelta(minutes=r)\n            current_time = other\n            \n            while remaining_time > timedelta(0):\n                if n >= 0:\n                    bhour = self._get_closing_time(self._prev_opening_time(current_time)) - current_time\n                else:\n                    bhour = self._next_opening_time(current_time) - current_time\n                    \n                if remaining_time < bhour:\n                    current_time += remaining_time\n                    remaining_time = timedelta(0)\n                else:\n                    remaining_time -= bhour\n                    if n >= 0:\n                        current_time = self._next_opening_time(current_time + bhour)\n                    else:\n                        current_time = self._get_closing_time(self._next_opening_time(current_time + bhour - timedelta(seconds=1)))\n            \n            return current_time\n        \n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import time, timedelta",
                "from pandas.tseries.offsets import ApplyTypeError, CustomBusinessHour, CustomBusinessDay, CustomBusinessMixin"
            ]
        }
    ]
}