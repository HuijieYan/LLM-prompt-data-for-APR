{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # Reset timezone and nanosecond\n            other = other.replace(tzinfo=None, microsecond=0)\n            n = self.n\n\n            # Determine if the current time is within business hours\n            is_within_business_hours = other.time() >= self.start[0] and other.time() < self.end[0]\n\n            if n >= 0:\n                if not is_within_business_hours or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if is_within_business_hours:\n                    # Adjust to previous business day\n                    other -= timedelta(seconds=1)\n                if not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n\n            # Get total business hours by second in one business day\n            business_hours_seconds = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            bd, r = divmod(abs(n * 60), business_hours_seconds // 60)\n            if n < 0:\n                bd, r = -bd, -r\n\n            # Adjust by business days first\n            if bd != 0:\n                if not self.is_on_offset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + pd.offsets.BusinessDay(n=bd) + remain\n                else:\n                    other += pd.offsets.BusinessDay(n=bd)\n\n            # Remaining business hours to adjust\n            remaining_seconds = r * 60\n\n            if n >= 0:\n                while remaining_seconds > 0:\n                    # Business hours left in this business time interval\n                    closing_time = self._get_closing_time(self._prev_opening_time(other))\n                    bhour = closing_time - other\n                    if remaining_seconds < bhour.total_seconds():\n                        # Finish adjusting if possible\n                        other += timedelta(seconds=remaining_seconds)\n                        remaining_seconds = 0\n                    else:\n                        # Go to the next business time interval\n                        remaining_seconds -= bhour.total_seconds()\n                        other = self._next_opening_time(other + bhour)\n            else:\n                while remaining_seconds > 0:\n                    # Business hours left in this business time interval\n                    opening_time = self._next_opening_time(other)\n                    bhour = opening_time - other\n                    if remaining_seconds >= bhour.total_seconds() or (remaining_seconds == bhour.total_seconds() and other.nanosecond != 0):\n                        # Finish adjusting if possible\n                        other += timedelta(seconds=remaining_seconds)\n                        remaining_seconds = 0\n                    else:\n                        # Go to next business time interval\n                        remaining_seconds -= bhour.total_seconds()\n                        other = self._get_closing_time(self._next_opening_time(other + bhour - timedelta(seconds=1)))\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}