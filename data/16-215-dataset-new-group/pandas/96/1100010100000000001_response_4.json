{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # reset nanosecond and timezone\n        other = other.replace(microsecond=0)\n        n = self.n\n\n        # handle the case when business hours are negative\n        if n < 0:\n            # subtracting one second to move to the previous business day\n            other = other - timedelta(seconds=1)\n\n        businesshours = sum(\n            (en - st).seconds for st, en in zip(self.start, self.end)\n        )\n\n        if n > 0:\n            # calculate the number of business days and remaining business hours\n            bd, r = divmod(n, businesshours / 60)\n            business_days = BusinessDay(n=bd)\n            other = other + business_days\n            bhour_remain = timedelta(minutes=r)\n        else:\n            bd, r = divmod(-n, businesshours / 60)\n            business_days = BusinessDay(n=-bd)\n            other = other - business_days\n            bhour_remain = timedelta(minutes=-r)\n\n        while bhour_remain != timedelta(0):\n            for st, en in zip(self.start, self.end):\n                if other.time() >= st and other.time() <= en:\n                    bhour = timedelta(\n                        hours=en.hour - other.hour,\n                        minutes=en.minute - other.minute,\n                        seconds=en.second - other.second,\n                    )\n                    if bhour_remain < bhour:\n                        # finish adjusting if possible\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        # go to the next business time interval\n                        bhour_remain -= bhour\n                        other = datetime(\n                            other.year,\n                            other.month,\n                            other.day,\n                            en.hour,\n                            en.minute,\n                            en.second,\n                        ) + timedelta(1)\n                    break\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import timedelta"
            ]
        }
    ]
}