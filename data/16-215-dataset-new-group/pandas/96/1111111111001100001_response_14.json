{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # Adjust other to reduce number of cases to handle\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n\n        n = self.n\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        opening_time = self._next_opening_time(other)\n        closing_time = self._get_closing_time(opening_time)\n\n        if n >= 0:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = opening_time\n                while n > 0:\n                    if self.next_bday.is_on_offset(other):\n                        other = opening_time + timedelta(days=n)\n                        n = 0\n                    else:\n                        other = self.next_bday.apply(other)\n                        n -= 1\n        else:\n            if other.time() in self.start:\n                other -= timedelta(seconds=1)\n                \n            if not self._is_on_offset(other):\n                other = opening_time\n                while n < 0:\n                    other = self._get_closing_time(self._next_opening_time(other))\n                    other = self._prev_opening_time(other)\n                    other -= timedelta(days=1)\n                    n += 1\n\n        remaining_minutes = n * 60\n\n        if remaining_minutes >= businesshours:\n            business_days = remaining_minutes // businesshours\n            other += timedelta(days=business_days)\n            remaining_minutes -= business_days * businesshours\n\n        if n >= 0:\n            while remaining_minutes > 0:\n                bhour = closing_time - other\n                if remaining_minutes < bhour.seconds // 60:\n                    other += timedelta(minutes=remaining_minutes)\n                    remaining_minutes = 0\n                else:\n                    remaining_minutes -= bhour.seconds // 60\n                    other = self._next_opening_time(closing_time)\n        else:\n            while remaining_minutes < 0:\n                bhour = other - opening_time\n                if abs(remaining_minutes) < bhour.seconds // 60:\n                    other -= timedelta(minutes=abs(remaining_minutes))\n                    remaining_minutes = 0\n                else:\n                    remaining_minutes += bhour.seconds // 60\n                    other = self._prev_opening_time(opening_time)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}