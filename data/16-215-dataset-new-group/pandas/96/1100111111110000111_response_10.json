{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # ignore timezone and nanosecond\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        n = self.n\n\n        # adjust other to reduce number of cases to handle\n        if n >= 0:\n            if other.time() >= self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                other -= timedelta(days=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        # directly calculate business hours for each period.\n        idx = pd.date_range(other, periods=2, freq=pd.offsets.BDay())\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(idx.floor(\"1D\") + self.start, idx.ceil(\"1D\") + self.start)\n        )\n\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # adjust by business days first\n        if bd != 0:\n            skip_bd = pd.offsets.CustomBusinessDay(n=bd, weekmask=\"Mon Tue Wed Thu Fri\")\n            if not self.is_on_offset(other):\n                prev_open = self._prev_opening_time(other)\n                remain = other - prev_open\n                other = prev_open + skip_bd + remain\n            else:\n                other = other + skip_bd\n\n        remaining_seconds = r * 60\n        if n >= 0:\n            # adjust business hours in the future\n            business_time = self._get_closing_time(self._get_previous_opening_time(other))\n            while remaining_seconds > 0:\n                t_diff = (business_time - other).total_seconds()\n                if remaining_seconds > t_diff:\n                    remaining_seconds -= t_diff\n                    other = self._next_opening_time(other + t_diff)\n                    business_time = self._get_closing_time(self._get_previous_opening_time(other))\n                else:\n                    other += timedelta(seconds=remaining_seconds)\n                    break\n        else:\n            # adjust business hours in the past\n            business_time = self._next_opening_time(other)\n            while remaining_seconds > 0:\n                t_diff = (business_time - other).total_seconds()\n                if remaining_seconds >= t_diff:\n                    remaining_seconds -= t_diff\n                    other = business_time\n                    business_time = self._next_opening_time(other)\n                else:\n                    other += timedelta(seconds=remaining_seconds)\n                    break\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}