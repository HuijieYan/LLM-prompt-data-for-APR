{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        start_dt = datetime(other.year, other.month, other.day, self.start_hour, 0)\n        \n        if n >= 0:\n            if other < start_dt or other.minute > 0:\n                other = start_dt\n                n += 1\n\n        else:\n            if other > start_dt or other.minute > 0:\n                other = start_dt\n                n -= 1\n\n        business_hours = self._get_business_hours_sum()\n        business_days, remaining_hours = divmod(abs(n), business_hours)\n        \n        if n < 0:\n            business_days = -business_days\n            remaining_hours = -remaining_hours\n\n        if business_days != 0:\n            other += timedelta(days=business_days)\n        \n        if remaining_hours != 0:\n            while remaining_hours != 0:\n                if n >= 0:\n                    other = self._next_opening_time(other)\n                else:\n                    other = self._get_closing_time(other)\n                remaining_hours -= self._remaining_business_hours(other)\n        \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}