{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        if n >= 0:\n            if other.time() >= datetime.time(17, 0):  # Adjust after business hours\n                other = self._next_opening_time(other)\n            if other.date() in self.holidays:  # Adjust for holidays\n                other = self._next_opening_time(other)\n        else:\n            if other.time() < datetime.time(15, 0):  # Adjust before business hours\n                other = self._prev_opening_time(other, bias=\"next\")\n            if other.date() in self.holidays:  # Adjust for holidays\n                other = self._next_opening_time(other)\n\n        business_hour = timedelta(minutes=60)\n        offset = n * business_hour\n\n        if n >= 0:\n            while offset != timedelta(0):\n                if offset >= timedelta(0):\n                    # Add hours to the current business hour\n                    other += business_hour\n                    offset -= business_hour\n                    if other.time() >= datetime.time(17, 0):  # Adjust after business hours\n                        other = self._next_opening_time(other)\n                else:\n                    # Deduct hours from the current business hour\n                    bhour = (other - self._prev_opening_time(other))\n                    if bhour < abs(offset):\n                        # Move to the previous business hour\n                        other -= bhour\n                        offset += bhour\n                        other = self._prev_opening_time(other, bias=\"next\")\n                    else:\n                        # Adjust within the business hour\n                        other += offset\n                        offset = timedelta(0)\n        else:\n            while offset != timedelta(0):\n                if offset < timedelta(0):\n                    # Subtract hours in the current business hour\n                    bhour = self._next_opening_time(other) - other\n                    if abs(offset) >= bhour or (\n                        abs(offset) == bhour and other.nanosecond != 0\n                    ):\n                        # Move to the next business hour\n                        other += bhour\n                        offset += bhour\n                        other = self._next_opening_time(other)\n                    else:\n                        # Adjust within the business hour\n                        other += offset\n                        offset = timedelta(0)\n                else:\n                    # Add hours to the previous business hour\n                    bhour = (other - self._prev_opening_time(other, bias=\"next\"))\n                    offset -= bhour\n                    other = self._prev_opening_time(other, bias=\"next\")\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}