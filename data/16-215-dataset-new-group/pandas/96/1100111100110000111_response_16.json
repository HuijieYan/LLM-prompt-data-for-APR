{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # reset timezone and nanosecond\n            other = other.replace(tzinfo=None, microsecond=0)\n            n = self.n\n\n            start_time = (other.hour * 60 + other.minute)\n            business_hours_start = (self.start.hour * 60 + self.start.minute)\n            business_hours_end = (self.end.hour * 60 + self.end.minute)\n\n            if n >= 0:\n                if start_time >= business_hours_end or start_time < business_hours_start:\n                    other += timedelta(days=1)\n                    other = datetime(other.year, other.month, other.day,\n                                     self.start.hour, self.start.minute, 0, 0)\n            else:\n                if start_time > business_hours_start:\n                    other -= timedelta(days=1)\n                    other = datetime(other.year, other.month, other.day,\n                                     self.end.hour, self.end.minute, 0, 0)\n\n            hours_to_adjust = abs(n) * ((business_hours_end - business_hours_start) // 60)\n\n            if n < 0:\n                remaining_business_hours = (business_hours_end - start_time) + (business_hours_start)\n            else:\n                remaining_business_hours = business_hours_end - start_time\n\n            while hours_to_adjust > 0:\n                if hours_to_adjust >= remaining_business_hours:\n                    remaining_business_hours = business_hours_end - business_hours_start\n                    other = datetime(other.year, other.month, other.day,\n                                     self.start.hour, self.start.minute, 0, 0)\n                    hours_to_adjust -= remaining_business_hours\n                    if n >= 0:\n                        other += timedelta(days=1)\n                    else:\n                        other -= timedelta(days=1)\n                else:\n                    other += timedelta(minutes=hours_to_adjust)\n                    hours_to_adjust = 0\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}