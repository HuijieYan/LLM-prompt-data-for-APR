{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # adjust the start and end times\n        start_time = datetime(other.year, other.month, other.day, *self.start[0].utctimetuple()[3:6])\n        end_time = datetime(other.year, other.month, other.day, *self.end[0].utctimetuple()[3:6])\n\n        # get the total business hours within a single day\n        businesshours = sum((e.hour - s.hour) * 60 + (e.minute - s.minute) for s, e in zip(self.start, self.end))\n\n        # adjust the other time to the next open time if applicable\n        if other.time() < start_time.time():\n            other = start_time\n        elif other.time() > end_time.time() or not self._is_on_offset(other):\n            other = self._next_opening_time(other)\n\n        # calculate the number of business days and remaining business hours\n        period = (other - start_time).seconds / 60\n        businessdays, remaining_hours = divmod(period, businesshours)\n\n        # check for holidays within the range\n        for _ in range(int(businessdays)):\n            if not self.next_bday.is_on_offset(other):\n                other = self._next_opening_time(other)\n            else:\n                other += BusinessDay(n=1)\n\n        # adjust the remaining business hours to the next open time\n        while remaining_hours > 0:\n            if other.time() < end_time.time():\n                hours_needed = (other - start_time).seconds / 60 - sum(bd * businesshours for bd in range(int(businessdays)))\n                if hours_needed > remaining_hours:\n                    break\n                else:\n                    other = self._next_opening_time(other) + timedelta(minutes=remaining_hours)\n                    break\n            else:\n                break\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}