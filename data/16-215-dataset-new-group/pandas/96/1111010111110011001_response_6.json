{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        start_time = datetime(\n            year=other.year,\n            month=other.month,\n            day=other.day,\n            hour=self.start.hour,\n            minute=self.start.minute,\n        )\n        end_time = datetime(\n            year=other.year,\n            month=other.month,\n            day=other.day,\n            hour=self.end.hour,\n            minute=self.end.minute,\n        )\n\n        # calculate time difference\n        time_diff = end_time - start_time\n        business_hours = time_diff.total_seconds() / 60\n\n        # adjust for positive/negative business hours\n        if n >= 0:\n            adjusted_time = start_time\n            while n > 0:\n                adjusted_time += timedelta(minutes=business_hours)\n                if not is_business_day(adjusted_time):\n                    n -= 1\n        else:\n            adjusted_time = end_time\n            while n < 0:\n                adjusted_time -= timedelta(minutes=business_hours)\n                if not is_business_day(adjusted_time):\n                    n += 1\n\n        return adjusted_time\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}