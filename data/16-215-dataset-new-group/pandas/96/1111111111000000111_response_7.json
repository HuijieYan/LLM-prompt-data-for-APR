{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        start_time = other.time()\n\n        if start_time in self.start:\n            date_offset = 0\n        elif start_time in self.end or not self._is_on_offset(other):\n            date_offset = 1\n        else:\n            date_offset = 0\n\n        # adjusted start time to ensure that adjustments within a day are correct\n        if n >= 0:\n            adjusted_start = datetime(other.year, other.month, other.day, 0, 0, 0) + timedelta(date_offset)\n        else:\n            adjusted_start = datetime(other.year, other.month, other.day, 23, 59, 59) - timedelta(date_offset)\n\n        business_hours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n        if n < 0:\n            n_adj = -n\n        else:\n            n_adj = n\n\n        full_days, remaining_seconds = divmod(n_adj * 60, business_hours // 60)\n\n        total_offset = date_offset + full_days\n        adjusted_datetime = self._next_opening_time(adjusted_start)\n\n        if remaining_seconds > 0:\n            while remaining_seconds > 0:\n                next_opening = self._next_opening_time(adjusted_datetime)\n                time_difference = (next_opening - adjusted_datetime).total_seconds()\n                if remaining_seconds >= time_difference or remaining_seconds == time_difference == 0:\n                    adjusted_datetime = self._get_closing_time(next_opening)\n                    remaining_seconds -= time_difference\n                else:\n                    adjusted_datetime += timedelta(seconds=remaining_seconds)\n                    remaining_seconds = 0\n\n        updated_datetime = adjusted_datetime + timedelta(total_offset)\n        return updated_datetime\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}