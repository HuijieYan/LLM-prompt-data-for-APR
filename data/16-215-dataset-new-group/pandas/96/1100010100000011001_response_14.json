{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n        \n        # Convert to minutes for easier calculation\n        total_minutes = abs(n * 60)\n        adjusted_minutes = 0\n        \n        # Calculate the adjusted minutes\n        while adjusted_minutes < total_minutes:\n            # Check if the current time falls within business hours\n            if other.hour*60 + other.minute >= self.start and other.hour*60 + other.minute < self.end:\n                mins_to_end_of_hour = (other.hour + 1)*60 - (other.hour * 60 + other.minute)\n                remaining_minutes = total_minutes - adjusted_minutes\n                if remaining_minutes <= mins_to_end_of_hour:\n                    adjusted_minutes += remaining_minutes\n                    break\n                else:\n                    adjusted_minutes += mins_to_end_of_hour\n                    other += timedelta(minutes=mins_to_end_of_hour)\n            else:\n                # Adjust to the next business day\n                start_of_next_day = datetime(other.year, other.month, other.day, 0, 0, 0) + timedelta(days=1)\n                if n > 0:\n                    # Adjust to the next business day\n                    other = start_of_next_day\n                else:\n                    # Adjust to the previous business day\n                    other = start_of_next_day - timedelta(days=1)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}