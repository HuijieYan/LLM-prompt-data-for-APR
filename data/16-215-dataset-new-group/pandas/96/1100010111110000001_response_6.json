{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # business hour starts and ends\n        business_start = datetime(other.year, other.month, other.day, self.start.hour, self.start.minute)\n        business_end = datetime(other.year, other.month, other.day, self.end.hour, self.end.minute)\n\n        n = self.n\n\n        # adjust other to the business start\n        if other.time() > self.start or other.time() < self.end:\n            other = self._next_opening_time(other)\n            other = datetime(other.year, other.month, other.day, self.start.hour, self.start.minute)\n\n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n        # adjust by business days first\n        if n != 0:\n            businessdays = n // businesshours\n            remain = n % businesshours\n\n            # adjust by business days\n            if businessdays > 0:\n                if remain <= (3600 * (self.end.minute - other.minute)):\n                    other += timedelta(hours=(remain // 3600), minutes=((remain % 3600) // 60))\n                else:\n                    businessdays += 1\n                    \n                remain = 0\n                for _ in range(businessdays):\n                    while not self._is_on_offset(other):\n                        other = self._next_opening_time(other)\n                    other = other + timedelta(days=1)\n\n                # Go to the next business day if there are remaining business hours\n                if remain > 0:\n                    while not self._is_on_offset(other):\n                        other = self._next_opening_time(other)\n                    if remain <= (self.end.hour * 3600) + (self.end.minute * 60):\n                        other = datetime(other.year, other.month, other.day, self.start.hour, self.start.minute) + timedelta(seconds=remain)\n                    else:\n                        other = self._next_opening_time(other)  # go to the next business day\n                        other = datetime(other.year, other.month, other.day, self.start.hour, self.start.minute) + timedelta(seconds=remain)\n\n                return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}