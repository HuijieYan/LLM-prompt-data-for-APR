{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        other = datetime.combine(other.date(), datetime.min.time())\n        n = self.n\n\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end)\n        )\n\n        total_seconds = abs(n * 60 * 60)\n\n        total_bdays, remaining_seconds = divmod(total_seconds, businesshours)\n\n        adjusted_datetime = other + timedelta(days=total_bdays)\n\n        if remaining_seconds != 0:\n            if n >= 0:\n                adjusted_datetime = self._next_opening_time(adjusted_datetime)\n\n                while remaining_seconds > 0:\n                    closing_time = self._get_closing_time(adjusted_datetime)\n                    business_time_remaining = closing_time - adjusted_datetime\n\n                    if remaining_seconds >= business_time_remaining.seconds:\n                        adjusted_datetime = self._next_opening_time(closing_time)\n                        remaining_seconds -= business_time_remaining.seconds\n                    else:\n                        adjusted_datetime += timedelta(seconds=remaining_seconds)\n                        remaining_seconds = 0\n\n            else:\n                adjusted_datetime = self._get_closing_time(adjusted_datetime)\n\n                while remaining_seconds > 0:\n                    opening_time = self._next_opening_time(adjusted_datetime)\n                    business_time_remaining = opening_time - adjusted_datetime\n\n                    if remaining_seconds >= business_time_remaining.seconds:\n                        adjusted_datetime = opening_time\n                        remaining_seconds -= business_time_remaining.seconds\n                    else:\n                        adjusted_datetime -= timedelta(seconds=remaining_seconds)\n                        remaining_seconds = 0\n\n        return adjusted_datetime\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}