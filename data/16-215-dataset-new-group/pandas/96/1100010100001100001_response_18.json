{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        businesshours = (self.end[0].hour - self.start[0].hour) * 60  # Calculate business hours\n        bd, r = divmod(abs(n * 60), businesshours)  # Calculate business days and remaining minutes\n\n        # Adjust by business days first\n        if bd != 0:\n            other += timedelta(days=bd)\n\n        # Adjust remaining business hours\n        current_hour = other.hour\n        remaining_hours = self.end[0].hour - current_hour  # Calculate remaining business hours in the current day\n        if n > 0:\n            if remaining_hours <= r / 60:\n                other = other.replace(hour=self.start[0].hour, minute=0) + timedelta(days=1)  # Move to next business day\n                r -= remaining_hours * 60\n            else:\n                other += timedelta(hours=r / 60)  # Adjust remaining hours in the same day\n                r = 0\n        elif n < 0:\n            if remaining_hours >= r / 60:\n                other += timedelta(hours=-r / 60)  # Adjust remaining hours in the same day\n                r = 0\n            else:\n                other = other.replace(hour=self.end[0].hour - 1, minute=59) - timedelta(days=1)  # Move to previous business day\n                r += remaining_hours * 60\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}