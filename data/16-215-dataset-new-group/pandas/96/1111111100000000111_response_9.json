{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # Handle holidays\n            is_holiday = getattr(other, \"date\", False) in self.holidays\n\n            if is_holiday:\n                other = self.next_bday(other)\n\n            # Calculate business hours and adjust for holidays\n            hours_to_add = []\n            if self.n >= 0:\n                while len(hours_to_add) < abs(self.n):\n                    start_dt = other.replace(hour=self.start.hour, minute=self.start.minute)\n                    if start_dt.weekday() in (5, 6) or start_dt.date() in self.holidays:\n                        start_dt = self.next_bday(start_dt)\n                    business_hr_end = start_dt.replace(hour=self.end.hour, minute=self.end.minute)\n                    hours_to_add.append(business_hr_end)\n                    other = self.next_bday(business_hr_end)\n            else:\n                while len(hours_to_add) < abs(self.n):\n                    start_dt = other.replace(hour=self.start.hour, minute=self.start.minute)\n                    if start_dt.weekday() in (5, 6) or start_dt.date() in self.holidays:\n                        start_dt = self.prev_bday(start_dt)\n                    business_hr_start = start_dt.replace(hour=self.start.hour, minute=self.start.minute)\n                    hours_to_add.append(business_hr_start)\n                    other = self.prev_bday(business_hr_start)\n\n            return hours_to_add\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}