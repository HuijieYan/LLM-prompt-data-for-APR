{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        timezone_offset = timedelta(seconds=other.utcoffset().total_seconds())\n        adjusted_time = other - timezone_offset\n        \n        while n != 0:\n            if n > 0:\n                adjusted_time += timedelta(days=1)\n                if self._is_on_offset(adjusted_time) and adjusted_time.time() in self.start:\n                    n -= 1\n            else:\n                adjusted_time -= timedelta(days=1)\n                if self._is_on_offset(adjusted_time) and adjusted_time.time() in self.end:\n                    n += 1\n        \n        # Apply any remaining time\n        adjusted_hour = adjusted_time.hour\n        adjusted_minute = adjusted_time.minute\n        adjusted_second = adjusted_time.second\n        adjusted_microsecond = adjusted_time.microsecond\n\n        adjusted_time = datetime(\n            adjusted_time.year,\n            adjusted_time.month,\n            adjusted_time.day,\n            adjusted_hour,\n            adjusted_minute,\n            adjusted_second,\n            adjusted_microsecond,\n        )\n        \n        return adjusted_time\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}