{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        # Adjust time to reduce number of cases to handle\n        other = other.replace(\n            hour=other.hour,\n            minute=other.minute,\n            second=other.second,\n            microsecond=0\n        )\n\n        if n >= 0:\n            if not self.is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                # adjustment to move to previous business day\n                other = other - timedelta(seconds=1)\n            if self.is_on_offset(other):\n                other = self._prev_opening_time(other)\n        \n        # Adjust by business days first\n        if n != 0:\n            if not self.next_bday.is_on_offset(other):\n                next_open = self._next_opening_time(other)\n                remain = other - next_open\n                other = next_open + BusinessDay(n=n) + remain\n            else:\n                other = other + BusinessDay(n=n)\n\n        # Remaining business hours to adjust\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n        total_minutes = n * 60\n        if n < 0:\n            total_minutes = -total_minutes\n        delta = timedelta(minutes=total_minutes)\n\n        while delta != timedelta(0):\n            if n < 0:\n                delta = self._prev_opening_time(other) - other\n            else:\n                delta = self._next_opening_time(other) - other\n\n            if n < 0 and delta.days >= 0:\n                delta = self._next_opening_time(other) - other\n\n            if n >= 0:\n                if delta != timedelta(0):\n                    other += delta\n                    delta = timedelta(0)\n            else:\n                if delta == timedelta(0) and other.nanosecond != 0:\n                    other += delta\n                    delta = timedelta(0)\n                else:\n                    delta -= other\n                    other = self._get_closing_time(other + delta)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}