{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        if n >= 0:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                other = other.replace(hour=self.start[0].hour, minute=self.start[0].minute)\n            else:\n                other = self._prev_opening_time(other)\n                \n        open_time_today = self._next_opening_time(datetime.combine(other.date(), self.start[0])) if n>=0 else other.replace(hour=self.start[0].hour, minute=self.start[0].minute)\n        open_time_tomorrow = self._next_opening_time(datetime.combine(other.date() + timedelta(days=1), self.start[0])) if n>=0 else datetime.combine(other.date(), self.start[0]) - timedelta(days=1)\n        \n        if n >= 0:\n            remaining_time = other - open_time_today\n            num_days_forward = (self._days1[open_time_today.weekday()] - 1) % 7 + 1\n            remaining_days = max(num_days_forward - 1, 0)\n            other = open_time_tomorrow + timedelta(days=remaining_days) + remaining_time\n            num_hrs = n * (self.end[0].hour - self.start[0].hour) + (self.end[0].minute - self.start[0].minute)\n            other = other + timedelta(hours=num_hrs)\n        else:\n            remaining_time = other - open_time_today\n            num_days_backward = (self._days1[open_time_today.weekday()] - 1) % 7 + 1\n            remaining_days = max(num_days_backward - 1, 0)\n            other = open_time_today - timedelta(days=remaining_days) + remaining_time\n            num_hrs = n * (self.end[0].hour - self.start[0].hour) + (self.end[0].minute - self.start[0].minute)\n            other = other - timedelta(hours=num_hrs)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}