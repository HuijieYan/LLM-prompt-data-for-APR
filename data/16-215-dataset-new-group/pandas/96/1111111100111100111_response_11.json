{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            other = self.rollforward(other)\n            start_time = datetime(other.year, other.month, other.day, self.start.hour, self.start.minute)\n            end_time = datetime(other.year, other.month, other.day, self.end.hour, self.end.minute)\n            business_hours = (end_time - start_time).seconds / 3600\n\n            if self.n == 0:\n                return other\n\n            # Determine the direction of adjustment\n            direction = 1 if self.n > 0 else -1\n\n            # Adjust by business days first\n            if self.n // business_hours != 0:\n                business_days = self.n // business_hours\n                other = self.move_to_custom_business_day(other, business_days)\n                remaining_hours = self.n % business_hours\n            else:\n                remaining_hours = self.n\n\n            if remaining_hours != 0:\n                current_time = datetime(other.year, other.month, other.day, other.hour, other.minute)\n\n                while remaining_hours != 0:\n                    current_time = current_time + timedelta(hours=direction)\n                    if current_time.hour in range(self.start.hour, self.end.hour):\n                        remaining_hours -= direction\n                other = datetime(other.year, other.month, other.day, current_time.hour, current_time.minute)\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}