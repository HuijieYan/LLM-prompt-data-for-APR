{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    # ... (existing code here)\n    \n    # adjust other to reduce number of cases to handle\n    # existing code to adjust the timestamp\n\n    # get total business hours by sec in one business day\n    businesshours = sum(\n        self._get_business_hours_by_sec(st, en)\n        for st, en in zip(self.start, self.end)\n    )\n\n    # existing code continues...\n\n    if n < 0:\n        bd, r = -bd, -r\n\n    # existing code continues...\n\n    # adjust by business days first\n    # ...\n\n    # remaining business hours to adjust\n    bhour_remain = timedelta(minutes=r)\n\n    if n >= 0:\n        while bhour_remain > timedelta(0):\n            # business hour left in this business time interval\n            bhour = self._get_closing_time(other.date()) - other\n            if bhour_remain < bhour:\n                # finish adjusting if possible\n                other += bhour_remain\n                bhour_remain = timedelta(0)\n                break  # exit loop after finishing adjustment\n            else:\n                # go to next business time interval\n                bhour_remain -= bhour\n                other = self._next_opening_time(other + bhour)\n    else:\n        while bhour_remain > timedelta(0):\n            # business hour left in this business time interval\n            bhour = self._next_opening_time(other) - other\n            if bhour_remain > bhour:\n                # finish adjusting if possible\n                other += bhour_remain\n                bhour_remain = timedelta(0)\n                break  # exit loop after finishing adjustment\n            else:\n                # go to next business time interval\n                bhour_remain -= bhour\n                other = self._get_closing_time(other)\n    \n    return other",
            "import_list": []
        }
    ]
}