{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        other = as_datetime(other)\n\n        if self._is_on_offset(other):\n            prev_open = self._prev_opening_time(other)\n            opening = self._next_opening_time(other)\n\n            if (n >= 0 and (other.time() in self.end or other == opening)) or (\n                n < 0 and other.time() in self.start and other != opening\n            ):\n                other = opening\n            elif n < 0 and other.time() in self.start:\n                other -= timedelta(seconds=1)\n\n        bus_hours_by_sec = sum(\n            self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end)\n        )\n\n        adj = n * 60 * 60\n        abs_n = abs(n)\n\n        if abs_n != 0:\n            holidays = set(as_datetime(h) for h in self.holidays) if self.holidays else {}\n\n            holidays.remove(other)  # Adjust for the starting holiday\n\n            while abs_n > 0:\n                other += timedelta(days=1) if n > 0 else timedelta(days=-1)\n                if other.date() in holidays or not self._is_on_offset(other):\n                    continue\n                abs_n -= 1\n\n            bus_hours = bus_hours_by_sec / 60  # hours\n            total_secs = bus_hours * 60 * 60  # seconds\n            while total_secs < abs(adj):\n                offset = abs(adj) - total_secs\n                end_opening = self._prev_opening_time(other) if n < 0 else self._get_closing_time(other)\n                interval = self._next_opening_time(end_opening + timedelta(hours=1))\n                remaining = interval - other if n > 0 else other - interval\n                if remaining.total_seconds() > offset:\n                    other += timedelta(seconds=offset) if n > 0 else timedelta(seconds=-offset)\n                    offset = 0\n                else:\n                    if n > 0:\n                        other = self._next_opening_time(other + timedelta(seconds=remaining.total_seconds()))\n                    else:\n                        other = self._get_closing_time(self._next_opening_time(other + timedelta(seconds=remaining.total_seconds() - 1)))\n                    offset -= remaining.total_seconds()\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n    \n    return other",
            "import_list": []
        }
    ]
}