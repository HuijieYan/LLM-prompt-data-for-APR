{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        bd, r = divmod(self.n*60, 60)  # calculate business days and remaining minutes\n\n        adjust_days = timedelta(days=bd)\n        adjust_minutes = timedelta(minutes=r)\n\n        # apply business days adjustment\n        other = other + adjust_days\n\n        # apply remaining minutes adjustment\n        if self.n >= 0:\n            # if positive business hours\n            while adjust_minutes > timedelta(0):\n                closing_time = max(t for t in self.end if t <= other.time())\n                next_opening = self._next_opening_time(other)\n                minutes_in_interval = (next_opening - other).seconds // 60\n                if adjust_minutes <= minutes_in_interval:\n                    other = other + timedelta(minutes=adjust_minutes)\n                    adjust_minutes = timedelta(0)\n                else:\n                    other = next_opening\n                    adjust_minutes -= minutes_in_interval\n        else:\n            # if negative business hours\n            while adjust_minutes > timedelta(0):\n                opening_time = min(t for t in self.start if t >= other.time())\n                prev_closing = self._prev_closing_time(other)\n                minutes_in_interval = (other - prev_closing).seconds // 60\n                if adjust_minutes <= minutes_in_interval:\n                    other = other - timedelta(minutes=adjust_minutes)\n                    adjust_minutes = timedelta(0)\n                else:\n                    other = prev_closing\n                    adjust_minutes -= minutes_in_interval\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}