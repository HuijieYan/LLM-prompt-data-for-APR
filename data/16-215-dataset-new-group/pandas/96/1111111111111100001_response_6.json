{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if not isinstance(other, datetime):\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n\n        n = self.n\n        start_date = datetime(\n            other.year,\n            other.month,\n            other.day,\n            self.start[0].hour,\n            self.start[0].minute,\n            self.start[0].second,\n            self.start[0].microsecond,\n        )\n\n        current_date = datetime(\n        other.year,\n        other.month,\n        other.day,\n        other.hour,\n        other.minute,\n        other.second,\n        other.microsecond,\n        )\n\n        if n > 0:  # Move to next business hour if n is positive\n            diff = start_date - current_date\n            if diff.total_seconds() > 0:\n                return start_date\n            else:\n                next_hour = start_date.replace(hour=start_date.hour+1)  # Move to next hour\n                return next_hour\n        else: # Move to previous business hour if n is negative\n            if current_date.hour < self.start[0].hour:\n                prev_hour = start_date.replace(hour=start_date.hour-1)  # Move to previous hour\n                return prev_hour\n            else:\n                return start_date",
            "import_list": []
        }
    ]
}