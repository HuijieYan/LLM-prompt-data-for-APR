{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # Reset timezone and nanosecond\n        other = other.replace(tzinfo=None, microsecond=0)\n        original_time = other.time()\n        n = self.n\n\n        if n >= 0:\n            if original_time >= self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if original_time in self.start:\n                other = other - timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        # Calculate business hours per day and adjust by business days first\n        business_hours_per_day = sum(\n            self._get_business_hours_stat(start, end)\n            for start, end in zip(self.start, self.end)\n        )\n\n        business_days, remaining_hours = divmod(abs(n * 60), business_hours_per_day // 60)\n\n        if n < 0:\n            business_days = -business_days\n            remaining_hours = -remaining_hours\n\n        if business_days != 0:\n            skip_business_days = BusinessDay(n=business_days)\n            business_day_adjusted = self.next_bday if self.next_bday.is_on_offset(other) else self._prev_opening_time(other)\n            other = business_day_adjusted + skip_business_days\n            remaining_hours = (other.date() - other).seconds // 60\n\n        while remaining_hours != 0:\n            current_interval = self._next_opening_time(other)\n            remaining_business_hours = self._get_closing_time(current_interval) - other\n\n            if n >= 0:\n                if remaining_hours <= remaining_business_hours.seconds // 60:\n                    other = other + timedelta(minutes=remaining_hours)\n                    remaining_hours = 0\n                else:\n                    remaining_hours -= remaining_business_hours.seconds // 60\n                    other = self._next_opening_time(other + remaining_business_hours)\n            else:\n                if remaining_hours >= (current_interval - other).seconds // 60:\n                    other = other + timedelta(minutes=remaining_hours)\n                    remaining_hours = 0\n                else:\n                    remaining_hours -= (current_interval - other).seconds // 60\n                    other = self._get_closing_time(self._next_opening_time(other + timedelta(minutes=remaining_hours)))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}