{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        if isinstance(n, int) and n != 0:\n            raise ValueError(\"n must be an integer and not equal to zero\")\n        \n        # Adjust the datetime to remove timezone and nanoseconds\n        other = other.replace(tzinfo=None, microsecond=0)\n        \n        if n >= 0:\n            # Check if the input datetime is on the offset\n            if other.time() not in self.start or not self.is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.end:\n                other -= timedelta(seconds=1)\n            if not self.is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n        \n        # Business hours calculation\n        business_hours_minutes = [(en - st).seconds/60 for st, en in zip(self.start, self.end)]\n        business_hours = sum(business_hours_minutes)\n        \n        # Initial calculations for business days and remaining hours\n        remainder, hours = divmod(abs(n * 60), business_hours)\n        if n < 0:\n            remainder, hours = -remainder, -hours\n            \n        # Adjust by business days first\n        if remainder != 0:\n            skip_bd = BusinessDay(n=remainder)\n            if not self.is_on_offset(other):\n                prev_open = self._prev_opening_time(other)\n                remain = other - prev_open\n                other = prev_open + skip_bd + remain\n            else:\n                other += skip_bd\n        \n        # Remaining business hours adjustment\n        bhour_remain = timedelta(minutes=hours)\n        \n        # Loop for adjusting remaining business hours\n        while bhour_remain > timedelta(0):\n            next_interval = self._next_opening_time(other) if n >= 0 else self._get_closing_time(other)\n            bhour = (next_interval - other).seconds // 60\n            if bhour_remain >= timedelta(minutes=bhour):\n                other = next_interval\n                bhour_remain -= timedelta(minutes=bhour)\n            else:\n                other += bhour_remain\n                bhour_remain = timedelta(0)\n        \n        return other\n\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}