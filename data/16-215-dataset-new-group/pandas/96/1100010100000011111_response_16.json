{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # used for detecting edge condition\n        nanosecond = getattr(other, \"nanosecond\", 0)\n\n        business_start = self.start[0]\n        business_end = self.end[-1]\n        n = self.n\n        \n        if n > 0:\n            holiday_adjusted = other\n            while n > 0:\n                if holiday_adjusted in self:\n                    holiday_adjusted += timedelta(hours=1)\n                else:\n                    n -= 1\n                    if n > 0:\n                        prev_start = holiday_adjusted\n                        while prev_start not in self:\n                            prev_start -= timedelta(hours=1)\n                        holiday_adjusted = prev_start + timedelta(hours=1)\n\n            while holiday_adjusted < business_start:\n                holiday_adjusted += timedelta(hours=1)\n\n            while holiday_adjusted.time() not in self.start or holiday_adjusted in self.holidays:\n                holiday_adjusted += timedelta(hours=1)\n\n            return holiday_adjusted\n\n        if n < 0:\n            holiday_adjusted = other\n            while n < 0:\n                if holiday_adjusted in self:\n                    holiday_adjusted -= timedelta(hours=1)\n                else:\n                    n += 1\n                    if n < 0:\n                        next_start = holiday_adjusted\n                        while next_start not in self:\n                            next_start += timedelta(hours=1)\n                        holiday_adjusted = (next_start - timedelta(hours=1))\n\n            while holiday_adjusted > business_end:\n                holiday_adjusted -= timedelta(hours=1)\n\n            while holiday_adjusted.time() not in self.end or holiday_adjusted in self.holidays:\n                holiday_adjusted -= timedelta(hours=1)\n\n            return holiday_adjusted\n\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}