{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if isinstance(other, Timestamp):\n            other = other.to_pydatetime()\n\n        n = self.n\n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n        if n > 0:\n            other = self._next_opening_time(other)\n            remaining_working_minutes = int(((other - datetime.combine(other.date(), self.start[0])).total_seconds() / 60) % businesshours)\n            bd, r = divmod(n * 60 + remaining_working_minutes, businesshours // 60)\n            \n            if r >= remaining_working_minutes:\n                other += timedelta(minutes=(r-remaining_working_minutes))\n                bd += 1\n            else:\n                other = datetime.combine(other.date(), self.start[0]) + timedelta(minutes=r)\n\n            if bd > 0:\n                other = self.next_bday.apply(other, n=bd)\n        else:\n            if self._is_on_offset(other):\n                other -= timedelta(minutes=self._get_minutes_offset(other) + 1)\n            other = self._next_opening_time(other)\n            remaining_working_minutes = int(((datetime.combine(other.date(), self.end[0]) - other).total_seconds() / 60) % businesshours)\n            bd, r = divmod(n * 60 - remaining_working_minutes, businesshours // 60)\n\n            if r >= remaining_working_minutes:\n                other -= timedelta(minutes=(r-remaining_working_minutes))\n                bd += 1\n            else:\n                other = datetime.combine(other.date(), self.end[0]) - timedelta(minutes=r)\n            \n            if bd < 0:\n                other = self.next_bday.apply(other, n=bd)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}