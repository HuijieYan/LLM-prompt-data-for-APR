{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        other = other.replace(hour=0, minute=0, second=0, microsecond=0)\n        n = self.n\n        \n        # Adjust other to the next opening time if the timestamp is outside business hours\n        if n >= 0:\n            if other.hour not in range(self.start[0].hour, self.end[0].hour) or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.hour < self.start[0].hour:\n                # Adjust to the previous business day end\n                other = other - timedelta(days=1)\n                other = self._get_closing_time(other)\n            elif other.hour > self.end[0].hour or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n        \n        # Calculate business hours\n        business_hours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        \n        # Adjust by business days first\n        business_days, remaining_hours = divmod(abs(n * 60), (business_hours // 60))\n        if n < 0:\n            business_days, remaining_hours = -business_days, -remaining_hours\n        \n        if business_days != 0:\n            other += pd.DateOffset(days=business_days)\n        \n        # Adjust remaining business hours\n        if remaining_hours != 0:\n            if n >= 0:\n                while remaining_hours > 0:\n                    business_hour = self._get_closing_time(self._next_opening_time(other)) - other\n                    if remaining_hours < business_hour.seconds // 60:\n                        other += timedelta(minutes=remaining_hours)\n                        remaining_hours = 0\n                    else:\n                        remaining_hours -= business_hour.seconds // 60\n                        other = self._next_opening_time(other) + pd.DateOffset(days=1)\n            else:\n                while remaining_hours < 0:\n                    business_hour = other - self._get_closing_time(self._prev_closing_time(other))\n                    if abs(remaining_hours) < business_hour.seconds // 60:\n                        other -= timedelta(minutes=abs(remaining_hours))\n                        remaining_hours = 0\n                    else:\n                        remaining_hours += business_hour.seconds // 60\n                        other = self._prev_opening_time(other) + pd.DateOffset(days=-1)\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}