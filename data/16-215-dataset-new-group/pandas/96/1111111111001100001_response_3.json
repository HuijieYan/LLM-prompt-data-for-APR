{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if not isinstance(other, datetime):\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n\n        n = self.n\n        nanosecond = getattr(other, \"nanosecond\", 0)\n        adjusted_other = other.replace(nanosecond=0, tzinfo=None)\n\n        if n >= 0:\n            if adjusted_other.time() in self.end or not self._is_on_offset(adjusted_other):\n                adjusted_other = self._next_opening_time(adjusted_other)\n        else:\n            if adjusted_other.time() in self.start:\n                adjusted_other -= timedelta(seconds=1)\n            if not self._is_on_offset(adjusted_other):\n                adjusted_other = self._next_opening_time(adjusted_other)\n                adjusted_other = self._get_closing_time(adjusted_other)\n\n        business_hours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        \n        bd, r = divmod(abs(n * 60), business_hours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            if not self.next_bday.is_on_offset(adjusted_other):\n                prev_open = self._prev_opening_time(adjusted_other)\n                remain = adjusted_other - prev_open\n                adjusted_other = prev_open + skip_bd + remain\n            else:\n                adjusted_other += skip_bd\n\n        remaining_business_hours = timedelta(minutes=r)\n        \n        if n >= 0:\n            while remaining_business_hours > timedelta(0):\n                bhour = self._get_closing_time(self._prev_opening_time(adjusted_other)) - adjusted_other\n                if remaining_business_hours < bhour:\n                    adjusted_other += remaining_business_hours\n                    remaining_business_hours = timedelta(0)\n                else:\n                    remaining_business_hours -= bhour\n                    adjusted_other = self._next_opening_time(adjusted_other + bhour)\n        else:\n            while remaining_business_hours > timedelta(0):\n                bhour = self._next_opening_time(adjusted_other) - adjusted_other\n                if remaining_business_hours >= bhour or (remaining_business_hours == bhour and nanosecond != 0):\n                    adjusted_other += remaining_business_hours\n                    remaining_business_hours = timedelta(0)\n                else:\n                    remaining_business_hours -= bhour\n                    adjusted_other = self._get_closing_time(self._next_opening_time(adjusted_other + bhour - timedelta(seconds=1)))\n        \n        return adjusted_other",
            "import_list": []
        }
    ]
}