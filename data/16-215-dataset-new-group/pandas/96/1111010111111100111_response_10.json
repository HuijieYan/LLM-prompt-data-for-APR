{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # reset timezone and nanosecond\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            0,  # reset seconds to 0\n        )\n        n = self.n\n\n        # adjust other to reduce number of cases to handle\n        if n >= 0:\n            # Adjust for holidays\n            while not self._is_on_offset(other) or other.date() in self.holidays:\n                other = self._next_opening_time(other)\n        else:\n            while not self._is_on_offset(other) or other.date() in self.holidays:\n                other = self._prev_opening_time(other)\n\n        # Determine the number of business hours in a day\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        # Calculate the business days and remaining business hours\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # Adjust by business days first\n        if bd != 0:\n            # Loop to adjust business days\n            for _ in range(abs(bd)):\n                if n >= 0:\n                    other = self._next_day(other, self.weekmask, self.holidays)\n                else:\n                    other = self._prev_day(other, self.weekmask, self.holidays)\n\n        # Remaining business hours to adjust\n        bhour_remain = timedelta(minutes=r)\n\n        # Loop to adjust remaining business hours\n        while bhour_remain > timedelta(0):\n            if n >= 0:\n                bhour = self._get_closing_time(other) - other\n                if bhour_remain <= bhour:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    other = self._next_opening_time(other + bhour)\n                    bhour_remain -= bhour\n            else:\n                bhour = other - self._prev_opening_time(other)\n                if bhour_remain <= bhour:\n                    other -= bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    other = self._get_closing_time(self._prev_opening_time(other) - bhour)\n                    bhour_remain -= bhour\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}