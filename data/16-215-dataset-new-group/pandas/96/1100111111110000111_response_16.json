{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        # The initial part of the function remains unchanged\n\n        if isinstance(other, datetime):\n            # The existing logic for resetting timezone is correct and doesn't require changes.\n\n            # Replace the existing adjustment logic with the following\n            if self._is_on_offset(other) and other not in self.holidays:\n                # Existing business day calculation\n                businesshours = sum(\n                    self._get_business_hours_by_sec(st, en)\n                    for st, en in zip(self.start, self.end)\n                )\n\n                n = self.n\n                bdays = n // businesshours\n\n                if n >= 0:\n                    other += timedelta(days=bdays)\n                else:\n                    other -= timedelta(days=abs(bdays))\n\n                # Remaining business hours to adjust\n                bhour_remain = timedelta(minutes=abs(self.n) % (businesshours // 60))\n\n                while bhour_remain > timedelta(0):\n                    if n > 0:\n                        bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                        if bhour_remain < bhour:\n                            other += bhour_remain\n                            bhour_remain = timedelta(0)\n                        else:\n                            bhour_remain -= bhour\n                            other = self._next_opening_time(other + timedelta(days=1))\n                           \n                    else:\n                        bhour = self._next_opening_time(other) - other\n                        if bhour_remain > bhour:\n                            other += bhour_remain\n                            bhour_remain = timedelta(0)\n                        else:\n                            bhour_remain -= bhour\n                            other = self._get_closing_time(other)\n            else:\n                raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n          \n            return other",
            "import_list": []
        }
    ]
}