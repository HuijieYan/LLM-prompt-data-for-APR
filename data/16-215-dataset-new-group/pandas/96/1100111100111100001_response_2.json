{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        if n > 0:\n            while n > 0:\n                temp_other = other.replace(hour=self.end[0].hour, minute=self.end[0].minute)\n                if temp_other <= other:\n                    other = self._next_opening_time(other)\n                diff = other - temp_other\n                bhour_remain = timedelta(hours=diff.hours, minutes=diff.minutes)\n                \n                if bhour_remain.total_seconds() >= 0:\n                    other += bhour_remain\n                else:\n                    other = self._next_opening_time(other)\n                    n -= 1\n        \n        elif n < 0:\n            n_positive = abs(n)\n            while n_positive > 0:\n                temp_other = other.replace(hour=self.start[0].hour, minute=self.start[0].minute)\n                if temp_other >= other:\n                    other = self._prev_opening_time(other)\n                diff = temp_other - other\n                bhour_remain = timedelta(hours=diff.hours, minutes=diff.minutes)\n                \n                if bhour_remain.total_seconds() >= 0:\n                    other -= bhour_remain\n                else:\n                    other = self._prev_opening_time(other)\n                    n_positive -= 1\n        \n        return other\n\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}