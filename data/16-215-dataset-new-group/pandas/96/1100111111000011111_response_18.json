{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            if self._is_on_offset(other):  # Check if the input datetime is on the business hour offset\n                return other\n            \n            # Adjust the input datetime based on the offset\n            if n >= 0:\n                if self._next_opening_time(other).time() in self.end:\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start:\n                    other = other - timedelta(seconds=1)\n                if self._next_opening_time(other).time() in self.start:\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n            \n            # Calculate business hours\n            business_hours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n            \n            # Handling adjustment by business days\n            bd, r = divmod(abs(n * 60), business_hours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n            bd_adjustment = BusinessDay(n=bd)\n            if not self.next_bday().is_on_offset(other):\n                other = self.next_bday().apply(other)\n            other = other + bd_adjustment\n            \n            # Handling remaining business hours\n            r_adjustment = timedelta(minutes=r)\n            while r_adjustment != timedelta(0):\n                bhour = self._next_opening_time(other) - other\n                if r_adjustment < bhour:\n                    other += r_adjustment\n                    r_adjustment = timedelta(0)\n                else:\n                    r_adjustment -= bhour\n                    other = self._get_closing_time(self._next_opening_time(other))\n            \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import CustomBusinessHour, apply_wraps",
                "from pandas.tseries.offsets import BusinessDay",
                "from datetime import timedelta"
            ]
        }
    ]
}