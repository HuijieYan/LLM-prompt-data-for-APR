{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # reset timezone and nanosecond\n        other = other.replace(tzinfo=None, ns=0)\n        \n        n = self.n\n        other_time = other.time()\n        total_business_hours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        \n        if n >= 0:\n            if other_time in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other_time in self.start:\n                # adjustment to move to previous business day\n                other -= timedelta(days=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n        \n        # adjusting based on business days and remaining business hours\n        # remaining business hours to adjust\n        bd, r = divmod(abs(n * 60), total_business_hours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n        skip_bd = BusinessDay(n=bd)\n\n        if bd != 0:\n            if not self._is_on_offset(other):\n                prev_open = self._prev_opening_time(other)\n                remain = other - prev_open\n                other = prev_open + skip_bd + remain\n            else:\n                other += skip_bd\n        \n        # remaining business hours\n        bhour_remain = timedelta(minutes=r)\n        \n        while bhour_remain.total_seconds() > 0:\n            bhour = self._get_closing_time(self._next_opening_time(other)) - other if n >= 0 \\\n                    else self._next_opening_time(other) - other\n            if (bhour_remain >= bhour or (bhour_remain == bhour and other.nanosecond != 0) and n < 0):\n                other += bhour\n                bhour_remain = timedelta(0)\n            else:\n                other += bhour_remain\n                bhour_remain = timedelta(0)\n\n        return other\n\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}