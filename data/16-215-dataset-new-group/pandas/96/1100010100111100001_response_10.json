{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if not isinstance(other, datetime):\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n\n    nanosecond = getattr(other, \"nanosecond\", 0)\n    other = datetime(\n        other.year,\n        other.month,\n        other.day,\n        other.hour,\n        other.minute,\n        other.second,\n        other.microsecond,\n    )\n    n = self.n\n\n    # Adjust other for cases where n is positive\n    if n >= 0:\n        if other.time() in self.end or not self._is_on_offset(other):\n            other = self._next_opening_time(other)\n    # Adjust other for cases where n is negative\n    else:\n        if other.time() in self.start:\n            # Adjustment to move to the previous business day\n            other -= timedelta(seconds=1)\n        if not self._is_on_offset(other):\n            other = self._next_opening_time(other)\n            other = self._get_closing_time(other)\n\n    # Get the total business hours by seconds in one business day\n    businesshours = sum(\n        self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end)\n    )\n\n    bd, r = divmod(abs(n * 60), businesshours // 60)\n    if n < 0:\n        bd, r = -bd, -r\n\n    # Adjust by business days first\n    if bd != 0:\n        skip_bd = BusinessDay(n=bd)\n        if not self._is_on_offset(other):\n            prev_open = self._prev_opening_time(other)\n            remain = other - prev_open\n            other = prev_open + skip_bd + remain\n        else:\n            other += skip_bd\n\n    return other",
            "import_list": []
        }
    ]
}