{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, pd.Timestamp):\n            adjusted_other = other\n            # adjust other to reduce number of cases to handle\n            hour = adjusted_other.hour\n            minute = adjusted_other.minute\n            second = adjusted_other.second\n\n            if self.after_minute:\n                if minute > self.start.minute:\n                    minute = self.start.minute\n                    second = 0\n\n            if hour < self.start.hour or (hour == self.start.hour and minute < self.start.minute):\n                # Before the start hour.\n                adjusted_other = adjusted_other.replace(hour=self.start.hour, minute=self.start.minute, second=0) + pd.Timedelta(hours=self.start.hour - hour)\n\n            if self._weekday_start < adjusted_other.weekday() < self._weekday_end:\n                # Adjust to the start of next business hour if the current time is within the working hour but not on the offset.\n                adjusted_other = adjusted_other.replace(hour=self.start.hour, minute=self.start.minute, second=0) + pd.Timedelta(hours=1)\n\n            while self.is_on_offset(adjusted_other):\n                # Increment the adjusted_other while it falls on the offset.\n                adjusted_other += pd.Timedelta(hours=1)\n\n            return adjusted_other\n\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "import pandas as pd",
                "from pandas.tseries.offsets import CustomBusinessHour"
            ]
        }
    ]
}