{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n            if self.n >= 0:\n                # Calculate the number of business days and remaining business hours\n                bd, r = divmod(abs(self.n * 60), businesshours // 60)\n                if self.n < 0:\n                    bd, r = -bd, -r\n                \n                # Adjust by business days first\n                skip_bd = BusinessDay(n=bd)\n                other = self._get_next_business_time(other, skip_bd)\n                \n                # Adjust the remaining business hours\n                remaining_seconds = r * 60\n                while remaining_seconds > 0:\n                    # Calculate the next business interval\n                    next_interval_start = self._next_opening_time(other)\n                    bhour = (next_interval_start - other).seconds\n                    if remaining_seconds < bhour:\n                        # Adjust within the same business time interval\n                        other += timedelta(seconds=remaining_seconds)\n                        remaining_seconds = 0\n                    else:\n                        # Move to the next business time interval\n                        remaining_seconds -= bhour\n                        other = self._next_opening_time(other + timedelta(seconds=bhour))\n            else:\n                # Similar adjustments for negative n\n                pass\n            \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}