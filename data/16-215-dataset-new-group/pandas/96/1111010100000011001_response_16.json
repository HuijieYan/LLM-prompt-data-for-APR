{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        adjusted_other = other.replace(tzinfo=None)\n        n = self.n\n        if n >= 0:\n            if adjusted_other.time() in self.end or not self._is_on_offset(adjusted_other):\n                adjusted_other = self._next_opening_time(adjusted_other)\n        else:\n            if adjusted_other.time() in self.start:\n                adjusted_other -= timedelta(seconds=1)\n            if not self._is_on_offset(adjusted_other):\n                adjusted_other = self._next_opening_time(adjusted_other)\n                adjusted_other = self._get_closing_time(adjusted_other)\n\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        adjusted_other = self._adjust_business_day(adjusted_other, n)\n\n        businessdays, residual_minutes = divmod(abs(n * 60), (businesshours // 60))\n        if n < 0:\n            businessdays, residual_minutes = -businessdays, -residual_minutes\n\n        if n >= 0:\n            adjusted_other += timedelta(minutes=residual_minutes)\n            while residual_minutes > 0:\n                bhour = self._get_closing_time(\n                    self._prev_opening_time(adjusted_other)\n                ) - adjusted_other\n                if bhour > timedelta(minutes=residual_minutes):\n                    adjusted_other += timedelta(minutes=residual_minutes)\n                    residual_minutes = 0\n                else:\n                    residual_minutes -= bhour.total_seconds() / 60\n                    adjusted_other = self._next_opening_time(adjusted_other + bhour)\n        else:\n            while residual_minutes < 0:\n                bhour = adjusted_other - self._prev_opening_time(adjusted_other)\n                if bhour >= abs(residual_minutes):\n                    adjusted_other += timedelta(minutes=residual_minutes)\n                    residual_minutes = 0\n                else:\n                    residual_minutes += bhour.total_seconds() / 60\n                    adjusted_other = self._get_closing_time(\n                        self._next_opening_time(adjusted_other - bhour)\n                    )\n\n        return adjusted_other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}