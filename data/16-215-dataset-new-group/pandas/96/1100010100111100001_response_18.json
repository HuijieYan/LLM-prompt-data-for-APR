{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # used for detecting edge condition\n        nanosecond = getattr(other, \"nanosecond\", 0)\n        n = self.n\n\n        # adjust other to reduce number of cases to handle\n        other = other.replace(microsecond=0)\n\n        # handle positive and negative adjustments separately\n        if n >= 0:\n            if other.time() >= self.end[0] or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() < self.start[0]:\n                other = other - timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        # calculate business hour adjustments\n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        adj_minutes = n * 60\n\n        # adjust by business days\n        adj_days, adj_minutes = divmod(abs(adj_minutes), businesshours // 60)\n        if n < 0:\n            adj_days, adj_minutes = -adj_days, -adj_minutes\n\n        # handle adjustments for business days\n        if adj_days != 0:\n            skip_bd = CustomBusinessDay(n=adj_days)\n            other = other + skip_bd\n\n        # adjust remaining business hours\n        bhour_remain = timedelta(minutes=adj_minutes)\n\n        if n >= 0:\n            while bhour_remain > timedelta(0):\n                bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                if bhour_remain >= bhour:\n                    bhour_remain -= bhour\n                    other = self._next_opening_time(other + bhour)\n                else:\n                    return other + bhour_remain\n        else:\n            while bhour_remain != timedelta(0):\n                bhour = self._next_opening_time(other) - other\n                if bhour_remain > bhour or (bhour_remain == bhour and nanosecond != 0):\n                    bhour_remain -= bhour\n                    other = self._get_closing_time(self._next_opening_time(other + bhour - timedelta(seconds=1)))\n                else:\n                    return other + bhour_remain\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}