{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if not isinstance(other, datetime):\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n\n    # initial setup\n    n = self.n\n    businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n    if n >= 0:\n        other = self._next_opening_time(other) if other.time() in self.end or not self._is_on_offset(other) else other\n    else:\n        other = other - timedelta(minutes=1) if other.time() in self.start else other\n        other = self._next_opening_time(other)\n\n    total_seconds = abs(n) * 3600\n    if n < 0:\n        total_seconds *= -1\n\n    # adjust the datetime based on business hours\n    business_day_offset, remaining_seconds = divmod(total_seconds, businesshours)\n    if n < 0:\n        business_day_offset = -business_day_offset\n        remaining_seconds = -remaining_seconds\n\n    if business_day_offset != 0:\n        # adjust by business days first\n        skip_bd = BusinessDay(n=business_day_offset)\n        other = other + skip_bd\n\n    # adjust the remaining business hours\n    delta = timedelta(seconds=remaining_seconds)\n    while delta > timedelta(0):\n        next_opening_time = self._next_opening_time(other)\n        business_hours_interval = self._get_closing_time(next_opening_time) - next_opening_time\n        if delta < business_hours_interval:\n            other = next_opening_time + delta\n            delta = timedelta(0)\n        else:\n            delta -= business_hours_interval\n            other = self._next_opening_time(next_opening_time + delta)\n\n    return other",
            "import_list": []
        }
    ]
}