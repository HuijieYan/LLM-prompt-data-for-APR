{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # ... [existing code remains unchanged]\n\n            # remainder of the function goes here\n            if n >= 0:\n                while bhour_remain != timedelta(0):\n                    # business hour left in this business time interval\n                    bhour = min(\n                        self._get_closing_time(self._prev_opening_time(other)) - other,\n                        bhour_remain\n                    )\n                    other += bhour\n                    bhour_remain -= bhour\n                    other = self._next_opening_time(other)\n\n            else:\n                while bhour_remain != timedelta(0):\n                    # business hour left in this business time interval\n                    bhour = min(\n                        self._next_opening_time(other) - other,\n                        bhour_remain\n                    )\n                    other += bhour\n                    bhour_remain -= bhour\n                    if bhour_remain.total_seconds() > 0 or nanosecond != 0:\n                        other = self._get_closing_time(\n                            self._next_opening_time(other) - timedelta(seconds=1)\n                        )\n                    \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import timedelta"
            ]
        }
    ]
}