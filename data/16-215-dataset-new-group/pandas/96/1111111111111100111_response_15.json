{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # Extract the date and time information from the Timestamp\n            date_info = other.to_pydatetime().replace(hour=0, minute=0, second=0, microsecond=0)\n            \n            n = self.n\n            business_hours = self._get_business_hours_by_sec(self.start, self.end)\n            \n            # Handle positive or negative values of n\n            if n >= 0:\n                if date_info.time() in self.end or not self._is_on_offset(date_info):\n                    date_info = self._next_opening_time(date_info)\n            else:\n                if date_info.time() in self.start:\n                    # Adjustment to move to the previous business day\n                    date_info = date_info - timedelta(days=1)\n                if not self._is_on_offset(date_info):\n                    date_info = self._next_opening_time(date_info)\n                    date_info = self._get_closing_time(date_info)\n            \n            # Adjust for holidays\n            if self.holidays and date_info in self.holidays:\n                business_day = BusinessDay(n=n)\n                date_info = date_info + business_day\n            \n            # Remaining business hours to adjust\n            remaining_business_hours = abs(n) * business_hours * 60\n            date_info += timedelta(minutes=remaining_business_hours)\n            \n            return date_info\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import timedelta"
            ]
        }
    ]
}