{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def fix_apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        # adjust other to be the raw date\n        other = other.replace(hour=0, minute=0, second=0, microsecond=0)\n\n        bd, r = divmod(abs(n * 60), self.businesshours // 60)\n\n        if n < 0:\n            bd, r = -bd, -r\n\n        if bd != 0:\n            # adjust by business days first\n            other = self.next_bday.rollback(other)\n            if bd != 0:\n                other = other + bd * BDay()\n\n        # remaining business hours to adjust\n        bhour_remain = timedelta(minutes=r)\n\n        while bhour_remain != timedelta(0):\n            if self._is_on_offset(other):\n                temp_time = other + bhour_remain\n                bhour_remain = timedelta(0)\n            elif n > 0 and other.time() in self.end:\n                other = self.next_bday.forward(other)\n            elif n < 0 and other.time() in self.start:\n                other = self.next_bday.rollback(other)\n            else:\n                temp_time = self._next_opening_time(other)\n\n            business_interval_end = self._get_closing_time(\n                _roll_yearday(temp_time, other)\n            )\n            bhour_remain = business_interval_end - temp_time\n            other = temp_time\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}