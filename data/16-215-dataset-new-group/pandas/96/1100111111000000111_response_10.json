{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # Perform the necessary timezone and nanosecond adjustments\n            if self._is_on_offset(other):\n                n = self.n\n\n                if n >= 0:\n                    while not self._is_on_offset(other):\n                        other += self.offset\n\n                businesshours = sum(\n                    self._get_business_hours_by_sec(st, en)\n                    for st, en in zip(self.start, self.end)\n                )\n\n                bd, r = divmod(abs(n * 60), businesshours // 60)\n                if n < 0:\n                    bd, r = -bd, -r\n\n                # adjust by business days first\n                if bd != 0:\n                    bday = to_offset(\"B\")  # Business day offset\n                    shift = bd * bday.n\n\n                    other += shift * self.offset\n\n                # remaining business hours to adjust\n                end = self._get_closing_time(self.start) if n >= 0 else self._next_opening_time(other)\n                bhour_remain = end - other\n                bhour_remain += timedelta(minutes=r)\n\n                while bhour_remain != timedelta(0):\n                    # business hour left in this business time interval\n                    bhour = (\n                        self._get_closing_time(self._prev_opening_time(other)) - other\n                    )\n                    \n                    if n >= 0 and bhour_remain < bhour:\n                        # finish adjusting if possible\n                        other += bhour_remain\n                        break\n                    elif n < 0 and bhour_remain > bhour:\n                        # finish adjusting if possible\n                        other += bhour_remain\n                        break\n                    else:\n                        # go to next business time interval\n                        other = self._next_opening_time(other + bhour)\n                        bhour_remain -= bhour\n\n                return other\n            else:\n                raise ValueError(\"Given datetime is not on the provided offset\")\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.frequencies import to_offset",
                "import pandas as pd"
            ]
        }
    ]
}