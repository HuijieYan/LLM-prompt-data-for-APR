{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 145,
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    import pandas.api.types as ptypes\n    \n    right = lib.item_from_zerodim(right)\n    if lib.is_scalar(right) or np.ndim(right) == 0:\n        if ptypes.is_timedelta64_dtype(right):\n            # Handle scalar operation with timedelta\n            new_data = left.apply(lambda col: func(col, right))\n        else:\n            new_data = left.apply(lambda col: func(col, right))\n\n    elif isinstance(right, ABCDataFrame):\n        assert right._indexed_same(left)\n        new_data = left.apply(lambda col: func(col, right))\n\n    elif isinstance(right, ABCSeries) and axis == \"columns\":\n        assert right.index.equals(left.columns)\n        new_data = left.apply(lambda col: func(col, right))\n\n    elif isinstance(right, ABCSeries):\n        assert right.index.equals(left.index)\n        new_data = left.apply(lambda col: func(col, right))\n\n    else:\n        raise NotImplementedError(right)\n    \n    return new_data",
            "import_list": [
                "import pandas.api.types as ptypes"
            ]
        }
    ]
}