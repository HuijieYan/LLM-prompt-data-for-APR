{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 145,
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n\n    Parameters\n    ----------\n    left : DataFrame\n        The left DataFrame for the operation\n    right : scalar or DataFrame\n        The right scalar or DataFrame for the operation\n    func : arithmetic or comparison operator\n        The function to apply to the operation\n    str_rep : str or None, default None\n        String representation\n    axis : {None, 0, 1, \"index\", \"columns\"}\n        Axis to perform the operation on\n\n    Returns\n    -------\n    DataFrame\n        The result of the operation\n    \"\"\"\n\n    # Determine the type of `right` input and handle the operation accordingly\n    if lib.is_scalar(right) or np.ndim(right) == 0:\n        # Case: right is a scalar or 0-dimensional\n        data = left.apply(lambda col: func(col, right))\n\n    elif isinstance(right, ABCDataFrame):\n        # Case: right is a DataFrame\n        assert right._indexed_same(left)\n        data = left.apply(lambda col: func(col, right[col.name]))\n\n    elif isinstance(right, ABCSeries):\n        # Case: right is a Series\n        if axis == \"columns\":\n            # Operate row-by-row\n            assert right.index.equals(left.columns)\n            data = left.apply(lambda col: func(col, right))\n        else:\n            assert right.index.equals(left.index)\n            data = left.apply(lambda col: func(col, right[left.index]))\n\n    else:\n        raise NotImplementedError(\"Unsupported type for right input\")\n\n    return data",
            "import_list": []
        }
    ]
}