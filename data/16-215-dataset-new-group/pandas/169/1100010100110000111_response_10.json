{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 169,
            "start_line": 8143,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation=\"linear\"):\n    \"\"\"\n    Calculate the value at the given quantile over the requested axis.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value between 0 and 1 inclusive, the quantile(s) to compute\n    axis : {0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0\n        The axis along which to calculate the quantile\n    numeric_only : bool, default True\n        If False, the quantile of datetime and timedelta data should be computed\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        This specifies the interpolation method to use when the desired\n        quantile lies between two data points i and j\n\n    Returns\n    -------\n    Series or DataFrame\n\n    See Also\n    --------\n    core.window.Rolling.quantile\n\n    Examples\n    --------\n    >>> data = np.array([[1, 1], [2, 10], [3, 100], [4, 100]])\n    >>> df = pd.DataFrame(data, columns=['a', 'b'])\n    >>> df.quantile(.1)\n    a    1.3\n    b    3.7\n    Name: 0.1, dtype: float64\n    \"\"\"\n    self._check_percentile(q)\n\n    axis = self._get_axis_number(axis)\n\n    if is_extension_array_dtype(self):\n        dtype = \"round\" if interpolation in [\"lower\", \"higher\"] else \"quantile\"\n        result = self._to_dict()['quantile'](q=q, axis=axis, numeric_only=numeric_only, interpolation=interpolation)\n        dtype = {\"which\": \"DataFrame\", \"round\": \"Series\"}.get(dtype, dtype)\n        result = self._constructor(result, index=q, dtype=dtype)\n        return result\n\n    # If interpolation is approximate, convert the data (if needed)\n    # and call compute_qb. For exact interpolation, .dropna is\n    # not necessary.\n    data = self._get_numeric_data() if numeric_only else self\n    interpolate = interpolation in (\"linear\", \"lower\", \"higher\", \"midpoint\", \"nearest\")\n    if interpolate:\n        self._consolidate_inplace()\n\n    if axis == 0:\n        result = immutables.make_immutable(self, lambda block: block.quantile(q=q, interpolation=interpolation))\n        return self._constructor(result, index=self.columns)\n\n    else:\n        result = immutables.make_immutable(self, lambda block: block.quantile(q=q, interpolation=interpolation))\n        return self._constructor(result, index=self.index)",
            "import_list": []
        }
    ]
}