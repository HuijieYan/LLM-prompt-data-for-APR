{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 169,
            "start_line": 8143,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation=\"linear\"):\n    \"\"\"\n    Return values at the given quantile over the specified axis.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        A numeric value between 0 and 1, or an array of numeric values representing the quantiles to compute.\n    axis : {0, 1, 'index', 'columns'} (default 0)\n        The axis over which to calculate the quantiles. 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n    numeric_only : bool, default True\n        If False, computes the quantile of all data, including datetime and timedelta columns.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        The method used to interpolate quantiles between data points.\n\n    Returns\n    -------\n    Series or DataFrame\n        - If ``q`` is an array, a DataFrame is returned with index = ``q``, columns = original columns, and values = quantiles.\n        - If ``q`` is a float, a Series is returned with index = original columns, and values = quantiles.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]), columns=['a', 'b'])\n    >>> df.quantile(.5)\n    a    2.5\n    b    55.0\n    Name: 0.5, dtype: float64\n    >>> df.quantile([.1, .5])\n           a     b\n    0.1  1.3   3.7\n    0.5  2.5  55.0\n  \n    Specifying `numeric_only=False` computes quantiles for datetime and timedelta data.\n\n    >>> df = pd.DataFrame({'A': [1, 2], 'B': [pd.Timestamp('2010'), pd.Timestamp('2011')], 'C': [pd.Timedelta('1 days'), pd.Timedelta('2 days')]})\n    >>> df.quantile(0.5, numeric_only=False)\n    A                    1.5\n    B    2010-07-02 12:00:00\n    C        1 days 12:00:00\n    Name: 0.5, dtype: object\n    \"\"\"\n    if not numeric_only and self.select_dtypes(include=['datetime64', 'timedelta64']).empty:\n        raise ValueError(\"No datetime or timedelta columns present.\")\n\n    # Extract the numeric data if required\n    data = self._get_numeric_data() if numeric_only else self\n\n    # Transpose the data if axis is 1\n    if axis in [1, 'columns']:\n        data = data.T\n\n    # Perform quantile computation\n    result = data._data.quantile(qs=q, axis=1, interpolation=interpolation, transposed=(axis == 1))\n\n    # Creating DataFrame or Series based on the type of the quantiles input\n    if isinstance(q, list):\n        result = self._constructor(result, index=q)\n    else:\n        result = self._constructor_sliced(result, name=q)\n\n    # Transpose the result back, if necessary\n    if axis in [1, 'columns']:\n        result = result.T\n\n    return result",
            "import_list": []
        }
    ]
}