{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 169,
            "start_line": 8143,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation=\"linear\"):\n    \"\"\"\n    Return values at the given quantile over the requested axis.\n\n    Parameters\n    ----------\n    q : float, default 0.5\n        Value between 0 <= q <= 1, the quantile to compute.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis for computation.\n    numeric_only : bool, default True\n        If False, the quantile of datetime and timedelta data will be computed as well.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}, default 'linear'\n        This optional parameter specifies the interpolation method to use.\n\n    Returns\n    -------\n    Series or DataFrame\n        If ``q`` is an array, a DataFrame will be returned.\n        If ``q`` is a float, a Series will be returned.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[1, 1], [2, 10], [3, 100], [4, 100]], columns=['a', 'b'])\n    >>> df.quantile(.1)\n    a    1.3\n    b    3.7\n    Name: 0.1, dtype: float64\n    >>> df.quantile([.1, .5])\n           a     b\n    0.1  1.3   3.7\n    0.5  2.5  55.0\n    \"\"\"\n    self._check_percentile(q)\n\n    if not numeric_only:\n        if not any(self.dtypes.apply(lambda x: np.issubdtype(x, np.number))):\n            data = self\n        else:\n            data = self.select_dtypes(include=[np.number])\n    else:\n        data = self\n\n    axis = self._get_axis_number(axis)\n    is_transposed = axis == 1\n\n    if is_transposed:\n        data = data.T\n\n    result = data._data.quantile(\n        qs=q, axis=1, interpolation=interpolation, transposed=is_transposed\n    )\n\n    if result.ndim == 2:\n        result = self._constructor(result)\n    else:\n        result = self._constructor_sliced(result, name=q)\n\n    if is_transposed:\n        result = result.T\n\n    return result",
            "import_list": []
        }
    ]
}