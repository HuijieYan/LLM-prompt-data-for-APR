{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 21,
            "start_line": 915,
            "file_name": "pandas/core/series.py",
            "replace_code": "def _get_with(self, key):\n    if isinstance(key, list):\n        return self._get_values_tuple(key)\n    \n    if (isinstance(key, np.ndarray) and key.dtype == bool) or (is_list_like(key) and is_bool(key)):\n        # We always want the actual values with boolean\n        return self._get_values_tuple(key)\n    \n    if isinstance(key, (slice, np.ndarray)):\n        return self._slice(key)\n\n    if isinstance(key, (ABCDataFrame, Index, Series, ExtensionArray, ABCMultiIndex)):\n        if isinstance(key, ABCDataFrame):\n            raise IndexError(\"Single Series can't be converted to DataFrame\")\n        if isinstance(key, (ABCMultiIndex, Series)):\n            raise TypeError(\n                \"Indexing with multiple keys (implicitly converted to a tuple \"\n                \"of keys) is not supported. Use set_index or select from \"\n                \"DataFrame directly.\"\n            )\n        if (isinstance(key, (Index, Series)) and isinstance(key, ABCMultiIndex)):\n            self.data[key] = nan\n            return self.reindex(key)\n        \n    if not (is_scalar(key) and is_bool(key) and is_object_dtype(key)):\n        return self.loc[key]\n    \n    if isinstance(key, (tuple, list)):\n        key = ensure_index(key)\n        if isinstance(key, (ABCMultiIndex, ABCDatetimeIndex)):\n            return self.reindex(key)\n        else:\n            return self._get_values_tuple(key)\n    \n    return self.reindex(key)",
            "import_list": []
        }
    ]
}