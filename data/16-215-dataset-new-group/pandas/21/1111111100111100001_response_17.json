{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 21,
            "start_line": 915,
            "file_name": "pandas/core/series.py",
            "replace_code": "def _get_with(self, key):\n    if isinstance(key, slice):\n        # Ensure the slice is positional or label based, and if label based, convert to positional\n        slobj = self.index._convert_slice_indexer(key, kind=\"getitem\")\n        return self._slice(slobj)\n        \n    elif isinstance(key, ABCDataFrame):\n        raise TypeError(\n            \"Indexing a Series with DataFrame is not supported, use the appropriate DataFrame column\"\n        )\n\n    elif isinstance(key, tuple):\n        return self._get_values_tuple(key)\n\n    elif is_scalar(key):\n        # Handle scalars\n        if key not in self.index:\n            raise KeyError(f\"{key} is not in the index\")\n        return self._get_key_from_scalar(key)\n\n    else:\n        if not is_list_like(key):\n            raise TypeError(f\"key must be a scalar or list-like, not {type(key)}\")\n\n        # Convert key to a list if it's an Index\n        if isinstance(key, Index):\n            key = key.tolist()\n\n        # Determine key type\n        key_type = lib.infer_dtype(key, skipna=False)\n\n        if key_type == \"integer\":\n            # Decide whether to treat this as a positional or label-based indexer\n            if not self.index._should_fallback_to_positional():\n                return self.loc[key]\n            else:\n                return self.iloc[key]\n\n        elif key_type in [\"floating\", \"mixed-integer-float\"]:\n            return self.loc[key]\n\n        elif key_type in [\"string\", \"mixed-integer-bool\"]:\n            if not all(x in self.index for x in key):\n                raise KeyError(f\"Some elements of key are not in the index: {key}\")\n            return self.reindex(key)\n\n        else:\n            raise KeyError(f\"Unsupported key type: {key_type}\")",
            "import_list": []
        }
    ]
}