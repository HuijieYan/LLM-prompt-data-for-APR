{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 21,
            "start_line": 915,
            "file_name": "pandas/core/series.py",
            "replace_code": "def _get_with(self, key):\n    if isinstance(key, slice):\n        slobj = self.index._convert_slice_indexer(key, kind=\"getitem\")\n        return self._slice(slobj)\n    elif isinstance(key, ABCDataFrame):\n        raise TypeError(\n            \"Indexing a Series with DataFrame is not supported, use the appropriate DataFrame column\")\n\n    # if key is a Series instance\n    if isinstance(key, Series):\n        key = key.array\n    if not is_list_like(key) and not isinstance(key, tuple):\n        # e.g. scalars that aren't recognized by lib.is_scalar, GH#32684\n        return self.loc[key]\n\n    key_array = np.array(key, copy=False)\n\n    key_is_boolean = is_bool(key_array)\n    key_is_scalar = is_scalar(key_array)\n\n    if key_is_scalar:\n        if self.index.is_boolean():\n            if not key_is_boolean:\n                raise KeyError(f\"Boolean index has wrong length\")\n        if not self.index.is_unique:\n            if is_scalar(key_array):\n                # we are looking for a specific label\n                if key_array not in self.index:\n                    raise KeyError(f\"{key_array} not found in index\")\n        else:\n            if key_array not in self.index:\n                return self.loc[key_array]\n            else:\n                raise KeyError(f\"{key_array} not found in index\")\n    elif isinstance(key_array, (list, np.ndarray, ExtensionArray, Index)):\n        if not is_valid_list_like(key_array):\n            return self.reindex(key_array)\n        else:\n            return self.loc[key_array]\n    else:\n        return self.reindex(key_array)",
            "import_list": []
        }
    ]
}