{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 21,
            "start_line": 915,
            "file_name": "pandas/core/series.py",
            "replace_code": "def _get_with(self, key):\n    # handling slice\n    if isinstance(key, slice):\n        slobj = self.index._convert_slice_indexer(key, kind=\"getitem\")\n        return self._slice(slobj)\n    # raise error when key is a DataFrame\n    elif isinstance(key, ABCDataFrame):\n        raise TypeError(\n            \"Indexing a Series with DataFrame is not supported, use the appropriate DataFrame column\"\n        )\n    # handling tuple to get values\n    elif isinstance(key, tuple):\n        return self._get_values_tuple(key)\n    # handle cases for non-list like and not recognized scalars\n    elif not is_list_like(key) or is_scalar(key):\n        return self.loc[key]\n    # handling list, numpy array, ExtensionArray, Series, and Index types of keys\n    else:\n        key = ensure_index(key)\n        is_int_indexer = ensure_platform_int(key)\n        if is_scalar(is_int_indexer):\n            if not is_bool(key):\n                indexer = self.loc[key].index\n                if is_categorical_dtype(indexer):\n                    raise InvalidIndexError(\"Cannot use '.loc[]' with a non-unique index.\")\n                return self.loc[key]\n            else:\n                if not is_object_dtype(indexer):\n                    raise KeyError(key)\n                indexer = self.index\n                if is_categorical_dtype(indexer):\n                    raise InvalidIndexError(\"Cannot use `.iloc[]` with a non-integer key.\")\n                return self.iloc[key]\n        else:\n            return self.reindex(key)",
            "import_list": []
        }
    ]
}