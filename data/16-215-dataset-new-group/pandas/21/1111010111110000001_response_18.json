{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 21,
            "start_line": 915,
            "file_name": "pandas/core/series.py",
            "replace_code": "def _get_with(self, key):\n        # other: fancy integer or otherwise\n        if isinstance(key, slice):\n            # _convert_slice_indexer to determin if this slice is positional\n            #  or label based, and if the latter, convert to positional\n            slobj = self.index._convert_slice_indexer(key, kind=\"getitem\")\n            return self._slice(slobj)\n        \n        if isinstance(key, pd.DataFrame):\n            raise TypeError(\n                \"Indexing a Series with DataFrame is not \"\n                \"supported, use the appropriate DataFrame column\"\n            )\n\n        if isinstance(key, tuple):\n            return self._get_values_tuple(key)\n\n        if lib.is_scalar(key) and not lib.is_bool(key):\n            return self.loc[key]\n\n        if is_bool(key):\n            # This handles reducing dimension, and partial selection of columns.\n            # For partial selection of rows, we need to fallback to getitem here\n            # as we don't have an axis argument for Series\n            if key.ndim == 1:\n                if isinstance(self.index, ABCMultiIndex):\n                    if key.ndim == 1:\n                        result = self.take(key.nonzero()[0])\n                else:\n                    indexer = check_bool_indexer(self.index, key)\n                    return self.iloc._get_listlike_indexer_mix_axis(key, self._get_axis_number(), warn=False)[0]\n        \n        if isinstance(key, list) and all(is_integer(key)):\n            return self.loc[key]\n        \n        if isinstance(key, pd.Index):\n            if isinstance(key, ABCSeries):\n                key = key.to_numpy()\n            key_type = key.inferred_type\n            if key_type == \"integer\":\n                if not self.index._should_fallback_to_positional():\n                    return self.loc[key]\n                else:\n                    return self.iloc[key]\n\n        if isinstance(key, (list, np.ndarray, ABCSeries, Index)):\n            key_type = lib.infer_dtype(key, skipna=False)\n            if key_type == \"integer\":\n                if not self.index._should_fallback_to_positional():\n                    return self.loc[key]\n                else:\n                    return self.iloc[key]\n\n        return self.reindex(key)",
            "import_list": []
        }
    ]
}