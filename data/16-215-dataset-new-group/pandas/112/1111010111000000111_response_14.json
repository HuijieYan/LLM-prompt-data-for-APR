{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 112,
            "start_line": 907,
            "file_name": "pandas/core/indexes/interval.py",
            "replace_code": "def get_indexer(\n        self,\n        target: AnyArrayLike,\n        method: Optional[str] = None,\n        limit: Optional[int] = None,\n        tolerance: Optional[Any] = None,\n    ) -> np.ndarray:\n    \n        self._check_method(method)\n    \n        if self.is_overlapping:\n            msg = (\n                \"cannot handle overlapping indices; use \"\n                \"IntervalIndex.get_indexer_non_unique\"\n            )\n            raise InvalidIndexError(msg)\n    \n        target_as_index = ensure_index(target)\n    \n        if isinstance(target_as_index, IntervalIndex):\n            if self.equals(target_as_index):\n                return np.arange(len(self), dtype=\"intp\")\n            \n            common_type = maybe_downcast_to_dtype(self.dtype.subtype, target_as_index.dtype.subtype)\n            if self.closed != target_as_index.closed or is_object_dtype(common_type):\n                return np.repeat(np.intp(-1), len(target_as_index))\n\n            have_non_overlapping = self._can_relabel(target_as_index)\n            indexer_space = np.arange(len(self), dtype=\"int64\")\n\n            if have_non_overlapping:\n                indexer = self.map(target_as_index.left, target_as_index.right)\n            else:\n                indexer = -1 * np.ones(len(target_as_index), dtype=\"int64\")\n\n            indexer = maybe_downcast_to_dtype(self.dtype, indexer)\n        else:\n            indexer = super().get_indexer(target, method=method, limit=limit, tolerance=tolerance)\n\n        return indexer",
            "import_list": []
        }
    ]
}