{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 112,
            "start_line": 907,
            "file_name": "pandas/core/indexes/interval.py",
            "replace_code": "def _get_indexer_interval_index(self, target_as_index: IntervalIndex) -> np.ndarray:\n    if self.closed != target_as_index.closed:\n        return np.full(len(target_as_index), -1, dtype=\"intp\")\n\n    common_subtype = find_common_type([self.dtype.subtype, target_as_index.dtype.subtype])\n    if is_object_dtype(common_subtype):\n        return np.full(len(target_as_index), -1, dtype=\"intp\")\n\n    left_indexer = self.left.get_indexer(target_as_index.left)\n    right_indexer = self.right.get_indexer(target_as_index.right)\n    return np.where(left_indexer == right_indexer, left_indexer, -1)",
            "import_list": [
                "import numpy as np",
                "from pandas.util._decorators import Appender, Substitution",
                "from pandas.core.indexes.base import Index, InvalidIndexError, _index_shared_docs, ensure_index",
                "from pandas.core.dtypes.cast import find_common_type, maybe_downcast_to_dtype",
                "from pandas.core.dtypes.common import is_object_dtype, ensure_platform_int",
                "from pandas._typing import AnyArrayLike"
            ]
        }
    ]
}