{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line, previous_defs: List[int], previous_line: Optional[Line]) -> Tuple[int, int]:\n    max_allowed = 1\n    if current_line.depth == 0:\n        max_allowed = 2\n    if current_line.leaves:\n        # Consume the first leaf's extra newlines.\n        first_leaf = current_line.leaves[0]\n        before = first_leaf.prefix.count(\"\\n\")\n        before = min(before, max_allowed)\n        first_leaf.prefix = \"\"\n    else:\n        before = 0\n    depth = current_line.depth\n    \n    while previous_defs and previous_defs[-1] >= depth:\n        previous_defs.pop()\n        before = 1 if depth else 2\n    \n    is_decorator = is_decorator(current_line)  # Assuming is_decorator is a function to check if it's a decorator\n    if is_decorator or is_def(current_line) or is_class(current_line):\n        if not is_decorator:\n            previous_defs.append(depth)\n        if previous_line is None:\n            # Don't insert empty lines before the first line in the file.\n            return 0, 0\n        \n        if previous_line and is_decorator(previous_line):\n            # Don't insert empty lines between decorators.\n            return 0, 0\n        \n        newlines = 2\n        if current_line.depth:\n            newlines -= 1\n        return newlines, 0\n    \n    if is_flow_control(current_line):\n        return before, 1\n    \n    if (\n        previous_line\n        and is_import(previous_line)\n        and not is_import(current_line)\n        and depth == previous_line.depth\n    ):\n        return (before or 1), 0\n    \n    if (\n        previous_line\n        and is_yield(previous_line)\n        and (not is_yield(current_line) or depth != previous_line.depth)\n    ):\n        return (before or 1), 0\n    \n    return before, 0",
            "import_list": []
        }
    ]
}