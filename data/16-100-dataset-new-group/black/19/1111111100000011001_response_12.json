{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    max_allowed = 1\n    if current_line.depth == 0:\n        max_allowed = 2\n    \n    first_leaf = current_line.leaves[0] if current_line.leaves else None\n    before = first_leaf.prefix.count(\"\\n\") if first_leaf else 0\n    before = min(before, max_allowed) \n\n    if first_leaf:\n        first_leaf.prefix = \"\"\n\n    depth = current_line.depth\n\n    if self.previous_defs:\n        if self.previous_defs[-1] >= depth:\n            self.previous_defs.pop()\n            before = 1 if depth else 2\n\n    is_decorator = current_line.is_decorator if hasattr(current_line, 'is_decorator') else False\n    is_def = current_line.is_def if hasattr(current_line, 'is_def') else False\n    is_class = current_line.is_class if hasattr(current_line, 'is_class') else False\n    is_flow_control = current_line.is_flow_control if hasattr(current_line, 'is_flow_control') else False\n    is_import = current_line.is_import if hasattr(current_line, 'is_import') else False\n    is_yield = current_line.is_yield if hasattr(current_line, 'is_yield') else False\n\n    if any([is_decorator, is_def, is_class]):\n        if not is_decorator:\n            self.previous_defs.append(depth)\n\n        if self.previous_line is None or (self.previous_line and self.previous_line.is_decorator):\n            return 0, 0\n\n        newlines = 2 if current_line.depth else 1\n        return newlines, 0\n\n    if is_flow_control:\n        return before, 1\n\n    if (\n        self.previous_line\n        and self.previous_line.is_import\n        and not is_import\n        and depth == self.previous_line.depth\n    ):\n        return (before or 1), 0\n\n    if (\n        self.previous_line\n        and self.previous_line.is_yield\n        and (not is_yield or depth != self.previous_line.depth)\n    ):\n        return (before or 1), 0\n\n    return before, 0",
            "import_list": []
        }
    ]
}