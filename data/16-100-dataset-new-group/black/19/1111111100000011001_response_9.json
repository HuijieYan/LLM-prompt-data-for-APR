{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n        max_allowed = 1\n        if current_line.depth == 0:\n            max_allowed = 2\n        before = 0\n        first_leaf = current_line.leaves[0] if current_line.leaves else None\n        if first_leaf:\n            # Consume the first leaf's extra newlines.\n            before = min(first_leaf.prefix.count(\"\\n\"), max_allowed)\n            first_leaf.prefix = \"\"\n        \n        depth = current_line.depth\n        if self.previous_defs:\n            while self.previous_defs and self.previous_defs[-1] >= depth:\n                self.previous_defs.pop()\n                before = 1 if depth else 2\n        \n        is_decorator = current_line.leaves[0].leaf_type == 'decorator' if current_line.leaves else False\n        if is_decorator or current_line.leaves[0].leaf_type == 'def' or current_line.leaves[0].leaf_type == 'class':\n            if not is_decorator:\n                self.previous_defs.append(depth)\n            if self.previous_line is None:\n                # Don't insert empty lines before the first line in the file.\n                return 0, 0\n\n            if self.previous_line and self.previous_line.leaves[0].leaf_type == 'decorator':\n                # Don't insert empty lines between decorators.\n                return 0, 0\n\n            newlines = 2\n            if current_line.depth:\n                newlines -= 1\n            return newlines, 0\n\n        if current_line.leaves[0].leaf_type == 'flow_control':\n            return before, 1\n\n        if (\n            self.previous_line\n            and self.previous_line.leaves[0].leaf_type == 'import'\n            and not current_line.leaves[0].leaf_type == 'import'\n            and depth == self.previous_line.depth\n        ):\n            return max(before, 1), 0\n\n        if (\n            self.previous_line\n            and self.previous_line.leaves[0].leaf_type == 'yield'\n            and (not current_line.leaves[0].leaf_type == 'yield' or depth != self.previous_line.depth)\n        ):\n            return max(before, 1), 0\n\n        return before, 0",
            "import_list": [
                "from dataclasses import dataclass",
                "from typing import List, Tuple, Optional"
            ]
        }
    ]
}