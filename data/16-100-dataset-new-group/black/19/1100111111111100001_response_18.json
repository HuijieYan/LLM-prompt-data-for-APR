{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    if current_line.depth == 0 and not self.previous_line:\n        return 0, 0  # Don't insert empty lines before the first line in the file.\n\n    if current_line.is_decorator or current_line.is_def or current_line.is_class:\n        if not current_line.is_decorator:\n            self.previous_defs.append(current_line.depth)\n        return 2 if current_line.depth else 1, 0  # Returns the number of new lines to insert and the number of spaces to insert.\n\n    if current_line.is_flow_control:\n        return 0, 1  # Insert one space after flow control statements.\n\n    if self.previous_line and self.previous_line.is_import and not current_line.is_import and current_line.depth == self.previous_line.depth:\n        return 1, 0  # Insert 1 empty line if the previous line is an import and the current line is not an import.\n\n    if self.previous_line and self.previous_line.is_yield and (not current_line.is_yield or current_line.depth != self.previous_line.depth):\n        return 1, 0  # Insert 1 empty line if the previous line is a yield and the current line is not a yield or they are at different depths.\n\n    return 0, 0",
            "import_list": []
        }
    ]
}