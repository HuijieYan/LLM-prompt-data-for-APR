{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    before, after = 0, 0\n\n    if current_line.depth == 0:\n        before = 2 if current_line.is_decorator else 1\n\n    if self.previous_line and self.previous_line.is_decorator and current_line.is_decorator:\n        before, after = 0, 0\n    elif current_line.is_class or current_line.is_def:\n        if not self.previous_line:  # First line in the file\n            before = 0\n        elif not self.previous_line.is_decorator:\n            self.previous_defs.append(current_line.depth)\n        if self.previous_line and self.previous_line.is_decorator:\n            before, after = 0, 0\n        else:\n            after = 1 if current_line.is_flow_control else 0\n    elif current_line.is_yield:\n        before = 1 if not self.previous_line or current_line.depth != self.previous_line.depth else 0\n        after = 0\n    elif current_line.is_import:\n        if self.previous_line and self.previous_line.is_import and current_line.depth == self.previous_line.depth:\n            before = 1\n        elif current_line.depth == 0:\n            before = 1\n    else:\n        before = 0\n\n    return before, after",
            "import_list": []
        }
    ]
}