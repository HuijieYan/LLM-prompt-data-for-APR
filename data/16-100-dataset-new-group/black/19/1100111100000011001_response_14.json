{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    max_allowed = 1\n    if hasattr(current_line, 'depth') and current_line.depth == 0:\n        max_allowed = 2\n    if hasattr(current_line, 'leaves') and current_line.leaves:\n        # Consume the first leaf's extra newlines.\n        first_leaf = current_line.leaves[0]\n        if hasattr(first_leaf, 'prefix'):\n            before = first_leaf.prefix.count(\"\\n\")\n            before = min(before, max_allowed)\n            first_leaf.prefix = \"\"\n    else:\n        before = 0\n    depth = getattr(current_line, 'depth', 0)\n    is_decorator = getattr(current_line, 'is_decorator', False)\n    if is_decorator or getattr(current_line, 'is_def', False) or getattr(current_line, 'is_class', False):\n        self.previous_defs.append(depth) if not is_decorator else None\n        if self.previous_line is None or (self.previous_line and not self.previous_line.is_decorator):\n            newlines = 2 if depth else 1\n            return newlines, 0\n    else:\n        if hasattr(current_line, 'is_flow_control') and current_line.is_flow_control:\n            return before, 1\n\n        if (\n            self.previous_line\n            and hasattr(self.previous_line, 'is_import')\n            and self.previous_line.is_import\n            and not getattr(current_line, 'is_import', False)\n            and depth == getattr(self.previous_line, 'depth', 0)\n        ):\n            return (before or 1), 0\n\n        if (\n            self.previous_line\n            and hasattr(self.previous_line, 'is_yield')\n            and self.previous_line.is_yield\n            and (not getattr(current_line, 'is_yield', False) or depth != getattr(self.previous_line, 'depth', 0))\n        ):\n            return (before or 1), 0\n\n    return before, 0",
            "import_list": []
        }
    ]
}