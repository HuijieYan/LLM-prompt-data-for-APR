{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    # Initialize number of extra newlines before and after the currently processed line\n    before = 0\n    after = 0\n\n    if current_line.is_decorator or current_line.is_def or current_line.is_class:\n        if current_line.depth == 0:  # First line in the file\n            return before, after\n        if self.previous_line is None:\n            # Don't insert empty lines before the first line in the file.\n            return before, after\n        if self.previous_line.is_decorator and current_line.is_decorator:\n            # Don't insert empty lines between decorators.\n            return before, after\n\n        # 2 newlines before and 0 newline after non-zero depth lines\n        after = 0 if current_line.depth > 0 else 1\n        before = 2 if current_line.depth > 0 else 1\n        return before, after\n\n    if current_line.is_flow_control:\n        # 0 newline before, 1 newline after flow control lines\n        return before, 1\n\n    if self.previous_line and self.previous_line.is_import and not current_line.is_import and current_line.depth == self.previous_line.depth:\n        # Add 1 newline before if it's not an import line preceded by an import line with the same depth\n        before = 1\n        return before, after\n\n    if self.previous_line and self.previous_line.is_yield and (not current_line.is_yield or current_line.depth != self.previous_line.depth):\n        # Similar handling for yield lines\n        before = 1\n        return before, after\n\n    # No specific condition met - use default before and after values\n    return before, after",
            "import_list": []
        }
    ]
}