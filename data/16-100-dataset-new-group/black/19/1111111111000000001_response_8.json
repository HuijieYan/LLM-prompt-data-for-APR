{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\r\n    max_allowed = 1\r\n    if current_line.depth == 0:\r\n        max_allowed = 2\r\n    if current_line.leaves:\r\n        # Consume the first leaf's extra newlines.\r\n        first_leaf = current_line.leaves[0]\r\n        before = first_leaf.prefix.count(\"\\n\")\r\n        before = min(before, max_allowed)\r\n        first_leaf.prefix = \"\"\r\n    else:\r\n        before = 0\r\n    depth = current_line.depth\r\n    while self.previous_defs and self.previous_defs[-1] >= depth:\r\n        self.previous_defs.pop()\r\n        before = 1 if depth else 2\r\n    is_decorator = current_line.is_decorator\r\n    if is_decorator or current_line.is_def or current_line.is_class:\r\n        if not is_decorator:\r\n            self.previous_defs.append(depth)\r\n        if self.previous_line is None:\r\n            # Don't insert empty lines before the first line in the file.\r\n            return 0, 0\r\n    \r\n        if self.previous_line.is_decorator:\r\n            return 0, 0\r\n    \r\n        newlines = 2\r\n        if current_line.depth > 0:\r\n            newlines -= 1\r\n        return newlines, 0\r\n    \r\n    if current_line.is_flow_control:\r\n        return before, 1\r\n    \r\n    if (\r\n        self.previous_line\r\n        and self.previous_line.is_import(current_line)\r\n        and not current_line.is_import\r\n        and depth == self.previous_line.depth\r\n    ):\r\n        return before or 1, 0\r\n    \r\n    if (\r\n        self.previous_line\r\n        and self.previous_line.is_yield\r\n        and (not current_line.is_yield or depth != self.previous_line.depth)\r\n    ):\r\n        return before or 1, 0\r\n    \r\n    return before, 0",
            "import_list": []
        }
    ]
}