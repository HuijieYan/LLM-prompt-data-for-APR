{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    if (\n        self.previous_line is None\n        or self.previous_line.is_decorator\n        or self.previous_line.is_import\n        or not current_line.depth\n        or current_line.is_def\n        or current_line.is_class\n    ):\n        return 0, 0\n\n    if current_line.is_yield and current_line.depth != self.previous_line.depth:\n        return 1, 0\n\n    if current_line.is_flow_control:\n        return 0, 1\n\n    if current_line.is_import and current_line.depth == self.previous_line.depth:\n        return 0, 0\n\n    max_allowed = 1 if not current_line.leaves else 2\n    first_leaf = current_line.leaves[0]\n    before = min(first_leaf.prefix.count(\"\\n\"), max_allowed) if current_line.leaves else 0\n    first_leaf.prefix = \"\"\n\n    if (\n        not current_line.is_decorator\n        and not current_line.is_def\n        and not current_line.is_class\n    ):\n        self.previous_defs.append(current_line.depth)\n\n    newlines = 2 if current_line.depth else 1\n    return newlines - 1, 0",
            "import_list": []
        }
    ]
}