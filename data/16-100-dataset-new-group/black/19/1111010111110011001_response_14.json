{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n        max_allowed = 1 if current_line.depth else 2\n\n        # Handle the case of consuming the first leaf's extra newlines\n        before = 0\n        first_leaf = None\n        if current_line.leaves:\n            first_leaf = current_line.leaves[0]\n            empty_line_count = first_leaf.prefix.count(\"\\n\")\n            if empty_line_count <= max_allowed:\n                before = empty_line_count\n                first_leaf.prefix = \"\"\n            else:\n                before = max_allowed\n\n        # Logic to handle construction of empty lines based on different context conditions\n        if current_line.is_decorator or current_line.is_def or current_line.is_class:\n            if not current_line.is_decorator:\n                if current_line.depth not in self.previous_defs:\n                    self.previous_defs.append(current_line.depth)\n                return 0, 0\n            newlines = 1\n            if current_line.depth:\n                newlines = max(0, newlines - 1)\n            return newlines, 0\n        elif current_line.is_flow_control:\n            return before, 1\n        elif self.previous_line and self.previous_line.is_import and not current_line.is_import and current_line.depth == self.previous_line.depth:\n            return before or 1, 0\n        elif self.previous_line and self.previous_line.is_yield and (not current_line.is_yield or (current_line.depth != self.previous_line.depth)):\n            return before or 1, 0\n        else:\n            return before, 0",
            "import_list": [
                "from dataclasses import dataclass",
                "from typing import List, Tuple"
            ]
        }
    ]
}