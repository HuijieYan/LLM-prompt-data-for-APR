{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    max_allowed = 1  # initialize max_allowed to 1\n    if current_line.depth == 0:\n        max_allowed = 2  # update max_allowed to 2 if the current line's depth is 0\n\n    if current_line.leaves:\n        # Consume the first leaf's extra newlines\n        first_leaf = current_line.leaves[0]\n        before = first_leaf.prefix.count(\"\\n\")\n        before = min(before, max_allowed)\n        first_leaf.prefix = \"\"  # Reset the prefix to an empty string\n    else:\n        before = 0\n\n    depth = current_line.depth\n\n    while self.previous_defs and self.previous_defs[-1] >= depth:\n        self.previous_defs.pop()\n        if depth == 0:\n            before = 2  # Set before to 2 for depth 0\n        else:\n            before = 1  # Set before to 1 if the depth is non-zero\n\n    is_decorator = current_line.is_decorator\n\n    # Handle different cases based on the type of the current line\n    if is_decorator or current_line.is_def or current_line.is_class:\n        if not is_decorator:  # Append depth if not a decorator\n            self.previous_defs.append(depth)\n\n        if self.previous_line is None or self.previous_line.is_decorator:\n            return 0, 0  # Don't insert empty lines before the first line in the file or between decorators\n\n        newlines = 2\n        if current_line.depth:\n            newlines -= 1\n\n        return newlines, 0\n\n    if current_line.is_flow_control:\n        return before, 1  # Return the value of before and 1 in case of flow control\n\n    if (\n        self.previous_line\n        and self.previous_line.is_import\n        and not current_line.is_import\n        and depth == self.previous_line.depth\n    ):\n        return (before or 1), 0\n\n    if (\n        self.previous_line\n        and self.previous_line.is_yield\n        and (not current_line.is_yield or depth != self.previous_line.depth)\n    ):\n        return (before or 1), 0\n\n    # Return before and 0 otherwise\n    return before, 0",
            "import_list": []
        }
    ]
}