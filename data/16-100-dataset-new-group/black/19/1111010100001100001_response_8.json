{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    max_allowed = 1\n    if current_line.depth == 0:\n        max_allowed = 2\n\n    before = 0  # reinitialize before inside the function\n\n    if current_line.leaves:\n        first_leaf = current_line.leaves[0]\n        if first_leaf.prefix:\n            before = min(first_leaf.prefix.count(\"\\n\"), max_allowed)\n        first_leaf = first_leaf._replace(prefix='')\n\n    depth = current_line.depth\n    if depth in self.previous_defs:\n        before = 1 if depth else 2\n    else:\n        self.previous_defs.append(depth)\n\n    if depth == 0:\n        return 0, 0\n    elif current_line.depth > 0 and (current_line.is_decorator or current_line.is_def or current_line.is_class):\n        return 1, 0\n    elif current_line.is_flow_control:\n        return before, 1\n    elif (\n        self.previous_line\n        and self.previous_line.is_import\n        and not current_line.is_import\n        and depth == self.previous_line.depth\n    ):\n        return (before or 1), 0\n    elif (\n        self.previous_line\n        and self.previous_line.is_yield\n        and (not current_line.is_yield or depth != self.previous_line.depth)\n    ):\n        return (before or 1), 0\n    else:\n        return before, 0",
            "import_list": []
        }
    ]
}