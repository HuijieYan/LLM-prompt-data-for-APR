{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    max_allowed = 1\n    if current_line.depth == 0:\n        max_allowed = 2\n\n    if current_line.leaves:\n        # Consume the first leaf's extra newlines.\n        first_leaf = current_line.leaves[0]\n        before = first_leaf.prefix.count(\"\\n\")\n        before = min(before, max_allowed)\n        first_leaf.prefix = \"\"\n    else:\n        before = 0\n\n    # Check if the current line is a decorator, def, class, or flow control\n    is_decorator = current_line.is_decorator\n    is_def = current_line.is_def\n    is_class = current_line.is_class\n    is_flow_control = current_line.is_flow_control\n    is_import = current_line.is_import\n    is_yield = current_line.is_yield\n\n    if is_decorator or is_def or is_class:\n        if not is_decorator:\n            self.previous_defs.append(current_line.depth)\n        if self.previous_line is None:\n            return 0, 0\n        elif self.previous_line.is_decorator:\n            return 0, 0\n        else:\n            newlines = 1 if current_line.depth else 2\n            return newlines, 0\n\n    if is_flow_control:\n        return before, 1\n\n    if self.previous_line and self.previous_line.is_import:\n        if not is_import and current_line.depth == self.previous_line.depth:\n            return before or 1, 0\n\n    if self.previous_line and self.previous_line.is_yield:\n        if not is_yield or current_line.depth != self.previous_line.depth:\n            return before or 1, 0\n\n    return before, 0",
            "import_list": []
        }
    ]
}