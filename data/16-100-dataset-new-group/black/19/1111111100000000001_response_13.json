{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n        max_allowed = 1\n        if current_line.depth == 0:\n            max_allowed = 2\n        if not getattr(current_line, 'leaves', None):\n            before = 0\n        else:\n            # Consume the first leaf's extra newlines.\n            first_leaf = current_line.leaves[0]\n            before = first_leaf.prefix.count(\"\\n\")\n            before = min(before, max_allowed)\n            first_leaf.prefix = \"\"\n        \n        depth = current_line.depth\n        if not hasattr(self, 'previous_defs'):\n            self.previous_defs = []\n        \n        while self.previous_defs and self.previous_defs[-1] >= depth:\n            self.previous_defs.pop()\n            before = 1 if depth else 2\n        is_decorator = getattr(current_line, 'is_decorator', False)\n        \n        if is_decorator or getattr(current_line, 'is_def', False) or getattr(current_line, 'is_class', False):\n            if not is_decorator:\n                self.previous_defs.append(depth)\n            if not getattr(self, 'previous_line', None):\n                # Don't insert empty lines before the first line in the file.\n                return 0, 0\n    \n            if self.previous_line and getattr(self.previous_line, 'is_decorator', False):\n                # Don't insert empty lines between decorators.\n                return 0, 0\n    \n            newlines = 2\n            if current_line.depth:\n                newlines -= 1\n            return newlines, 0\n    \n        if getattr(current_line, 'is_flow_control', False):\n            return before, 1\n    \n        if (\n            self.previous_line\n            and getattr(self.previous_line, 'is_import', False)\n            and not getattr(current_line, 'is_import', False)\n            and depth == self.previous_line.depth\n        ):\n            return (before or 1), 0\n    \n        if (\n            self.previous_line\n            and getattr(self.previous_line, 'is_yield', False)\n            and (not getattr(current_line, 'is_yield', False) or depth != self.previous_line.depth)\n        ):\n            return (before or 1), 0\n    \n        return before, 0",
            "import_list": []
        }
    ]
}