{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    max_allowed = 1\n    if current_line.depth == 0:\n        max_allowed = 2\n\n    num_before = 0\n    num_after = 0\n\n    max_previous_depth = None\n    if self.previous_defs:\n        max_previous_depth = max(self.previous_defs)\n\n    if current_line.leaves:\n        # Consume the first leaf's extra newlines.\n        first_leaf = current_line.leaves[0]\n        num_before = min(first_leaf.prefix.count(\"\\n\"), max_allowed)\n        first_leaf.prefix = \"\"\n\n    if current_line.is_def or current_line.is_class:\n        if max_previous_depth is not None and current_line.depth <= max_previous_depth:\n            num_after = 1 if current_line.depth else 2\n        elif self.previous_line and self.previous_line.is_decorator:\n            num_after = 0\n\n    elif current_line.is_flow_control:\n        num_before = 0\n        num_after = 1\n\n    elif self.previous_line and self.previous_line.is_import and not current_line.is_import:\n        if current_line.depth == self.previous_line.depth:\n            num_before = num_before or 1\n\n    elif self.previous_line and self.previous_line.is_yield and (not current_line.is_yield or current_line.depth != self.previous_line.depth):\n        num_before = num_before or 1\n\n    return num_before, num_after",
            "import_list": []
        }
    ]
}