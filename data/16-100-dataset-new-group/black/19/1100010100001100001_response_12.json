{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    max_allowed = 1\n    if current_line.depth == 0:\n        max_allowed = 2\n\n    if any((current_line.is_decorator, current_line.is_def, current_line.is_class)):\n        if self.previous_line and (not self.previous_line.is_decorator):\n            self.previous_defs.append(current_line.depth)\n\n        if self.previous_line is None or self.previous_line.is_decorator:\n            return 0, 0\n        else:\n            newlines = 2\n            if current_line.depth:\n                newlines -= 1\n            return newlines, 0\n\n    if current_line.is_flow_control:\n        return 0, 1\n\n    if (self.previous_line and self.previous_line.is_import and not current_line.is_import\n        and current_line.depth == self.previous_line.depth):\n        return (0 if current_line.depth == 0 else 1), 0\n\n    if (self.previous_line and self.previous_line.is_yield and not current_line.is_yield\n        and current_line.depth != self.previous_line.depth):\n        return (0 if current_line.depth == 0 else 1), 0\n\n    return max(0, min(current_line.leaves[0].prefix.count(\"\\n\"), max_allowed)), 0",
            "import_list": []
        }
    ]
}