{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n        max_allowed = 1\n        if current_line.depth == 0:\n            max_allowed = 2\n        if current_line.leaves:\n            # Consume the first leaf's extra newlines.\n            first_leaf = current_line.leaves[0]\n            before = first_leaf.prefix.count(\"\\n\")\n            before = min(before, max_allowed)\n            first_leaf.prefix = \"\"\n        else:\n            before = 0\n        if current_line.depth <= self.previous_after:\n            before += 1\n            self.previous_after = 0\n        else:\n            self.previous_after = 1\n        if not any([\n            current_line.is_decorator,\n            current_line.is_def,\n            current_line.is_class,\n            current_line.is_flow_control,\n            current_line.is_yield\n        ]):\n            new_lines_before = before\n            new_lines_after = 0\n        else:\n            new_lines_before = 0\n            new_lines_after = 0\n            if self.previous_line and not self.previous_line.is_decorator:\n                # Don't insert empty lines between decorators.\n                if not current_line.is_import and not (\n                    self.previous_line.is_yield and\n                    (not current_line.is_yield or current_line.depth != self.previous_line.depth)\n                ):\n                    new_lines_before = before if before == 2 else 1\n                if current_line.depth != 0:\n                    new_lines_before -= 1\n        return new_lines_before, new_lines_after",
            "import_list": [
                "from typing import Tuple"
            ]
        }
    ]
}