{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    max_allowed = 1\n    if current_line.depth == 0:\n        max_allowed = 2\n    if current_line.leaves:\n        first_leaf = current_line.leaves[0]\n        before = first_leaf.prefix.count(\"\\n\")\n        before = min(before, max_allowed)\n        first_leaf.prefix = \"\"\n    else:\n        before = 0\n    \n    depth = current_line.depth\n    should_append_empty_lines = True\n    if self.previous_defs and self.previous_defs[-1] >= depth:\n        self.previous_defs.pop()\n        before = 1 if depth else 2\n    if current_line.is_flow_control:\n        return before, 1\n    if current_line.is_def or current_line.is_class:\n        if not current_line.is_decorator:\n            self.previous_defs.append(depth)\n        should_append_empty_lines = False\n    if current_line.is_decorator:\n        should_append_empty_lines = not (self.previous_line and self.previous_line.is_decorator)\n        if not should_append_empty_lines:\n            return 0, 0\n    if current_line.is_import:\n        should_append_empty_lines = not self.previous_line.is_import and (depth != self.previous_line.depth)\n    if current_line.is_yield:\n        should_append_empty_lines = not (self.previous_line.is_yield and depth == self.previous_line.depth)\n    empty_lines_before = before if should_append_empty_lines else 0\n    empty_lines_after = 0 if should_append_empty_lines else 1\n    if current_line.depth:\n        empty_lines_after -= 1\n    return empty_lines_before, empty_lines_after",
            "import_list": []
        }
    ]
}