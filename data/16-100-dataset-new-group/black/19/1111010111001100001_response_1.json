{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    is_decorator = current_line.is_decorator\n    if is_decorator:\n        if self.previous_line and not self.previous_line.is_decorator:\n            return (2, 0)\n        else:\n            return (0, 0)\n    \n    if current_line.is_flow_control:\n        return (1, 1)\n    \n    if self.previous_line and self.previous_line.is_import and not current_line.is_import:\n        return (1, 0)\n    \n    if self.previous_line and self.previous_line.is_yield and (not current_line.is_yield or current_line.depth != self.previous_line.depth):\n        return (1, 0)\n    \n    if self.previous_line and current_line.depth > self.previous_line.depth:\n        return (0, 0)\n    \n    if self.previous_line and current_line.depth == self.previous_line.depth and not current_line.leaves:\n        return (1, 0)\n    \n    if self.previous_line and current_line.depth == self.previous_line.depth and current_line.leaves:\n        before = current_line.leaves[0].prefix.count(\"\\n\")\n        return (min(before, 1), 0)\n    \n    return (0, 0)",
            "import_list": []
        }
    ]
}