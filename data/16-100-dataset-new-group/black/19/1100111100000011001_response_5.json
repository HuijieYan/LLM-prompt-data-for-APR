{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    max_allowed_lines = 1\n    if current_line.depth == 0:\n        max_allowed_lines = 2\n\n    if current_line.leaves:\n        # Consume the first leaf's extra newlines.\n        first_leaf = current_line.leaves[0]\n        prefix_newlines = first_leaf.prefix.count(\"\\n\")\n        before_newlines = min(prefix_newlines, max_allowed_lines)\n        first_leaf.prefix = \"\"\n    else:\n        before_newlines = 0\n\n    depth = current_line.depth\n\n    while self.prev_defs and self.prev_defs[-1] >= depth:\n        self.prev_defs.pop()\n        before_newlines = 1 if depth else 2\n\n    is_current_decorator = current_line.is_decorator\n    is_current_def = current_line.is_def\n    is_current_class = current_line.is_class\n    is_current_flow_control = current_line.is_flow_control\n    is_current_import = current_line.is_import\n    is_current_yield = current_line.is_yield\n\n    if is_current_decorator or is_current_def or is_current_class:\n        if not is_current_decorator:\n            self.prev_defs.append(depth)\n        if self.prev_line is None:\n            # Don't insert empty lines before the first line in the file.\n            return 0, 0\n\n        if self.prev_line and self.prev_line.is_decorator:\n            # Don't insert empty lines between decorators.\n            return 0, 0\n\n        newlines_to_insert = 2\n        if current_line.depth:\n            newlines_to_insert -= 1\n        return newlines_to_insert, 0\n\n    if is_current_flow_control:\n        return before_newlines, 1\n\n    if (\n        self.prev_line\n        and self.prev_line.is_import\n        and not is_current_import\n        and depth == self.prev_line.depth\n    ):\n        return (before_newlines or 1), 0\n\n    if (\n        self.prev_line\n        and self.prev_line.is_yield\n        and (not is_current_yield or depth != self.prev_line.depth)\n    ):\n        return (before_newlines or 1), 0\n\n    return before_newlines, 0",
            "import_list": []
        }
    ]
}