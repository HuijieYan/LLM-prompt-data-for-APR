{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n        first_leaf = current_line.leaves[0]\n        empty_lines_before = first_leaf.prefix.count(\"\\n\") if first_leaf.prefix else 0\n\n        if not current_line.depth:\n            max_allowed = 2\n        else:\n            max_allowed = 1\n\n        if empty_lines_before <= max_allowed:\n            first_leaf.prefix = \"\"\n            before = empty_lines_before\n        else:\n            before = max_allowed\n\n        depth = current_line.depth\n\n        if self.previous_defs and self.previous_defs[-1] >= depth:\n            while self.previous_defs and self.previous_defs[-1] >= depth:\n                self.previous_defs.pop()\n            before = 1 if depth else 2\n\n        newlines = 0\n        is_decorator = current_line.is_decorator\n\n        if not current_line.is_import:\n            if self.previous_line and self.previous_line.is_decorator:\n                newlines = 0\n            else:\n                newlines = 1\n        \n        if current_line.depth:\n            newlines -= 1\n\n        return newlines, before",
            "import_list": [
                "from dataclasses import dataclass",
                "from typing import Tuple"
            ]
        }
    ]
}