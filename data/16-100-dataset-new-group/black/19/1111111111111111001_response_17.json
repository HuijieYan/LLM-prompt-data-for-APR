{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    max_allowed = 1 if current_line.depth else 2\n    lines_before = 0\n    lines_after = 0\n\n    is_decorator = current_line.is_decorator\n    is_def = current_line.is_def\n    is_class = current_line.is_class\n    is_yield = current_line.is_yield\n    is_import = current_line.is_import\n    is_flow_control = current_line.is_flow_control\n\n    if not is_decorator and not is_def and not is_class:\n        self.previous_defs = [x for x in self.previous_defs if x < current_line.depth]\n\n    if is_decorator or is_def or is_class:\n        if not is_decorator:\n            self.previous_defs.append(current_line.depth)\n        \n        if self.previous_line and self.previous_line.is_decorator:\n            lines_before = 0\n        else:\n            lines_before = 1 if current_line.depth else 2\n        lines_after = 0\n        \n    elif is_flow_control:\n        lines_before = max(current_line.prefix.count(\"\\n\"), max_allowed)\n        lines_after = 1\n        \n    elif self.previous_line and self.previous_line.is_import and not is_import and current_line.depth == self.previous_line.depth:\n        lines_before = max(current_line.prefix.count(\"\\n\"), 1)\n        \n    elif self.previous_line and self.previous_line.is_yield and (not is_yield or current_line.depth != self.previous_line.depth):\n        lines_before = max(current_line.prefix.count(\"\\n\"), 1)\n        \n    return lines_before, lines_after",
            "import_list": [
                "from collections import deque",
                "from dataclasses import dataclass",
                "from typing import List, Union, Tuple"
            ]
        }
    ]
}