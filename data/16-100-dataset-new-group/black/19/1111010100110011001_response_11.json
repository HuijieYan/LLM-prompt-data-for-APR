{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n        max_allowed = 1 if current_line.depth > 0 else 2\n        first_leaf = current_line.leaves[0] if current_line.leaves else None\n        before = first_leaf.prefix.count(\"\\n\") if first_leaf else 0\n        before = min(before, max_allowed)\n        if before > 0 and first_leaf: \n            first_leaf.prefix = first_leaf.prefix.replace('\\n', '', before)\n        depth = current_line.depth\n        if not self.previous_defs or self.previous_defs[-1] < depth:\n            self.previous_defs.append(depth)\n        newlines_before = 0\n        newlines_after = 0\n        is_decorator = current_line.is_decorator\n        if is_decorator or current_line.is_def or current_line.is_class:\n            self.previous_line = self.previous_line if self.previous_line else current_line\n            if self.previous_line.is_decorator:\n                newlines_before = 0\n                newlines_after = 0\n            elif self.previous_line.depth == depth:\n                newlines_before = 1\n                newlines_after = 0\n            else:\n                newlines_before = 2 - (depth > 0)\n            if not is_decorator:\n                self.previous_line = current_line\n        elif current_line.is_flow_control:\n            newlines_before = before\n            newlines_after = 1\n        elif self.previous_line and self.previous_line.is_import and not current_line.is_import and depth == self.previous_line.depth:\n            newlines_before = max(1, before)\n            newlines_after = 0\n        elif self.previous_line and self.previous_line.is_yield and (not current_line.is_yield or depth != self.previous_line.depth):\n            newlines_before = max(1, before)\n            newlines_after = 0\n        return newlines_before, newlines_after",
            "import_list": [
                "from dataclasses import dataclass",
                "from collections import deque",
                "from typing import Tuple"
            ]
        }
    ]
}