{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 10,
            "start_line": 117,
            "file_name": "blib2to3/pgen2/driver.py",
            "replace_code": "def _partially_consume_prefix(self, prefix, column):\n    lines = []\n    current_line = \"\"\n    current_column = 0\n    wait_for_nl = False\n    spaces_to_add = 0  # track spaces to add for indentation\n\n    for char in prefix:\n        if wait_for_nl:\n            if char == '\\n':\n                # add the current line with the correct indentation\n                lines.append(' ' * spaces_to_add + current_line)\n                current_line = \"\"  # reset the current line\n                current_column = 0  # reset the current column\n                wait_for_nl = False  # reset the wait_for_nl flag\n\n                # track new spaces to add for next line\n                if prefix.index(char) < column:\n                    spaces_to_add = column  # set the spaces_to_add to the specified column value\n                else:\n                    spaces_to_add = 0  # reset the spaces_to_add\n        else:\n            if char == ' ':\n                current_column += 1\n                current_line += char\n            elif char == '\\t':\n                current_column += 4  # assuming a tab is equivalent to 4 spaces\n                current_line += ' ' * 4  # add 4 spaces for each tab\n            elif char == '\\n':\n                lines.append(' ' * spaces_to_add + current_line.strip())  # add the current line with the correct indentation\n                current_line = \"\"  # reset the current line\n                current_column = 0  # reset the current column\n                wait_for_nl = False  # reset the wait_for_nl flag\n                spaces_to_add = 0  # reset the spaces_to_add\n            else:\n                wait_for_nl = True\n\n    return '\\n'.join(lines), current_line",
            "import_list": []
        }
    ]
}