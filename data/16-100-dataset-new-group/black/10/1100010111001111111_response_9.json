{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 10,
            "start_line": 117,
            "file_name": "blib2to3/pgen2/driver.py",
            "replace_code": "def _partially_consume_prefix(self, prefix, column):\n    lines = [\"\"]\n    current_column = 0\n    wait_for_nl = False\n    for char in prefix:\n        if wait_for_nl:\n            if char == '\\n':\n                if len(lines) == 1 and current_column < column:\n                    # Check only for the first line\n                    return lines[0], prefix[len(lines[0]):]\n\n                lines.append(\"\")\n                current_column = 0\n                wait_for_nl = False\n        elif char == ' ':\n            current_column += 1\n        elif char == '\\t':\n            # Calculate the number of spaces represented by the tab\n            spaces = 4 - (current_column % 4)\n            for _ in range(spaces):\n                lines[-1] += ' '\n                current_column += 1\n        elif char == '\\n':\n            current_column = 0\n            wait_for_nl = True\n            lines.append(\"\")\n        else:\n            # char is not a space, tab, or newline\n            lines[-1] += char\n            current_column += 1\n\n    return ''.join(lines), prefix[len(''.join(lines)):]",
            "import_list": []
        }
    ]
}