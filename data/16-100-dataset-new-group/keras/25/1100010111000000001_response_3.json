{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 25,
            "start_line": 21,
            "file_name": "keras/applications/imagenet_utils.py",
            "replace_code": "def test_preprocess_input():\n    x = np.random.uniform(0, 255, (2, 10, 10, 3))\n    xint = x.astype('int32')\n    \n    npt.assert_array_almost_equal(utils.preprocess_input(x), _preprocess_numpy_input(x, 'channels_last', 'tf'))\n    npt.assert_array_almost_equal(utils.preprocess_input(xint), _preprocess_numpy_input(xint, 'channels_last', 'tf'))\n    \n    npt.assert_array_almost_equal(utils.preprocess_input(x, 'channels_last'), _preprocess_numpy_input(x, 'channels_last', 'caffe'))\n    npt.assert_array_almost_equal(utils.preprocess_input(xint, 'channels_last'), _preprocess_numpy_input(xint, 'channels_last', 'caffe'))\n    \n    npt.assert_array_almost_equal(utils.preprocess_input(np.transpose(x, (0, 3, 1, 2)), 'channels_first'), _preprocess_numpy_input(np.transpose(x, (0, 3, 1, 2)), 'channels_first', 'tf'))\n    npt.assert_array_almost_equal(utils.preprocess_input(np.transpose(xint, (0, 3, 1, 2)), 'channels_first'), _preprocess_numpy_input(np.transpose(xint, (0, 3, 1, 2)), 'channels_first', 'tf'))\n    \n    x = np.random.uniform(0, 255, (10, 10, 3))\n    xint = x.astype('int32')\n    \n    npt.assert_array_almost_equal(utils.preprocess_input(x), _preprocess_numpy_input(x, 'channels_last', 'tf'))\n    npt.assert_array_almost_equal(utils.preprocess_input(xint), _preprocess_numpy_input(xint, 'channels_last', 'tf'))\n    \n    npt.assert_array_almost_equal(utils.preprocess_input(x, 'channels_last'), _preprocess_numpy_input(x, 'channels_last', 'caffe'))\n    npt.assert_array_almost_equal(utils.preprocess_input(xint, 'channels_last'), _preprocess_numpy_input(xint, 'channels_last', 'caffe'))\n    \n    npt.assert_array_almost_equal(utils.preprocess_input(np.transpose(x, (2, 0, 1)), 'channels_first'), _preprocess_numpy_input(np.transpose(x, (2, 0, 1)), 'channels_first', 'tf'))\n    npt.assert_array_almost_equal(utils.preprocess_input(np.transpose(xint, (2, 0, 1)), 'channels_first'), _preprocess_numpy_input(np.transpose(xint, (2, 0, 1)), 'channels_first', 'tf'))",
            "import_list": [
                "import numpy as np",
                "import numpy.testing as npt"
            ]
        }
    ]
}