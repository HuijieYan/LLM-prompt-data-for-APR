{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 88,
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces: List[DataFrame] = []\n        keys = index + columns\n\n        for func in aggfunc:\n            agged = data.groupby(keys, observed=observed).agg(func)\n            pieces.append(agged)\n\n        table = concat(pieces, keys=[getattr(func, \"__name__\", func) for func in aggfunc], axis=1)\n        return table\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n\n    if isinstance(agged, ABCDataFrame) and dropna and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n\n        for v in values:\n            if v in data and is_integer_dtype(data[v]) and v in agged and not is_integer_dtype(agged[v]):\n                agged[v] = agged[v].astype(data[v].dtype)\n\n    table = agged\n\n    if table.index.nlevels > 1:\n        index_len = len(index)\n        str_col_names = [str(c) for c in table.columns.levels[index_len:]]\n        if all(name in table.index.names for name in str_col_names):\n            unstack_column = str_col_names\n        else:\n            unstack_column = [i for i in range(index_len, len(table.index.names))]\n\n        table = table.unstack(unstack_column)\n\n    if not dropna:\n        index = table.index\n        if index.nlevels > 1:\n            m = MultiIndex.from_product(index.levels, names=index.names)\n            table = table.reindex(m)\n\n        cols = table.columns\n        if cols.nlevels > 1:\n            m = MultiIndex.from_product(cols.levels, names=cols.names)\n            table = table.reindex(m, axis=1)\n\n    table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table.fillna(fill_value, downcast=\"infer\")\n\n    if margins:\n        data_notna = data[data.notna().all(axis=1)]\n        table = _add_margins(\n            table,\n            data_notna,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n    values = list(values) if values is not None else list(data.columns)\n\n    if not table.empty and isinstance(table.columns, MultiIndex):\n        table.columns = Series(table.columns).apply(str).values\n\n    if isinstance(table, ABCDataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table",
            "import_list": [
                "from pandas.util._decorators import Appender, Substitution",
                "from pandas.core.dtypes.common import is_integer_dtype, is_list_like",
                "from pandas.core.dtypes.generic import ABCDataFrame",
                "from pandas.core.frame import _shared_docs",
                "from pandas.core.groupby import Grouper",
                "from pandas import DataFrame",
                "from pandas import Series",
                "from pandas import MultiIndex"
            ]
        }
    ]
}