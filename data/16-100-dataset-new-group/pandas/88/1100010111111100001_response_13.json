{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 88,
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n    \n    # Handle multiple aggfunc values\n    if isinstance(aggfunc, list):\n        agged_values = {}\n        for func in aggfunc:\n            grouped = data.groupby(keys, observed=observed)\n            agged_values[func] = grouped.agg(func)\n        agged = pd.concat(agged_values, axis=1)\n\n    else:\n        keys = index + columns\n        grouped = data.groupby(keys, observed=observed)\n        agged = grouped.agg(aggfunc)\n        \n    if isinstance(agged, ABCDataFrame) and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n        \n        # Perform downcasting\n        for v in agged.columns:\n            if (\n                is_integer_dtype(data[v])\n                and not is_integer_dtype(agged[v])\n            ):\n                agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n    \n    # Handle multi-level index\n    table = agged\n    if table.index.nlevels > 1:\n        table = agged.unstack(range(len(index), len(keys)))\n        \n    # Handle dropna\n    if not dropna:\n        table = table.reindex(table.index.levels, axis=0)\n        table = table.reindex(table.columns.levels, axis=1)\n    \n    if isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n    \n    # Handle fill_value\n    if fill_value is not None:\n        table = table.fillna(fill_value, downcast=\"infer\")\n    \n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n    \n    # Discard the top level if values is not multi\n    if (\n        values is not None\n        and not isinstance(values, list)\n        and not table.empty\n        and table.columns.nlevels > 1\n    ):\n        table = table[values]\n    \n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n    \n    # Make sure empty columns are removed if dropna=True\n    if isinstance(table, ABCDataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n    \n    return table",
            "import_list": []
        }
    ]
}