{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 88,
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    # Instead of using recursion, handle multiple aggregations by directly aggregating the data\n    if isinstance(aggfunc, list):\n        agged_values = data.groupby([index, columns]).agg({values: aggfunc}).unstack()\n        table = agged_values.stack(dropna=dropna)\n\n        # Handling margins and fill_value similar to the original implementation\n        if fill_value is not None:\n            table = table.fillna(fill_value)\n\n        if margins:\n            table = _add_margins(\n                table,\n                data,\n                values,\n                rows=index,\n                cols=columns,\n                aggfunc=aggfunc,\n                observed=observed,\n                margins_name=margins_name,\n                fill_value=fill_value,\n            )\n\n        return table\n\n    else:\n        # Original implementation for a single aggfunc\n        keys = index + columns\n        grouped = data.groupby(keys, observed=observed)\n        agged = grouped.agg(aggfunc)\n\n        if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n            agged = agged.dropna(how=\"all\")\n\n            # Coerce to float if original values are integers\n            for v in values:\n                if (\n                    v in data\n                    and is_integer_dtype(data[v])\n                    and v in agged\n                    and not is_integer_dtype(agged[v])\n                ):\n                    agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n\n        table = agged\n\n        # Handling margins and fill_value similar to the original implementation\n        if fill_value is not None:\n            table = table.fillna(fill_value)\n\n        if margins:\n            if dropna:\n                data = data[data.notna().all(axis=1)]\n            table = _add_margins(\n                table,\n                data,\n                values,\n                rows=index,\n                cols=columns,\n                aggfunc=aggfunc,\n                observed=observed,\n                margins_name=margins_name,\n                fill_value=fill_value,\n            )\n\n        return table",
            "import_list": []
        }
    ]
}