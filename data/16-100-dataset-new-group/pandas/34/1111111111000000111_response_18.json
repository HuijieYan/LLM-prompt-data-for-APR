{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 34,
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    closed = \"left\" if self.closed == \"left\" else \"right\"\n    \n    # Use the first and last day as the start and end\n    first = ax.min().normalize()\n    last = ax.max().normalize() + pd.Timedelta(days=1)\n\n    # Generate date range from start to end based on frequency\n    bin_edges = date_range(start=first, end=last, freq=self.freq, closed=closed)\n\n    # Remove the ambiguous times by normalization and removing duplicates\n    binner = ax.normalize().drop_duplicates().reindex(bin_edges, method=closed).dropna()\n\n    if len(binner) == 0:\n        labels = binner\n        bins = binner\n    else:\n        labels = date_range(\n            freq=self.freq,\n            start=binner[0],\n            end=binner[-1] + pd.Timedelta(days=1),\n            tz=ax.tz,\n            name=ax.name,\n            ambiguous=\"infer\",\n            nonexistent=\"shift_forward\",\n        )\n\n        # Replace binner with labels\n        binner = labels\n\n        # Generate bins using the new labels without any ambiguous times\n        bins = lib.generate_bins_dt64(ax.asi8, labels.asi8, self.closed, hasnans=ax.hasnans)\n\n    return binner, bins, labels",
            "import_list": []
        }
    ]
}