{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 34,
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\"axis must be a DatetimeIndex, but got an instance of {type(ax).__name__}\")\n\n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    first, last = _get_timestamp_range_edges(ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base)\n    binner = date_range(\n        freq=self.freq,\n        start=first,\n        end=last,\n        tz=ax.tz,\n        name=ax.name,\n        ambiguous=\"infer\",\n        nonexistent=\"shift_forward\",\n    )\n\n    ax_values = ax.asi8\n    # Adjust the bin edges and handle ambiguous time\n    binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n\n    # Use a check for ambiguous times to handle AmbiguousTimeError\n    if self.freq != \"1D\":\n        bin_edges_adj = bin_edges if self.closed == \"right\" else np.concatenate([bin_edges, [last]])\n        if binner.tzinfo is not None:\n            add_labels = [last]\n            if self.closed == \"right\":\n                add_labels = []\n            asof_inds = bin_edges_adj.searchsorted(ax_values, side=self.closed)\n            if len(asof_inds) < len(ax_values):\n                bin_edges_adj = np.concatenate([bin_edges, [last]])\n                asof_inds = bin_edges_adj.searchsorted(ax_values, side='right')\n                bin_edges_adj = bin_edges_adj[:-1]\n                add_labels = []\n        else:\n            asof_inds = np.concatenate([ax_values.searchsorted(bin_edges_adj[1:], side='left'), [len(ax_values)]])\n            add_labels = self._make_asof_bins(asof_inds)\n            add_labels = [] if self.closed == \"right\" else add_labels\n        binner, bin_edges = binner[asof_inds], bin_edges_adj\n        labels = np.concatenate([_create_bins(binner, add_labels), add_labels])\n    else:\n        labels = binner\n        if self.label == \"right\":\n            labels = labels[1:]\n\n    # Handle the NaN values and ensure consistency\n    if ax.hasnans:\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n\n    return binner, lib.generate_bins(ax_values, bin_edges, self.closed, has_nans=ax.hasnans), labels",
            "import_list": []
        }
    ]
}