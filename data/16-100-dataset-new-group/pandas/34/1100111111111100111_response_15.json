{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 34,
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n        if not isinstance(ax, DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n    \n        if len(ax) == 0:\n            return DatetimeIndex(data=[], freq=self.freq, name=ax.name), [], DatetimeIndex([], tz=ax.tz, name=ax.name)\n    \n        freq = to_offset(self.freq)\n        first, last = ax.min().to_period(freq=freq), (ax.max() + to_offset('1s')).to_period(freq=freq)\n        \n        if self.closed == 'right':\n            adjust = -1\n        else:\n            adjust = 0\n        \n        binner_labels = [per.start_time.to_timestamp() for per in (first + i for i in range((last - first + adjust).n + 1))]\n        binner = DatetimeIndex(binner_labels, tz=ax.tz, freq=ax.freq, name=ax.name)\n        labels = binner[1:].union(binner[-1:])\n\n        ax_values = ax.asi8\n        binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n    \n        # general version, knowing nothing about relative frequencies\n        bins = lib.generate_bins_dt64(ax_values, bin_edges, self.closed, hasnans=ax.hasnans)\n    \n        if self.closed == \"right\":\n            labels = binner\n            if self.label == \"right\":\n                labels = labels[1:]\n        elif self.label == \"right\":\n            labels = labels[1:]\n    \n        if ax.hasnans:\n            binner, labels = binner.insert(0, NaT), labels.insert(0, NaT)\n    \n        # if we end up with more labels than bins\n        # adjust the labels\n        # GH4076\n        if len(bins) < len(labels):\n            labels = labels[: len(bins)]\n    \n        return binner, bins, labels",
            "import_list": [
                "from pandas import Timestamp",
                "from pandas.tseries.frequencies import to_offset"
            ]
        }
    ]
}