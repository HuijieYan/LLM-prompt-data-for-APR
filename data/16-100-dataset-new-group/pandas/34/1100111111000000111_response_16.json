{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 34,
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    # Handle AmbiguousTimeError by creating the bins and labels explicitly with proper handling of ambiguous and nonexistent times\n    bins = []\n    labels = []\n    for start, end in zip(ax, ax[1:]):  # Iterate over pairs of start and end times to create bins and labels\n        if start.tz is not None:\n            start = start.tz_localize(None)  # Remove timezone to avoid AmbiguousTimeError\n        if end.tz is not None:\n            end = end.tz_localize(None)  # Remove timezone to avoid AmbiguousTimeError\n        if end < start:  # Handle the case where end time is before start time\n            continue\n        freq_str = f\"{end - start}\"\n        if \"DST\" in freq_str:  # Handle the case where Daylight Saving Time transition occurs within the bin\n            bins.append(end)  # Use the end time as the border of the bin\n            labels.append(end - pd.Timedelta(\"1ns\"))  # Use the end time - 1 ns as the label\n        else:\n            bins.append(end)\n            labels.append(end)\n\n    binner = DatetimeIndex(bins, name=ax.name)  # Create the binner index from the bins\n    labels = DatetimeIndex(labels, name=ax.name)  # Create the labels index from the labels\n\n    return binner, bins, labels",
            "import_list": []
        }
    ]
}