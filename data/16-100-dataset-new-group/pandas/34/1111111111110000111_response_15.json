{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 34,
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n        if not isinstance(ax, DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n        \n        if len(ax) == 0:\n            binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n            return binner, [], labels\n        \n        first, last = _get_timestamp_range_edges(\n            ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base\n        )\n        # GH #12037\n        # use first/last directly instead of call replace() on them\n        # because replace() will swallow the nanosecond part\n        # thus last bin maybe slightly before the end if the end contains\n        # nanosecond part and lead to `Values falls after last bin` error\n        bins_before_ambiguous = date_range(\n            freq=self.freq,\n            start=first,\n            end=last.replace(second=0, microsecond=0, nanosecond=0),  # Handle ambiguous time\n            tz=ax.tz,\n            ambiguous=\"raise\",\n            name=ax.name\n        )\n        bins_after_ambiguous = date_range(\n            freq=self.freq,\n            start=last.replace(second=0, microsecond=0, nanosecond=1),  # Handle ambiguous time\n            end=last,\n            tz=ax.tz,\n            ambiguous=\"raise\",\n            name=ax.name\n        )\n        \n        binner = labels = date_range(\n            freq=self.freq,\n            start=first,\n            end=last,\n            tz=ax.tz,\n            ambiguous=\"infer\",\n            nonexistent=\"shift_forward\",\n            name=ax.name,\n        )\n\n        ax_values = ax.asi8\n        binner_before_ambiguous, bin_edges_before_ambiguous = self._adjust_bin_edges(bins_before_ambiguous, ax_values)\n        binner_after_ambiguous, bin_edges_after_ambiguous = self._adjust_bin_edges(bins_after_ambiguous, ax_values)\n\n        # general version, knowing nothing about relative frequencies\n        bins_before_ambiguous = lib.generate_bins_dt64(\n            ax_values, bin_edges_before_ambiguous, self.closed, hasnans=ax.hasnans\n        )\n        bins_after_ambiguous = lib.generate_bins_dt64(\n            ax_values, bin_edges_after_ambiguous, self.closed, hasnans=ax.hasnans\n        )\n\n        # Combine the bins and labels for both parts\n        binner = binner_before_ambiguous.union(binner_after_ambiguous)\n        bins = np.concatenate((bins_before_ambiguous, bins_after_ambiguous))\n        labels = np.concatenate((binner_before_ambiguous[1:], binner_after_ambiguous[1:])) if self.label == \"right\" else np.concatenate((binner_before_ambiguous[:-1], binner_after_ambiguous[:-1]))\n        \n        if ax.hasnans:\n            binner = binner.insert(0, NaT)\n            labels = labels.insert(0, NaT)\n\n        # if we end up with more labels than bins\n        # adjust the labels\n        # GH4076\n        if len(bins) < len(labels):\n            labels = labels[: len(bins)]\n\n        return binner, bins, labels",
            "import_list": []
        }
    ]
}