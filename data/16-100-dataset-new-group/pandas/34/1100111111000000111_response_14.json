{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 34,
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        # Convert ax into a DatetimeIndex if it's not already one\n        ax = pd.DatetimeIndex(ax)\n\n    if len(ax) == 0:\n        # Create an empty DatetimeIndex with specified frequency as binner\n        binner = labels = date_range(start=pd.Timestamp.min, end=pd.Timestamp.min, freq=self.freq, tz=ax.tz, name=ax.name)\n        return binner, [], labels\n\n    # Convert ax to a DataFrame to handle timezone-aware and NaN values properly\n    ax_df = ax.to_frame()\n\n    # Use first/last directly instead of calling replace() on them\n    # Handle NaN values in ax\n    first = ax_df.dropna().iloc[0]\n    last = ax_df.dropna().iloc[-1]\n\n    # Handle ambiguous timestamps by omitting the closed parameter\n    binner = labels = date_range(start=first, end=last, freq=self.freq, tz=ax.tz, name=ax.name)\n    \n    if ax.hasnans:\n        # Insert NaN at the beginning of binner and labels\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n\n    # Remove NaT values from binner and labels if they end up with more labels than bins\n    if len(binner) > len(labels):\n        labels = labels.dropna()\n    elif len(labels) > len(binner):\n        binner = binner.dropna()\n\n    # Generate bins using the adjusted binner and bin_edges\n    bins = lib.generate_bins_dt64(ax.asi8, binner.asi8, self.closed, hasnans=ax.hasnans)\n\n    if self.closed == \"right\":\n        labels = binner\n        if self.label == \"right\":\n            labels = labels[1:]\n    elif self.label == \"right\":\n        labels = labels[1:]\n\n    return binner, bins, labels",
            "import_list": []
        }
    ]
}