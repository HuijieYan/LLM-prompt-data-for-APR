{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    # no_result = object()\n    no_result = np.nan\n    for block in data.blocks:\n        # Avoid inheriting result from earlier in the loop\n        result = no_result\n        locs = block.mgr_locs.as_array\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            # generally if we have numeric_only=False\n            # and non-applicable functions\n            # try to python agg\n            if alt is not None:\n                new_result = np.array([alt(x, axis=self.axis) for x in block.values])\n                result = new_result.reshape(block.values.shape[0], 1)\n            else:\n                result = block.values\n        finally:\n            if result is no_result:\n                # result should be somewhat pre-allocated because we\n                # disallow object-dtype blocks in aggregation\n                result = self.grouper.aggregate_by1d(\n                    block.values, axis=1, how=how, alt=nullfunc, min_count=min_count\n                )\n\n            # Convert to float if we have any NAs\n            if not np.isnan(result).any():\n                result = self.grouper.transform(\n                    block.values, axis=1, func=maybe_convert_objects.serial_func\n                )\n                result_block = make_block(result, placement=block.mgr_locs)\n\n                if block.is_extension:\n                    # The just-created block will always be of \"object\" type, so convert\n                    # to requisite type `block` underlying values (an array of scalars)\n                    result_block_values = cast(np.ndarray, result_block.values)\n                    result_block_values = maybe_convert_objects(result_block_values, in_arbitrary=True)\n                    if isinstance(result_block.dtype, pd.CategoricalDtype):\n                        # see GH#22370 for further context (comment \"Dup code here + below for now\")\n                        cats, _ = get_codes(result_block_values, dtype=\"category\")\n                        result_block_values = pd.Categorical(\n                            cats, categories=result_block.dtype.categories, ordered=result_block.dtype.ordered\n                        )\n\n                    result_block = make_block(result_block_values, placement=result_block.mgr_locs)\n\n                result_block = maybe_downcast_to_dtype(\n                    result_block,\n                    dtype=block.dtype,\n                    can_consolidate=block.get_can_consolidate(),\n                )\n            else:\n                result_block = make_block(result, placement=block.mgr_locs, klass=block.__class__)\n\n        new_items.append(result_block.mgr_locs)\n        agg_blocks.append(result_block)\n\n    if not agg_blocks:\n        empty_bloc = make_block([], placement=make_block([], placement=data.items).mgr_locs)\n        return [empty_bloc], empty_bloc.mgr_locs\n\n    return agg_blocks, data.items.take(np.concatenate(new_items))",
            "import_list": []
        }
    ]
}