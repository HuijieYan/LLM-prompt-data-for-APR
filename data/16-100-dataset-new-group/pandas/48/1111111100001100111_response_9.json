{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n\n    for block in data.blocks:\n        locs = block.mgr_locs.as_array\n        result = no_result\n\n        # Avoid inheriting result from earlier in the loop\n        no_result = object()\n\n        # Logic for different dtype handling when applying aggregation functions\n        if block.dtype.kind == 'i':\n            func = {\n                'mean': lambda x: x.mean(),\n                'median': lambda x: x.median(),\n                'var': lambda x: x.var(ddof=0),\n                'std': lambda x: x.std(ddof=0)\n            }.get(how)\n            if func:\n                result = func(block.values)\n        elif block.dtype.kind == 'f':\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n\n        if result is not no_result:\n            agg_block: Block = block.make_block(result)\n\n            new_items.append(locs)\n            agg_blocks.append(agg_block)\n\n    if not agg_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n\n    agg_items = data.items.take(np.sort(np.concatenate(new_items)))\n    for i, blk in enumerate(agg_blocks):\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = agg_items.get_indexer()[i:i + loc]\n    \n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}