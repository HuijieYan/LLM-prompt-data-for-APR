{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # Existing block of code\n\n    # ... (other code)\n    \n            # see if we can cast the block back to the original dtype\n            result = maybe_downcast_numeric(result, block.dtype)\n\n            if block.is_extension and isinstance(result, np.ndarray) and not np.can_cast(result.dtype, block.dtype):\n                raise TypeError(f\"cannot safely cast non-equivalent {result.dtype} to {block.dtype}\")\n\n            if block.is_extension:\n                values = result\n                is_int = block.dtype.kind == 'i'\n                is_float = block.dtype.kind == 'f'\n                is_bool = block.dtype.kind == 'b'\n\n                if is_int and (is_float or is_bool) or (is_float and is_bool):\n                    raise TypeError(f\"cannot safely cast non-equivalent {block.dtype} to {result.dtype}\")\n\n                if len(result) < len(block):\n                    na_dtype = block.dtype\n                    if na_dtype.kind == \"O\":\n                        na_dtype = np.dtype(\"int64\")\n                    compare = np.zeros(block.shape, dtype=na_dtype)\n                    compare[result._data.blocks[0].mgr_locs.block] = 1\n                    isna = ~compare.astype(bool)\n                    if isna.any():\n                        raise TypeError(f\"cannot safely cast non-matching {block.dtype} to {result.dtype}\")\n    \n            agg_block: Block = maybe_convert_objects(block.make_block(result))",
            "import_list": []
        }
    ]
}