{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n\n    # Check if alt is provided\n    use_alt = alt is not None\n\n    for block in data.blocks:\n        result = no_result\n        locs = block.mgr_locs.as_array\n\n        # Handle exceptions\n        try:\n            if use_alt and not is_float_dtype(block.values.dtype):\n                # Casting to float to work with alt\n                values = block.values.astype(float)\n                result, _ = self.grouper.aggregate(\n                    values, how, axis=1, min_count=min_count\n                )\n                result = alt(result, axis=self.axis)\n            else:\n                result, _ = self.grouper.aggregate(\n                    block.values, how, axis=1, min_count=min_count\n                )\n        except NotImplementedError:\n            # Handle NotImplementedError, check for missing values (NA)\n            if min_count > 0 and (isna(block.values).sum(axis=1) >= block.values.shape[0] - min_count).any():\n                deleted_items.append(locs)\n                continue\n            if use_alt:\n                result, _ = self._reduce(f, axis=self.axis)\n                result = dtypes.apply_if_not_series(result, alt)\n                resultidx = Index([f], name=f)\n            else:\n                raise\n        except DataError:\n            # Handle DataError\n            deleted_items.append(locs)\n            continue\n        except SpecificationError:\n            # Handle SpecificationError\n            deleted_items.append(locs)\n            continue\n        if len(result) != block.values.shape[1]:\n            # Something wrong\n            raise AssertionError(\"Incompatible lengths\")\n\n        agg_blocks.append(block.mgr_locate(result))\n\n    if not (agg_blocks or split_frames):\n        raise DataError(\"No numeric types to aggregate\")",
            "import_list": [
                "from pandas._libs.missing import isna",
                "from pandas.core.dtypes.common import is_float_dtype"
            ]
        }
    ]
}