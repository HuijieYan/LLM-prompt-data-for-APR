{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> Tuple[List[Block], Index]:\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    split_items: List[np.ndarray] = []\n    split_frames: List[DataFrame] = []\n    no_result = object()\n\n    for block in data.blocks:\n        result = no_result\n        locs = block.mgr_locs.as_array\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            if alt is None:\n                assert how == \"ohlc\"\n                continue  # if alt is None, exclude the block and continue directly\n\n            obj = self.obj.take(locs, axis=self.axis)  # get the object\n            s = get_groupby(obj, self.grouper)\n            try:\n                result = s.aggregate(lambda x: alt(x, axis=self.axis))\n            except TypeError:\n                continue  # exclude the block and continue if an exception is raised\n            else:\n                result = cast(DataFrame, result)\n                if len(result.columns) > 1:\n                    # split item into List[Block[T], Block[U]] or more\n                    split_items.append(locs)\n                    split_frames.append(result)\n                    continue\n\n                result_vals = maybe_convert_objects(result.values)\n                agg_block = maybe_downcast_to_dtype(result_vals, block.dtype)\n\n                agg_block: Block = block.make_block(agg_block)\n\n                agg_blocks.append(agg_block)\n\n    if not agg_blocks and not split_frames:\n        raise DataError(\"No numeric types to aggregate\")\n\n    # Clean up the mess left over from split blocks\n    for locs, result in zip(split_items, split_frames):\n        for i, loc in enumerate(locs):\n            new_locs = np.array([loc], dtype=locs.dtype)\n            agg_blocks.append(result.take([i], axis=1)._selected_obj.blocks[0])\n            locs = np.concatenate([locs, new_locs])\n\n    # reset the locs in the blocks to correspond to our current ordering\n    indexer = np.concatenate(split_items or [np.concatenate(locs) for locs in data.items])\n\n    agg_items = data.items.take(indexer)\n\n    deleted_items = np.unique(np.concatenate(split_items)) if split_items else np.array([], dtype=np.intp)\n\n    if deleted_items.any():\n        mask = np.zeros(len(data), dtype=bool)\n        mask[deleted_items] = True\n        inverse, = np.where(~mask)\n        indexer = np.concatenate([inverse.take(np.searchsorted(inverse, idx)) for idx in indexer])\n\n    # Reset the mgr_locs\n    offset = 0\n    for blk in agg_blocks:\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = indexer[offset : offset + loc]\n        offset += loc\n\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}