{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    \n    # Get the data to be aggregated\n    data: BlockManager = self._get_data_to_aggregate()\n\n    # Filter the data based on numeric_only\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    # Initialize lists to store aggregated blocks, new items, and deleted items\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n\n    # Perform aggregation for each block in the data\n    for block in data.blocks:\n        # Perform aggregation based on the how parameter\n        if how == \"mean\":\n            result = block.values.mean(axis=1, min_count=min_count)\n        elif how == \"median\":\n            result = block.values.median(axis=1, min_count=min_count)\n        elif how == \"var\":\n            result = block.values.var(axis=1, min_count=min_count)\n        else:\n            raise NotImplementedError(\"Unsupported aggregation method: {}\".format(how))\n\n        # Append the aggregated block to agg_blocks\n        agg_block = block.make_block(result)\n        agg_blocks.append(agg_block)\n\n        # Track the new items\n        new_items.append(block.mgr_locs.as_array)\n\n    # Handle other cases and collect results as per the existing logic\n    # ...\n\n    # Finalize other parts of the function\n\n    # Return the aggregated blocks and items\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}