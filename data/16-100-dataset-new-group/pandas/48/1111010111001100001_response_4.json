{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # Get the data to aggregate\n    data = self._get_data_to_aggregate()\n\n    if numeric_only:\n        # Only consider numeric data\n        data = data._get_numeric_data(copy=False)\n\n    agg_blocks = []\n    new_items = []\n\n    # Iterate over the data blocks for aggregation\n    for block in data.blocks:\n        if block._is_sparse:\n            # TODO: Handle sparse data\n            raise NotImplementedError(\"Sparse data is not supported\")\n        \n        block_mask = block.mgr_locs.as_array\n        dtype = block.dtype\n\n        if block._can_fast_path:\n            try:\n                if function is None:\n                    result, _ = block.mean()\n                else:\n                    result, _ = getattr(block, function)(_try_wide=True)\n            except (TypeError, NotImplementedError):  # pragma: no cover\n                pass\n            \n        elif is_extension_array_dtype(dtype):\n            import numpy as np\n            try:\n                result, _ = self.grouper.aggregate(block.values, how, axis=1, min_count=min_count)\n            except NotImplementedError:\n                # Handle non-numeric data\n                if alt is None:\n                    # Exclude the block if the operation cannot be performed in an alternate way\n                    continue\n                # Call the grouper with only this block\n                obj = self.obj[block_mask]\n                if obj.shape[1] == 1:\n                    # Unwrap DataFrame to get array\n                    obj = obj.iloc[:, 0]\n\n                s = get_groupby(obj, self.grouper)\n                try:\n                    result = s.aggregate(lambda x: alt(x, axis=self.axis))\n                except TypeError:\n                    continue\n                else:\n                    result = cast(DataFrame, result)\n        \n        else:\n            if alt is None:\n                # Exclude the block if the operation cannot be performed in an alternate way\n                continue\n            # Call the grouper with only this block\n            try:\n                result = block.apply(how)\n            except (TypeError, SpecificationError):  # pragma: no cover\n                continue\n        \n        new_items.append(block.items[block_mask])\n        agg_blocks.append(block.make_block(result))\n    \n    if not (agg_blocks or split_frames):\n        raise DataError(\"No numeric types to aggregate\")\n\n    # Adjust the indexer to account for any removed items\n    indexer = np.concatenate(new_items)\n    agg_items = data.items.take(indexer)\n    \n    # Reset the locs in the blocks to correspond to the current ordering\n    offset = 0\n    for blk in agg_blocks:\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = indexer[offset : (offset + loc)]\n        offset += loc\n\n    return agg_blocks, agg_items",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}