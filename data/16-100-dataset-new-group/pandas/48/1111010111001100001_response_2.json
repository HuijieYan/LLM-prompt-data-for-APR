{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ) -> \"Tuple[List[Block], Index]\":\n        _valid_hows = (\"mean\", \"median\", \"var\")\n        if how not in _valid_hows:\n            raise ValueError(f\"'how' must be one of {_valid_hows}\")\n        \n        data = self._get_data_to_aggregate()\n        \n        # For median and var, numeric_only should not be applied\n        if how in [\"median\", \"var\"]:\n            numeric_only = False\n        \n        data = data.get_numeric_data(copy=False) if numeric_only else data\n\n        agg_blocks = []\n        new_items = []\n\n        for block in data.blocks:\n            try:\n                result, _ = self.grouper.aggregate(\n                    block.values, how, axis=1, min_count=min_count\n                )\n            except NotImplementedError:\n                if alt is None:\n                    raise NotImplementedError(f\"'how={how}' is not supported and no alternative function provided\")\n                else:\n                    # call our grouper again with only this block\n                    obj = self.obj[data.items[block.mgr_locs]]\n                    result = alt(obj, axis=self.axis)\n            finally:\n                result = maybe_convert_objects(result)\n                \n                # create a new aggregation block\n                agg_block = make_block(result, placement=block.mgr_locs)\n                agg_blocks.append(agg_block)\n                new_items.append(block.mgr_locs)\n\n        # reset the locs in the blocks to correspond to our current ordering\n        indexer = np.concatenate(new_items)\n        agg_items = data.items.take(np.argsort(indexer))\n\n        for i, blk in enumerate(agg_blocks):\n            # reset the locs in the blocks to correspond to our current ordering\n            loc = len(blk.mgr_locs)\n            blk.mgr_locs = indexer[i : i + loc]\n\n        return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}