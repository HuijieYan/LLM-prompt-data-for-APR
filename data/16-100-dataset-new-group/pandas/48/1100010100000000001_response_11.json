{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, aggregation_method: str, alternate_method=None, numeric_only: bool = True, min_count: int = -1\n) -> Tuple[List[Block], List[int]]:\n\n    data_to_aggregate: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data_to_aggregate = data_to_aggregate.get_numeric_data(copy=False)\n\n    aggregated_blocks: List[Block] = []\n    new_item_indices: List[int] = []\n\n    for block in data_to_aggregate.blocks:\n        result = None\n        locations = block.mgr_locs.as_array\n\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, aggregation_method, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            if alternate_method is None:\n                # exclude the block if an alternate method is not available\n                assert aggregation_method == \"ohlc\"\n                continue\n\n            # handle the aggregation using the alternate method\n            obj = self.obj[data_to_aggregate.items[locations]]\n            s = get_groupby(obj, self.grouper)\n            try:\n                result = s.aggregate(lambda x: alternate_method(x, axis=self.axis))\n            except TypeError:\n                continue\n            else:\n                if len(result._data.blocks) != 1:\n                    # handle the case where object block is split\n                    continue\n\n                result = result._data.blocks[0].values\n\n        assert not isinstance(result, DataFrame)\n\n        if result is not None:\n            result = maybe_downcast_numeric(result, block.dtype)\n\n            if block.is_extension and isinstance(result, np.ndarray):\n                try:\n                    result = type(block.values)._from_sequence(\n                        result.ravel(), dtype=block.values.dtype\n                    )\n                except ValueError:\n                    result = result.reshape(1, -1)\n\n            aggregated_block: Block = block.make_block(result)\n\n        new_item_indices.append(locations)\n        aggregated_blocks.append(aggregated_block)\n\n    if not aggregated_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n\n    return aggregated_blocks, new_item_indices",
            "import_list": [
                "from typing import List, Tuple",
                "import numpy as np",
                "from pandas.core.frame import DataFrame",
                "from pandas.core.base import DataError",
                "from pandas.core.internals import Block, BlockManager, make_block"
            ]
        }
    ]
}