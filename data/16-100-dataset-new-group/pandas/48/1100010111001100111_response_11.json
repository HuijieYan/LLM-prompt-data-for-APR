{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    split_items: List[np.ndarray] = []\n    split_frames: List[DataFrame] = []\n\n    for block in data.blocks:\n        # Avoid inheriting result from earlier in the loop\n        locs = block.mgr_locs.as_array\n        if isinstance(block.dtype, CategoricalDtype):\n            result = self.grouper.aggregate_categorical(\n                block.values, how, axis=1, min_count=min_count\n            )\n        else:\n            result, _ = self.grouper.aggregate(block.values, how, axis=1, min_count=min_count)\n\n        if isinstance(result, pd.DataFrame) and len(result.columns) > 1:\n            split_items.append(locs)\n            split_frames.append(result)\n        else:\n            if not isinstance(result, pd.DataFrame):\n                result = maybe_downcast_numeric(np.atleast_2d(result), block.dtype)\n            \n            if isinstance(block.values, IntegerArray):\n                result = IntegerArray._from_sequence(result.ravel(), dtype=block.dtype).reshape(result.shape)\n                \n            if isinstance(result, IntegerArray) and result.ndim == 1:\n                result = result.reshape(1, -1)\n\n            agg_block = block.make_block(result)\n\n            new_items.append(locs)\n            agg_blocks.append(agg_block)\n\n    if not (agg_blocks or split_frames):\n        raise DataError(\"No numeric types to aggregate\")\n\n    if split_items:\n        for locs, result in zip(split_items, split_frames):\n            for i, loc in enumerate(locs):\n                indexer = np.array([loc], dtype=locs.dtype)\n                new_items.append(indexer)\n                blk = result.iloc[:, [i]]._data.blocks[0]\n                agg_blocks.append(blk)\n\n    indexer = np.concatenate(new_items)\n    agg_items = data.items.take(np.sort(indexer))\n\n    if deleted_items:\n        mask = np.zeros(len(data.blocks[0]), dtype=bool)\n        deleted = np.concatenate(deleted_items)\n        mask[deleted] = True\n        indexer = np.arange(len(data.blocks[0]))[~mask][indexer]\n\n    offset = 0\n    for blk in agg_blocks:\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = BlockPlacement(slice(offset, offset + loc, 1))\n        offset += loc\n\n    return agg_blocks, agg_items",
            "import_list": [
                "from pandas.core.dtypes.dtypes import CategoricalDtype",
                "from pandas.core.dtypes.cast import maybe_downcast",
                "from pandas.core.arrays.integer import IntegerArray",
                "from pandas.core.blocks import BlockPlacement",
                "import pandas.core.internals.blocks"
            ]
        }
    ]
}