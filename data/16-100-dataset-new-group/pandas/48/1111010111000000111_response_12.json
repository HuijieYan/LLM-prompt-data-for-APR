{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n\n    for block in data.blocks:\n        locs = block.mgr_locs\n        result = self.grouper.aggregate(block.values, how, axis=1, min_count=min_count)\n      \n        try:\n            if alt is not None and isinstance(result, DataFrame):\n                result = result.aggregate(lambda x: alt(x, axis=self.axis))\n                result = result._data.blocks[0].values if len(result._data.blocks) == 1 else result._data.blocks[0].values\n                if isinstance(result, np.ndarray) and result.ndim == 1:\n                    result = result.reshape(1, -1)\n\n        except (TypeError, ValueError):\n            deleted_items.append(locs)\n            continue\n\n        block_dtype = block.dtype\n        result = maybe_convert_objects(result, try_float=False)\n        result = maybe_downcast_to_dtype(result, dtype=block_dtype)\n        new_items.append(locs)\n\n        agg_block: Block = make_block(result, placement=locs)\n\n        agg_blocks.append(agg_block)\n\n    if not agg_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n\n    if deleted_items:\n        # Handle any deleted items\n        merged_deleted_items = np.concatenate(deleted_items)\n        indexer = self._get_indexer(data.items, merged_deleted_items)\n        agg_blocks, new_items = self._handle_deleted_items(agg_blocks, new_items, indexer)\n\n    return agg_blocks, data.items.take(np.concatenate(new_items))",
            "import_list": []
        }
    ]
}