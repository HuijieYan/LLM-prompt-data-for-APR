{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n\n    for block in data.blocks:\n        locs = block.mgr_locs.as_array\n        if how == \"ohlc\":\n            if alt is None:\n                # Exclude the block if an alternate way is not available\n                deleted_items.append(locs)\n                continue\n            obj = self.obj[data.items[locs]]\n            if obj.shape[1] == 1:\n                obj = obj.iloc[:, 0]\n            s = get_groupby(obj, self.grouper)\n            try:\n                result = s.aggregate(lambda x: alt(x, axis=self.axis))\n                result = cast(DataFrame, result)\n\n                if len(result._data.blocks) != 1:\n                    split_items.append(locs)\n                    split_frames.append(result)\n                    continue\n\n                result = result._data.blocks[0].values\n\n                if isinstance(result, np.ndarray) and result.ndim == 1:\n                    result = result.reshape(1, -1)\n            except TypeError:\n                deleted_items.append(locs)\n                continue\n\n        else:  # Other aggregation methods\n            if how == \"mean\":\n                result = np.nanmean(block.values, axis=1)\n            elif how == \"median\":\n                result = np.nanmedian(block.values, axis=1)\n            elif how == \"var\":\n                result = np.nanvar(block.values, axis=1)\n            else:\n                raise ValueError(\"Invalid aggregation method\")\n\n        agg_block: Block = block.make_block(result)\n        new_items.append(locs)\n        agg_blocks.append(agg_block)\n\n    # Rest of the code remains unchanged\n\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}