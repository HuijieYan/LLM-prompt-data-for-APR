{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n\n    new_items: List[np.ndarray] = []\n    split_items: List[np.ndarray] = []\n    agg_blocks: List[Block] = []\n    \n    for block in data.blocks:\n        locs = block.mgr_locs.as_array\n        if numeric_only and is_numeric_dtype(block.dtype):\n            try:\n                result, _ = self.grouper.aggregate(block.values, how, axis=1, min_count=min_count)\n            except NotImplementedError:\n                if alt is None:\n                    assert how == \"ohlc\"\n                    continue\n                result = self.apply_agg_function(alt, self.obj, locs, self.grouper, self.axis)\n            else:\n                if not is_scalar(result) and isinstance(result, (np.ndarray, ABCIndexClass, ABCSeries)):\n                    if hasattr(result, 'dtype') and result.dtype == 'object':\n                        result = result.astype('float')\n                agg_block = block.make_block(make_block(result, locs, locs, verify_integrity=False))\n                new_items.append(locs)\n                agg_blocks.append(agg_block)\n        else:\n            split_items.append(locs)\n\n    if not (agg_blocks or split_items):\n        raise DataError(\"No numeric types to aggregate\")\n\n    if split_items:\n        split_frames = get_split_frames(split_items, split_items)\n        for locs, split_frame in zip(split_items, split_frames):\n            for i, (loc, columns) in enumerate(zip(locs, split_frame.items)):\n                new_items.append(np.array([loc], dtype=locs.dtype))\n                subframe = split_frame.iloc[:, i]\n                agg_blocks.append(subframe.blocks[columns[1]])\n\n    items = _concat_indexes(new_items, data.items)\n\n    # reset the locs in the blocks to correspond to our current ordering\n    for offset, blk in enumerate(agg_blocks):\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = items_loc = items.get_indexer(blk.mgr_locs)\n        if items_loc.size == 0:\n            raise ValueError('Empty data passed with indices specified.')\n        items = items.take(~items_loc)\n        items = _concat_indexes([items, items_loc], verify_integrity=False)\n    \n    return agg_blocks, items",
            "import_list": []
        }
    ]
}