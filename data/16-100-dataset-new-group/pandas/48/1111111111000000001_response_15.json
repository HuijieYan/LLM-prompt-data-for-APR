{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.select_dtypes(include=[np.number])  # Select only numeric columns\n\n    agg_blocks: List[Block] = []\n    new_items: List[int] = []\n    deleted_items: List[int] = []\n    split_items: List[int] = []\n\n    for block in data.blocks:\n        try:\n            result = self.grouper.aggregate(block.values, how, axis=1, min_count=min_count)\n        except NotImplementedError:\n            if alt is None:\n                deleted_items.extend(block.mgr_locs)\n                continue\n\n            obj = self.obj.reindex(data.items[block.mgr_locs], axis=1)\n            s = obj.groupby(self.grouper.axis)\n            result = s.agg(alt)\n\n            if result._data.shape[1] > 1:  # Check for split blocks\n                split_items.extend(block.mgr_locs)\n                continue\n\n            result = Block(result._data.blocks[0].values, block.mgr_locs, ndim=2, axis=1)\n\n        agg_blocks.append(result)\n        new_items.extend(block.mgr_locs)\n\n    if not (agg_blocks or split_items):\n        raise DataError(\"No numeric types to aggregate\")\n\n    # Clean up the mixed-type blocks\n    if split_items:\n        temp_blocks = [data.blocks[i] for i in split_items]\n        new_items, temp_agg_blocks = _clean_and_aggregate_temp_blocks(split_items, temp_blocks, alt)\n        agg_blocks.extend(temp_agg_blocks)\n\n    # Rearrange the aggregated blocks to maintain sequence\n    indexer = np.sort(new_items)\n    new_items = data.items.take(indexer)\n    agg_blocks = _rearrange_agg_blocks(new_items, data, indexer, agg_blocks)\n\n    return agg_blocks, new_items",
            "import_list": []
        }
    ]
}