{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n\n    # if numeric_only is True, get numeric data else get all data \n    if numeric_only:\n        data = data.select_dtypes(include=\"number\", copy=False)\n\n    agg_blocks: List[Block] = []\n    agg_items: List[np.ndarray] = []\n\n    for block in data.blocks:\n        result = None\n        locs = block.mgr_locs.as_array\n        values = block.values\n\n        # Skip non-numeric blocks from casting and aggregation\n        if not np.issubdtype(values.dtype, np.number):\n            # Exclude from aggregation\n            continue\n\n        if how in [\"mean\", \"var\", \"median\", \"any_other_numeric_function\"]:  # Include all numeric operations\n            # Perform the aggregation for numeric blocks\n            result = values.aggregate(how, axis=1, min_count=min_count)\n        else:\n            # Exclude non-applicable functions\n            # and try to perform the operation in an alternate way\n            assert alt is not None\n            data_items = data.items[locs]\n            if len(data_items) > 1:\n                # Multiple items are not supported for non-applicable functions if alt is provided\n                deleted_items.append(locs)\n                continue\n            obj = self.obj[data_items[0]]  # Get the single object\n            s = get_groupby(obj, self.grouper)\n            result = s.aggregate(lambda x: alt(x, axis=self.axis))\n\n            # Unwrap DataFrame to get array\n            if isinstance(result, DataFrame):\n                result = result.iloc[:, 0]\n\n        # Append the computed aggregated value to the list of aggregation blocks\n        agg_blocks.append(block.make_block(result))\n        # Append the corresponding locations to the list of agg_items\n        agg_items.append(locs)\n\n    if not agg_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n\n    return agg_blocks, data.items.take(np.concatenate(agg_items))",
            "import_list": []
        }
    ]
}