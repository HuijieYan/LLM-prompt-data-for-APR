{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ) -> \"Tuple[List[Block], Index]\":\n        data: BlockManager = self._get_data_to_aggregate()\n    \n        if numeric_only:\n            data = data.get_numeric_data(copy=False)\n    \n        agg_blocks: List[Block] = []\n        new_items: List[np.ndarray] = []\n        deleted_items: List[np.ndarray] = []\n        # Some object-dtype blocks might be split into List[Block[T], Block[U]]\n        split_items: List[np.ndarray] = []\n        split_frames: List[DataFrame] = []\n    \n        no_result = object()\n        \n        for block in data.blocks:\n            result = no_result\n            locs = block.mgr_locs.as_array\n            try:\n                result, new_locs = self.grouper.aggregate(\n                                        block.values, how, axis=1, min_count=min_count\n                                    )\n            except NotImplementedError:\n                # Handle cases where the operation is not implemented\n                if alt is None:\n                    assert how == \"ohlc\"\n                    deleted_items.append(locs)\n                    continue\n                    \n                obj = self.obj[data.items[locs]]\n                if obj.shape[1] == 1:\n                    s = obj.iloc[:, 0]\n                    new_locs = locs\n\n                    result = obj.groupby(self.grouper.groupings[0], axis=1).agg(alt)\n            except Exception as e:\n                # Perform any required exception handling\n                deleted_items.append(locs)\n                continue\n    \n            # If the result is not a DataFrame\n            assert not isinstance(result, DataFrame)\n    \n            if result is not no_result:\n                result = maybe_downcast_numeric(result, block.dtype)\n\n                # Cast the original block values back to the original dtype\n                result = maybe_convert_objects(result, convert_floating=True, convert_string=True)\n\n                agg_block: Block = block.make_block(result)\n    \n                new_items.append(new_locs)\n                agg_blocks.append(agg_block)\n    \n        if not (agg_blocks or split_frames):\n            raise DataError(\"No numeric types to aggregate\")\n    \n        if split_items:\n            for locs, result in zip(split_items, split_frames):\n                assert len(locs) == result.shape[1]\n                for i, loc in enumerate(locs):\n                    new_items.append(np.array([loc], dtype=locs.dtype))\n                    agg_blocks.append(result.iloc[:, [i]]._data.blocks[0])\n        \n        indexer = np.concatenate(new_items)\n        agg_items = data.items.take(np.sort(indexer))\n        \n        if deleted_items:\n            deleted = np.concatenate(deleted_items)\n            ai = np.arange(len(data))\n            mask = np.zeros(len(data))\n            mask[deleted] = 1\n            indexer = (ai - mask.cumsum())[indexer]\n        \n        offset = 0\n        for blk in agg_blocks:\n            loc = len(blk.mgr_locs)\n            blk.mgr_locs = indexer[offset : (offset + loc)]\n            offset += loc\n    \n        return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}