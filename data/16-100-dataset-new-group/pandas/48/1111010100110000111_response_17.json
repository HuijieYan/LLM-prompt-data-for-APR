{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n        data: BlockManager = self._get_data_to_aggregate()\n\n        if numeric_only:\n            data = data.get_numeric_data(copy=False)\n\n        agg_blocks: List[Block] = []\n        new_items: List[np.ndarray] = []\n        deleted_items: List[np.ndarray] = []\n\n        no_result = object()\n        for block in data.blocks:\n            result = no_result\n            locs = block.mgr_locs.as_array\n            try:\n                result, _ = self.grouper.aggregate(\n                    block.values, how, axis=1, min_count=min_count\n                )\n            except NotImplementedError:\n                # generally if we have numeric_only=False and non-applicable functions\n                # try to python agg\n                if alt is None:\n                    if how == \"ohlc\":\n                        # we cannot perform the operation in an alternate way, exclude the block\n                        deleted_items.append(locs)\n                        continue\n                    else:\n                        return self._python_agg_general(how, alt, numeric_only=numeric_only,\n                                                        min_count=min_count)\n                # call our grouper again with only this block\n                obj = self.obj[data.items[locs]]\n                result = self._aggregate_frame(obj, how, alt=alt, numeric_only=numeric_only,\n                                               min_count=min_count)\n\n            if result is no_result:\n                deleted_items.append(locs)\n                continue\n\n            # see if we can cast the block back to the original dtype\n            result = maybe_downcast_to_dtype(result, block.dtype)\n\n            agg_block = block.make_block(result, placement=locs)\n            new_items.append(np.array(agg_block.mgr_locs))\n\n            agg_blocks.append(agg_block)\n\n        if not (agg_blocks or deleted_items):\n            # consolidate empty frames\n            return [self.blank], np.array([], dtype=np.int64)\n        else:\n            indexer = np.concatenate(new_items)\n            agg_items = data.items.take(indexer)\n\n            if deleted_items:\n                deleted = np.concatenate(deleted_items)\n                ai = np.arange(len(data))\n                mask = np.zeros(len(data))\n                mask[deleted] = 1\n                indexer = (ai - mask.cumsum())[indexer]\n\n            offset = 0\n            for blk in agg_blocks:\n                loc = len(blk.mgr_locs)\n                blk.mgr_locs = indexer[offset : (offset + loc)]\n                offset += loc\n\n            return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}