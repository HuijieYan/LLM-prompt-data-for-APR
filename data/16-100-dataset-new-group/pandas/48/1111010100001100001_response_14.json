{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    split_items: List[np.ndarray] = []\n    split_frames: List[DataFrame] = []\n\n    no_result = object()\n    for idx, block in enumerate(data.blocks):\n        # Avoid inheriting result from earlier in the loop\n        result = no_result\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=self.axis, min_count=min_count\n            )\n        except (NotImplementedError, TypeError) as e:\n            if alt is None:\n                deleted_items.append(block.mgr_locs.as_array)\n                continue\n\n            obj = self.obj[data.items[idx]]\n            # Process 'var' separately\n            if how == 'var':\n                result = obj.var(axis=self.axis, skipna=True)\n            else:\n                result = obj.agg(alt, axis=self.axis)\n\n        # Handle multiple block output\n        if hasattr(result, '_data') and len(result._data.blocks) > 1:\n            split_items.append(block.mgr_locs.as_array)\n            split_frames.append(result)\n\n        if result is not no_result:\n            result = maybe_downcast_numeric(result, block.dtype)\n            agg_block: Block = block.make_block(result)\n            new_items.append(block.mgr_locs.as_array)\n            agg_blocks.append(agg_block)\n\n    # ... (remaining code)\n\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}