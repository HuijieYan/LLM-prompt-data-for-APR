{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ) -> \"Tuple[List[Block], Index]\":\n        data: BlockManager = self._get_data_to_aggregate()\n\n        if numeric_only:\n            data = data.get_numeric_data(copy=False)\n\n        agg_blocks: List[Block] = []\n        new_items: List[np.ndarray] = []\n        \n        for block in data.blocks:\n            result = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n\n            if alt is not None:\n                obj = self.obj[data.items[block.mgr_locs.as_array]]\n                \n                if obj.shape[1] == 1:\n                    s = get_groupby(obj, self.grouper)\n                    alt_result = s.aggregate(lambda x: alt(x, axis=self.axis))\n                    \n                    if isinstance(alt_result, DataFrame):\n                        alt_result = alt_result._data.blocks[0].values\n                        if isinstance(alt_result, np.ndarray) and alt_result.ndim == 1:\n                            alt_result = alt_result.reshape(1, -1)\n                    \n                    result = alt_result\n\n            block_dtype = block.dtype\n            safe_cast_func = lambda x: np.where(x, x.astype(block_dtype), 0)\n            try:\n                agg_block_values = safe_cast_func(result)\n                agg_block = block.make_block(agg_block_values)\n            except TypeError as err:\n                raise TypeError(\n                    f\"Cannot safely cast non-equivalent {block.values.dtype} to {np.dtype(block_dtype)}\"\n                ) from err\n\n            new_items.append(block.mgr_locs.as_array)\n            agg_blocks.append(agg_block)\n\n        if not agg_blocks:\n            raise DataError(\"No numeric types to aggregate\")\n\n        # reset the locs in the blocks to correspond to our\n        # current ordering\n        indexer = np.concatenate(new_items)\n        agg_items = data.items.take(np.sort(np.concatenate(indexer)))\n\n        offset = 0\n        for blk in agg_blocks:\n            loc = len(blk.mgr_locs)\n            blk.mgr_locs = indexer[offset : (offset + loc)]\n            offset += loc\n\n        return agg_blocks, agg_items",
            "import_list": [
                "import numpy as np",
                "from pandas.core.frame import DataFrame",
                "from pandas.core.groupby.groupby import GroupBy",
                "from pandas.core.internals import BlockManager, Block"
            ]
        }
    ]
}