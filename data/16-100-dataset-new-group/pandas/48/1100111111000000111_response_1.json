{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # get the data to aggregate\n    data: BlockManager = self._get_data_to_aggregate()\n  \n    if numeric_only:\n        if hasattr(data, \"select_dtypes\"):  # handle nullable integer dtype\n            numeric_data = data.select_dtypes(include=['number'])\n        else:\n            numeric_data = data._get_numeric_data(copy=False)\n    else:\n        numeric_data = data\n    \n    agg_blocks: List[Block] = []\n    agg_index = numeric_data.index\n\n    for block in numeric_data.blocks:\n        # perform aggregation operation based on the provided 'how' parameter\n        if pd.api.types.is_numeric_v_string_dtype(block.values):  # check if the block has numeric or string values\n            result, _ = self.grouper.aggregate(block.values, how, axis=1, min_count=min_count)\n        else:\n            result = block.values  # maintain the original values if not numeric or string\n        \n        agg_block: Block = block.make_block(result)  # create a new block with the aggregated result\n        agg_blocks.append(agg_block)\n\n    # construct a new BlockManager with the aggregated blocks and the original index\n    agg_data = BlockManager(agg_blocks, [block.mgr_locs for block in agg_blocks], axes=[agg_index])\n\n    return agg_data, agg_index",
            "import_list": []
        }
    ]
}