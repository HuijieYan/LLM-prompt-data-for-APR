{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n    \n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n    \n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    split_items: List[np.ndarray] = []\n    split_frames: List[DataFrame] = []\n    \n    no_result = object()\n    for block in data.blocks:\n        locs = block.mgr_locs.as_array\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            if alt is None:\n                deleted_items.append(locs)\n                continue\n            \n            obj = self.obj[data.items[locs]]\n            if obj.shape[1] == 1:\n                obj = obj.iloc[:, 0]\n\n            s = get_groupby(obj, self.grouper)\n            try:\n                result = s.aggregate(lambda x: alt(x, axis=self.axis))\n            except TypeError:\n                deleted_items.append(locs)\n                continue\n\n        if result is not no_result:\n            result = maybe_convert_objects(result, convert_numeric=True)\n            \n            if isinstance(result, DataFrame):\n                split_items.append(locs)\n                split_frames.append(result)\n            else:\n                if block.is_extension:\n                    result = maybe_downcast_to_dtype(result, block.dtype)\n                agg_block = make_block(result, placement=block.mgr_locs)\n                new_items.append(agg_block.mgr_locs.as_array)\n                agg_blocks.append(agg_block)\n    \n    if not (agg_blocks or split_frames):\n        raise DataError(\"No numeric types to aggregate\")\n    \n    if split_frames:\n        for locs, result in zip(split_items, split_frames):\n            for i, loc in enumerate(locs):\n                new_items.append(DataFrame([loc], index=[i])._data.blocks[0].mgr_locs.as_array)\n                agg_blocks.append(result._data.blocks[i])\n    \n    indexer = np.concatenate(new_items)\n    agg_blocks, agg_items = sort_and_uniq_series_by_index(agg_blocks, data.items.take(indexer))\n    \n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}