{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    split_items: List[np.ndarray] = []\n    split_frames: List[DataFrame] = []\n\n    for block in data.blocks:\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except (NotImplementedError, TypeError):\n            if alt is None:\n                deleted_items.append(block.mgr_locs.as_array)\n                continue\n            obj = self.obj[data.items[block.mgr_locs.as_array]]\n            s = get_groupby(obj, self.grouper)\n            result = s.aggregate(lambda x: alt(x, axis=self.axis))\n            result = maybe_convert_objects(result, try_float=True)\n            result = maybe_downcast_to_dtype(result, dtype=self.mgr.dtype)\n        \n        result = maybe_downcast_numeric(result, block.dtype)\n        agg_block: Block = make_block(result, block.items, block.ref_locs)\n        new_items.append(block.mgr_locs.as_array)\n        agg_blocks.append(agg_block)\n\n    if not agg_blocks and not split_frames:\n        raise DataError(\"No numeric types to aggregate\")\n\n    if split_frames:\n        new_blocks = []\n        for locs, result in zip(split_items, split_frames):\n            assert len(locs) == result.shape[1]  # Validate shapes\n            for i, loc in enumerate(locs):\n                new_items.append(np.array([loc], dtype=locs.dtype))\n                new_blocks.append(result._iat[:, i])\n\n        agg_blocks.extend(new_blocks)\n\n    index_order = np.concatenate(new_items)\n    aggregated_items = data.items.take(np.sort(index_order))\n\n    if deleted_items:\n        deleted = np.concatenate(deleted_items)\n        mask = np.zeros(len(data))\n        mask[deleted] = 1\n        indexer = np.arange(len(data)) - mask.cumsum()\n        indexer = indexer.take(index_order)\n\n    offset = 0\n    for blk in agg_blocks:\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = index_order[offset : offset + loc]\n        offset += loc\n\n    return agg_blocks, aggregated_items",
            "import_list": []
        }
    ]
}