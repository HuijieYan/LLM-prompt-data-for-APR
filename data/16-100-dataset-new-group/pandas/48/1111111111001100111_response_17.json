{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    import numpy as np  # Re-added import statement\n    from pandas.core.frame import DataFrame  # Re-added import statement\n    from pandas.core.internals import Block  # Re-added import statement\n    from pandas.core.base import DataError  # Re-added import statement\n\n    data = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks = []\n    new_items = []\n    deleted_items = []\n    split_items = []\n    split_frames = []\n\n    no_result = object()\n    for block in data.blocks:\n        result = no_result  # Moved the initialization here\n        locs = block.mgr_locs.as_array\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n            if result.ndim == 1 and isinstance(result, (np.ndarray, DataFrame)):\n                result = np.expand_dims(result, axis=0)\n        except TypeError:\n            if alt is None:\n                raise\n            obj = self.obj[data.items[locs]]\n            s = get_groupby(obj, self.grouper)\n            try:\n                result = s.aggregate(lambda x: alt(x, axis=self.axis))\n                if result.ndim == 1 and isinstance(result, (np.ndarray, DataFrame)):\n                    result = np.expand_dims(result, axis=0)\n            except TypeError:\n                deleted_items.append(locs)\n                continue\n            except Exception as e:\n                raise\n        except (NotImplementedError, Exception) as e:\n            deleted_items.append(locs)\n            continue\n\n        if result is not no_result:\n            if block.is_extension:\n                to_concat = []\n                for i in range(result.shape[1]):\n                    to_concat.append(\n                        Block(result[:, i], ndim=2, placement=locs, dtype=result.dtype)\n                    )\n                result = np.array([to_concat])\n            else:\n                agg_block = block.make_block(result)\n                agg_blocks.append(agg_block)\n                split_items.append(locs)\n                split_frames.append(result)\n\n            new_items.append(locs)\n\n    if not (agg_blocks or split_frames):\n        raise DataError(\"No numeric types to aggregate\")\n\n    idx = np.concatenate(new_items)\n    indexed_blocks = data.reindex_items(idx)\n\n    for idx, block, frame in zip(split_items, agg_blocks, split_frames):\n         for i, col_idx in enumerate(idx):\n             indexed_blocks.blocks[i].mgr_locs = col_idx\n\n    return agg_blocks, data.items.take(idx)",
            "import_list": [
                "import numpy as np",
                "from pandas.core.frame import DataFrame",
                "from pandas.core.internals import Block",
                "from pandas.core.base import DataError"
            ]
        }
    ]
}