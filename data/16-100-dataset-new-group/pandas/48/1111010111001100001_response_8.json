{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> Tuple[List[Block], Index]:\n    data = self.obj._mgr\n\n    if numeric_only:\n        numeric_data_blocks = [block for block in data.blocks if block.is_numeric]\n    else:\n        numeric_data_blocks = data.blocks\n\n    agg_blocks = []\n    new_items = []\n\n    for block in numeric_data_blocks:\n        values = block.copy()\n        result = self.grouper.aggregate(values, how, axis=0, min_count=min_count)\n        if result is None:\n            continue\n\n        if isinstance(result, (pd.Series, pd.DataFrame, pd.Index)):\n            result = result.values\n\n        if not is_numeric_dtype(values.dtype):\n            result = result.astype(values.dtype)\n\n        agg_block = block.make_block(result)\n\n        new_items.append(block.mgr_locs)\n        agg_blocks.append(agg_block)\n\n    if not agg_blocks:\n        raise ValueError(\"No numeric types to aggregate\")\n\n    agg_items = data.items.take(np.concatenate(new_items))\n\n    for blk, mgr_locs in zip(agg_blocks, new_items):\n        blk.mgr_locs = Index(mgr_locs)\n\n    return agg_blocks, agg_items",
            "import_list": [
                "from typing import List, Tuple, Union",
                "import numpy as np",
                "import pandas as pd",
                "from pandas.core.internals import Block",
                "from pandas.core.indexing import IndexingMixin",
                "from pandas.core.indexes.base import Index",
                "from pandas.core.dtypes.common import is_numeric_dtype",
                "from pandas.core.groupby.generic import DataFrameGroupBy",
                "from pandas.core.arrays.integer import IntegerArray",
                "from pandas.core.dtypes.dtypes import Int64Dtype"
            ]
        }
    ]
}