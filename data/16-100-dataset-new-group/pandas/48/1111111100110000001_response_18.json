{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # ... function implementation ...\n\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    split_items: List[np.ndarray] = []\n    split_frames: List[DataFrame] = []\n\n    no_result = object()\n    for block in data.blocks:\n        result = no_result\n        locs = block.mgr_locs.as_array\n\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            if alt is None and how != \"ohlc\":\n                deleted_items.append(locs)\n                continue\n            else:\n                obj = self.obj[data.items[locs]]\n\n                if obj.shape[1] == 1:\n                    # Avoid call to self.values that can occur in DataFrame\n                    # reductions; see GH#28949\n                    obj = obj.iloc[:, 0]\n\n                s = get_groupby(obj, self.grouper)\n                try:\n                    result = s.aggregate(lambda x: alt(x, axis=self.axis))\n                except TypeError:\n                    deleted_items.append(locs)\n                    continue\n                else:\n                    result = cast(DataFrame, result)\n\n                    if len(result._data.blocks) != 1:\n                        split_items.append(locs)\n                        split_frames.append(result)\n                        continue\n\n                    result_data = result._data.blocks[0]\n                    result_values = result_data.values\n\n                    if isinstance(result_values, np.ndarray) and result_values.dtype.kind == 'f':\n                        # Check if the results are float type\n                        result_values = maybe_convert_objects(result_values)\n\n                    result_values = maybe_downcast_numeric(result_values, block.dtype)\n                    result = block.make_block(result_values)\n\n        if not isinstance(result, DataFrame):\n            new_items.append(locs)\n            agg_blocks.append(result)\n\n    if not (agg_blocks or split_frames):\n        raise DataError(\"No numeric types to aggregate\")",
            "import_list": []
        }
    ]
}