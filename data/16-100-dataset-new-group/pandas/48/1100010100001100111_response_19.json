{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    data = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks = []\n    new_items = []\n    deleted_items = []\n\n    no_result = object()\n\n    for i, block in enumerate(data.blocks):\n        result = no_result\n        mgr_locs = block.mgr_locs.as_array\n\n        group = get_groupby(self.obj[block.items], self.grouper)\n            \n        try:\n            if callable(how):\n                try:\n                    result = np.array([group.apply(how)], dtype=block.dtype)\n                except NotImplementedError:\n                    result = no_result\n            else:\n                result, _ = self.grouper.aggregate(\n                    group, how, axis=1, min_count=min_count\n                )\n        except NotImplementedError:\n            if alt is None:\n                if how == \"ohlc\":\n                    deleted_items.append(mgr_locs)\n                    continue\n            else:\n                try:\n                    result = np.array([group.apply(lambda x: alt(x, axis=self.axis))])\n                except TypeError:\n                    deleted_items.append(mgr_locs)\n                    continue\n\n        if result is not no_result:\n            agg_blocks.append(block.make_block(result))\n\n    if not agg_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n\n    # Combine the agg_blocks and other operations as needed\n\n    return agg_blocks, data.items",
            "import_list": []
        }
    ]
}