{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # Get the data to aggregate\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    # Ensure that nullable integer data is converted to a standard int64 type\n    if data.blocks and isinstance(data.blocks[0], ExtensionBlock) and pd.api.types.is_nullable_integer_dtype(data.blocks[0].dtype):\n        data = data.convert_blocks(maybe_convert_objects)\n\n    # Perform aggregation\n    result = self.grouper.aggregate(data.values, how, axis=1, min_count=min_count)\n\n    agg_blocks = []\n    new_items = []\n\n    for idx, (labels, func, data_items, locs) in enumerate(result):\n        if isinstance(data.items, pd.MultiIndex):\n            labels = self._concat_index_labels(alist, axis=1)\n        if len(labels) > 0:\n            idx = self.obj._galley_helper(\n                result, group_axes, key=\"values\", is_numeric=True, columns=labels\n            )\n            new_items.append(labels) \n\n        agg_blocks.append(make_block(idx.dtypes).make_block(\n            [func(data.get_one_group(name)) for name in labels], new_items, fastpath=True\n        ))\n\n    # reset the locs in the blocks to correspond to our current ordering\n    indexer = np.concatenate(new_items)\n    agg_items = data.items.take(np.sort(indexer))\n\n    offset = 0\n    for blk in agg_blocks:\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = indexer[offset : (offset + loc)]\n        offset += loc\n\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}