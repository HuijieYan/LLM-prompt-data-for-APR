{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data, _, converted = maybe_convert_objects(\n            data, copy=False, convert_numeric=True, convert_bool=False\n        )\n\n    agg_blocks = []\n    new_items = []\n    deleted_items = []\n    split_items = []\n    split_frames = []\n\n    no_result = object()\n    for block in data.blocks:\n        # Avoid inheriting result from earlier in the loop\n        result = no_result\n        locs = block.mgr_locs.as_array\n\n        has_numeric = hasattr(block.dtype, \"to_numpy_dtype\")\n        if has_numeric and converted:\n            try:\n                df_block = DataFrame({\"__dummy__\": block.values})\n                result, _ = df.grouper.aggregate(block.values, how, axis=1, min_count=min_count)\n                if alt is not None:\n                    result = np.apply_along_axis(alt, axis=1, arr=block.values, is_numeric=True)\n            except AttributeError as err:\n                continue\n\n            if result is not no_result:\n                block = block.make_block(result[\"__dummy__\"].values)\n                result = result[\"__dummy__\"].values\n            elif has_numeric:\n                deleted_items.append(locs)\n                continue\n        else:\n            try:\n                result, _ = self.grouper.aggregate(\n                    block.values, how, axis=1, min_count=min_count\n                )\n            except (TypeError, AttributeError, ValueError) as err:\n                continue\n\n        if result is not no_result:\n            new_items.append(locs)\n            agg_blocks.append(block)\n\n    if len(agg_blocks) == 0:\n        raise DataError(\"No numeric types to aggregate\")\n\n    agg_blocks, new_items = zip(*sorted(zip(agg_blocks, new_items), key=lambda x: x[1]))\n    new_items = np.concatenate(new_items)\n    reordered_indexer = np.zeros(len(new_items), dtype=np.uintp)\n    indexer = list(new_items)\n    indexer_to_arg_tup = {v: (True, i) for i, v in enumerate(indexer)}\n    new_items, indexer = np.unique(indexer, return_inverse=True, return_inverse=True)\n    indexer = indexer.astype(int)\n    indexer_to_arg_tup.update({v: (False, k) for k, v in enumerate(new_items)})\n\n    for block in agg_blocks:\n        loc = len(block.mgr_locs)\n        indexer_to_arg = np.array(\n            [indexer_to_arg_tup[v] for v in block.mgr_locs.as_array], dtype=bool\n        )\n        indexer_to_arg &= reordered_indexer[: len(indexer_to_arg)]\n        reordered_indexer[: len(indexer_to_arg)] += indexer_to_arg\n        block.mgr_locs = indexer[np.array(reordered_indexer[:loc], dtype=bool)]\n    \n    return list(agg_blocks), np.array(new_items, dtype=np.object_)",
            "import_list": []
        }
    ]
}