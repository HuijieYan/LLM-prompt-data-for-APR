{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.select_dtypes(include=[np.number], copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[Block] = []\n\n    for block in data.blocks:\n        try:\n            result = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            if alt is not None:\n                obj = self.obj[block.mgr_locs]\n                s = get_groupby(obj, self.grouper)\n                result = s.aggregate(lambda x: alt(x, axis=self.axis))\n            else:\n                continue\n\n        if not isinstance(result, (DataFrame, np.ndarray)):\n            continue\n\n        if isinstance(result, DataFrame):     \n            result = result.to_numpy()\n\n        if len(result.shape) == 1:\n            result = result.reshape(1, -1)\n\n        agg_block = make_block(result, block.items, klass=Block, placement=block.mgr_locs)\n\n        new_items.append(agg_block)\n        agg_blocks.append(agg_block)\n\n    if not agg_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n\n    # reset the locs in the blocks to correspond to our current ordering\n    idx = np.concatenate([blk.mgr_locs for blk in new_items])\n    idx = np.argsort(idx)\n    agg_items = data.items.take(idx)\n\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}