{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ) -> \"Tuple[List[Block], Index]\":\n        data: BlockManager = self._get_data_to_aggregate()\n\n        if numeric_only:\n            data = data.get_numeric_data(copy=False)\n\n        manager = self.obj._data\n\n        agg_blocks: List[Block] = []\n        agg_items: List[int] = []\n        deleted_items: List[int] = []\n\n        for locs, block in data.items():\n            try:\n                result, _ = self.grouper.aggregate(block, how, axis=self.axis, min_count=min_count, mgr=manager)\n            except (NotImplementedError, SpecificationError) as e:\n                # handle special cases for specific aggregation functions\n                if how in ('ohlc', 'median', 'std'):\n                    if alt is not None:\n                        # use the alternate method if available\n                        result = alt(block)\n                        type_needed = type(result)\n                    else:\n                        raise e\n                elif how == 'mean':\n                    # handle mean aggregation for nullable integers\n                    result = block.mean()\n                    type_needed = float\n                else:\n                    # for other cases, raise the error\n                    raise e\n\n                result = maybe_convert_objects(result, convert_string=False, convert_integer=True)\n                new_block = make_block(result, placement=block.mgr_locs, klass=type_needed)\n                agg_blocks.append(new_block)\n            else:\n                if isinstance(result, DataFrame):\n                    # handle the case of split object blocks\n                    split_block = make_block(result, placement=block.mgr_locs, klass=result.__class__)\n                    agg_blocks.append(split_block)\n                else:\n                    agg_blocks.append(result)\n\n        # Handle deletion and item aggregation here if necessary\n\n        return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}