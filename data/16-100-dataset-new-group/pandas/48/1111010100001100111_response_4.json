{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.3.3": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ) -> \"Tuple[List[Block], Index]\":\n        # ... (existing code)\n\n        for block in data.blocks:\n            # ... (existing code)\n\n                if result is not no_result:\n                    # ... (existing code)\n\n                    if block.is_extension:\n                        # Fix the conditional handling to appropriately manage nullable integers (Int64)\n                        if pd.api.types.is_nullable_dtype(result.dtype):\n                            result = maybe_convert_objects(result,\n                                                           try_float=not pd.api.types.is_integer_dtype(result.dtype))\n                        # Other handling for non-extension blocks\n                        else:\n                            result = maybe_downcast_numeric(result, block.dtype)\n\n                        # Extension block handling for nullable integers\n                        agg_block: Block = block.make_block(result)\n                    else:\n                        # Handling for non-extension blocks\n                        result = maybe_downcast_numeric(result, block.dtype)\n                        agg_block: Block = block.make_block(result)\n\n                    new_items.append(locs)\n                    agg_blocks.append(agg_block)\n\n        # ... (existing code)\n\n        return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}