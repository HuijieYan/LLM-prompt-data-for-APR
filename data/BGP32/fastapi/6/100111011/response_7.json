{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        for field in required_params:\n            alias = field.alias\n            value: Any = []\n            if received_body is not None:\n                if field.shape and isinstance(received_body, FormData):\n                    for key, val in received_body.items():\n                        if key == alias:\n                            value.append(val)\n                else:\n                    value.append(received_body.get(alias))\n            if value:\n                if (\n                    isinstance(field_info, params.File)\n                    and lenient_issubclass(field.type_, bytes)\n                    and isinstance(value, UploadFile)\n                ):\n                    value = await value.read()\n                elif (\n                    field.shape\n                    and isinstance(field_info, params.File)\n                    and lenient_issubclass(field.type_, bytes)\n                    and isinstance(value, sequence_types)\n                ):\n                    awaitables = [sub_value.read() for sub_value in value]\n                    contents = await asyncio.gather(*awaitables)\n                    value = sequence_shape_to_type[field.shape](contents)\n                v_, errors_ = field.validate(value, values, loc=(\"body\", alias))\n                if isinstance(errors_, ErrorWrapper):\n                    errors.append(errors_)\n                elif isinstance(errors_, list):\n                    errors.extend(errors_)\n                else:\n                    values[field.name] = v_\n            else:\n                if field.required:\n                    if PYDANTIC_1:\n                        errors.append(\n                            ErrorWrapper(MissingError(), loc=(\"body\", alias))\n                        )\n                    else:  # pragma: nocover\n                        errors.append(\n                            ErrorWrapper(  # type: ignore\n                                MissingError(),\n                                loc=(\"body\", alias),\n                                config=BaseConfig,\n                            )\n                        )\n                else:\n                    values[field.name] = deepcopy(field.default)\n    return values, errors",
            "import_list": []
        }
    ]
}