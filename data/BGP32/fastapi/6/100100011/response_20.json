{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n        required_params: List[ModelField],\n        received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    for field in required_params:\n        alias = field.alias\n        value = None\n        if received_body is not None:\n            if field.shape in sequence_shapes and isinstance(received_body, FormData):\n                values[alias] = received_body.getlist(alias)\n            else:\n                value = received_body.get(alias)\n                if field.required and value is None:\n                    errors.append(ErrorWrapper(MissingError(), loc=(\"body\", alias)))\n                else:\n                    if value in [None, \"\", []]:\n                        values[alias] = deepcopy(field.default)\n                    else:\n                        if (\n                            isinstance(field_info, params.File)\n                            and lenient_issubclass(field.type_, bytes)\n                            and isinstance(value, UploadFile)\n                        ):\n                            value = await value.read()\n                        v_, errors_ = field.validate(value, values, loc=(\"body\", alias))\n                        if isinstance(errors_, ErrorWrapper):\n                            errors.append(errors_)\n                        elif isinstance(errors_, list):\n                            errors.extend(errors_)\n                        else:\n                            values[field.name] = v_\n    return values, errors",
            "import_list": []
        }
    ]
}