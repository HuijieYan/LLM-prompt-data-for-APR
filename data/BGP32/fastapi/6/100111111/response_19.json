{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        first_field = required_params[0]\n        single_field = len(required_params) == 1 and not getattr(get_field_info(first_field), \"embed\", None)\n\n        for field in required_params:\n            key = field.alias\n            value: Any = None\n            if received_body is not None:\n                if field.shape in sequence_shapes and isinstance(received_body, FormData):\n                    if single_field:\n                        value = [received_body.getlist(key)]\n                    else:\n                        value = received_body.getlist(key)\n                else:\n                    if single_field:\n                        value = [received_body.get(key)]\n                    else:\n                        value = received_body.get(key)\n\n            if value is None or (isinstance(get_field_info(field), params.Form) and value == \"\") or (\n                isinstance(get_field_info(field), params.Form)\n                and field.shape in sequence_shapes\n                and len(value) == 0\n            ):\n                if field.required:\n                    if PYDANTIC_1:\n                        errors.append(\n                            ErrorWrapper(MissingError(), loc=(\"body\", key))\n                        )\n                    else:  # pragma: nocover\n                        errors.append(\n                            ErrorWrapper(\n                                MissingError(),\n                                loc=(\"body\", key),\n                                config=BaseConfig,\n                            )\n                        )\n                else:\n                    values[field.name] = deepcopy(field.default)\n                continue\n\n            if field.shape in sequence_shapes:\n                if not isinstance(value, list):\n                    value = [value]\n\n            if (\n                isinstance(get_field_info(field), params.File)\n                and lenient_issubclass(field.type_, bytes)\n                and all(isinstance(v, UploadFile) for v in value)\n            ):\n                value = [await v.read() for v in value]\n\n            v_, errors_ = field.validate(value, values, loc=(\"body\", key))\n\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            else:\n                values[field.name] = v_\n\n    return values, errors",
            "import_list": []
        }
    ]
}