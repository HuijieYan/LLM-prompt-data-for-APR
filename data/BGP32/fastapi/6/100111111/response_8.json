{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    \n    if required_params and received_body:\n        repeated_keys = {}\n        \n        for field in required_params:\n            value = received_body.getlist(field.alias)\n            if value:\n                # Handle repeated values for the same key\n                if len(value) > 1:\n                    repeated_keys[field.alias] = value\n                    continue\n                \n                value = value[0]\n                \n                if isinstance(field.type_, list):\n                    values[field.name] = [value]\n                elif isinstance(field.type_, set):\n                    values[field.name] = {value}\n                elif isinstance(field.type_, tuple):\n                    values[field.name] = (value,)\n                else:\n                    values[field.name] = value\n    \n    if repeated_keys:\n        for key, value in repeated_keys.items():\n            field = next((f for f in required_params if f.alias == key), None)\n            if field:\n                if isinstance(field.type_, list):\n                    values[field.name] = value\n                elif isinstance(field.type_, set):\n                    values[field.name] = set(value)\n                elif isinstance(field.type_, tuple):\n                    values[field.name] = tuple(value)\n\n    return values, errors",
            "import_list": []
        }
    ]
}