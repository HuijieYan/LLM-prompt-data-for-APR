{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        for field in required_params:\n            if received_body is not None:\n                value: Any = None\n                if isinstance(received_body, FormData):\n                    if field.alias in received_body:\n                        if field.shape in sequence_shapes:\n                            value = received_body.getlist(field.alias)\n                        else:\n                            value = received_body.get(field.alias)\n                if value is None:\n                    if field.required:\n                        errors.append(\n                            ErrorWrapper(MissingError(), loc=(\"body\", field.alias))\n                        )\n                    else:\n                        values[field.name] = deepcopy(field.default)\n                else:\n                    if isinstance(value, list) and field.shape in sequence_shapes:\n                        if (\n                            isinstance(field.sub_fields[0].field_info, params.File)\n                            and lenient_issubclass(field.type_, bytes)\n                        ):\n                            awaitables = [item.read() for item in value]\n                            contents = await asyncio.gather(*awaitables)\n                            value = sequence_shape_to_type[field.shape](contents)\n                        else:\n                            v, e = field.validate(value, values, loc=(\"body\", field.alias))\n                            if isinstance(e, ErrorWrapper):\n                                errors.append(e)\n                            elif isinstance(e, list):\n                                errors.extend(e)\n                            else:\n                                values[field.name] = v\n                    else:\n                        v, e = field.validate(value, values, loc=(\"body\", field.alias))\n                        if isinstance(e, ErrorWrapper):\n                            errors.append(e)\n                        elif isinstance(e, list):\n                            errors.extend(e)\n                        else:\n                            values[field.name] = v\n    return values, errors",
            "import_list": []
        }
    ]
}