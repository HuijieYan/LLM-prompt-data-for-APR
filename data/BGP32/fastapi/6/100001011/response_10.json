{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        if isinstance(received_body, FormData):\n            items_dict = received_body.multi_items()\n            for key, values_list in items_dict:\n                for field in required_params:\n                    if field.alias == key:\n                        value = values_list if len(values_list) > 1 else values_list[0]\n                        # validation logic remains the same\n                        v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n                        if isinstance(errors_, ErrorWrapper):\n                            errors.append(errors_)\n                        elif isinstance(errors_, list):\n                            errors.extend(errors_)\n                        else:\n                            values[field.name] = v_\n                    else:\n                        if field.required:\n                            if PYDANTIC_1:\n                                errors.append(\n                                    ErrorWrapper(MissingError(), loc=(\"body\", field.alias))\n                                )\n                            else:  # pragma: nocover\n                                errors.append(\n                                    ErrorWrapper(  # type: ignore\n                                        MissingError(),\n                                        loc=(\"body\", field.alias),\n                                        config=BaseConfig,\n                                    )\n                                )\n                        else:\n                            values[field.name] = deepcopy(field.default)\n        else:\n            for field in required_params:\n                value = received_body.get(field.alias)\n                if value is None:\n                    if field.required:\n                        if PYDANTIC_1:\n                            errors.append(\n                                ErrorWrapper(MissingError(), loc=(\"body\", field.alias))\n                            )\n                        else:  # pragma: nocover\n                            errors.append(\n                                ErrorWrapper(  # type: ignore\n                                    MissingError(),\n                                    loc=(\"body\", field.alias),\n                                    config=BaseConfig,\n                                )\n                            )\n                    else:\n                        values[field.name] = deepcopy(field.default)\n                else:\n                    v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n                    if isinstance(errors_, ErrorWrapper):\n                        errors.append(errors_)\n                    elif isinstance(errors_, list):\n                        errors.extend(errors_)\n                    else:\n                        values[field.name] = v_\n\n    return values, errors",
            "import_list": []
        }
    ]
}