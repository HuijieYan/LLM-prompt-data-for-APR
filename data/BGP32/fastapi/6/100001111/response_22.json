{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[params.Param],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n\n    for field in required_params:\n        values[field.name] = None\n\n    if received_body is None:\n        return values, errors\n\n    for body_key, body_value in received_body.items():\n        for field_name in values:\n            if body_key == field_name:\n                if isinstance(body_value, list):\n                    values[field_name] = body_value\n                else:\n                    if values[field_name] is None:\n                        values[field_name] = body_value\n\n    for field in required_params:\n        if field.name not in values or values[field.name] is None:\n            if field.required:\n                errors.append(ErrorWrapper(params.MissingError(), loc=(\"body\", field.name)))\n            else:\n                values[field.name] = deepcopy(field.default)\n\n    for field in required_params:\n        value = values.get(field.name)\n        if isinstance(field, params.File) and isinstance(value, UploadFile):\n            values[field.name] = await value.read()\n        v_, errors_ = field.validate(value, values, loc=(\"body\", field.name))\n        if isinstance(errors_, ErrorWrapper):\n            errors.append(errors_)\n        elif isinstance(errors_, list):\n            errors.extend(errors_)\n        else:\n            values[field.name] = v_\n    \n    return values, errors",
            "import_list": [
                "import asyncio",
                "from copy import deepcopy",
                "from typing import Any, Dict, List, Optional, Tuple, Union",
                "from fastapi import params",
                "from pydantic import BaseModel",
                "from pydantic.error_wrappers import ErrorWrapper",
                "from starlette.datastructures import FormData, UploadFile"
            ]
        }
    ]
}