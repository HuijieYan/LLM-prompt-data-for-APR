{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    \n    if required_params:\n        field = required_params[0]\n        field_info = get_field_info(field)\n        embed = getattr(field_info, \"embed\", None)\n\n        if len(required_params) == 1 and not embed:\n            received_body = {field.alias: received_body}\n\n        for field in required_params:\n            values_list = []\n            if received_body is not None:\n                values_list = received_body.getlist(field.alias)\n\n            if not values_list:\n                if field.required:\n                    if PYDANTIC_1:\n                        errors.append(\n                            ErrorWrapper(MissingError(), loc=(\"body\", field.alias))\n                        )\n                    else:  \n                        errors.append(\n                            ErrorWrapper(MissingError(), loc=(\"body\", field.alias), config=BaseConfig)\n                        )\n                else:\n                    values[field.name] = deepcopy(field.default)\n            else:\n                if (\n                    isinstance(field_info, params.File)\n                    and lenient_issubclass(field.type_, bytes)\n                    and all(isinstance(value, UploadFile) for value in values_list)\n                ):\n                    values[field.name] = [await value.read() for value in values_list]\n                else:\n                    v_, errors_ = field.validate(values_list, values, loc=(\"body\", field.alias))\n                    if isinstance(errors_, ErrorWrapper):\n                        errors.append(errors_)\n                    elif isinstance(errors_, list):\n                        errors.extend(errors_)\n                    else:\n                        values[field.name] = v_\n\n    return values, errors",
            "import_list": []
        }
    ]
}