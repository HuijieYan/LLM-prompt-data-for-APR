{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    for field in required_params:\n        alias = field.alias\n        if isinstance(received_body, FormData):\n            values[alias] = received_body.getlist(alias)\n        else:\n            values[alias] = received_body.get(alias) if received_body is not None else None\n\n        field_info = get_field_info(field)\n        if values[alias] is None or values[alias] == \"\":\n            if field.required:\n                if PYDANTIC_1:\n                    errors.append(ErrorWrapper(MissingError(), loc=(\"body\", alias)))\n                else:\n                    errors.append(ErrorWrapper(MissingError(), loc=(\"body\", alias), config=BaseConfig))\n            else:\n                values.pop(alias, None)\n                values[field.name] = deepcopy(field.default)\n        elif isinstance(field_info, params.File) and lenient_issubclass(field.type_, bytes):\n            if field.shape in sequence_shapes:\n                awaitables = [uv.read() for uv in values[alias]]\n                contents = await asyncio.gather(*awaitables)\n                values[alias] = sequence_shape_to_type[field.shape](contents)\n            else:\n                values[alias] = await values[alias].read()\n        else:\n            if field.shape in sequence_shapes:\n                values[alias] = sequence_shape_to_type[field.shape](values[alias])\n\n        v_, errors_ = field.validate(values[alias], values, loc=(\"body\", alias))\n        if isinstance(errors_, ErrorWrapper):\n            errors.append(errors_)\n        elif isinstance(errors_, list):\n            errors.extend(errors_)\n        else:\n            values[field.name] = v_\n\n    return values, errors",
            "import_list": []
        }
    ]
}