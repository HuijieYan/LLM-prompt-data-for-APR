{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        for field in required_params:\n            if received_body is not None:\n                values[field.alias] = received_body.getlist(field.alias) if field.shape else received_body.get(field.alias)\n                if values[field.alias] is None:\n                    if field.required:\n                        errors.append(\n                            ErrorWrapper(MissingError(), loc=(\"body\", field.alias))\n                        )\n                    else:\n                        values[field.alias] = deepcopy(field.default)\n                elif (\n                    isinstance(field_info, params.File)\n                    and lenient_issubclass(field.type_, bytes)\n                    and isinstance(values[field.alias], UploadFile)\n                ):\n                    values[field.alias] = await values[field.alias].read()\n                elif (\n                    field.shape in sequence_shapes\n                    and isinstance(field_info, params.File)\n                    and lenient_issubclass(field.type_, bytes)\n                    and isinstance(values[field.alias], sequence_types)\n                ):\n                    awaitables = [sub_value.read() for sub_value in values[field.alias]]\n                    contents = await asyncio.gather(*awaitables)\n                    values[field.alias] = sequence_shape_to_type[field.shape](contents)\n    return values, errors",
            "import_list": []
        }
    ]
}