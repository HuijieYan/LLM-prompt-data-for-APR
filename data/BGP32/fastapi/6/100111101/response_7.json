{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n\trequired_params: List[ModelField],\n\treceived_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n\tvalues = {}\n\terrors = []\n\n\tif received_body is not None:\n\t\tfor field in required_params:\n\t\t\tvalue: Any = None\n\t\t\tif field.alias in received_body:\n\t\t\t\tvalue = received_body[field.alias] if isinstance(received_body, FormData) else field.type_(received_body[field.alias])\n\n\t\t\tif value is None or (isinstance(field_info, params.Form) and value == \"\"):\n\t\t\t\tif field.required:\n\t\t\t\t\terrors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias)))\n\t\t\t\telse:\n\t\t\t\t\tvalues[field.name] = deepcopy(field.default)\n\t\t\telse:\n\t\t\t\tif isinstance(field_info, params.File) and lenient_issubclass(field.type_, bytes) and isinstance(value, UploadFile):\n\t\t\t\t\tvalue = await value.read()\n\n\t\t\t\tv_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n\t\t\t\t\n\t\t\t\tif isinstance(errors_, ErrorWrapper):\n\t\t\t\t\terrors.append(errors_)\n\t\t\t\telif isinstance(errors_, list):\n\t\t\t\t\terrors.extend(errors_)\n\t\t\t\telse:\n\t\t\t\t\tvalues[field.name] = v_\n\n\treturn values, errors",
            "import_list": []
        }
    ]
}