{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n\n    values = {}\n    errors = []\n    sequence_shapes = {1}\n    \n    for field in required_params:\n        field_info = get_field_info(field)\n        value: Any = None\n        \n        if received_body is not None:\n            if field.shape in sequence_shapes and isinstance(received_body, FormData):\n                value = received_body.getlist(field.alias)\n            else:\n                value = received_body.get(field.alias) if received_body.get(field.alias) else None\n        \n        if value is None and field.required:\n            errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias)))\n        else:\n            if value is not None:\n                if isinstance(field_info, params.File) and lenient_issubclass(field.type_, bytes) and isinstance(value, UploadFile):\n                    value = await value.read()\n                elif field.shape in sequence_shapes and lenient_issubclass(field.type_, bytes):\n                    if isinstance(value, list):\n                        awaitables = [sub_value.read() for sub_value in value]\n                        contents = await asyncio.gather(*awaitables)\n                        if field.type_ is list:\n                            value = contents\n                        elif field.type_ is set:\n                            value = set(contents)\n                        elif field.type_ is tuple:\n                            value = tuple(contents)\n        \n            v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            else:\n                values[field.name] = v_\n\n    return values, errors",
            "import_list": [
                "import asyncio",
                "from copy import deepcopy",
                "from typing import Any, Dict, List, Optional, Tuple, Union",
                "from fastapi import params",
                "from fastapi.utils import get_field_info",
                "from pydantic.error_wrappers import ErrorWrapper",
                "from pydantic.errors import MissingError",
                "from pydantic.utils import lenient_issubclass",
                "from starlette.datastructures import FormData, UploadFile"
            ]
        }
    ]
}