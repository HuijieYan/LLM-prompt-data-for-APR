{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[params.Param],\n    received_body: Optional[Union[Dict[str, Any], params.Form]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    sequence_shapes = {1}\n    sequence_shape_to_type = {1: list}\n\n    if required_params:\n        for field in required_params:\n            field_info = get_field_info(field)\n            value: Any = None\n            received_value = received_body.getlist(field.alias) if isinstance(received_body, params.Form) else received_body.get(field.alias)\n        \n            if value is not None:\n                if isinstance(field_info, params.File) and isinstance(value, sequence_types) and any(isinstance(val, params.UploadFile) for val in value):\n                    value = await asyncio.gather(*[val.read() for val in value])\n                elif field.shape in sequence_shapes and any(isinstance(val, str) for val in value):\n                    value = sequence_shape_to_type[field.shape](value)\n                \n            if len(value) == 0:\n                if field.required:\n                    errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias)))\n                else:\n                    values[field.name] = deepcopy(field.default)\n            else:\n                v_, errors_ = await field.validate(value, values, loc=(\"body\", field.alias))\n                if isinstance(errors_, ErrorWrapper):\n                    errors.append(errors_)\n                elif isinstance(errors_, list):\n                    errors.extend(errors_)\n                else:\n                    values[field.name] = v_\n\n    return values, errors",
            "import_list": [
                "import asyncio",
                "from copy import deepcopy",
                "from typing import Any, Dict, List, Mapping, Optional, Sequence, Tuple, Union",
                "from fastapi import params",
                "from fastapi.utils import PYDANTIC_1, get_field_info",
                "from pydantic import BaseModel, sequence_types",
                "from pydantic.errors import MissingError",
                "from pydantic.error_wrappers import ErrorWrapper"
            ]
        }
    ]
}