{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    \n    if required_params:\n        field = required_params[0]\n        field_info = get_field_info(field)\n        embed = getattr(field_info, \"embed\", None)\n        \n        for field in required_params:\n            value = None\n            if received_body is not None:\n                if field.shape in sequence_shapes and isinstance(\n                    received_body, FormData\n                ):\n                    value = received_body.getlist(field.alias)\n                else:\n                    value = received_body.get(field.alias)\n\n                if value is None:\n                    if field.required:\n                        errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias)))\n                    else:\n                        values[field.name] = deepcopy(field.default)\n                        continue\n\n                if field.shape in sequence_shapes:\n                    if field_info.sub_fields:\n                        converted_values = []\n                        for val in value:\n                            v, e = field.validate(val, values, loc=(\"body\", field.alias))\n                            if isinstance(e, ErrorWrapper):\n                                errors.append(e)\n                            elif isinstance(e, list):\n                                errors.extend(e)\n                            else:\n                                converted_values.append(v)\n                        value = tuple(converted_values) if field_info.sub_fields[0].outer_type_ == tuple else set(converted_values)\n                    else:\n                        value = tuple(value)\n            \n            if isinstance(field_info, params.File) and lenient_issubclass(field.type_, bytes) and isinstance(value, UploadFile):\n                value = await value.read()\n            \n            v, e = field.validate(value, values, loc=(\"body\", field.alias))\n            if isinstance(e, ErrorWrapper):\n                errors.append(e)\n            elif isinstance(e, list):\n                errors.extend(e)\n            else:\n                values[field.name] = v\n\n    return values, errors",
            "import_list": []
        }
    ]
}