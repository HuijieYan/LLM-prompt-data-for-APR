{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    \n    for field in required_params:\n        value: Any = None\n        if received_body is not None:\n            if isinstance(received_body, FormData):\n                # Extract value based on field type and shape\n                if field.shape in (1, 2):\n                    value = received_body.getlist(field.alias)\n                else:\n                    value = received_body.get(field.alias)\n        \n        if value is None or value == \"\":\n            # If the value is missing or empty, handle based on field properties\n            if field.required:\n                errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias)))\n            elif getattr(field, \"default\", None) is not None:\n                values[field.name] = deepcopy(field.default)\n        else:\n            # Perform necessary value transformations\n            if field.shape == 1:\n                v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n            elif field.shape == 2:\n                value = set(value)\n                v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n            elif field.shape == 3:\n                value = tuple(value)                     \n                v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n            errors_ = errors_ if isinstance(errors_, list) else [errors_]\n            errors.extend(errors_)\n            values[field.name] = v_\n\n    return values, errors",
            "import_list": []
        }
    ]
}