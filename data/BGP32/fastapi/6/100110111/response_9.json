{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n\n    if required_params:\n        for field in required_params:\n            alias = field.alias\n            value = None\n\n            if received_body is not None:\n                if isinstance(received_body, FormData):\n                    value = received_body.getlist(alias) if field.shape in sequence_shapes else received_body.get(alias)\n\n            if value is None or (isinstance(field_info, params.Form) and (not value or value == [\"\"])):\n                if field.required:\n                    errors.append(\n                        ErrorWrapper(MissingError(), loc=(\"body\", alias))\n                    )\n                else:\n                    values[field.name] = deepcopy(field.default)\n            else:\n                if field_info.embed and lenient_issubclass(field.type_, bytes):\n                    if field.shape in sequence_shapes:\n                        awaitables = [item.read() for item in value]\n                        contents = await asyncio.gather(*awaitables)\n                        value = sequence_shape_to_type[field.shape](contents)\n                    else:\n                        if isinstance(value, UploadFile):\n                            value = await value.read()\n\n                v, error = field.validate(value, values, loc=(\"body\", alias))\n                \n                if isinstance(error, ErrorWrapper):\n                    errors.append(error)\n                elif isinstance(error, list):\n                    errors.extend(error)\n                else:\n                    values[field.name] = v\n\n    return values, errors",
            "import_list": []
        }
    ]
}