{
    "fastapi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 6,
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if received_body is None:\n        return values, errors\n\n    for field in required_params:\n        value = received_body.getlist(field.alias)\n\n        if (\n            len(value) == 0\n            and isinstance(field_info, params.Form)\n            and field.default is None\n        ):\n            if field.required:\n                errors.append(\n                    ErrorWrapper(MissingError(), loc=(\"body\", field.alias))\n                )\n            else:\n                values[field.name] = field.default\n            continue\n\n        if isinstance(field_info, params.File):\n            if isinstance(field.type_, bytes):\n                value = [await file.read() for file in value]\n            else:\n                errors.append(\n                    ErrorWrapper(ValueError(\"Files must be bytes\"), loc=(\"body\", field.alias))\n                )\n                return values, errors\n\n        result, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n        if errors_:\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n        else:\n            values[field.name] = result\n\n    return values, errors",
            "import_list": []
        }
    ]
}