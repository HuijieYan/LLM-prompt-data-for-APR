{
    "black:10": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/black_10/blib2to3/pgen2/driver.py": {
            "buggy_functions": [
                {
                    "function_name": "_partially_consume_prefix",
                    "function_code": "def _partially_consume_prefix(self, prefix, column):\n    lines = []\n    current_line = \"\"\n    current_column = 0\n    wait_for_nl = False\n    for char in prefix:\n        current_line += char\n        if wait_for_nl:\n            if char == '\\n':\n                if current_line.strip() and current_column < column:\n                    res = ''.join(lines)\n                    return res, prefix[len(res):]\n\n                lines.append(current_line)\n                current_line = \"\"\n                current_column = 0\n                wait_for_nl = False\n        elif char == ' ':\n            current_column += 1\n        elif char == '\\t':\n            current_column += 4\n        elif char == '\\n':\n            # unexpected empty line\n            current_column = 0\n        else:\n            # indent is finished\n            wait_for_nl = True\n    return ''.join(lines), current_line\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 117,
                    "end_line": 144,
                    "variables": {
                        "lines": [
                            144,
                            130,
                            118,
                            127
                        ],
                        "current_line": [
                            130,
                            131,
                            144,
                            119,
                            123,
                            126
                        ],
                        "current_column": [
                            132,
                            135,
                            137,
                            140,
                            120,
                            126
                        ],
                        "wait_for_nl": [
                            121,
                            124,
                            133,
                            143
                        ],
                        "char": [
                            134,
                            136,
                            138,
                            122,
                            123,
                            125
                        ],
                        "prefix": [
                            128,
                            122
                        ],
                        "current_line.strip": [
                            126
                        ],
                        "column": [
                            126
                        ],
                        "res": [
                            128,
                            127
                        ],
                        "join": [
                            144,
                            127
                        ],
                        "len": [
                            128
                        ],
                        "lines.append": [
                            130
                        ]
                    },
                    "filtered_variables": {
                        "lines": [
                            144,
                            130,
                            118,
                            127
                        ],
                        "current_line": [
                            130,
                            131,
                            144,
                            119,
                            123,
                            126
                        ],
                        "current_column": [
                            132,
                            135,
                            137,
                            140,
                            120,
                            126
                        ],
                        "wait_for_nl": [
                            121,
                            124,
                            133,
                            143
                        ],
                        "char": [
                            134,
                            136,
                            138,
                            122,
                            123,
                            125
                        ],
                        "prefix": [
                            128,
                            122
                        ],
                        "current_line.strip": [
                            126
                        ],
                        "column": [
                            126
                        ],
                        "res": [
                            128,
                            127
                        ],
                        "join": [
                            144,
                            127
                        ],
                        "lines.append": [
                            130
                        ]
                    },
                    "diff_line_number": 134,
                    "class_data": {
                        "signature": "class Driver(object)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, grammar, convert=None, logger=None):\n    self.grammar = grammar\n    if logger is None:\n        logger = logging.getLogger()\n    self.logger = logger\n    self.convert = convert",
                            "def parse_tokens(self, tokens, debug=False):\n    \"\"\"Parse a series of tokens and return the syntax tree.\"\"\"\n    p = parse.Parser(self.grammar, self.convert)\n    p.setup()\n    lineno = 1\n    column = 0\n    indent_columns = []\n    type = value = start = end = line_text = None\n    prefix = ''\n    for quintuple in tokens:\n        (type, value, start, end, line_text) = quintuple\n        if start != (lineno, column):\n            assert (lineno, column) <= start, ((lineno, column), start)\n            (s_lineno, s_column) = start\n            if lineno < s_lineno:\n                prefix += '\\n' * (s_lineno - lineno)\n                lineno = s_lineno\n                column = 0\n            if column < s_column:\n                prefix += line_text[column:s_column]\n                column = s_column\n        if type in (tokenize.COMMENT, tokenize.NL):\n            prefix += value\n            (lineno, column) = end\n            if value.endswith('\\n'):\n                lineno += 1\n                column = 0\n            continue\n        if type == token.OP:\n            type = grammar.opmap[value]\n        if debug:\n            self.logger.debug('%s %r (prefix=%r)', token.tok_name[type], value, prefix)\n        if type == token.INDENT:\n            indent_columns.append(len(value))\n            _prefix = prefix + value\n            prefix = ''\n            value = ''\n        elif type == token.DEDENT:\n            _indent_col = indent_columns.pop()\n            (prefix, _prefix) = self._partially_consume_prefix(prefix, _indent_col)\n        if p.addtoken(type, value, (prefix, start)):\n            if debug:\n                self.logger.debug('Stop.')\n            break\n        prefix = ''\n        if type in {token.INDENT, token.DEDENT}:\n            prefix = _prefix\n        (lineno, column) = end\n        if value.endswith('\\n'):\n            lineno += 1\n            column = 0\n    else:\n        raise parse.ParseError('incomplete input', type, value, (prefix, start))\n    return p.rootnode",
                            "def parse_stream_raw(self, stream, debug=False):\n    \"\"\"Parse a stream and return the syntax tree.\"\"\"\n    tokens = tokenize.generate_tokens(stream.readline)\n    return self.parse_tokens(tokens, debug)",
                            "def parse_stream(self, stream, debug=False):\n    \"\"\"Parse a stream and return the syntax tree.\"\"\"\n    return self.parse_stream_raw(stream, debug)",
                            "def parse_file(self, filename, encoding=None, debug=False):\n    \"\"\"Parse a file and return the syntax tree.\"\"\"\n    with io.open(filename, 'r', encoding=encoding) as stream:\n        return self.parse_stream(stream, debug)",
                            "def parse_string(self, text, debug=False):\n    \"\"\"Parse a string and return the syntax tree.\"\"\"\n    tokens = tokenize.generate_tokens(io.StringIO(text).readline)\n    return self.parse_tokens(tokens, debug)",
                            "def _partially_consume_prefix(self, prefix, column):\n    lines = []\n    current_line = ''\n    current_column = 0\n    wait_for_nl = False\n    for char in prefix:\n        current_line += char\n        if wait_for_nl:\n            if char == '\\n':\n                if current_line.strip() and current_column < column:\n                    res = ''.join(lines)\n                    return (res, prefix[len(res):])\n                lines.append(current_line)\n                current_line = ''\n                current_column = 0\n                wait_for_nl = False\n        elif char == ' ':\n            current_column += 1\n        elif char == '\\t':\n            current_column += 4\n        elif char == '\\n':\n            current_column = 0\n        else:\n            wait_for_nl = True\n    return (''.join(lines), current_line)"
                        ],
                        "constructor_variables": [
                            "self.grammar = grammar",
                            "self.logger = logger",
                            "self.convert = convert"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, grammar, convert=None, logger=None)",
                            "parse_tokens(self, tokens, debug=False)",
                            "parse_stream_raw(self, stream, debug=False)",
                            "parse_stream(self, stream, debug=False)",
                            "parse_file(self, filename, encoding=None, debug=False)",
                            "parse_string(self, text, debug=False)",
                            "_partially_consume_prefix(self, prefix, column)"
                        ],
                        "class_level_variable_names": [],
                        "constructor_variable_names": [
                            "grammar",
                            "logger",
                            "convert"
                        ]
                    },
                    "used_imports": [],
                    "variable_values": [
                        [
                            {
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "'    # comment\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "current_line.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "lines": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "current_line": {
                                    "variable_value": "'    # comment\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "current_column": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": "'\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "prefix": {
                                    "variable_value": "'    # comment\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "current_line.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x7fbbf4514970>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fbbf51816c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_line.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "lines": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "current_line": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_column": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_line.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x7fbbf6c622f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fbbf450ad40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "'\\t# comment\\n\\t'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "current_line.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "lines": {
                                    "variable_value": "['\\t# comment\\n']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "current_line": {
                                    "variable_value": "'\\t'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "current_column": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": "'\\t'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "prefix": {
                                    "variable_value": "'\\t# comment\\n\\t'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "current_line.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x7fbbf67d1730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fbbf456c3c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_line.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "lines": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "current_line": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_column": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_line.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x7fbbf6c622f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fbbf456c740>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "'        # comment\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                },
                                "current_line.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "lines": {
                                    "variable_value": "['        # comment\\n']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "current_line": {
                                    "variable_value": "'    '",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "current_column": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "prefix": {
                                    "variable_value": "'        # comment\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                },
                                "current_line.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x7fbbf4529bb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fbbf4569f40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_line.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "lines": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "current_line": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_column": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_line.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x7fbbf6c622f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fbbf4514e00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "'    # comment\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "current_line.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "lines": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "current_line": {
                                    "variable_value": "'    # comment\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "current_column": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": "'\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "prefix": {
                                    "variable_value": "'    # comment\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "current_line.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x7fbbf4535930>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fbbf450a7c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_line.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "lines": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "current_line": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_column": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_line.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x7fbbf6c622f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fbbf4569f00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "'    # comment\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "current_line.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "lines": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "current_line": {
                                    "variable_value": "'    # comment\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "current_column": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": "'\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "prefix": {
                                    "variable_value": "'    # comment\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "current_line.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x7fc482560270>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fc482556680>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_line.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "lines": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "current_line": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_column": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_line.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x7fc484cfe2f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fc482550f00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "'\\t# comment\\n\\t'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "current_line.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "lines": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "current_line": {
                                    "variable_value": "'\\t# comment\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "current_column": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": "'\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "prefix": {
                                    "variable_value": "'\\t# comment\\n\\t'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "current_line.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x7fc482557770>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fc482550b40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_line.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "lines": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "current_line": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_column": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_line.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x7fc484cfe2f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fc4825b1080>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "'\\t\\t# comment\\n\\t'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "current_line.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "lines": {
                                    "variable_value": "['\\t\\t# comment\\n']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "current_line": {
                                    "variable_value": "'\\t'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "current_column": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": "'\\t'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "prefix": {
                                    "variable_value": "'\\t\\t# comment\\n\\t'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "current_line.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x7fc4848517b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fc4825a9d40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_line.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "lines": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "current_line": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_column": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_line.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x7fc484cfe2f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fc4825ae440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "'        # comment\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                },
                                "current_line.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "lines": {
                                    "variable_value": "['        # comment\\n']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "current_line": {
                                    "variable_value": "'    '",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "current_column": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "prefix": {
                                    "variable_value": "'        # comment\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                },
                                "current_line.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x7fc48254dab0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fc4825aebc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "current_column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_line.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "lines": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "current_line": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_column": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_for_nl": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "char": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "current_line.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x7fc484cfe2f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines.append": {
                                    "variable_value": "<built-in method append of list object at 0x7fc4825aec40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "def _generate_pickle_name(gt, cache_dir=None):\n    head, tail = os.path.splitext(gt)\n    if tail == \".txt\":\n        tail = \"\"\n    name = head + tail + \".\".join(map(str, sys.version_info)) + \".pickle\"\n    if cache_dir:\n        return os.path.join(cache_dir, os.path.basename(name))\n    else:\n        return name",
                        "signature": "_generate_pickle_name(gt, cache_dir=None)"
                    },
                    {
                        "code": "def load_grammar(gt=\"Grammar.txt\", gp=None,\n                 save=True, force=False, logger=None):\n    \"\"\"Load the grammar (maybe from a pickle).\"\"\"\n    if logger is None:\n        logger = logging.getLogger()\n    gp = _generate_pickle_name(gt) if gp is None else gp\n    if force or not _newer(gp, gt):\n        logger.info(\"Generating grammar tables from %s\", gt)\n        g = pgen.generate_grammar(gt)\n        if save:\n            logger.info(\"Writing grammar tables to %s\", gp)\n            try:\n                g.dump(gp)\n            except OSError as e:\n                logger.info(\"Writing failed: %s\", e)\n    else:\n        g = grammar.Grammar()\n        g.load(gp)\n    return g",
                        "signature": "load_grammar(gt='Grammar.txt', gp=None, save=True, force=False, logger=None)"
                    },
                    {
                        "code": "def _newer(a, b):\n    \"\"\"Inquire whether file a was written since file b.\"\"\"\n    if not os.path.exists(a):\n        return False\n    if not os.path.exists(b):\n        return True\n    return os.path.getmtime(a) >= os.path.getmtime(b)",
                        "signature": "_newer(a, b)"
                    },
                    {
                        "code": "def load_packaged_grammar(package, grammar_source, cache_dir=None):\n    \"\"\"Normally, loads a pickled grammar by doing\n        pkgutil.get_data(package, pickled_grammar)\n    where *pickled_grammar* is computed from *grammar_source* by adding the\n    Python version and using a ``.pickle`` extension.\n\n    However, if *grammar_source* is an extant file, load_grammar(grammar_source)\n    is called instead. This facilitates using a packaged grammar file when needed\n    but preserves load_grammar's automatic regeneration behavior when possible.\n\n    \"\"\"\n    if os.path.isfile(grammar_source):\n        gp = _generate_pickle_name(grammar_source, cache_dir) if cache_dir else None\n        return load_grammar(grammar_source, gp=gp)\n    pickled_name = _generate_pickle_name(os.path.basename(grammar_source), cache_dir)\n    data = pkgutil.get_data(package, pickled_name)\n    g = grammar.Grammar()\n    g.loads(data)\n    return g",
                        "signature": "load_packaged_grammar(package, grammar_source, cache_dir=None)"
                    },
                    {
                        "code": "def main(*args):\n    \"\"\"Main program, when run as a script: produce grammar pickle files.\n\n    Calls load_grammar for each argument, a path to a grammar text file.\n    \"\"\"\n    if not args:\n        args = sys.argv[1:]\n    logging.basicConfig(level=logging.INFO, stream=sys.stdout,\n                        format='%(message)s')\n    for gt in args:\n        load_grammar(gt, save=True, force=True)\n    return True",
                        "signature": "main(*args)"
                    }
                ],
                "file_scope_classes": [
                    {
                        "class_declaration": "class Driver:",
                        "functions": [
                            {
                                "code": "def __init__(self, grammar, convert=None, logger=None):\n    self.grammar = grammar\n    if logger is None:\n        logger = logging.getLogger()\n    self.logger = logger\n    self.convert = convert",
                                "signature": "__init__(self, grammar, convert=None, logger=None)"
                            },
                            {
                                "code": "def parse_tokens(self, tokens, debug=False):\n    \"\"\"Parse a series of tokens and return the syntax tree.\"\"\"\n    # XXX Move the prefix computation into a wrapper around tokenize.\n    p = parse.Parser(self.grammar, self.convert)\n    p.setup()\n    lineno = 1\n    column = 0\n    indent_columns = []\n    type = value = start = end = line_text = None\n    prefix = \"\"\n    for quintuple in tokens:\n        type, value, start, end, line_text = quintuple\n        if start != (lineno, column):\n            assert (lineno, column) <= start, ((lineno, column), start)\n            s_lineno, s_column = start\n            if lineno < s_lineno:\n                prefix += \"\\n\" * (s_lineno - lineno)\n                lineno = s_lineno\n                column = 0\n            if column < s_column:\n                prefix += line_text[column:s_column]\n                column = s_column\n        if type in (tokenize.COMMENT, tokenize.NL):\n            prefix += value\n            lineno, column = end\n            if value.endswith(\"\\n\"):\n                lineno += 1\n                column = 0\n            continue\n        if type == token.OP:\n            type = grammar.opmap[value]\n        if debug:\n            self.logger.debug(\"%s %r (prefix=%r)\",\n                              token.tok_name[type], value, prefix)\n        if type == token.INDENT:\n            indent_columns.append(len(value))\n            _prefix = prefix + value\n            prefix = \"\"\n            value = \"\"\n        elif type == token.DEDENT:\n            _indent_col = indent_columns.pop()\n            prefix, _prefix = self._partially_consume_prefix(prefix, _indent_col)\n        if p.addtoken(type, value, (prefix, start)):\n            if debug:\n                self.logger.debug(\"Stop.\")\n            break\n        prefix = \"\"\n        if type in {token.INDENT, token.DEDENT}:\n            prefix = _prefix\n        lineno, column = end\n        if value.endswith(\"\\n\"):\n            lineno += 1\n            column = 0\n    else:\n        # We never broke out -- EOF is too soon (how can this happen???)\n        raise parse.ParseError(\"incomplete input\",\n                               type, value, (prefix, start))\n    return p.rootnode",
                                "signature": "parse_tokens(self, tokens, debug=False)"
                            },
                            {
                                "code": "def parse_stream_raw(self, stream, debug=False):\n    \"\"\"Parse a stream and return the syntax tree.\"\"\"\n    tokens = tokenize.generate_tokens(stream.readline)\n    return self.parse_tokens(tokens, debug)",
                                "signature": "parse_stream_raw(self, stream, debug=False)"
                            },
                            {
                                "code": "def parse_stream(self, stream, debug=False):\n    \"\"\"Parse a stream and return the syntax tree.\"\"\"\n    return self.parse_stream_raw(stream, debug)",
                                "signature": "parse_stream(self, stream, debug=False)"
                            },
                            {
                                "code": "def parse_file(self, filename, encoding=None, debug=False):\n    \"\"\"Parse a file and return the syntax tree.\"\"\"\n    with io.open(filename, \"r\", encoding=encoding) as stream:\n        return self.parse_stream(stream, debug)",
                                "signature": "parse_file(self, filename, encoding=None, debug=False)"
                            },
                            {
                                "code": "def parse_string(self, text, debug=False):\n    \"\"\"Parse a string and return the syntax tree.\"\"\"\n    tokens = tokenize.generate_tokens(io.StringIO(text).readline)\n    return self.parse_tokens(tokens, debug)",
                                "signature": "parse_string(self, text, debug=False)"
                            },
                            {
                                "code": "def _partially_consume_prefix(self, prefix, column):\n    lines = []\n    current_line = \"\"\n    current_column = 0\n    wait_for_nl = False\n    for char in prefix:\n        current_line += char\n        if wait_for_nl:\n            if char == '\\n':\n                if current_line.strip() and current_column < column:\n                    res = ''.join(lines)\n                    return res, prefix[len(res):]\n\n                lines.append(current_line)\n                current_line = \"\"\n                current_column = 0\n                wait_for_nl = False\n        elif char == ' ':\n            current_column += 1\n        elif char == '\\t':\n            current_column += 4\n        elif char == '\\n':\n            # unexpected empty line\n            current_column = 0\n        else:\n            # indent is finished\n            wait_for_nl = True\n    return ''.join(lines), current_line",
                                "signature": "_partially_consume_prefix(self, prefix, column)"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "__author__": [
                    14
                ],
                "__all__": [
                    16
                ],
                "object": [
                    30
                ],
                "self.grammar": [
                    33,
                    42
                ],
                "self": [
                    33,
                    36,
                    37,
                    101,
                    71,
                    105,
                    42,
                    110,
                    80,
                    83,
                    115
                ],
                "grammar": [
                    33,
                    204,
                    69,
                    174
                ],
                "logger": [
                    161,
                    162,
                    34,
                    35,
                    36,
                    165,
                    168,
                    172
                ],
                "logging.getLogger": [
                    162,
                    35
                ],
                "logging": [
                    216,
                    162,
                    35
                ],
                "self.logger": [
                    83,
                    36,
                    71
                ],
                "self.convert": [
                    42,
                    37
                ],
                "convert": [
                    37
                ],
                "p": [
                    96,
                    81,
                    42,
                    43
                ],
                "parse.Parser": [
                    42
                ],
                "parse": [
                    42,
                    94
                ],
                "p.setup": [
                    43
                ],
                "lineno": [
                    65,
                    44,
                    51,
                    52,
                    54,
                    55,
                    56,
                    90,
                    88,
                    63
                ],
                "column": [
                    66,
                    91,
                    45,
                    51,
                    52,
                    88,
                    57,
                    58,
                    59,
                    60,
                    126,
                    63
                ],
                "indent_columns": [
                    74,
                    46,
                    79
                ],
                "type": [
                    68,
                    69,
                    72,
                    73,
                    78,
                    47,
                    81,
                    50,
                    86,
                    61,
                    95
                ],
                "value": [
                    64,
                    69,
                    72,
                    74,
                    75,
                    77,
                    47,
                    81,
                    50,
                    89,
                    62,
                    95
                ],
                "start": [
                    47,
                    81,
                    50,
                    51,
                    52,
                    53,
                    95
                ],
                "end": [
                    88,
                    50,
                    63,
                    47
                ],
                "line_text": [
                    50,
                    59,
                    47
                ],
                "prefix": [
                    128,
                    72,
                    75,
                    76,
                    48,
                    80,
                    81,
                    85,
                    87,
                    55,
                    122,
                    59,
                    62,
                    95
                ],
                "quintuple": [
                    49,
                    50
                ],
                "tokens": [
                    100,
                    101,
                    49,
                    114,
                    115
                ],
                "s_lineno": [
                    56,
                    53,
                    54,
                    55
                ],
                "s_column": [
                    58,
                    59,
                    60,
                    53
                ],
                "tokenize.COMMENT": [
                    61
                ],
                "tokenize": [
                    114,
                    100,
                    61
                ],
                "tokenize.NL": [
                    61
                ],
                "value.endswith": [
                    64,
                    89
                ],
                "token.OP": [
                    68
                ],
                "token": [
                    68,
                    72,
                    73,
                    78,
                    86
                ],
                "grammar.opmap": [
                    69
                ],
                "debug": [
                    101,
                    70,
                    105,
                    110,
                    82,
                    115
                ],
                "self.logger.debug": [
                    83,
                    71
                ],
                "token.tok_name": [
                    72
                ],
                "token.INDENT": [
                    73,
                    86
                ],
                "indent_columns.append": [
                    74
                ],
                "len": [
                    128,
                    74
                ],
                "_prefix": [
                    80,
                    75,
                    87
                ],
                "token.DEDENT": [
                    86,
                    78
                ],
                "_indent_col": [
                    80,
                    79
                ],
                "indent_columns.pop": [
                    79
                ],
                "self._partially_consume_prefix": [
                    80
                ],
                "p.addtoken": [
                    81
                ],
                "parse.ParseError": [
                    94
                ],
                "p.rootnode": [
                    96
                ],
                "tokenize.generate_tokens": [
                    114,
                    100
                ],
                "stream.readline": [
                    100
                ],
                "stream": [
                    105,
                    100,
                    109,
                    110
                ],
                "self.parse_tokens": [
                    115,
                    101
                ],
                "self.parse_stream_raw": [
                    105
                ],
                "io.open": [
                    109
                ],
                "io": [
                    114,
                    109
                ],
                "filename": [
                    109
                ],
                "encoding": [
                    109
                ],
                "self.parse_stream": [
                    110
                ],
                "readline": [
                    114
                ],
                "io.StringIO": [
                    114
                ],
                "text": [
                    114
                ],
                "lines": [
                    144,
                    130,
                    118,
                    127
                ],
                "current_line": [
                    130,
                    131,
                    144,
                    119,
                    123,
                    126
                ],
                "current_column": [
                    132,
                    135,
                    137,
                    140,
                    120,
                    126
                ],
                "wait_for_nl": [
                    121,
                    124,
                    133,
                    143
                ],
                "char": [
                    134,
                    136,
                    138,
                    122,
                    123,
                    125
                ],
                "current_line.strip": [
                    126
                ],
                "res": [
                    128,
                    127
                ],
                "join": [
                    144,
                    151,
                    127
                ],
                "lines.append": [
                    130
                ],
                "head": [
                    148,
                    151
                ],
                "tail": [
                    148,
                    149,
                    150,
                    151
                ],
                "os.path.splitext": [
                    148
                ],
                "os.path": [
                    185,
                    199,
                    202,
                    148,
                    181,
                    183,
                    153
                ],
                "os": [
                    185,
                    199,
                    202,
                    148,
                    181,
                    183,
                    153
                ],
                "gt": [
                    163,
                    164,
                    165,
                    166,
                    148,
                    218,
                    219
                ],
                "name": [
                    153,
                    155,
                    151
                ],
                "map": [
                    151
                ],
                "str": [
                    151
                ],
                "sys.version_info": [
                    151
                ],
                "sys": [
                    216,
                    215,
                    223,
                    151
                ],
                "cache_dir": [
                    152,
                    153,
                    202,
                    200
                ],
                "os.path.join": [
                    153
                ],
                "os.path.basename": [
                    153,
                    202
                ],
                "gp": [
                    163,
                    164,
                    168,
                    200,
                    170,
                    201,
                    175
                ],
                "_generate_pickle_name": [
                    200,
                    202,
                    163
                ],
                "force": [
                    164
                ],
                "_newer": [
                    164
                ],
                "logger.info": [
                    168,
                    172,
                    165
                ],
                "g": [
                    166,
                    170,
                    204,
                    205,
                    174,
                    175,
                    176,
                    206
                ],
                "pgen.generate_grammar": [
                    166
                ],
                "pgen": [
                    166
                ],
                "save": [
                    167
                ],
                "g.dump": [
                    170
                ],
                "OSError": [
                    171
                ],
                "e": [
                    172
                ],
                "grammar.Grammar": [
                    204,
                    174
                ],
                "g.load": [
                    175
                ],
                "os.path.exists": [
                    181,
                    183
                ],
                "a": [
                    185,
                    181
                ],
                "b": [
                    185,
                    183
                ],
                "os.path.getmtime": [
                    185
                ],
                "os.path.isfile": [
                    199
                ],
                "grammar_source": [
                    200,
                    201,
                    202,
                    199
                ],
                "load_grammar": [
                    201,
                    219
                ],
                "pickled_name": [
                    202,
                    203
                ],
                "data": [
                    203,
                    205
                ],
                "pkgutil.get_data": [
                    203
                ],
                "pkgutil": [
                    203
                ],
                "package": [
                    203
                ],
                "g.loads": [
                    205
                ],
                "args": [
                    218,
                    214,
                    215
                ],
                "sys.argv": [
                    215
                ],
                "logging.basicConfig": [
                    216
                ],
                "logging.INFO": [
                    216
                ],
                "sys.stdout": [
                    216
                ],
                "__name__": [
                    222
                ],
                "sys.exit": [
                    223
                ],
                "int": [
                    223
                ],
                "main": [
                    223
                ]
            },
            "filtered_variables_in_file": {
                "__author__": [
                    14
                ],
                "__all__": [
                    16
                ],
                "self.grammar": [
                    33,
                    42
                ],
                "self": [
                    33,
                    36,
                    37,
                    101,
                    71,
                    105,
                    42,
                    110,
                    80,
                    83,
                    115
                ],
                "grammar": [
                    33,
                    204,
                    69,
                    174
                ],
                "logger": [
                    161,
                    162,
                    34,
                    35,
                    36,
                    165,
                    168,
                    172
                ],
                "logging.getLogger": [
                    162,
                    35
                ],
                "logging": [
                    216,
                    162,
                    35
                ],
                "self.logger": [
                    83,
                    36,
                    71
                ],
                "self.convert": [
                    42,
                    37
                ],
                "convert": [
                    37
                ],
                "p": [
                    96,
                    81,
                    42,
                    43
                ],
                "parse.Parser": [
                    42
                ],
                "parse": [
                    42,
                    94
                ],
                "p.setup": [
                    43
                ],
                "lineno": [
                    65,
                    44,
                    51,
                    52,
                    54,
                    55,
                    56,
                    90,
                    88,
                    63
                ],
                "column": [
                    66,
                    91,
                    45,
                    51,
                    52,
                    88,
                    57,
                    58,
                    59,
                    60,
                    126,
                    63
                ],
                "indent_columns": [
                    74,
                    46,
                    79
                ],
                "value": [
                    64,
                    69,
                    72,
                    74,
                    75,
                    77,
                    47,
                    81,
                    50,
                    89,
                    62,
                    95
                ],
                "start": [
                    47,
                    81,
                    50,
                    51,
                    52,
                    53,
                    95
                ],
                "end": [
                    88,
                    50,
                    63,
                    47
                ],
                "line_text": [
                    50,
                    59,
                    47
                ],
                "prefix": [
                    128,
                    72,
                    75,
                    76,
                    48,
                    80,
                    81,
                    85,
                    87,
                    55,
                    122,
                    59,
                    62,
                    95
                ],
                "quintuple": [
                    49,
                    50
                ],
                "tokens": [
                    100,
                    101,
                    49,
                    114,
                    115
                ],
                "s_lineno": [
                    56,
                    53,
                    54,
                    55
                ],
                "s_column": [
                    58,
                    59,
                    60,
                    53
                ],
                "tokenize.COMMENT": [
                    61
                ],
                "tokenize": [
                    114,
                    100,
                    61
                ],
                "tokenize.NL": [
                    61
                ],
                "value.endswith": [
                    64,
                    89
                ],
                "token.OP": [
                    68
                ],
                "token": [
                    68,
                    72,
                    73,
                    78,
                    86
                ],
                "grammar.opmap": [
                    69
                ],
                "debug": [
                    101,
                    70,
                    105,
                    110,
                    82,
                    115
                ],
                "self.logger.debug": [
                    83,
                    71
                ],
                "token.tok_name": [
                    72
                ],
                "token.INDENT": [
                    73,
                    86
                ],
                "indent_columns.append": [
                    74
                ],
                "_prefix": [
                    80,
                    75,
                    87
                ],
                "token.DEDENT": [
                    86,
                    78
                ],
                "_indent_col": [
                    80,
                    79
                ],
                "indent_columns.pop": [
                    79
                ],
                "self._partially_consume_prefix": [
                    80
                ],
                "p.addtoken": [
                    81
                ],
                "parse.ParseError": [
                    94
                ],
                "p.rootnode": [
                    96
                ],
                "tokenize.generate_tokens": [
                    114,
                    100
                ],
                "stream.readline": [
                    100
                ],
                "stream": [
                    105,
                    100,
                    109,
                    110
                ],
                "self.parse_tokens": [
                    115,
                    101
                ],
                "self.parse_stream_raw": [
                    105
                ],
                "io.open": [
                    109
                ],
                "io": [
                    114,
                    109
                ],
                "filename": [
                    109
                ],
                "encoding": [
                    109
                ],
                "self.parse_stream": [
                    110
                ],
                "readline": [
                    114
                ],
                "io.StringIO": [
                    114
                ],
                "text": [
                    114
                ],
                "lines": [
                    144,
                    130,
                    118,
                    127
                ],
                "current_line": [
                    130,
                    131,
                    144,
                    119,
                    123,
                    126
                ],
                "current_column": [
                    132,
                    135,
                    137,
                    140,
                    120,
                    126
                ],
                "wait_for_nl": [
                    121,
                    124,
                    133,
                    143
                ],
                "char": [
                    134,
                    136,
                    138,
                    122,
                    123,
                    125
                ],
                "current_line.strip": [
                    126
                ],
                "res": [
                    128,
                    127
                ],
                "join": [
                    144,
                    151,
                    127
                ],
                "lines.append": [
                    130
                ],
                "head": [
                    148,
                    151
                ],
                "tail": [
                    148,
                    149,
                    150,
                    151
                ],
                "os.path.splitext": [
                    148
                ],
                "os.path": [
                    185,
                    199,
                    202,
                    148,
                    181,
                    183,
                    153
                ],
                "os": [
                    185,
                    199,
                    202,
                    148,
                    181,
                    183,
                    153
                ],
                "gt": [
                    163,
                    164,
                    165,
                    166,
                    148,
                    218,
                    219
                ],
                "name": [
                    153,
                    155,
                    151
                ],
                "sys.version_info": [
                    151
                ],
                "sys": [
                    216,
                    215,
                    223,
                    151
                ],
                "cache_dir": [
                    152,
                    153,
                    202,
                    200
                ],
                "os.path.join": [
                    153
                ],
                "os.path.basename": [
                    153,
                    202
                ],
                "gp": [
                    163,
                    164,
                    168,
                    200,
                    170,
                    201,
                    175
                ],
                "_generate_pickle_name": [
                    200,
                    202,
                    163
                ],
                "force": [
                    164
                ],
                "_newer": [
                    164
                ],
                "logger.info": [
                    168,
                    172,
                    165
                ],
                "g": [
                    166,
                    170,
                    204,
                    205,
                    174,
                    175,
                    176,
                    206
                ],
                "pgen.generate_grammar": [
                    166
                ],
                "pgen": [
                    166
                ],
                "save": [
                    167
                ],
                "g.dump": [
                    170
                ],
                "e": [
                    172
                ],
                "grammar.Grammar": [
                    204,
                    174
                ],
                "g.load": [
                    175
                ],
                "os.path.exists": [
                    181,
                    183
                ],
                "a": [
                    185,
                    181
                ],
                "b": [
                    185,
                    183
                ],
                "os.path.getmtime": [
                    185
                ],
                "os.path.isfile": [
                    199
                ],
                "grammar_source": [
                    200,
                    201,
                    202,
                    199
                ],
                "load_grammar": [
                    201,
                    219
                ],
                "pickled_name": [
                    202,
                    203
                ],
                "data": [
                    203,
                    205
                ],
                "pkgutil.get_data": [
                    203
                ],
                "pkgutil": [
                    203
                ],
                "package": [
                    203
                ],
                "g.loads": [
                    205
                ],
                "args": [
                    218,
                    214,
                    215
                ],
                "sys.argv": [
                    215
                ],
                "logging.basicConfig": [
                    216
                ],
                "logging.INFO": [
                    216
                ],
                "sys.stdout": [
                    216
                ],
                "sys.exit": [
                    223
                ],
                "main": [
                    223
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/black_10/tests/test_black.py",
                "test_function": "test_comment_indentation",
                "test_function_code": "    def test_comment_indentation(self) -> None:\n        contents_tab = \"if 1:\\n\\tif 2:\\n\\t\\tpass\\n\\t# comment\\n\\tpass\\n\"\n        contents_spc = \"if 1:\\n    if 2:\\n        pass\\n    # comment\\n    pass\\n\"\n\n        self.assertFormatEqual(fs(contents_spc), contents_spc)\n        self.assertFormatEqual(fs(contents_tab), contents_spc)\n\n        contents_tab = \"if 1:\\n\\tif 2:\\n\\t\\tpass\\n\\t\\t# comment\\n\\tpass\\n\"\n        contents_spc = \"if 1:\\n    if 2:\\n        pass\\n        # comment\\n    pass\\n\"\n\n        self.assertFormatEqual(fs(contents_tab), contents_spc)\n        self.assertFormatEqual(fs(contents_spc), contents_spc)",
                "test_error": "AssertionError: 'if 1:\\n    if 2:\\n        pass\\n        # comment\\n    pass\\n' != 'if 1:\\n    if 2:\\n        pass\\n    # comment\\n    pass\\n'\n  if 1:\n      if 2:\n          pass\n-         # comment\n? ----\n+     # comment\n      pass",
                "full_test_error": "self = <test_black.BlackTestCase testMethod=test_comment_indentation>\n\n    def test_comment_indentation(self) -> None:\n        contents_tab = \"if 1:\\n\\tif 2:\\n\\t\\tpass\\n\\t# comment\\n\\tpass\\n\"\n        contents_spc = \"if 1:\\n    if 2:\\n        pass\\n    # comment\\n    pass\\n\"\n    \n        self.assertFormatEqual(fs(contents_spc), contents_spc)\n>       self.assertFormatEqual(fs(contents_tab), contents_spc)\n\ntests/test_black.py:517: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_black.py:156: in assertFormatEqual\n    self.assertEqual(expected, actual)\nE   AssertionError: 'if 1:\\n    if 2:\\n        pass\\n        # comment\\n    pass\\n' != 'if 1:\\n    if 2:\\n        pass\\n    # comment\\n    pass\\n'\nE     if 1:\nE         if 2:\nE             pass\nE   -         # comment\nE   ? ----\nE   +     # comment\nE         pass",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}