{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 0,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 10,
            "start_line": 117,
            "file_name": "blib2to3/pgen2/driver.py",
            "replace_code": "def _partially_consume_prefix(self, prefix, column):\n        lines = []\n        current_line = \"\"\n        current_column = 0\n        wait_for_nl = False\n        next_line_indent = None  # Track next line indentation for comments\n\n        for char in prefix:\n            current_line += char\n            if wait_for_nl:\n                if char == '\\n':\n                    next_indent = len(current_line) - len(current_line.lstrip()) if current_line.strip() else None\n                    if next_indent is not None and next_indent <= column:\n                        lines.append(current_line)\n                        current_line = \"\"\n                        current_column = 0\n                        wait_for_nl = False\n                        next_line_indent = next_indent\n                    else:\n                        res = ''.join(lines)\n                        return res, prefix[len(res):]\n\n            elif char == ' ':\n                current_column += 1\n            elif char == '\\t':\n                current_column += 4\n            elif char == '\\n':\n                if next_line_indent is not None:\n                    # Adjust next line's indentation if a comment follows dedent\n                    current_column = next_line_indent\n                    next_line_indent = None\n                current_column = 0\n            else:\n                wait_for_nl = True\n        \n        return ''.join(lines), current_line",
            "import_list": []
        }
    ]
}