{
    "black": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 19,
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    if current_line.is_decorator:\n        return 0, 0\n\n    newlines_before = 0\n    newlines_after = 0\n\n    if self.previous_line is not None:\n        if self.previous_line.is_decorator:\n            return 0, 0\n\n        if current_line.is_flow_control:\n            newlines_after = 1\n\n        if self.previous_line.is_import and not current_line.is_import and current_line.depth == self.previous_line.depth:\n            newlines_before = 1\n\n        if self.previous_line.is_yield and (not current_line.is_yield or current_line.depth != self.previous_line.depth):\n            newlines_before = 1\n\n    if current_line.is_def or current_line.is_class:\n        if self.previous_line is not None and not self.previous_line.is_decorator:\n            newlines_before = 1\n\n    if current_line.depth == 0:\n        if self.previous_line is not None and not self.previous_line.is_decorator:\n            newlines_before = 1\n\n        newlines_after = 2\n\n    return newlines_before, newlines_after",
            "import_list": []
        }
    ]
}