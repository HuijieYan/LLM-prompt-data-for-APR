{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 101,
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype in a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n    \n    if is_object_dtype(dtype):\n        if is_datetimelike(arr) and np.issubdtype(dtype, DatetimeTZDtypeType):\n            if is_object_dtype(arr):\n                if is_datetimelike(dtype):\n                    if is_datetimelike(arr.dtype):\n                        new_arr = np.array([pd.Timestamp(x) for x in arr], dtype=dtype)\n                        return new_arr\n                    else:\n                        return pd.Series(arr).values.astype(dtype)\n                else:\n                    if np.issubdtype(arr.dtype, np.datetime64) and np.issubdtype(dtype, np.datetime64):\n                        return arr.astype(dtype)\n                    elif np.issubdtype(arr.dtype, np.datetime64) and np.issubdtype(dtype, np.timedelta64):\n                        return pd.Series(arr).values.astype(np.int64).astype(dtype)\n                    elif np.issubdtype(arr.dtype, np.timedelta64) and np.issubdtype(dtype, np.datetime64):\n                        raise TypeError(\"Cannot convert a timedelta array to datetime dtype\")\n                    elif np.issubdtype(arr.dtype, np.timedelta64) and np.issubdtype(dtype, np.timedelta64):\n                        return arr.astype(dtype)\n            else:\n                if is_datetimelike(dtype):\n                    return pd.Series(arr).apply(to_datetime).values.astype(dtype)\n                elif is_object_dtype(arr):  # i.e datetime/time delta with na\n                    return pd.Series(arr).values.astype(dtype)\n                else:\n                    return arr.astype(dtype)\n        elif is_string_dtype(dtype):\n            if is_datetimelike(arr):\n                if is_object_dtype(arr):\n                    return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n                else:\n                    return pd.Series(arr).apply(str)\n    \n    return arr.astype(dtype, copy=copy)",
            "import_list": [
                "import numpy as np",
                "from pandas.core.dtypes.common import is_datetimelike, is_object_dtype",
                "from pandas.core.dtypes.dtypes import DatetimeTZDtypeType"
            ]
        }
    ]
}