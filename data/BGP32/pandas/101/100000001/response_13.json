{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 101,
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):    \n    # dispatch on extension dtype if needed\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n    \n    if not isinstance(dtype, np.dtype):\n        dtype = pandas_dtype(dtype)\n    \n    if issubclass(dtype.type, str):\n        return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n    \n    elif is_datetime64_dtype(dtype):  # check if target dtype is datetime64/timedelta64\n        if is_object_dtype(arr):\n            from pandas import to_datetime\n            \n            return astype_nansafe(to_datetime(arr).values, dtype, copy=copy)\n        \n        raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n    \n    elif is_timedelta64_dtype(dtype):  # check if target dtype is timedelta64\n        from pandas import to_timedelta\n        \n        return astype_nansafe(to_timedelta(arr).values, dtype, copy=copy)\n    \n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(arr.dtype, np.integer):  # corrected function call\n    \n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n    \n    elif is_object_dtype(arr):\n        \n        # work around NumPy brokenness, #1987\n        if np.issubdtype(dtype.type, np.integer):  # corrected function call\n            return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n    \n    if dtype.name in (\"datetime64\", \"timedelta64\"):\n        msg = (\n            f\"The '{dtype.name}' dtype has no unit. Please pass in \"\n            f\"'{dtype.name}[ns]' instead.\"\n        )\n        raise ValueError(msg)\n    \n    if copy or is_object_dtype(arr) or is_object_dtype(dtype):\n        # Explicit copy, or required since NumPy can't view from / to object.\n        return arr.astype(dtype, copy=True)\n    \n    return arr.view(dtype)",
            "import_list": [
                "from pandas import to_datetime",
                "from pandas import to_timedelta"
            ]
        }
    ]
}