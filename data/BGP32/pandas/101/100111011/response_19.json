{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 101,
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    # Check if input dtype is an extension array dtype\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    # Convert to pandas dtype if dtype is not a numpy dtype\n    if not isinstance(dtype, np.dtype):\n        dtype = pandas_dtype(dtype)\n\n    # Check if dtype is string\n    if issubclass(dtype.type, str):\n        return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n\n    # Handle datetime64 case\n    elif is_datetime_or_timedelta_dtype(arr, \"datetime64\"):\n        if is_object_dtype(dtype):\n            return tslib.ints_to_pydatetime(arr.view(np.int64))\n        elif dtype == np.int64:\n            return arr.view(dtype)\n        elif is_timedelta64_dtype(arr):\n            return tslibs.ints_to_pytimedelta(arr.view(np.int64))\n\n        # Allow frequency conversions for datetime\n        if dtype.kind == \"M\":\n            return arr.astype(dtype)\n        raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n\n    # Handle timedelta64 case\n    elif is_datetime_or_timedelta_dtype(arr, \"timedelta64\"):\n        if is_object_dtype(dtype):\n            return tslibs.ints_to_pytimedelta(arr.view(np.int64))\n        elif dtype == np.int64:\n            return arr.view(dtype)\n\n        # Handle frequency conversions for timedelta\n        if dtype.kind == \"m\":\n            result = arr.astype(dtype)\n            result[isna(arr)] = np.nan\n            return result\n\n        if dtype == _TD_DTYPE:\n            return arr.astype(_TD_DTYPE, copy=copy)\n        raise TypeError(f\"cannot astype a timedelta from [{arr.dtype}] to [{dtype}]\")\n\n    # Handle float to integer conversion\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    # Handle object type conversion\n    elif is_object_dtype(arr):\n        if np.issubdtype(dtype.type, np.integer):\n            return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n\n        # Handle datetime and timedelta objects\n        elif is_datetime_or_timedelta_dtype(dtype):\n            if is_datetime64_dtype(dtype):\n                from pandas import to_datetime\n                return astype_nansafe(to_datetime(arr).values, dtype, copy=copy)\n            elif is_timedelta64_dtype(dtype):\n                from pandas import to_timedelta\n                return astype_nansafe(to_timedelta(arr).values, dtype, copy=copy)\n\n    # Handle special cases for datetime and timedelta types\n    if dtype.name in (\"datetime64\", \"timedelta64\"):\n        msg = (\n            f\"The '{dtype.name}' dtype has no unit. Please pass in '{dtype.name}[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    # Return the input array with the specified dtype\n    return arr.astype(dtype, copy=True)",
            "import_list": [
                "from pandas import to_datetime",
                "from pandas import to_timedelta"
            ]
        }
    ]
}