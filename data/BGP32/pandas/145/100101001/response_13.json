{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 145,
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    import pandas.core.computation.expressions as expressions\n    \n    right = lib.item_from_zerodim(right)\n    \n    if lib.is_scalar(right) or np.ndim(right) == 0:\n        data = {i: func(left.iloc[:, i], right) for i in range(len(left.columns))}\n        \n    elif isinstance(right, ABCDataFrame):\n        assert right._indexed_same(left)\n        data = {i: func(left.iloc[:, i], right.iloc[:, i]) for i in range(len(left.columns))}\n        \n    elif isinstance(right, ABCSeries) and right.dtype == 'timedelta64[ns]':\n        data = {i: func(left.iloc[:, i], right) for i in range(len(left.columns))}\n        \n    elif isinstance(right, ABCSeries):\n        assert right.index.equals(left.index)\n        data = {i: func(left.iloc[:, i], right) for i in range(len(left.columns))}\n        \n    else:\n        raise NotImplementedError(right)\n    \n    new_data = expressions.evaluate(data, str_rep, left, right)\n    \n    return new_data",
            "import_list": [
                "import pandas.core.computation.expressions as expressions"
            ]
        }
    ]
}