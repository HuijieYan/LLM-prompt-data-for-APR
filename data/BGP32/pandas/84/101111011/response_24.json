{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    cloc_numbers = []\n    for loc in clocs:\n        if isinstance(loc, tuple):\n            loc_name = tuple(loc)\n            cloc_num = index.names.index(loc_name)\n        else:\n            cloc_num = index.names.index(loc)\n        cloc_numbers.append(cloc_num)\n\n    rlocs = [i for i in range(index.nlevels) if i not in cloc_numbers]\n\n    if rlocs == []:\n        # Everything is in clocs, so the dummy df has a regular index\n        dummy_index = Index(range(len(data)), name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(\n            levels=[index.levels[i] for i in rlocs] + [range(len(data))],\n            codes=[index.codes[i] for i in rlocs] + [np.arange(len(data))],\n            names=[index.names[i] for i in rlocs] + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = [index.levels[i] for i in cloc_numbers]\n        new_names = [index.names[i] for i in cloc_numbers]\n        new_codes = [index.codes[i] for i in cloc_numbers]\n    else:\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = [index.levels[i] for i in cloc_numbers] + [unstacked.index.levels[-1]]\n        new_names = [index.names[i] for i in cloc_numbers] + [unstacked.index.names[-1]]\n        new_codes = [index.codes[i] for i in cloc_numbers] + [unstacked.index.codes[-1]]\n\n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}