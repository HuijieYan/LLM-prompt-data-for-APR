{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):   \n    if len(clocs) == 0:\n        return data\n\n    # Extract the index object\n    index = data.index\n\n    # Check if the clocs are tuples and get the level numbers correctly\n    clocs_level_numbers = []\n    for loc in clocs:\n        if isinstance(loc, tuple):\n            loc = (index.names.index(loc[0]), loc[1])  # Convert tuple to level number\n        clocs_level_numbers.append(loc)\n\n    rlocs = [i for i in range(index.nlevels) if i not in [loc[0] for loc in clocs_level_numbers]]\n\n    clevels = [index.levels[loc[0]] for loc in clocs_level_numbers]\n    ccodes = [index.codes[loc[0]] for loc in clocs_level_numbers]\n    cnames = [index.names[loc[0]] for loc in clocs_level_numbers]\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n    \n    # Rest of the function remains the same\n\n    return unstacked",
            "import_list": []
        }
    ]
}