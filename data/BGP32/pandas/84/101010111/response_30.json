{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # Extract index and column information\n    index = data.index\n    columns = data.columns\n\n    # Separate row and column locations\n    rlocs = [i for i in range(index.nlevels) if index.names[i] not in clocs]\n    clocs = [index.names.index(i) for i in clocs]\n\n    # Handle hierarchical column structure\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = Index(dummy.index)\n\n        dummy_unstacked = dummy.unstack(fill_value=fill_value)\n        new_level_names = index.levels[rlocs] + [dummy_unstacked.columns.codes[-1]]\n        new_names = index.names[rlocs] + ['__placeholder__']\n        new_codes = dummy_unstacked.columns.codes[:-1] + [dummy_unstacked.columns.codes[-1]]\n\n        new_columns = MultiIndex(levels=new_level_names,\n                                  codes=new_codes,\n                                  names=new_names,\n                                  verify_integrity=False)\n\n        dummy_unstacked.columns = new_columns\n        return dummy_unstacked\n\n    if isinstance(columns, MultiIndex):\n        result = data\n        for i in range(len(clocs)):\n            val = clocs[i]\n            result = result.unstack(val, fill_value=fill_value)\n            clocs = [v if i > v else v - 1 for v in clocs]\n\n        return result\n\n    dummy = data.copy()\n    dummy.index = Index(dummy.index)\n\n    dummy_unstacked = dummy.unstack(fill_value=fill_value)\n    new_level_names = [dummy_unstacked.index.levels[0]] + index.levels[rlocs]\n    new_names = [None] + index.names[rlocs]\n    new_codes = [dummy_unstacked.index.codes[0]] + dummy_unstacked.index.codes[1:]\n\n    new_columns = MultiIndex(levels=new_level_names,\n                             codes=new_codes,\n                             names=new_names,\n                             verify_integrity=False)\n\n    dummy_unstacked.index = new_columns\n    return dummy_unstacked",
            "import_list": []
        }
    ]
}