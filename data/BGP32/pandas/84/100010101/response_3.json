{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    clocs = [index._get_level_number(loc) if isinstance(loc, tuple) else loc for loc in clocs]\n\n    group_index = get_group_index(index.codes, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, index.nlevels, index.codes, xnull=False)\n\n    if not clocs:  # Unstack all levels\n        dummy_index = Index(obs_ids, name='__placeholder__')\n    else:\n        new_levels = [index.levels[i] for i in clocs]\n        new_codes = [index.codes[i] for i in clocs]\n        cnames = [index.names[i] for i in clocs]\n\n        dummy = data.copy()\n        dummy.index = MultiIndex(levels=new_levels + [obs_ids], codes=new_codes + [comp_ids],\n                                 names=cnames + ['__placeholder__'], verify_integrity=False)\n\n        unstacked = dummy.unstack('__placeholder__', fill_value=fill_value)\n        new_columns = MultiIndex(levels=[unstacked.columns.levels[0]] + new_levels,\n                                 codes=[unstacked.columns.codes[0]] + recons_codes,\n                                 names=[None] + cnames, verify_integrity=False)\n\n        if isinstance(data, Series):\n            unstacked.index = new_columns\n        else:\n            unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}