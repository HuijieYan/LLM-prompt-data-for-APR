{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n    \n    # Extract level numbers from column tuple names\n    clevel_numbers = [index._get_level_number(cloc) for cloc in clocs]\n    \n    # Extract MultiIndex levels and codes\n    clevels = [index.levels[cloc] for cloc in clevel_numbers]\n    ccodes = [index.codes[cloc] for cloc in clevel_numbers]\n    cnames = [index.names[cloc] for cloc in clevel_numbers]\n    rloc_numbers = [i for i in range(index.nlevels) if i not in clevel_numbers]\n    rlevels = [index.levels[rloc] for rloc in rloc_numbers]\n    rcodes = [index.codes[rloc] for rloc in rloc_numbers]\n    rnames = [index.names[rloc] for rloc in rloc_numbers]\n    \n    shape = [len(clevel) for clevel in clevels]\n    \n    # Group index creation and compression\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n    \n    # Create dummy index\n    dummy_index = MultiIndex(\n        levels=rlevels + [obs_ids],\n        codes=rcodes + [comp_ids],\n        names=rnames + ['__placeholder__'],\n        verify_integrity=False,\n    )\n    \n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n        unstacked = dummy.unstack('__placeholder__', fill_value=fill_value)\n        new_levels = clevels + [Index(obs_ids, name='__placeholder__')]\n        new_names = cnames + ['__placeholder__']\n        new_codes = recons_codes\n    else:\n        dummy = data.copy()\n        dummy.index = dummy_index\n        unstacked = dummy.unstack('__placeholder__', fill_value=fill_value)\n        \n        if isinstance(unstacked, Series):\n            unstcols = unstacked.index\n        else:\n            unstcols = unstacked.columns\n        \n        new_levels = [stc.levels + clv for stc, clv in zip(unstcols.levels, clevels)]\n        new_names = [unstacked.columns.names[0]] + cnames\n        new_codes = [stc.codes for stc in unstcols]\n    \n    new_columns = MultiIndex(\n        levels=new_levels,\n        codes=new_codes,\n        names=new_names,\n        verify_integrity=False\n    )\n    \n    # Update index or columns based on the type of unstacked\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n    \n    return unstacked",
            "import_list": []
        }
    ]
}