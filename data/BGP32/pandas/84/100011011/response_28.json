{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    if isinstance(data, Series):\n        clocs = [clocs]\n    else:\n        if not isinstance(clocs[0], tuple):\n            clocs = [(clocs,)]\n        \n    clocs = [(index.names.index(name), level) for name, level in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in [cloc[0] for cloc in clocs]]\n\n    shape = [len(index.levels[cloc[0]]) for cloc in clocs]\n    group_index = get_group_index([index.codes[cloc[0]] for cloc in clocs], shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, [index.codes[cloc[0]] for cloc in clocs], xnull=False)\n\n    new_columns = MultiIndex(\n        levels=[index.levels[rloc] for rloc in rlocs] + [obs_ids],\n        codes=[index.codes[rloc] for rloc in rlocs] + [comp_ids],\n        names=[index.names[rloc] for rloc in rlocs] + [\"__placeholder__\"],\n        verify_integrity=False,\n    )\n\n    if isinstance(data, Series):\n        unstacked = data.unstack(\"__placeholder__\", fill_value=fill_value)\n    else:\n        unstacked = data.copy()\n        unstacked.index = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}