{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    new_levels = []\n    new_names = []\n    new_codes = []\n\n    index = data.index\n    index_names = index.names\n\n    rlocs = [i for i in range(len(index_names)) if index_names[i] not in clocs]\n\n    if not clocs or not rlocs:\n        raise ValueError(\"Invalid number of levels specified for unstacking\")\n\n    ccodes = []\n    for i, name in enumerate(index_names):\n        if name in clocs:\n            c_idx = clocs.index(name)\n            c_level_codes = index.codes[i]\n            c_level = index.levels[i]\n            ccodes.append(c_level_codes)\n            new_levels.append(c_level)\n            new_names.append(index_names[i])\n        else:\n            new_levels.append(index.levels[i])\n            new_names.append(index_names[i])\n\n    shape = [len(x) for x in ccodes]\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    dummy_index = MultiIndex(\n        levels=new_levels + [obs_ids],\n        codes=recons_codes + [comp_ids],\n        names=new_names + [\"__placeholder__\"],\n        verify_integrity=False,\n    )\n\n    dummy = data.copy()\n    dummy.index = dummy_index\n\n    unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\n    return unstacked",
            "import_list": []
        }
    ]
}