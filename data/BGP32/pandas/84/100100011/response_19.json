{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # Extract level numbers based on tuple names\n    index = data.index\n    clocs = [index._get_level_number(i) if isinstance(i, tuple) else i for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    if isinstance(data, Series):\n        # Handle hierarchical columns for Series\n        dummy = data.copy()\n        dummy.index = dummy.index.set_levels(\n            [index.levels[i] for i in clocs], level=clocs\n        )\n    else:\n        # Handle hierarchical columns for DataFrame\n        dummy = data.copy()\n        dummy.index = dummy.index.set_levels(\n            [index.levels[i] for i in clocs], level=clocs\n        )\n\n    # Unstack the dummy DataFrame\n    unstacked = dummy.unstack(clocs, fill_value=fill_value)\n\n    if isinstance(unstacked, Series):\n        new_columns = MultiIndex.from_tuples([unstacked.index], names=clocs)\n        unstacked.index = new_columns\n    else:\n        new_columns = MultiIndex.from_tuples([unstacked.columns], names=clocs)\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}