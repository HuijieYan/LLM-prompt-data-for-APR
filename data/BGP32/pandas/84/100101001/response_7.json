{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # Collect the relevant index information\n    index = data.index\n    clocs = [index._get_level_number(i) for i in clocs]\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    if isinstance(data, Series):\n        # Unstack a Series\n        unstacked = data.unstack(clocs)\n    else:\n        # Unstack a DataFrame\n        if isinstance(data.columns, MultiIndex):\n            unstacked = data\n            for loc in reversed(clocs):\n                unstacked = unstacked.unstack(level=loc, fill_value=fill_value)\n        else:\n            dummy_index = MultiIndex(\n                levels=[index.levels[i] for i in rlocs] + [index.codes[c].unique() for c in clocs],\n                codes=[index.codes[i] for i in rlocs] + [index.codes[c] for c in clocs],\n                names=[index.names[i] for i in rlocs] + [index.names[c] for c in clocs],\n            )\n            unstacked = data.copy()\n            unstacked.index = dummy_index\n            unstacked = unstacked.unstack(level=-1, fill_value=fill_value)\n\n    return unstacked",
            "import_list": []
        }
    ]
}