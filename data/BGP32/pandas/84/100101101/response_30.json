{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    clocs = [index._get_level_number(i) if isinstance(i, tuple) else i for i in clocs]\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n    \n    data = data.reset_index()\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = MultiIndex.from_arrays([[0] * len(data)], names=[\"__placeholder__\"])\n        \n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = [c for i, c in enumerate(data.columns.levels) if i in clocs]\n        new_names = [data.columns.names[i] for i in clocs]\n        new_codes = [data.columns.codes[i] for i in clocs]\n    else:\n        dummy = data.copy()\n        dummy.index = MultiIndex.from_arrays([[0] * len(data)], names=[\"__placeholder__\"])\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = [data.columns.levels[i] for i in rlocs] + [data.columns.levels[i] for i in clocs]\n        new_names = [data.columns.names[i] for i in rlocs] + [data.columns.names[i] for i in clocs]\n        new_codes = [data.columns.codes[i] for i in rlocs] + [data.columns.codes[i] for i in clocs]\n\n    new_columns = MultiIndex(levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False)\n    \n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}