{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    if isinstance(data.columns, MultiIndex):\n        columns = [(c.names if isinstance(c, tuple) else (c,)) for c in data.columns]\n        column_tuples = list(zip(*columns))\n        for i, loc in enumerate(clocs):\n            if isinstance(loc, str):\n                loc = (loc,)\n            loc_index = columns.index(loc)\n            data = data.unstack(level=loc_index, fill_value=fill_value)\n            column_tuples = [col for j, col in enumerate(column_tuples) if j != loc_index]\n\n        columns = pd.MultiIndex.from_tuples(column_tuples)\n        data.columns = columns\n        return data\n    else:\n        clocs = [index._get_level_number(i) for i in clocs]\n        rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n        clevels = [index.levels[i] for i in clocs]\n        cnames = [index.names[i] for i in clocs]\n\n        group_index = get_group_index([index.codes[i] for i in clocs], [len(x) for x in clevels], sort=False, xnull=False)\n\n        comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n        recons_codes = decons_obs_group_ids(comp_ids, obs_ids, [len(x) for x in clevels], [index.codes[i] for i in clocs], xnull=False)\n\n        rlevels = [index.levels[i] for i in rlocs]\n        rcodes = [index.codes[i] for i in rlocs]\n        rnames = [index.names[i] for i in rlocs]\n\n        if rlocs == []:\n            dummy_index = Index(obs_ids, name=\"__placeholder__\")\n        else:\n            dummy_index = MultiIndex(\n                levels=rlevels + [obs_ids],\n                codes=rcodes + [comp_ids],\n                names=rnames + [\"__placeholder__\"],\n                verify_integrity=False,\n            )\n\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\n        new_levels = clevels\n        new_names = cnames\n        new_codes = recons_codes\n\n        new_columns = MultiIndex(\n            levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n        )\n\n        if isinstance(unstacked, Series):\n            unstacked.index = new_columns\n        else:\n            unstacked.columns = new_columns\n\n        return unstacked",
            "import_list": []
        }
    ]
}