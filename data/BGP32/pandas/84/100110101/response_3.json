{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    rlocs = [level for level in range(index.nlevels) if level not in clocs]\n\n    clevels = [index.levels[i] for i in clocs]\n    ccodes = [index.codes[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    # Check if the DataFrame has a MultiIndex or single Index\n    if data.columns.nlevels == 1:\n        cols = data.columns\n    else:\n        cols = data.columns.to_flat_index()\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = MultiIndex.from_tuples(\n            [(i,) for i in obs_ids], names=[\"__placeholder__\"]\n        )\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_columns = MultiIndex.from_tuples(\n            [(col[n[0]],) for col, n in zip(clevels, cols.codes)], names=[None, *cnames]\n        )\n    else:\n        result = data.copy()\n        \n        for _, level_code in enumerate(clocs):\n            result = result.unstack(level_code, fill_value=fill_value)\n        \n        if data.columns.nlevels == 1:\n            new_columns = MultiIndex.from_tuples(\n                [(col[n[0]],) for col, n in zip(clevels, cols.codes)], names=[None, *cnames]\n            )\n        else:\n            new_columns = MultiIndex.from_tuples(\n                [(col[n[0]], col[n[1]]) for col, n in zip(rlevels + clevels, cols.codes)],\n                names=[*rnames, *cnames]\n            )\n        \n    unstacked.columns = new_columns\n    return unstacked",
            "import_list": []
        }
    ]
}