{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    if isinstance(data, Series):\n        data = data.to_frame()  # Convert Series to DataFrame for consistency\n\n    if len(clocs) == data.columns.nlevels:\n        return data.unstack(level=clocs, fill_value=fill_value)\n    \n    index = data.index\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    cnames = [index.names[i] for i in clocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    shape = [len(index.levels[i]) for i in clocs]\n    group_index = get_group_index([index.codes[i] for i in clocs], shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, [index.codes[i] for i in clocs], xnull=False)\n\n    dummy_index = MultiIndex(\n        levels=index.levels[rlocs] + [obs_ids],\n        codes=[index.codes[r_i] for r_i in rlocs] + [comp_ids],\n        names=rnames + [\"__placeholder__\"],\n        verify_integrity=False\n    )\n\n    dummy = data.copy()\n    dummy.index = dummy_index\n\n    unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n\n    new_levels = [unstacked.index.levels[0]] + index.levels[clocs]\n    new_names = [data.columns.name] + cnames\n    new_codes = [unstacked.index.codes[0]]\n\n    for rec in recons_codes:\n        new_codes.append(rec.take(unstacked.index.codes[-1]))\n\n    new_columns = MultiIndex(\n        levels=new_levels,\n        codes=new_codes,\n        names=new_names,\n        verify_integrity=False\n    )\n\n    if isinstance(data, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}