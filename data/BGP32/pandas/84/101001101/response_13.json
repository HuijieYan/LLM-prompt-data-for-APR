{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if not clocs:\n        return data\n\n    index = data.index\n    total_nlevels = index.nlevels\n\n    for level in clocs:\n        level_num = index._get_level_number(level)\n\n        clevels = [index.levels[i] for i in range(total_nlevels) if i == level_num]\n        ccodes = [index.codes[i] for i in range(total_nlevels) if i == level_num]\n        cnames = [index.names[i] for i in range(total_nlevels) if i == level_num]\n        \n        rlocs = [i for i in range(total_nlevels) if i != level_num]\n        rlevels = [index.levels[i] for i in rlocs]\n        rcodes = [index.codes[i] for i in rlocs]\n        rnames = [index.names[i] for i in rlocs]\n        \n        shape = [len(x) for x in clevels]\n        group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n        \n        comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n        recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n        \n        dummy_index = MultiIndex(\n            levels=rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=rnames + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n        if isinstance(data, Series):\n            dummy = data.copy()\n            dummy.index = dummy_index\n            data = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        else:\n            dummy = data.copy()\n            dummy.index = dummy_index\n            data = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n    \n    return data",
            "import_list": []
        }
    ]
}