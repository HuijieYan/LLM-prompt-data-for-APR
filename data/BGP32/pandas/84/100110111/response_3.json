{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # Determine correct column locations for unstacking\n    index = data.index\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    if isinstance(data, Series):\n        dummy = data.to_frame()\n    else:\n        dummy = data.copy()\n\n    group_index = get_group_index(index.codes, index.levels, sort=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, index.levels, index.codes, xnull=False)\n\n    # Assemble new Index/MultiIndex for the unstacked data\n    new_level_values = [index.levels[loc].take(recons_codes[loc]) for loc in range(len(index.levels))]\n    new_index = MultiIndex(levels=new_level_values, codes=[obs_ids], names=[None] + list(index.names[rlocs]), verify_integrity=False)\n\n    if isinstance(dummy, Series):\n        dummy = dummy.to_frame()\n        dummy.columns = new_index\n        new_columns = dummy.columns\n    else:\n        dummy.columns = new_index\n        new_columns = MultiIndex.from_product([dummy.columns.levels[0], index.levels[clocs][0]])\n\n    result = dummy.unstack(clocs).reorder_levels([None] + list(index.names[rlocs])).sort_index(axis=1).sort_index(axis=0)\n\n    result.columns = new_columns\n\n    return result",
            "import_list": []
        }
    ]
}