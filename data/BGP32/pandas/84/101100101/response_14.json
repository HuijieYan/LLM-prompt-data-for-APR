{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # Get the levels and codes corresponding to the clocs\n    clocs = [data.columns.get_loc(c) for c in clocs]\n\n    index = data.index\n    rlocs = [i for i in range(data.columns.nlevels) if i not in clocs]\n\n    clevel = data.columns.levels[clocs[0]]\n    cnames = data.columns.names[clocs[0]]\n    rlevel = data.columns.levels[rlocs[0]]\n    rnames = data.columns.names[rlocs[0]]\n\n    stacked = data.stack(clocs)\n    unstacked = stacked.unstack(clevel, fill_value=fill_value)\n    \n    # Reconstruct the new columns with proper levels and codes\n    new_levels = [rlevel] + [clevel]\n    new_names = [rnames] + [cnames]\n\n    if isinstance(unstacked, Series):\n        unstacked = unstacked.to_frame()\n\n    new_columns = MultiIndex.from_arrays(\n        unstacked.columns.codes, names=new_names, levels=new_levels\n    )\n\n    unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}