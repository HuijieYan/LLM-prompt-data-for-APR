{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    if isinstance(clocs, tuple) and all(isinstance(i, tuple) for i in clocs):\n        cnames = [i[0] for i in clocs]\n        cnames = [c if isinstance(c, tuple) else (c,) for c in cnames]\n\n        clev_indices = [index.names.get_loc(name) for name in cnames]\n        rlev_indices = [i for i in range(index.nlevels) if i not in clev_indices]\n\n        clevels = [index.levels[i] for i in clev_indices]\n        ccodes = [index.codes[i] for i in clev_indices]\n        rlevels = [index.levels[i] for i in rlev_indices]\n        rcodes = [index.codes[i] for i in rlev_indices]\n\n        shape = [len(x) for x in clevels]\n        group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n        comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n        recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n        new_columns = MultiIndex(levels=clevels + [obs_ids],\n                                 codes=ccodes + [comp_ids],\n                                 names=[index.names[i] for i in clev_indices] + [\"__placeholder__\"],\n                                 verify_integrity=False\n                                )\n        if isinstance(data, Series):\n            unstacked = data.copy()\n            unstacked.index = new_columns\n        else:\n            unstacked = data.copy()\n            unstacked.index = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}