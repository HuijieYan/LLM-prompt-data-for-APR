{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 84,
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    index = data.index\n\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    shape = [len(data.columns.levels[i]) for i in clocs]\n    group_index = get_group_index(\n        [data.columns.codes[i] for i in clocs], shape, sort=False, xnull=False\n    )\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(\n        comp_ids, obs_ids, shape, [data.columns.codes[i] for i in clocs], xnull=False\n    )\n\n    dummy_index = MultiIndex(\n        levels=data.columns.levels[rlocs] + [obs_ids],\n        codes=[data.columns.codes[i] for i in rlocs] + [comp_ids],\n        names=data.columns.names[rlocs] + [\"__placeholder__\"],\n        verify_integrity=False,\n    )\n\n    dummy = data.copy()\n    dummy.columns = dummy_index\n\n    unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n    new_levels = data.columns.levels[clocs]\n    new_names = data.columns.names[clocs]\n    new_codes = recons_codes\n\n    new_columns = MultiIndex(\n        levels=[data.columns.levels[i] for i in rlocs] + new_levels,\n        codes=[data.columns.codes[i] for i in rlocs] + new_codes,\n        names=data.columns.names[rlocs] + new_names,\n        verify_integrity=False,\n    )\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
            "import_list": []
        }
    ]
}