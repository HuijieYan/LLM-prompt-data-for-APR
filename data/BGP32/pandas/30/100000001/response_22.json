{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 30,
            "start_line": 953,
            "file_name": "pandas/io/json/_json.py",
            "replace_code": "def _try_convert_to_date(self, data):\n\t\"\"\"\n\tTry to parse a ndarray like into a date column.\n\n\tTry to coerce object in epoch/iso formats and integer/float in epoch\n\tformats. Return a boolean if parsing was successful.\n\t\"\"\"\n\t# no conversion on empty\n\tif not len(data):\n\t    return data, False\n\n\tnew_data = data\n\tif new_data.dtype == \"object\":\n\t    try:\n\t        new_data = data.astype(\"int64\")\n\t    except (TypeError, ValueError, OverflowError):\n\t        pass\n\n\t# ignore numbers that are out of range\n\tif issubclass(new_data.dtype.type, np.number):\n\t    in_range = (\n\t        isna(new_data._values)\n\t        | (new_data > self.min_stamp)\n\t        | (new_data._values == iNaT)\n\t    )\n\t    if not in_range.all():\n\t        return new_data, False\n\n\tdate_units = (self.date_unit,) if self.date_unit else self._STAMP_UNITS\n\tsuccessful_conversion = False\n\tfor date_unit in date_units:\n\t    try:\n\t        new_data = to_datetime(new_data, errors=\"raise\", unit=date_unit)\n\t        successful_conversion = True\n\t    except (ValueError, OverflowError):\n\t        continue\n\t    \n\tif successful_conversion:\n\t    return new_data, True\n\telse:\n\t    return data, False",
            "import_list": []
        }
    ]
}