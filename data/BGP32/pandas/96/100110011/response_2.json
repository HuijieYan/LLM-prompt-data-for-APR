{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        other_date = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        n = self.n\n\n        if n >= 0:\n            if other.time() in self.end or not self._is_on_offset(other_date):\n                other = self._next_opening_time(other_date)\n        else:\n            if other.time() in self.start:\n                other_date -= timedelta(days=1)\n            if not self._is_on_offset(other_date):\n                other = self._next_opening_time(other_date)\n                other_date = self._get_closing_time(other_date)\n\n        if n < 0:\n            bd, r = divmod(-n * 60, self._get_business_hours())\n            bd, r = -bd, -r\n        else:\n            bd, r = divmod(n * 60, self._get_business_hours())\n\n        skip_bd = BusinessDay(n=bd)\n        if bd != 0:\n            if not self.next_bday.is_on_offset(other_date):\n                other = self._prev_opening_time(other_date)\n                remain = other_date - other\n                other_date = self._prev_opening_time(other + skip_bd) + remain\n            else:\n                other_date += skip_bd\n\n        while r != 0:\n            if n >= 0:\n                bhour = self._get_closing_time(self._prev_opening_time(other_date)) - other_date\n            else:\n                bhour = self._next_opening_time(other_date) - other_date\n\n            if r <= bhour.total_seconds() / 60:\n                other = other_date + timedelta(minutes=r)\n                break\n            else:\n                other_date = self._next_opening_time(other_date + timedelta(minutes=bhour.total_seconds() / 60))\n                r -= bhour.total_seconds() / 60\n\n        return other_date\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import BusinessDay"
            ]
        }
    ]
}