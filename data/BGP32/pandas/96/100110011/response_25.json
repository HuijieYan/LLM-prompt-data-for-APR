{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if self.holidays and other in self.holidays:\n            other = self._next_opening_time(other)\n        \n        n = self.n\n\n        business_hours = self._get_business_hours_by_sec()\n\n        days, remain = divmod(abs(n), len(business_hours))\n        if n < 0:\n            days = -days\n\n        if days != 0:\n            other = self._add_business_days(other, days)\n\n        hours = remain * 60\n        if n < 0:\n            hours = -hours\n        \n        while hours != 0:\n            if n >= 0:\n                next_opening = self._next_opening_time(other)\n                hours_left = (self._get_closing_time(next_opening) - other).total_seconds() // 60\n            else:\n                hours_left = (next_opening - other).total_seconds() // 60\n                if hours == hours_left and other.nanosecond != 0:\n                    hours_left += 1\n\n            if hours < hours_left:\n                other = other + timedelta(minutes=hours)\n                hours = 0\n            else:\n                other = self._next_opening_time(other + timedelta(minutes=hours_left))\n                hours -= hours_left\n\n        return other\n        \n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}