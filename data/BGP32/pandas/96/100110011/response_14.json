{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        # Adjust other based on business day logic\n        if n >= 0:\n            if not self._is_on_offset(other) or other.date() in self.holidays:\n                other = self._next_opening_time(other)\n        else:\n            if other.date() in self.holidays or self._get_closing_time(other).date() in self.holidays:\n                # move to the previous business day\n                other = other - timedelta(days=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        # Business day calculation\n        business_hours_per_day = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        \n        business_days, remaining_minutes = divmod(abs(n * 60), business_hours_per_day // 60)\n        if n < 0:\n            business_days, remaining_minutes = -business_days, -remaining_minutes\n\n        # Adjust by business days first\n        if business_days != 0:\n            skip_bdays = BusinessDay(n=business_days)\n            if not self.end.is_on_offset(other) or other.date() in self.holidays:\n                prev_open = self._prev_opening_time(other)\n                remain = other - prev_open\n                other = prev_open + skip_bdays + remain\n            else:\n                other = other + skip_bdays\n\n        # Adjust remaining business hours\n        remain_duration = timedelta(minutes=remaining_minutes)\n\n        if n >= 0:\n            while remain_duration != timedelta(0):\n                hours_to_closing = self._get_closing_time(self._prev_opening_time(other)) - other\n                if remain_duration < hours_to_closing:\n                    other += remain_duration\n                    remain_duration = timedelta(0)\n                else:\n                    remain_duration -= hours_to_closing\n                    other = self._next_opening_time(other + hours_to_closing)\n        else:\n            while remain_duration != timedelta(0):\n                hours_to_opening = self._next_opening_time(other) - other\n                if remain_duration >= hours_to_opening or remain_duration == hours_to_opening:\n                    other += remain_duration\n                    remain_duration = timedelta(0)\n                else:\n                    remain_duration -= hours_to_opening\n                    other = self._get_closing_time(self._next_opening_time(other))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}