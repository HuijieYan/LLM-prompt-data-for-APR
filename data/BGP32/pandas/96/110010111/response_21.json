{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            nanosecond = getattr(other, \"nanosecond\", 0)\n            other = datetime(\n                other.year, other.month, other.day, other.hour, other.minute, other.second, other.microsecond\n            )\n            n = self.n\n            \n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end)\n            )\n            \n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n\n            # Adjust by business days first\n            excluded_days = len([d for d in pd.date_range(other, periods=abs(bd), freq=self.next_bday) if d not in self.holidays])\n            bd -= excluded_days\n\n            # Handle holidays during adjustments\n            for i in range(abs(bd)):\n                if n > 0:\n                    other = self._next_opening_time(other)\n                    while other in self.holidays:\n                        other = self._next_opening_time(other)\n\n                else:\n                    other = self._prev_opening_time(other)\n                    while other in self.holidays:\n                        other = self._prev_opening_time(other)\n\n            if n >= 0:\n                while r != 0:\n                    bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                    if r < bhour.total_seconds() / 60:\n                        other += timedelta(minutes=r)\n                        r = 0\n                    else:\n                        r -= bhour.total_seconds() / 60\n                        other = self._next_opening_time(other + bhour)\n\n            else:\n                while r != 0:\n                    bhour = self._next_opening_time(other) - other\n                    if r > bhour.total_seconds() / 60 or (r == bhour.total_seconds() / 60 and nanosecond != 0):\n                        other += timedelta(minutes=r)\n                        r = 0\n                    else:\n                        r -= bhour.total_seconds() / 60\n                        other = self._get_closing_time(self._next_opening_time(other + bhour - timedelta(seconds=1)))\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}