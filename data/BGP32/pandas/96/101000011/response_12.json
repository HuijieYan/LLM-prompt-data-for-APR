{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # Perform adjustments for a better calculation of periods\n            original_other = other\n            original_other_is_holiday = self.is_on_offset(original_other)\n\n            while True:\n                if original_other_is_holiday:\n                    other = self._next_opening_time(other)\n\n                n = self.n\n                businesshours = sum(\n                    self._get_business_hours_by_sec(st, en)\n                    for st, en in zip(self.start, self.end)\n                )\n\n                bd, r = divmod(abs(n * 60), businesshours // 60)\n                if n < 0:\n                    bd, r = -bd, -r\n\n                skip_days = BusinessDay(n=bd)\n                other += skip_days\n\n                if r != 0:\n                    target_time = other.replace(hour=self.start[0].hour, minute=self.start[0].minute)\n                    while r > 0:\n                        if self._next_opening_time(other) > target_time:\n                            if self._prev_opening_time(other) > target_time:\n                                other = self._prev_opening_time(other)\n                            else:\n                                other = target_time\n                            break\n                        other = self._next_opening_time(other)\n                        r -= 60\n\n                if pd.isna(other):\n                    raise FrequencyError(\"Could not find next timestamp\")\n\n                if self.is_on_offset(original_other) or other == original_other:\n                    break\n\n            return other\n\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}