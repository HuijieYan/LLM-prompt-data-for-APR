{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # Extract date information from the timestamp\n            date_info = other.replace(hour=0, minute=0, second=0, microsecond=0)\n            holiday_dates = {date(h.year, h.month, h.day) for h in self.holidays}\n\n            # Adjust for holidays and business hours\n            n = self.n\n            adjust_days = n // 3\n            adjust_hours = n % 3\n\n            # Skip holiday dates within the period\n            while date_info.date() in holiday_dates:\n                date_info += timedelta(days=1)\n\n            # Adjust for business hours\n            if adjust_hours != 0:\n                business_hour_freq = CustomBusinessHour(start=self.start[0].strftime(\"%H:%M\"), end=self.end[0].strftime(\"%H:%M\"), holidays=self.holidays)\n                date_info = business_hour_freq.rollforward(date_info)\n\n            # Adjust for business days\n            if adjust_days != 0:\n                business_day_freq = CustomBusinessDay(holidays=self.holidays)\n                date_info = business_day_freq.rollforward(date_info)\n\n            return date_info\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas._libs.tslibs.offsets import BaseOffset",
                "from pandas.tseries.offsets import CustomBusinessDay, CustomBusinessHour"
            ]
        }
    ]
}