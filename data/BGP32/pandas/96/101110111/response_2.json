{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n\n            adjusted_time = other.replace(second=0, microsecond=0)  # Reset timezone and nanosecond\n            \n            if n >= 0:\n                if adjusted_time.time() in self.end or not self.is_on_offset(adjusted_time):\n                    adjusted_time = self._next_opening_time(adjusted_time)\n            else:\n                if adjusted_time.time() in self.start:\n                    # Move to the previous business day\n                    adjusted_time = adjusted_time - timedelta(seconds=1)\n                if not self.is_on_offset(adjusted_time):\n                    adjusted_time = self._next_opening_time(adjusted_time)\n                    adjusted_time = self._get_closing_time(adjusted_time)\n            \n            time_difference = self._get_business_hours_by_sec(self.start, self.end) * abs(n * 60)\n            bd, r = divmod(time_difference // 60, 60)\n            r = n if n < 0 else r\n\n            if bd != 0:\n                skip_bd = BusinessDay(n=bd)\n                adjusted_time += skip_bd if self.next_bday.is_on_offset(adjusted_time) else skip_bd - timedelta(days=1)\n            \n            bhour_remain = timedelta(minutes=r)\n            while bhour_remain != timedelta(0):\n                bhour = self._next_opening_time(adjusted_time) - adjusted_time if n >= 0 else adjusted_time - self._prev_opening_time(adjusted_time)\n                if bhour_remain >= bhour and (bhour_remain != bhour or adjusted_time.nanosecond != 0):\n                    adjusted_time += bhour\n                    bhour_remain -= bhour\n                else:\n                    adjusted_time += bhour_remain\n                    bhour_remain = timedelta(0)\n            \n            return adjusted_time\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}