{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        nanosecond = getattr(other, \"nanosecond\", 0)\n        \n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        \n        bd, r = divmod(abs(n) * 60, businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n        \n        timestamp = other\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            if not self.next_bday.is_on_offset(timestamp):\n                prev_open = self._prev_opening_time(timestamp)\n                remain = timestamp - prev_open\n                timestamp = prev_open + skip_bd + remain\n            else:\n                timestamp += skip_bd\n        \n        bhour_remain = timedelta(minutes=r)\n        for _ in range(abs(r)):\n            offset = self._next_opening_time(timestamp) - timestamp if n >= 0 else timestamp - self._prev_opening_time(timestamp)\n            if (n >= 0 and bhour_remain > offset) or (n < 0 and bhour_remain >= offset + timedelta(seconds=1) and nanosecond == 0):\n                timestamp += offset\n                bhour_remain -= offset\n            else:\n                timestamp += timedelta(minutes=1)\n        \n        return timestamp\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}