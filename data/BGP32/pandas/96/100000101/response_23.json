{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, pd.Timestamp):\n        n = self.n\n        \n        # adjust other to reduce the number of cases to handle\n        if n >= 0:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                # adjustment to move to the previous business day\n                other = other - pd.Timedelta(days=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n        \n        # calculate total business hours in one business day\n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        \n        bd = divmod(abs(n), len(self))  # calculate the number of business days to adjust\n        if n < 0:\n            bd = -bd  # adjust for negative values\n\n        # adjust by business days first\n        if bd != 0:\n            skip_bd = bd * self.next_bday\n            if self._is_on_offset(other):\n                other += skip_bd\n            else:\n                remain = other - self._prev_opening_time(other)\n                other += skip_bd + remain\n\n        # calculate remaining business hours to adjust\n        r = n % len(self)\n        bhour_remain = pd.Timedelta(minutes=r * 60)\n\n        # adjust remaining business hours\n        while bhour_remain != pd.Timedelta(0):\n            bhour = self._next_opening_time(other) - other if n > 0 else other - self._prev_opening_time(other)\n            if abs(bhour_remain) >= abs(bhour):\n                other += bhour\n                bhour_remain -= bhour\n            else:\n                other += bhour_remain\n                bhour_remain = pd.Timedelta(0)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}