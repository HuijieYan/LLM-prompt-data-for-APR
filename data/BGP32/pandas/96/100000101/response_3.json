{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def _adjust_hours_within_business_time(self, other, minutes, nanosecond):\n    remaining_time = timedelta(minutes=minutes)\n    \n    while remaining_time.total_seconds() != 0:\n        closing_time = self._get_closing_time(self._prev_opening_time(other))\n        opening_time = self._next_opening_time(other)\n        \n        if self.n >= 0:\n            current_bhour = closing_time - other\n            if remaining_time < current_bhour:\n                other += remaining_time\n                remaining_time = timedelta(0)\n            else:\n                remaining_time -= current_bhour\n                other = self._next_opening_time(opening_time)\n        else:\n            current_bhour = opening_time - other\n            if remaining_time > current_bhour or (remaining_time == current_bhour and nanosecond != 0):\n                other += remaining_time\n                remaining_time = timedelta(0)\n            else:\n                remaining_time -= current_bhour\n                other = self._get_closing_time(self._next_opening_time(other) - timedelta(seconds=1))\n    \n    return other",
            "import_list": []
        }
    ]
}