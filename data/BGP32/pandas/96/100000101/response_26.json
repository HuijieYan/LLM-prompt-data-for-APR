{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, pd.Timestamp):\n        n = self.n\n\n        # adjust other to reduce number of cases to handle\n        if n >= 0:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                # adjustment to move to previous business day\n                other -= pd.Timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        bday_offset = self.offset * 60\n\n        # adjust by business days first\n        if n:\n            other_weekday = other.weekday()\n            if n > 0:\n                while n:\n                    other += pd.Timedelta(days=1)\n                    if other.weekday() not in [5, 6] and other not in self.holidays:\n                        n -= 1\n            else:\n                while n:\n                    other -= pd.Timedelta(days=1)\n                    if other.weekday() not in [5, 6] and other not in self.holidays:\n                        n += 1\n\n        # remaining business hours to adjust\n        bhour_remain = n * 60\n\n        if n >= 0:\n            while bhour_remain:\n                bhour = (self._get_closing_time(self._prev_opening_time(other)) - other).seconds // 60\n                if bhour_remain < bhour:\n                    other += pd.Timedelta(minutes=bhour_remain)\n                    bhour_remain = 0\n                else:\n                    bhour_remain -= bhour\n                    other = self._next_opening_time(other + pd.Timedelta(minutes=bhour))\n        else:\n            while bhour_remain:\n                bhour = (self._next_opening_time(other) - other).seconds // 60\n                if bhour_remain > bhour:\n                    other += pd.Timedelta(minutes=bhour_remain)\n                    bhour_remain = 0\n                else:\n                    bhour_remain -= bhour\n                    other = self._get_closing_time(self._next_opening_time(other + pd.Timedelta(minutes=bhour - 1)))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with Timestamp\")",
            "import_list": []
        }
    ]
}