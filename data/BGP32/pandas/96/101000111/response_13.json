{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n\n            if n >= 0:\n                if other.time() in self.end or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start:\n                    other = other - timedelta(seconds=1)\n                if not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n\n            businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n            \n            skip_bd = BusinessDay(n=bd)\n\n            remaining_adjustment = timedelta(minutes=r)\n\n            while remaining_adjustment != timedelta(0):\n                if n >= 0:\n                    closing_time_prev_day = self._get_closing_time(self._prev_opening_time(other))\n                    business_hours_left = closing_time_prev_day - other\n\n                    if remaining_adjustment < business_hours_left:\n                        other += remaining_adjustment\n                        remaining_adjustment = timedelta(0)\n                    else:\n                        remaining_adjustment -= business_hours_left\n                        other = self._next_opening_time(other) + timedelta(seconds=1)\n\n                else:\n                    opening_time_next_day = self._next_opening_time(other)\n                    business_hours_left = opening_time_next_day - other\n\n                    if remaining_adjustment > business_hours_left or (remaining_adjustment == business_hours_left and other.nanosecond != 0):\n                        other += remaining_adjustment\n                        remaining_adjustment = timedelta(0)\n                    else:\n                        remaining_adjustment -= business_hours_left\n                        other = self._get_closing_time(self._next_opening_time(other + business_hours_left - timedelta(seconds=1)))\n            \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta",
                "from pandas._libs.tslibs.offsets import ApplyTypeError"
            ]
        }
    ]
}