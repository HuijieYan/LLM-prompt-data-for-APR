{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n\n            adjusted_dt = other.replace(hour=0, minute=0, second=0, microsecond=0)\n            businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n            # Adjust by business days first\n            if n != 0:\n                skip_bd = BusinessDay(n=n)\n                adjusted_dt = self.next_bday(adjusted_dt) if n > 0 else self.prev_bday(adjusted_dt)\n                while skip_bd.is_on_offset(adjusted_dt):\n                    adjusted_dt = self.next_bday(adjusted_dt, roll=True) if n > 0 else self.prev_bday(adjusted_dt, roll=True)\n\n            bhour_remain = timedelta(minutes=self.n * 60)\n\n            while bhour_remain != timedelta(0):\n                bhour = self._get_closing_time(self._prev_opening_time(adjusted_dt)) - adjusted_dt if n >= 0 else self._next_opening_time(adjusted_dt) - adjusted_dt\n                if n % 24 == 0:  # Full days remaining\n                    adjusted_dt = adjusted_dt.replace(hour=0, minute=0, second=0) + timedelta(days=1)\n                    bhour_remain -= timedelta(days=1)\n                elif bhour_remain >= bhour:\n                    adjusted_dt = self._next_opening_time(adjusted_dt + bhour)\n                    bhour_remain -= bhour\n                else:\n                    adjusted_dt += bhour_remain\n                    bhour_remain = timedelta(0)\n\n            return adjusted_dt.replace(hour=other.hour, minute=other.minute, second=other.second, microsecond=other.microsecond)\n\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}