{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if self.holidays and any(holiday.date() == other.date() for holiday in self.holidays):\n            raise ApplyTypeError(\"Holiday date detected: {}\".format(other.date()))\n\n        n = self.n\n\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # adjust by business days first\n        if bd != 0:\n            other_date = other.replace(hour=self.start[0].hour, minute=self.start[0].minute)\n            while bd != 0:\n                if bd > 0:\n                    other_date += timedelta(days=1)\n                else:\n                    other_date -= timedelta(days=1)\n\n                if other_date.weekday() < 5 and not any(other_date.date() == holiday.date() for holiday in self.holidays):\n                    bd -= 1\n\n            other = other_date.replace(hour=other.hour, minute=other.minute, second=other.second, microsecond=other.microsecond)\n\n        # remaining business hours to adjust\n        bhour_remain = timedelta(minutes=r)\n        if n >= 0:\n            while bhour_remain != timedelta(0):\n                business_end = self._get_closing_time(other)\n                remaining_hours = business_end - other\n                if bhour_remain < remaining_hours:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    other = self._next_opening_time(business_end)\n                    bhour_remain -= remaining_hours\n        else:\n            while bhour_remain != timedelta(0):\n                business_start = self._next_opening_time(other)\n                remaining_hours = business_start - other\n                if bhour_remain >= remaining_hours:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    other = self._get_closing_time(business_start - timedelta(seconds=1))\n                    bhour_remain -= remaining_hours\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}