{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if self.n == 0:\n            return other\n\n        if isinstance(other, date):\n            other = datetime.combine(other, datetime.min.time())  # Convert date to datetime\n\n        businessdays = pd.offsets.BDay(n=0)\n        adjustment = self.n\n\n        if self.n < 0:\n            businessdays = businessdays - 1\n            adjustment = self.n + 1\n\n        closest_opening = self._next_opening_time(other)\n\n        if other.time() > self.end[0] and adjustment > 0:\n            closest_opening = self._get_closing_time(closest_opening)\n\n        adjusted_date = closest_opening + businessdays * abs(adjustment)\n\n        if adjustment < 0 and adjusted_date.time() < self.start[0]:\n            adjusted_date = self._prev_closing_time(adjusted_date)\n\n        if isinstance(other, date):  # Convert back to date if input was date\n            adjusted_date = adjusted_date.date()\n\n        return adjusted_date\n    else:\n        raise ApplyTypeError(\"Only know how to combine a business hour with a datetime\")",
            "import_list": []
        }
    ]
}