{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if not self.on_offset(other):\n            other = self._next_opening_time(other)\n        \n        n = self.n\n        target_date = other\n\n        business_hours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        \n        total_minutes = abs(n * 60)\n        business_days, remaining_minutes = divmod(total_minutes, business_hours // 60)\n        \n        if n < 0:\n            business_days, remaining_minutes = -business_days, -remaining_minutes\n        \n        business_hour_remain = timedelta(minutes=remaining_minutes)\n        \n        for _ in range(abs(business_days)):\n            target_date = (target_date + BusinessDay(1) if n > 0 else target_date - BusinessDay(1)).replace(\n                hour=0, minute=0, second=0, microsecond=0\n            )\n            while business_hour_remain.total_seconds() > 0:\n                business_hour = self._get_closing_time(target_date) - target_date\n                if business_hour_remain < business_hour:\n                    target_date += business_hour_remain\n                    business_hour_remain = timedelta()\n                else:\n                    business_hour_remain -= business_hour\n                    target_date = self._next_opening_time(target_date + business_hour)\n        \n        if n < 0:\n            target_date += self._get_closing_time(self._next_opening_time(target_date + business_hour)) - target_date\n        \n        return target_date\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}