{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if self._is_on_offset(other):\n            return other\n        \n        # Get total business hours in one business day\n        business_hours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        n = self.n\n        total_secs = abs(n) * 60 * 60\n\n        if n >= 0:\n            # Forward adjustment\n            while total_secs > 0:\n                current_time = other.time()\n                if current_time >= self.end[-1]:  # After business hours\n                    next_day = date(other.year, other.month, other.day) + timedelta(days=1)\n                    other = datetime.combine(next_day, self.start[0])\n                else:\n                    for start, end in zip(self.start, self.end):\n                        if start <= current_time < end:\n                            diff_to_end = (end - current_time).total_seconds()\n                            if total_secs < diff_to_end:\n                                return other.replace(hour=end.hour, minute=end.minute, second=end.second) + timedelta(seconds=total_secs)\n                            else:\n                                total_secs -= diff_to_end\n                    next_day = date(other.year, other.month, other.day) + timedelta(days=1)\n                    other = datetime.combine(next_day, self.start[0])\n        else:\n            # Backward adjustment\n            total_secs = -total_secs\n            while total_secs > 0:\n                current_time = other.time()\n                if current_time < self.start[0]:  # Before business hours\n                    previous_day = date(other.year, other.month, other.day) - timedelta(days=1)\n                    other = datetime.combine(previous_day, self.end[-1])\n                else:\n                    for start, end in zip(self.start, self.end):\n                        if start < current_time <= end:\n                            diff_to_start = (current_time - start).total_seconds()\n                            if total_secs < diff_to_start:\n                                return other.replace(hour=start.hour, minute=start.minute, second=start.second) - timedelta(seconds=total_secs)\n                            else:\n                                total_secs -= diff_to_start\n                    previous_day = date(other.year, other.month, other.day) - timedelta(days=1)\n                    other = datetime.combine(previous_day, self.end[-1])\n        \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}