{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if self.is_on_offset(other):\n            return other\n\n        other = as_datetime(other)\n        n = self.n\n\n        business_hours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n        bd, r = divmod(abs(n) * 60, business_hours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        for _ in range(abs(bd)):\n            other = self.rollforward(other) if n > 0 else self.rollback(other)\n\n        minutes = (bd * business_hours) // 60\n        minutes += r\n        while minutes > 0:\n            next_time = self.rollforward(other) if n > 0 else self.rollback(other)\n            delta = (next_time - other).seconds // 60\n            if delta < minutes:\n                other = next_time\n                minutes -= delta\n            else:\n                other += timedelta(minutes=minutes)\n                break\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}