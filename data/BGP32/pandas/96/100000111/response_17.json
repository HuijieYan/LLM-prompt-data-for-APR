{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # reset timezone and nanosecond\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        n = self.n\n\n        total_business_hours = sum(\n            (en.hour * 60 + en.minute) - (st.hour * 60 + st.minute)\n            for st, en in zip(self.start, self.end)\n        )\n\n        bd, r = divmod(abs(n * 60), total_business_hours)\n        if n < 0:\n            bd, r = -bd, -r\n\n        if bd != 0:\n            holiday_count = sum(1 for holiday in self.holidays if other.date() > holiday)\n            skip_days = BusinessDay(n=(bd + holiday_count))\n            other += skip_days\n\n        if r != 0:\n            minutes_remain = r\n            positive_increment = n >= 0\n            while minutes_remain != 0:\n                current_hour = other.hour * 60 + other.minute\n                if positive_increment:\n                    next_open_hour = min(st.hour * 60 + st.minute for st in self.start if st.hour * 60 + st.minute > current_hour)\n                    diff = min(next_open_hour - current_hour, minutes_remain)\n                else:\n                    prev_end_hour = max(en.hour * 60 + en.minute for en in self.end if en.hour * 60 + en.minute < current_hour)\n                    diff = min(current_hour - prev_end_hour, -minutes_remain)\n\n                other += timedelta(minutes=diff)\n                minutes_remain -= diff\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}