{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        nanosecond = getattr(other, \"nanosecond\", 0)\n        n = self.n\n\n        offset_hours = self._get_offset_hours()\n\n        if n >= 0:\n            other_time = other.time()\n            if other_time in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n\n        else:\n            if other.time() in self.start:\n                other -= timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        business_hours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n        if business_hours == 0:\n            raise ApplyTypeError(\"Cannot handle business hour with 0 business hours in a day\")\n\n        total_minutes = n * 60\n        hours, minutes = divmod(abs(total_minutes), 60)\n\n        if n < 0:\n            sign = -1\n        else:\n            sign = 1\n\n        skip_bd = BusinessDay(n=(sign * hours // offset_hours))\n        remaining_minutes = timedelta(minutes=sign * minutes)\n\n        if sign == 1:\n            # Adjust for business days first\n            other = other + skip_bd\n\n            # Adjust for remaining minutes\n            while remaining_minutes.total_seconds() > 0:\n                time_remaining = self._get_closing_time(self._prev_opening_time(other)) - other\n\n                if remaining_minutes.total_seconds() <= time_remaining.total_seconds():\n                    other += remaining_minutes\n                    break\n                else:\n                    remaining_minutes -= time_remaining\n                    other = self._next_opening_time(other)  # Move to next business time interval\n\n        else:\n            # Adjust for business days first\n            if not self._is_on_offset(other):\n                prev_open = self._prev_opening_time(other)\n                remain = other - prev_open\n                other = prev_open + skip_bd + remain\n            else:\n                other += skip_bd\n\n            # Adjust for remaining minutes\n            while remaining_minutes.total_seconds() > 0:\n                time_remaining = self._next_opening_time(other) - other\n\n                if remaining_minutes.total_seconds() >= time_remaining.total_seconds() or \\\n                        (remaining_minutes == time_remaining and nanosecond != 0):\n                    other += time_remaining\n                else:\n                    other += remaining_minutes\n\n                remaining_minutes = timedelta(0)\n\n        return other\n\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.core.indexes.datetimes import DatetimeIndex"
            ]
        }
    ]
}