{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        holidays = getattr(self, 'holidays', [])\n        \n        business_hours = [st.time() for st in self.start] + [en.time() for en in self.end]\n        \n        if other in holidays or other.time() not in business_hours:\n            other = self._next_opening_time(other)\n        \n        else:\n            if n >= 0:\n                while other.time() not in self.start:\n                    other = self._next_opening_time(other)\n            else:\n                while other.time() not in self.end:\n                    other = self._next_closing_time(other)\n        \n        total_minutes = sum((en - st).seconds // 60 for st, en in zip(self.start, self.end))\n        bd, r = divmod(abs(n * 60), total_minutes)\n        if n < 0:\n            bd, r = -bd, -r\n        \n        if bd != 0:\n            other = BusinessDay(n=bd).apply(other)\n        \n        bhour_remain = timedelta(minutes=r)\n        \n        while bhour_remain != timedelta(0):\n            if n > 0:\n                bhour = self._next_closing_time(other) - other\n                other += min(bhour_remain, bhour)\n            else:\n                bhour = other - self._next_opening_time(other)\n                other -= min(bhour_remain, bhour)\n        \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}