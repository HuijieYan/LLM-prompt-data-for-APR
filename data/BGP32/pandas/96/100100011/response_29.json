{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other): \n    if isinstance(other, datetime): \n        if any(h in self.__dict__ for h in ['holidays','holidays_list']):\n            raise NotImplementedError(\"Holiday logic not yet implemented\")\n        else:\n            bhour = self.rollforward(other)\n            ur = self._unadjusted_offset(other)\n            n = self._int_from_offset(other, ur)\n            \n            hour, minute, second = bhour.hour, bhour.minute, bhour.second\n            # Adjustment to move to previous business day if necessary\n            if n < 0:\n                if not self.onOffset(other + timedelta(microseconds=-1)):\n                    other = self.rollforward(other)\n                    other = self._get_prev_business_time(other)\n            \n            # Adjust for business days\n            if n != 0:\n                other = self._apply_business_day_offset(other, n, 0)\n            \n            # Adjust for business hours\n            if n != 0:\n                bhour_remain = bhour.second + bhour.minute * 60 + bhour.hour * 3600\n                while bhour_remain != 0:\n                    if n >= 0:\n                        next_open = self.rollforward(other)\n                        diff = next_open - other\n                        if bhour_remain >= diff.total_seconds():\n                            other = next_open\n                            bhour_remain -= diff.total_seconds()\n                            other = self._next_opening_time(other)\n                        else:\n                            return (other + timedelta(seconds=bhour_remain))\n                    else:\n                        prev_open = self.rollforward(other) - timedelta(days=1)\n                        diff = other - prev_open\n                        if bhour_remain > diff.total_seconds():\n                            other = prev_open\n                            bhour_remain -= diff.total_seconds()\n                            other = self._get_closing_time(other)\n                        else:\n                            return (other - timedelta(seconds=bhour_remain))\n            return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}