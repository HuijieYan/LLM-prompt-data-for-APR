{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        origin_dt = datetime(\n            other.year, other.month, other.day, other.hour, other.minute, other.second, other.microsecond\n        )\n\n        n = self.n\n\n        if n >= 0:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                other -= timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        business_hours = sum(self._get_business_hours_by_sec(start, end) for start, end in zip(self.start, self.end))\n\n        business_days, remaining_minutes = divmod(abs(n * 60), business_hours // 60)\n        if n < 0:\n            business_days, remaining_minutes = -business_days, -remaining_minutes\n\n        if business_days != 0:\n            skip_bd = BusinessDay(n=business_days)\n            if not self._is_on_offset(skip_bd.apply(other)):\n                other = self._prev_opening_time(other) + skip_bd\n\n        remaining_time_diff = timedelta(minutes=remaining_minutes)\n\n        while remaining_time_diff != timedelta(0):\n            current_diff = self._get_closing_time(self._prev_opening_time(other)) - other if n >= 0 else self._next_opening_time(other) - other\n\n            if n >= 0 or (n < 0 and (remaining_time_diff > current_diff or (remaining_time_diff == current_diff and getattr(other, \"nanosecond\", 0) != 0))):\n                other += remaining_time_diff\n                remaining_time_diff = timedelta(0)\n            else:\n                remaining_time_diff -= current_diff\n                other = self._get_closing_time(self._next_opening_time(other) - timedelta(seconds=1))\n\n        return other\n\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}