{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # original implementation goes here (removed for brevity)\n\n        # get total business hours by sec in one business day\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        # calculate total business minutes per business day\n        businessminutes_per_day = businesshours // 60\n\n        # calculate the total number of business days required\n        n_business_days = abs(n) // businessminutes_per_day\n\n        if n < 0:\n            n_business_days = -n_business_days\n\n        other_date = other.replace(hour=0, minute=0, second=0, microsecond=0)\n        \n        # adjust by business days first\n        business_day_offset = timedelta(days=n_business_days)\n        adjusted_date = other_date + business_day_offset\n\n        # remaining business hours to adjust\n        remaining_business_hours = timedelta(minutes=abs(n) % businessminutes_per_day)\n\n        # find the nearest business hour in the business day\n        nearest_business_hour = next(i for i in range(len(self.start)) if self.start[i].hour > other.hour)\n\n        # update the adjusted date's hour to the nearest business hour\n        adjusted_date = adjusted_date.replace(hour=self.start[nearest_business_hour].hour)\n\n        if n < 0:\n            adjusted_date = self._get_closing_time(adjusted_date)  # adjust to the end hour if n < 0\n\n        if remaining_business_hours != timedelta(0):\n            if n >= 0:\n                adjusted_date = self._next_opening_time(adjusted_date)\n            else:\n                adjusted_date = self._get_closing_time(adjusted_date)\n\n            # move by the remaining business hours\n            adjusted_date += remaining_business_hours\n\n        return adjusted_date\n\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}