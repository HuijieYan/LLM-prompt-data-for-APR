{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if other in self:\n            return other\n        start = others = other.replace(minute=0, second=0, microsecond=0)\n\n        if self.onOffset(others):\n            if self._is_on_offset(others):\n                _other = others\n            else:\n                _other = self._next_opening_time(others)\n                if self.onOffset(_other):\n                    return _other + self.offset\n\n            while True:\n                start = _other\n                for _ in range(self.n):\n                    _other += self.offset\n                    if self.onOffset(_other):\n                        return _other\n                    if isinstance(self, CustomBusinessHour):\n                        if _other.weekday() == 4:\n                            _other += timedelta(days=2)\n                        elif _other.weekday() == 5:\n                            _other += timedelta(days=1)\n                if start == _other:\n                    raise ValueError(\"Cannot determine next business start\")\n\n        else:\n            while self.onOffset(others):\n                others -= self.offset\n\n            while True:\n                if self.onOffset(others):\n                    return others\n\n                for _ in range(1, -self.n):\n                    others -= self.offset\n                    if self.onOffset(others):\n                        return others\n                    if isinstance(self, CustomBusinessHour):\n                        if others.weekday() == 4:\n                            others -= timedelta(days=2)\n                        elif others.weekday() == 5:\n                            others -= timedelta(days=1)\n\n                if start == others:\n                    raise ValueError(\"Cannot determine next business start\")\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}