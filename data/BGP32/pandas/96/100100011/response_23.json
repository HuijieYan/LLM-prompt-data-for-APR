{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if isinstance(other, pd.Timestamp):\n            other = other.to_pydatetime()\n\n        n = self.n\n\n        # handle negative offset by moving back to the last business hour of the previous day\n        if n < 0:\n            other = other.replace(hour=self.start[-1].hour, minute=0, second=0, microsecond=0)\n            while not self._is_on_offset(other):\n                other -= timedelta(hours=1)\n\n        # get total business hours by sec in one business day\n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # adjust by business days first\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            other += skip_bd\n\n        # remaining business hours to adjust\n        bhour_remain = timedelta(minutes=r)\n\n        while bhour_remain.total_seconds() > 0:\n            if n >= 0:\n                next_opening = self._next_opening_time(other)\n                diff = next_opening - other\n            else:\n                if other.time() in self.end:\n                    other = self._prev_closing_time(other)\n                prev_opening = self._prev_opening_time(other)\n                diff = other - prev_opening\n\n            if bhour_remain < diff:\n                other += bhour_remain\n                bhour_remain = timedelta(0)\n            else:\n                bhour_remain -= diff\n                if n >= 0:\n                    other = self._next_opening_time(next_opening)\n                else:\n                    other = self._prev_opening_time(prev_opening)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}