{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        if n >= 0:\n            first_opening_time = self._next_opening_time(other)\n            other = first_opening_time if other.time() not in self.end else other\n        else:\n            other -= timedelta(seconds=1) if other.time() in self.start else other\n            previous_opening = self._prev_opening_time(other)\n            other = self._next_opening_time(previous_opening) if other.time() not in self.end else self._get_closing_time(other)\n        \n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        \n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n        \n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            previous_business_day = skip_bd.apply(other)\n            business_day_hours = self._get_business_hours_by_sec(self.start[0], self.end[0])\n            remaining_hours = bd * business_day_hours * 60\n            other = previous_business_day + timedelta(minutes=remaining_hours)\n        \n        if r != 0:\n            remaining_seconds = r * 60\n            while remaining_seconds > 0:\n                closing_time = self._get_closing_time(other)\n                next_opening = self._next_opening_time(other)\n                opening_hours = (next_opening - other).total_seconds()\n                if remaining_seconds >= opening_hours:\n                    remaining_seconds -= opening_hours\n                    other = next_opening\n                else:\n                    other += timedelta(seconds=remaining_seconds)\n                    remaining_seconds = 0\n        \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}