{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n            n = self.n\n            adjusted_time = other\n\n            if n >= 0:\n                if other.time() in self.end or not self._is_on_offset(other):\n                    adjusted_time = self._next_opening_time(other)\n            else:\n                if other.time() in self.start:\n                    adjusted_time -= timedelta(seconds=1)\n                if not self._is_on_offset(other):\n                    adjusted_time = self._next_opening_time(other)\n                    adjusted_time = self._get_closing_time(adjusted_time)\n            \n            days_to_adjust = n // businesshours\n            remaining_minutes = abs(n * 60) % (businesshours // 60)\n\n            if n < 0:\n                days_to_adjust = -days_to_adjust\n                remaining_minutes = -remaining_minutes\n\n            if days_to_adjust != 0:\n                skip_bd = BusinessDay(n=days_to_adjust)\n                adjusted_time = adjusted_time + skip_bd\n            \n            while remaining_minutes > 0:\n                bhour = self._next_opening_time(adjusted_time) - adjusted_time\n                if remaining_minutes >= bhour.total_seconds() // 60:\n                    adjusted_time += bhour\n                    remaining_minutes -= bhour.total_seconds() // 60\n                else:\n                    adjusted_time += timedelta(minutes=remaining_minutes)\n                    remaining_minutes = 0\n\n            return adjusted_time\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}