{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n\n            if self.holidays and other.floor(\"D\") in self.holidays:\n                raise ApplyTypeError(\"Holidays are not supported in CustomBusinessHour\")\n\n            total_seconds = 3600  # seconds in an hour\n            \n            if n >= 0:\n                next_opening_time = self._next_opening_time(other)\n                if next_opening_time.time() not in self.start:\n                    other = next_opening_time\n            else:\n                if other.time() in self.start:\n                    other -= timedelta(seconds=1)\n                if other.time() not in self.start:\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n            \n            business_hours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            bd, r = divmod(abs(n * 60), business_hours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n            \n            if bd != 0:\n                if not self.next_bday.is_on_offset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + BusinessDay(n=bd) + remain\n                else:\n                    other += BusinessDay(n=bd)\n            \n            while r != 0:\n                bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                if r < bhour.total_seconds() / total_seconds:\n                    other += timedelta(minutes=r)\n                    r = 0\n                else:\n                    other = self._next_opening_time(other + bhour)\n                    r -= bhour.total_seconds() / total_seconds\n                \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}