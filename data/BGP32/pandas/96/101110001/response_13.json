{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # used for detecting edge condition\n        nanosecond = getattr(other, \"nanosecond\", 0)\n\n        n = self.n\n        other = pd.Timestamp(other)\n\n        if n >= 0:\n            if other.time() in self.end or not self.is_on_offset(other):\n                other = self.next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                # adjustment to move to previous business day\n                other = other - pd.Timedelta(seconds=1)\n            if not self.is_on_offset(other):\n                other = self.next_opening_time(other)\n                other = self.get_closing_time(other)\n\n        bd, r = divmod(abs(n * 60), 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # adjust by business days first\n        if bd != 0:\n            prev_open = self.prev_opening_time(other)\n            other = prev_open + pd.offsets.BusinessDay(n=bd)\n\n        # remaining business hours to adjust\n        bhour_remain = pd.Timedelta(minutes=r)\n\n        while bhour_remain != pd.Timedelta(0):\n            if n >= 0:\n                bhour = self.get_closing_time(self.prev_opening_time(other)) - other\n            else:\n                bhour = self.next_opening_time(other) - other\n\n            if bhour_remain < bhour:\n                other += bhour_remain\n                break\n\n            bhour_remain -= bhour\n            other = self.next_opening_time(other)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}