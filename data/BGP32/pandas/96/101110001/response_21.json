{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # existing code ...\n            \n            # adjust business days using CustomBusinessHour logic\n            if bd != 0:\n                business_hour = CustomBusinessHour(self.start[0].strftime(\"%H:%M\"), self.end[0].strftime(\"%H:%M\"))\n                other = business_hour.rollback(other)\n                other = business_hour.rollforward(other + skip_bd)\n                \n            # adjust remaining business hours using CustomBusinessHour logic\n            if n >= 0:\n                while bhour_remain != timedelta(0):\n                    business_hour = CustomBusinessHour(self.start[0].strftime(\"%H:%M\"), self.end[0].strftime(\"%H:%M\"))\n                    other = business_hour.rollforward(other)\n                    bhour = business_hour.end_time - other\n                    if bhour_remain < bhour:\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        bhour_remain -= bhour\n            else:\n                while bhour_remain != timedelta(0):\n                    business_hour = CustomBusinessHour(self.start[0].strftime(\"%H:%M\"), self.end[0].strftime(\"%H:%M\"))\n                    other = business_hour.rollforward(other)\n                    bhour = other - business_hour.start_time\n                    if bhour_remain < bhour:\n                        other -= bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        bhour_remain -= bhour\n            \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}