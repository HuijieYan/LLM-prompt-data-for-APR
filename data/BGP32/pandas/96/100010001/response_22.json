{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if not self.on_offset(other):  # Check if the datetime is on the offset\n            other = self.rollforward(other)  # Adjust to next valid business hour\n        n = self.n  # Number of business hours to move\n\n        bd, r = divmod(abs(n), len(self))\n\n        if n < 0:\n            bd = -bd\n            r = -r\n\n        other += bd * BDay(n=bd)  # Move by business days first\n\n        if n >= 0:\n            while r != 0:\n                next_time = self.next_close(other)\n                if r < next_time - other:  # Finish adjusting if possible\n                    other += r\n                    r = 0\n                else:  # Move to next business time interval\n                    r -= next_time - other\n                    other = self.next_open(other + BDay())\n\n        else:\n            while r != 0:\n                prev_time = self.last_close(other)\n                if r < other - prev_time:  # Finish adjusting if possible\n                    other += r\n                    r = 0\n                else:  # Move to previous business time interval\n                    r -= other - prev_time\n                    other = self.last_open(other - BDay())\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}