{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if not isinstance(self, CustomBusinessHour):\n            raise ApplyTypeError(\"Only know how to combine CustomBusinessHour with datetime\")\n\n        n = self.n\n\n        adjusted_datetime = other\n\n        if n >= 0:\n            if other.time() not in self.end or not self._is_on_offset(other):\n                adjusted_datetime = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                adjusted_datetime = other - timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                adjusted_datetime = self._next_opening_time(other)\n                adjusted_datetime = self._get_closing_time(adjusted_datetime)\n\n        total_business_hours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        bd, r = divmod(abs(n * 60), total_business_hours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        if bd != 0:\n            skip_bd = CustomBusinessHour(n=bd)\n            if not skip_bd.is_on_offset(adjusted_datetime):\n                prev_open = skip_bd.rollback(adjusted_datetime)\n                remain = adjusted_datetime - prev_open\n                adjusted_datetime = prev_open + skip_bd + remain\n            else:\n                adjusted_datetime = adjusted_datetime + skip_bd\n\n        bhour_remain = timedelta(minutes=r)\n\n        while bhour_remain != timedelta(0):\n            if n >= 0:\n                bhour = self._get_closing_time(self._prev_opening_time(adjusted_datetime)) - adjusted_datetime\n            else:\n                bhour = self._next_opening_time(adjusted_datetime) - adjusted_datetime\n\n            if n >= 0 and bhour_remain < bhour:\n                adjusted_datetime += bhour_remain\n                bhour_remain = timedelta(0)\n            elif n < 0 and (bhour_remain > bhour or (bhour_remain == bhour and other.nanosecond != 0)):\n                adjusted_datetime += bhour_remain\n                bhour_remain = timedelta(0)\n            else:\n                bhour_remain -= bhour\n                if n >= 0:\n                    adjusted_datetime = self._next_opening_time(adjusted_datetime + bhour)\n                else:\n                    adjusted_datetime = self._get_closing_time(self._next_opening_time(adjusted_datetime + bhour - timedelta(seconds=1)))\n        \n        return adjusted_datetime\n    else:\n        raise ApplyTypeError(\"Only know how to combine CustomBusinessHour with datetime\")",
            "import_list": []
        }
    ]
}