{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            start = self.start\n            end = self.end\n            holidays = getattr(self, 'holidays', None)  # New: Get holidays if defined\n            \n            target_datetime = other\n            \n            if n >= 0:\n                if target_datetime.time() in end or not self._is_on_offset(target_datetime):\n                    target_datetime = self._next_opening_time(target_datetime)\n            else:\n                if target_datetime.time() in start:\n                    target_datetime -= timedelta(seconds=1)\n                if not self._is_on_offset(target_datetime):\n                    target_datetime = self._next_opening_time(target_datetime)\n                    target_datetime = self._get_closing_time(target_datetime)\n            \n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(start, end)\n            )\n            \n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n            \n            if bd != 0:\n                skip_bd = BusinessDay(n=bd)\n                if holidays and any(h == target_datetime.date() for h in holidays):\n                    # Skip holidays\n                    target_datetime += skip_bd\n                else:\n                    remaining_time = target_datetime - self._prev_opening_time(target_datetime)\n                    target_datetime = self._prev_opening_time(target_datetime) + skip_bd + remaining_time\n            \n            bhour_remain = timedelta(minutes=r)\n            \n            while bhour_remain.total_seconds() > 0:\n                if n >= 0:\n                    bhour = self._get_closing_time(self._prev_opening_time(target_datetime)) - target_datetime\n                else:\n                    bhour = self._next_opening_time(target_datetime) - target_datetime\n                \n                if bhour_remain >= bhour:\n                    target_datetime += bhour\n                    bhour_remain -= bhour\n                    if holidays and any(h == target_datetime.date() for h in holidays):\n                        # Skip holidays\n                        target_datetime = self._next_opening_time(target_datetime)\n                else:\n                    target_datetime += bhour_remain\n                    bhour_remain = timedelta(0)\n            \n            return target_datetime\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import CustomBusinessHour, BusinessMixin, BusinessDay"
            ]
        }
    ]
}