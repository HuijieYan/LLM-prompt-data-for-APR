{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n            if self.holidays and other.date() in self.holidays:\n                raise ValueError(\"Given datetime falls on a holiday.\")\n\n            adjusted_time = other\n            remaining_seconds = abs(n * 60 * 3600)\n\n            if n < 0:\n                adjusted_time = self._next_opening_time(other)\n                adjusted_time = self._get_closing_time(adjusted_time)\n\n            while remaining_seconds > 0:\n                bhour = self._get_closing_time(self._prev_opening_time(adjusted_time)) - adjusted_time\n                if bhour.total_seconds() > remaining_seconds:\n                    adjusted_time += timedelta(seconds=remaining_seconds)\n                    remaining_seconds = 0\n                else:\n                    remaining_seconds -= bhour.total_seconds()\n                    adjusted_time = self._next_opening_time(adjusted_time + bhour)\n\n            return adjusted_time\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "import pandas as pd",
                "from pandas.tseries.offsets import CustomBusinessHour",
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}