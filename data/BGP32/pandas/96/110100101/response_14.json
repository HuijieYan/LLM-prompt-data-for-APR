{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def _adjust_for_positive_n(self, other):\n    n = self.n\n    \n    businesshours = sum(\n        self._get_business_hours_by_sec(st, en)\n        for st, en in zip(self.start, self.end)\n    )\n\n    bd, r = divmod(abs(n * 60), businesshours // 60)\n    if n < 0:\n        bd, r = -bd, -r\n\n    adjusted_time = other\n    \n    # adjust by business days first\n    if bd != 0:\n        skip_bd = BusinessDay(n=bd)\n        if not self.next_bday.is_on_offset(other):\n            adjusted_time = self._previous_business_day(adjusted_time)\n        adjusted_time += skip_bd\n\n    # remaining business hours to adjust\n    bhour_remain = timedelta(minutes=r)\n\n    while bhour_remain != timedelta(0):\n        if n >= 0:\n            bhour = self._get_closing_time(self._prev_opening_time(adjusted_time)) - adjusted_time\n        else:\n            bhour = self._next_opening_time(adjusted_time) - adjusted_time\n\n        if bhour_remain < bhour:\n            adjusted_time += bhour_remain\n            bhour_remain = timedelta(0)\n        else:\n            bhour_remain -= bhour\n            if n >= 0:\n                adjusted_time = self._next_opening_time(adjusted_time + bhour)\n            else:\n                adjusted_time = self._get_closing_time(self._next_opening_time(adjusted_time + bhour))\n\n    return adjusted_time",
            "import_list": []
        }
    ]
}