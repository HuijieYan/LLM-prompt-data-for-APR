{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        other_dt = other.replace(tzinfo=None) if getattr(other, \"tzinfo\", None) else other\n\n        if n >= 0:\n            if other_dt.time() in self.end or not self._is_on_offset(other_dt):\n                other_dt = self._next_opening_time(other_dt)\n        else:\n            if other_dt.time() in self.start:\n                other_dt -= timedelta(seconds=1)\n            while other_dt.time() not in self.start:\n                other_dt -= timedelta(seconds=1)\n\n        adjusted_time = self._adjust_to_offset(other_dt)\n        total_hours, remaining_hours = divmod(abs(n) * 60, self._business_open_duration())\n        adjust_days = total_hours // 60 if n >= 0 else 0\n        remaining_minutes = remaining_hours\n\n        for _ in range(adjust_days):\n            adjusted_time = self._next_opening_time(adjusted_time)\n\n        adjusted_time += timedelta(minutes=remaining_minutes)\n\n        return adjusted_time.replace(tzinfo=None)\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}