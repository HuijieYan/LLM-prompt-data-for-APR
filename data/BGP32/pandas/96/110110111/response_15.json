{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if not isinstance(other, pd.Timestamp):\n            other = pd.Timestamp(other)\n\n        ts = other\n        n = self.n\n\n        if n >= 0 and ts.time() in self.end:\n            ts = self._next_opening_time(ts)\n\n        if n < 0 and ts.time() in self.start:\n            ts = ts - timedelta(seconds=1)\n\n        ts = self._get_opening_time(ts)\n        ts = self._skip_custom_bh_days(ts, n)\n\n        hours = self._business_hours_timedelta()\n        bd, r = divmod(abs(n), hours.total_seconds() // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        if bd != 0:\n            ts = self._skip_custom_bh_days(ts, bd)\n\n        bhour_remain = timedelta(minutes=r)\n        if n >= 0:\n            while bhour_remain > timedelta(0):\n                ts = self._next_opening_time(ts)\n                bhour = self._next_opening_time(ts) - ts\n                if bhour_remain < bhour:\n                    ts += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    ts = self._next_opening_time(ts)\n        else:\n            while bhour_remain < timedelta(0):\n                ts = self._get_closing_time(ts)\n                bhour = ts - self._get_closing_time(self._prev_opening_time(ts))\n                if abs(bhour_remain) < bhour:\n                    ts += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain += bhour\n                    ts = self._prev_opening_time(ts)\n\n        return ts\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}