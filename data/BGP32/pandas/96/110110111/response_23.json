{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        other_date = other.date()  # Extract the date part\n        if other_date in self.holidays:\n            raise ApplyTypeError(\"The given date is a holiday\")\n        \n        reference_start = datetime.combine(other_date, self.start[0])  # Reference with start time\n        if other.time() < self.start[0] or other.time() >= self.end[0]:\n            other = self._next_opening_time(other, reference_start)\n        \n        interval_start = datetime.replace(other, hour=self.start[0].hour, minute=0, second=0, microsecond=0)\n        \n        total_hours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        total_seconds = (other - interval_start).total_seconds()\n        n, r = divmod(abs(total_seconds), total_hours)\n        n = -n if self.start[0] > self.end[0] else n\n\n        if n != 0:\n            if n > 0:\n                other += n * timedelta(days=1)\n            else:\n                other -= abs(n) * timedelta(days=1)\n\n        if r != 0:\n            boundary_delta = self._get_closing_time(interval_start) - other if n < 0 else other - interval_start\n            boundary_delta_seconds = boundary_delta.total_seconds()\n            if boundary_delta_seconds >= 0:  # Adjust within the boundary\n                other += timedelta(seconds=min(r*60, boundary_delta_seconds))\n            else:  # Move to the next interval\n                other = self._next_opening_time(other, reference_start)\n                other = self._get_closing_time(other)\n                \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}