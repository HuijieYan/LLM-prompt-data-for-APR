{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, pd.Timestamp):\n        n = self.n\n        adjusted_datetime = other\n\n        # Adjust datetime based on business hours and holidays\n        if n >= 0:\n            if adjusted_datetime.time() not in self.end or not self._is_on_offset(adjusted_datetime):\n                adjusted_datetime = self._next_opening_time(adjusted_datetime)\n        else:\n            if adjusted_datetime.time() in self.start:\n                # Move to the previous business day\n                adjusted_datetime -= timedelta(days=1)\n            if not self._is_on_offset(adjusted_datetime):\n                adjusted_datetime = self._next_opening_time(adjusted_datetime)               \n                adjusted_datetime = self._get_closing_time(adjusted_datetime)\n\n        # Calculate total business hours in a day\n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # Adjust by business days first\n        if bd != 0:\n            skip_bd = CustomBusinessDay(n=bd)\n            if not self.next_bday.is_on_offset(adjusted_datetime):\n                prev_open = self._prev_opening_time(adjusted_datetime)\n                remain = adjusted_datetime - prev_open\n                adjusted_datetime = prev_open + skip_bd + remain\n            else:\n                adjusted_datetime += skip_bd\n\n        # Calculate remaining business hours to adjust        \n        bhour_remain = timedelta(minutes=r)\n\n        while bhour_remain > timedelta(0):\n            if n >= 0:\n                bhour = self._get_closing_time(self._prev_opening_time(adjusted_datetime)) - adjusted_datetime\n            else:\n                bhour = self._next_opening_time(adjusted_datetime) - adjusted_datetime\n            \n            if bhour_remain >= bhour or (bhour_remain == bhour and adjusted_datetime.nanosecond != 0):\n                adjusted_datetime += bhour\n                bhour_remain -= bhour\n            else:\n                adjusted_datetime += bhour_remain\n                bhour_remain -= bhour\n\n        return adjusted_datetime\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}