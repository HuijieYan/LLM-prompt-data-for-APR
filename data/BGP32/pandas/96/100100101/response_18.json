{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, Timestamp):\n        if isinstance(other, Timestamp):\n            n = self.n\n\n            if n > 0:\n                if other.time() >= self.end[0] or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            elif n < 0:\n                if other.time() < self.start[0]:\n                    previous_day = other - timedelta(days=1)\n                    other = self._prev_closing_time(previous_day)\n                if not self._is_on_offset(other):\n                    other = self._prev_closing_time(other)\n\n            bd, r = divmod(abs(n * 60), 60)\n\n            if n < 0:\n                bd, r = -bd, -r\n\n            if bd != 0:\n                for _ in range(abs(bd)):\n                    if n > 0:\n                        other += self.next_bday\n                        if not self.next_bday.is_on_offset(other):\n                            other = self._next_opening_time(other)\n                    else:\n                        other -= self.next_bday\n                        if not self.next_bday.is_on_offset(other):\n                            other = self._prev_closing_time(other)\n\n            if r != 0:\n                bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                if n > 0:\n                    next_bhour_opening = self._next_opening_time(other)\n                else:\n                    next_bhour_opening = self._get_closing_time(self._next_opening_time(other - timedelta(seconds=1)))\n\n                while r > 0:\n                    if r >= bhour.seconds // 60:\n                        r -= bhour.seconds // 60\n                        other = next_bhour_opening\n                        next_bhour_opening = self._next_opening_time(next_bhour_opening)\n                        bhour = self._get_closing_time(self._prev_opening_time(next_bhour_opening)) - next_bhour_opening\n                    else:\n                        other += timedelta(minutes=r)\n                        r = 0\n\n            return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}