{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        \n        if n < 0:\n            bd, r = -bd, -r\n\n        adjusted_datetime = other\n        for _ in range(abs(bd)):\n            adjusted_datetime = self.next_bday.apply(adjusted_datetime)\n        \n        residual_hours = timedelta(minutes=r)\n        closing_time = self._get_closing_time(other)\n\n        if n >= 0:\n            while residual_hours != timedelta(0):\n                hours_to_next_opening = self._get_closing_time(adjusted_datetime) - adjusted_datetime\n                if residual_hours < hours_to_next_opening:\n                    adjusted_datetime += residual_hours\n                    residual_hours = timedelta(0)\n                else:\n                    residual_hours -= hours_to_next_opening\n                    adjusted_datetime = self._next_opening_time(adjusted_datetime + hours_to_next_opening)\n        else:\n            while residual_hours != timedelta(0):\n                hours_to_next_opening = self._next_opening_time(adjusted_datetime) - adjusted_datetime\n                if residual_hours >= hours_to_next_opening:\n                    adjusted_datetime += hours_to_next_opening\n                    residual_hours -= hours_to_next_opening\n                else:\n                    adjusted_datetime += residual_hours\n                    residual_hours = timedelta(0)\n\n        return adjusted_datetime\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}