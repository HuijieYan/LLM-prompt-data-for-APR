{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply_custom_business_offset(self, timestamp, n):\n        # get total business hours by sec in one business day\n        business_hours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        bd, r = divmod(abs(n * 60), business_hours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # adjust by business days first\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            if not self._next_bday.is_on_offset(timestamp):\n                while bd != 0:\n                    timestamp += skip_bd\n                    bd -= 1\n\n        # remaining business hours to adjust\n        bhour_remain = timedelta(minutes=r)\n        \n        if n >= 0:\n            while bhour_remain > timedelta(0):\n                # business hour left in this business time interval\n                bhour = self._get_closing_time(self._prev_opening_time(timestamp)) - timestamp\n                if bhour_remain < bhour:\n                    # finish adjusting if possible\n                    timestamp += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    # go to next business time interval\n                    bhour_remain -= bhour\n                    timestamp = self._next_opening_time(timestamp + bhour)\n        else:\n            while bhour_remain > timedelta(0):\n                # business hour left in this business time interval\n                bhour = self._next_opening_time(timestamp) - timestamp\n                if bhour_remain >= bhour or (bhour_remain == bhour and nanosecond != 0):\n                    # finish adjusting if possible\n                    timestamp += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    # go to the end of the current business hour\n                    timestamp = self._get_closing_time(self._next_opening_time(timestamp + bhour - timedelta(seconds=1)))\n\n        return timestamp",
            "import_list": []
        }
    ]
}