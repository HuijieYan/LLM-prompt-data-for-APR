{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        nanosecond = getattr(other, \"nanosecond\", 0)\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        n = self.n\n\n        if self._is_on_offset(other):\n            return other  # No adjustment needed\n\n        if n >= 0:\n            if other.time() < self.start[0] or other.time() >= self.end[0]:\n                other = self._next_opening_time(other)\n        else:\n            if other.time() <= self.start[0]:\n                other -= timedelta(seconds=1)\n            other = self._next_opening_time(other)\n            other = self._get_closing_time(other)\n\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            if not self.next_bday.is_on_offset(other):\n                other = other.replace(hour=0, minute=0, second=0, microsecond=0) + skip_bd\n            else:\n                other = other + skip_bd\n\n        bhour_remain = r * 60\n\n        while bhour_remain > 0:\n            if n >= 0:\n                next_opening = self._next_opening_time(other)\n                bhour = self._get_closing_time(next_opening) - other\n            else:\n                bhour = other - self._prev_opening_time(other)\n                \n            if bhour_remain < bhour.seconds:\n                other += timedelta(seconds=bhour_remain)\n                bhour_remain = 0\n            else:\n                bhour_remain -= bhour.seconds\n                if n >= 0:\n                    other = self._next_opening_time(next_opening)\n                else:\n                    other = self._get_closing_time(self._prev_opening_time(other))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}