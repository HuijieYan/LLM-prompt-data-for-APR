{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, Timestamp):\n        n = self.n\n\n        # adjust other to reduce number of cases to handle\n        other = other.round(\"T\")  # Round to the nearest minute\n\n        if n >= 0:\n            if other.to_pydatetime().time() in self.end:\n                other = self._next_opening_time(other.to_pydatetime())\n            else:\n                other = other.replace(hour=self.start[0].hour, minute=self.start[0].minute)\n        else:\n            if other.to_pydatetime().time() in self.start:\n                # adjustment to move to previous business hour\n                other = other - Timedelta(\"1s\")\n            if not other.to_pydatetime().time() in self.start:\n                other = self._next_opening_time(other.to_pydatetime())\n                other = self._get_closing_time(other)\n\n        # get total business hours by seconds in one business day\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # adjust by business days first\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            if not self.next_bday.onOffset(other):\n                prev_open = self._prev_opening_time(other.to_pydatetime())\n                remain = other - prev_open\n                other = prev_open + skip_bd + remain\n            else:\n                other = other + skip_bd\n\n        # remaining business hours to adjust\n        bhour_remain = Timedelta(minutes=r)\n\n        if n >= 0:\n            while bhour_remain != Timedelta(0):\n                bhour = self._get_closing_time(self._prev_opening_time(other))\n                if bhour_remain < bhour:\n                    other += bhour_remain\n                    bhour_remain = Timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    other = self._next_opening_time(other + bhour)\n        else:\n            while bhour_remain != Timedelta(0):\n                bhour = self._next_opening_time(other) - other\n                if bhour_remain >= bhour:\n                    other += bhour\n                    bhour_remain = Timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    other = self._get_closing_time(self._next_opening_time(other + bhour - Timedelta(seconds=1)))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with Timestamp\")",
            "import_list": []
        }
    ]
}