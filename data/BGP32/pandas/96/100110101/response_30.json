{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        if n < 0:\n            raise ApplyTypeError(\"CustomBusinessHour does not support negative offsets currently.\")\n\n        start_time = self.start[0]\n        end_time = self.end[0]\n        business_hours = (end_time.hour - start_time.hour) * 60  # in minutes\n        business_hours += end_time.minute - start_time.minute\n\n        bd, r = divmod(abs(n), business_hours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        other_time = other.time()\n\n        if other_time >= end_time or not self._is_on_offset(other):\n            other = self._next_opening_time(other)\n\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            other = other + skip_bd\n\n        business_seconds = r * 60  # converting remaining minutes to seconds\n        delta = timedelta(seconds=business_seconds)\n\n        while business_seconds > 0:\n            open_time = self._next_opening_time(other)\n            time_diff = open_time - other\n           \n            if time_diff.seconds > business_seconds:\n                other = other + delta\n                business_seconds = 0\n            else:\n                business_seconds -= time_diff.seconds\n                other = open_time\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}