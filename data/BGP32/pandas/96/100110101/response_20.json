{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, Timestamp):\n        nanosecond = getattr(other, \"nanosecond\", 0)\n        other = other.replace(hour=other.hour, minute=other.minute, second=other.second, microsecond=other.microsecond)\n        n = self.n\n        bd = divmod(abs(n), 8)[0] * (1 if n > 0 else -1)\n        r = divmod(abs(n), 8)[1]\n        \n        if n > 0:\n            while bd != 0:\n                other += CustomBusinessDay(n=bd)\n                bd -= 1 if n > 0 else -1\n        \n        if r > 0:\n            if n > 0:\n                close_time = self.start\n            else:\n                close_time = self.end\n                \n            tol = r * 60\n            while tol > 0:\n                opening_time = self.start\n                if n < 0:\n                    opening_time = self.end\n                diff = close_time - other.time()\n                if diff.total_seconds() < tol:\n                    tol -= diff.total_seconds()\n                    other = other.replace(hour=opening_time.hour, minute=opening_time.minute, second=opening_time.second)\n                else:\n                    other += pd.Timedelta(minutes=tol)\n                    tol = 0\n        \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import BusinessDay, CustomBusinessDay",
                "from pandas._libs.tslibs.timestamps import Timestamp"
            ]
        }
    ]
}