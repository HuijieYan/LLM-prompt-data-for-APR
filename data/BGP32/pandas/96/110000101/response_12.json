{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # reset timezone and nanosecond\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        \n        n = self.n\n        \n        if n >= 0:\n            # Adjust for positive business days\n            businessdays = n // len(self.weekmask)\n            weekdays = (self.weekmask * businessdays)\n            target_day = other + timedelta(days=businessdays)\n            while not all(day in weekdays for day in [target_day.weekday(), self.next_bday.apply(target_day).weekday()]):\n                target_day += timedelta(days=1)\n        else:\n            # Adjust for negative business days\n            businessdays = (-n) // len(self.weekmask)\n            weekdays = (self.weekmask * businessdays)[::-1]\n            target_day = other - timedelta(days=businessdays)\n            while not all(day in weekdays for day in [target_day.weekday(), self.next_bday.apply(target_day).weekday()]):\n                target_day -= timedelta(days=1)\n                \n        # Adjust for remaining business hours\n        remaining_minutes = n % len(self.weekmask) * 60\n        target_time = datetime.combine(target_day, other.time())\n        \n        while remaining_minutes > 0:\n            closing_time = self._get_closing_time(target_time)\n            time_diff = closing_time - target_time\n            if remaining_minutes >= time_diff.seconds // 60:\n                target_time = closing_time\n                remaining_minutes -= time_diff.seconds // 60\n            else:\n                target_time += timedelta(minutes=remaining_minutes)\n                remaining_minutes = 0\n        \n        return target_time\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}