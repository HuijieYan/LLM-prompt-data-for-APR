{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # used for detecting edge condition\n            nanosecond = getattr(other, \"nanosecond\", 0)\n            \n            n = self.n\n            new_time = other.replace(second=0, microsecond=0)\n            \n            # adjust other to the next or previous business hour based on n\n            if n >= 0:\n                if new_time.time() not in self.end or not self._is_on_offset(new_time):\n                    new_time = self._next_opening_time(new_time)\n            else:\n                if new_time.time() in self.start:\n                    new_time -= timedelta(seconds=1)\n                if not self._is_on_offset(new_time):\n                    new_time = self._next_opening_time(new_time)\n                    new_time = self._get_closing_time(new_time)\n            \n            # get total business hours by seconds in one business day\n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n            \n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n\n            # adjust by business days first\n            skip_bd = BusinessDay(n=bd)\n            if skip_bd.on_offset(new_time):\n                new_time += skip_bd\n            else:\n                prev_open = self._prev_opening_time(new_time)\n                remain = new_time - prev_open\n                new_time = prev_open + skip_bd + remain\n            \n            # remaining business hours to adjust\n            bhour_remain = timedelta(minutes=r)\n\n            while bhour_remain != timedelta(0):\n                next_opening = self._next_opening_time(new_time)\n                if n >= 0:\n                    bhour = next_opening - new_time\n                else:\n                    bhour = self._get_closing_time(next_opening) - new_time\n                \n                if bhour_remain < bhour:\n                    new_time += bhour_remain\n                    break\n                else:\n                    bhour_remain -= bhour\n                    new_time = next_opening\n            \n            return new_time\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}