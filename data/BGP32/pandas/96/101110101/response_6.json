{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n\n        adjusted_datetime = other\n\n        if n >= 0:\n            if other.time() >= self.end[0] or not self.is_on_offset(other):\n                adjusted_datetime = self._next_opening_time(other)\n        else:\n            if other.time() < self.start[0]:\n                # Adjustment to move to the previous business day\n                adjusted_datetime = other - timedelta(days=1)\n            if not self.is_on_offset(other):\n                adjusted_datetime = self._next_opening_time(adjusted_datetime)\n                adjusted_datetime = self._get_closing_time(adjusted_datetime)\n\n        business_hours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        bd, r = divmod(abs(n * 60), business_hours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # Adjust by business days\n        if bd != 0:\n            skip_bd = CustomBusinessDay(n=bd)\n            if not skip_bd.is_on_offset(other):\n                prev_open = self._prev_opening_time(other)\n                remain = other - prev_open\n                adjusted_datetime = prev_open + skip_bd + remain\n            else:\n                adjusted_datetime = other + skip_bd\n\n        # Remaining business hours to adjust\n        bhour_remain = timedelta(minutes=r)\n\n        while bhour_remain.total_seconds() > 0:\n            if n >= 0:\n                bhour = self._get_closing_time(self._prev_opening_time(adjusted_datetime)) - adjusted_datetime\n            else:\n                bhour = self._next_opening_time(adjusted_datetime) - adjusted_datetime\n\n            if bhour_remain < bhour:\n                adjusted_datetime += bhour_remain\n                bhour_remain = timedelta(0)\n            else:\n                bhour_remain -= bhour\n                adjusted_datetime = self._next_opening_time(adjusted_datetime + bhour)\n\n        return adjusted_datetime\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}