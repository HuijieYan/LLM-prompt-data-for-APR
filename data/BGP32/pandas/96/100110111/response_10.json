{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        new_date = other\n        if n >= 0:\n            # Adjust for business days\n            if CustomBusinessDay(holidays=self.holidays).is_on_offset(new_date):\n                new_date += CustomBusinessDay(n=self.n, holidays=self.holidays)\n            else:\n                previous_opening_time = self._prev_opening_time(new_date)\n                remain = new_date - previous_opening_time\n                new_date = previous_opening_time + CustomBusinessDay(n=self.n, holidays=self.holidays) + remain\n        else:\n            if CustomBusinessDay(holidays=self.holidays).is_on_offset(new_date):\n                previous_closing_time = self._get_closing_time(new_date)\n                new_date -= CustomBusinessDay(n=1, holidays=self.holidays)\n                if not self._is_on_offset(new_date):\n                    new_date = self._next_opening_time(new_date)\n                    new_date = self._get_closing_time(new_date)\n            else:\n                new_date = self._next_opening_time(new_date)\n                new_date = self._get_closing_time(new_date)\n\n        return new_date\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}