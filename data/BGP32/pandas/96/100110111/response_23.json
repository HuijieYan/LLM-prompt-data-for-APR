{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        original_time = other\n\n        # Adjust for next opening time if necessary\n        if n >= 0:\n            while other.hour not in (self.end[0].hour, self.start[0].hour) or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            while other.hour != self.start[0].hour or not self._is_on_offset(other):\n                other -= timedelta(seconds=1)\n\n        # Adjust for business days\n        skip_bd = BusinessDay(n)\n        while not self.next_bday.is_on_offset(other):\n            other += skip_bd\n\n        # Calculate remaining business hours to adjust\n        remaining_hours = abs(n) * 60 - (other - original_time).seconds // 60\n\n        # Adjust remaining hours\n        while remaining_hours > 0:\n            if n > 0:\n                next_closing = self._get_closing_time(other)\n                time_to_next_closing = (next_closing - other).seconds // 60\n                if remaining_hours >= time_to_next_closing:\n                    other = next_closing\n                    remaining_hours -= time_to_next_closing\n                else:\n                    other += timedelta(minutes=remaining_hours)\n                    remaining_hours = 0\n            else:\n                next_opening = self._next_opening_time(other)\n                time_to_next_opening = (next_opening - other).seconds // 60\n                if remaining_hours >= time_to_next_opening:\n                    other = next_opening\n                    remaining_hours -= time_to_next_opening\n                else:\n                    other += timedelta(minutes=remaining_hours)\n                    remaining_hours = 0\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}