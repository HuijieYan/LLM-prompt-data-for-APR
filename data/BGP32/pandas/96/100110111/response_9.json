{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        start_date = datetime(other.year, other.month, other.day, other.hour, other.minute, other.second, other.microsecond)\n        n = self.n\n\n        bd = n // 8\n        r = n % 8\n        \n        business_hour_interval = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end)) // 60\n\n        if n < 0:\n            bd, r = -bd, -r\n\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            if not self._is_on_offset(other) or not self.next_bday.is_on_offset(other):\n                other = other + skip_bd\n\n        bhour_remain = timedelta(minutes=r * 60)\n\n        if n >= 0:\n            while bhour_remain.total_seconds() > 0:\n                opening_time = self._prev_opening_time(other)\n                closing_time = self._get_closing_time(opening_time)\n                bhour = closing_time - other if closing_time > other else timedelta(0)\n                if bhour_remain >= bhour:\n                    other = closing_time\n                    bhour_remain -= bhour\n                else:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n        else:\n            while bhour_remain.total_seconds() > 0:\n                opening_time = self._next_opening_time(other)\n                closing_time = self._get_closing_time(opening_time - timedelta(seconds=1))\n                bhour = opening_time - other if opening_time > other else timedelta(0)\n                if bhour_remain > bhour or (bhour_remain == bhour and other.nano != 0):\n                    other = closing_time\n                    bhour_remain -= bhour\n                else:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import BusinessDay"
            ]
        }
    ]
}