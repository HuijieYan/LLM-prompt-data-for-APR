{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        orig_dt = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond\n        )\n        \n        holiday_adjusted = False\n        while n != 0:\n            if n > 0:\n                next_hour = orig_dt.replace(minute=0, second=0, microsecond=0) + Timedelta(hours=1)\n                if next_hour.hour == 0:\n                    # handle transition to next day\n                    orig_dt = orig_dt.replace(hour=0)\n                    next_hour = orig_dt\n                if next_hour in self.start or next_hour.time() in self.end:\n                    # skip this hour\n                    continue\n                if next_hour in self.holidays:\n                    orig_dt = next_hour\n                    holiday_adjusted = True\n            else:\n                if orig_dt.time() in self.start:\n                    # adjust to previous business day\n                    orig_dt = orig_dt - Timedelta(hours=1)\n                    holiday_adjusted = True\n\n            if not holiday_adjusted:\n                orig_dt = orig_dt + Timedelta(hours=n)\n\n            n = n - 1\n\n        return orig_dt\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas._libs.tslibs.timedeltas import Timedelta"
            ]
        }
    ]
}