{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply_range(self, other, bd, r):\n    # Helper function to apply the date range adjustments\n\n    if bd != 0:\n        skip_bd = BusinessDay(n=bd)\n        if not self.next_bday.is_on_offset(other):\n            prev_open = self._prev_opening_time(other)\n            remain = other - prev_open\n            other = prev_open + skip_bd + remain\n        else:\n            other = other + skip_bd\n\n    bhour_remain = timedelta(minutes=r)\n\n    while bhour_remain != timedelta(0):\n        if self.n >= 0:\n            bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n            if bhour_remain < bhour:\n                other += bhour_remain\n                bhour_remain = timedelta(0)\n            else:\n                bhour_remain -= bhour\n                other = self._next_opening_time(other + bhour)\n        else:\n            bhour = self._next_opening_time(other) - other\n            if bhour_remain >= bhour or (bhour_remain == bhour and nanosecond != 0):\n                other += bhour_remain\n                bhour_remain = timedelta(0)\n            else:\n                bhour_remain -= bhour\n                other = self._get_closing_time(self._next_opening_time(other + bhour - timedelta(seconds=1)))\n\n    return other",
            "import_list": []
        }
    ]
}