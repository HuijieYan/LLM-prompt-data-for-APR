{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        nanosecond = getattr(other, \"nanosecond\", 0)\n        \n        orig_dt = datetime(other.year, other.month, other.day, other.hour, other.minute, other.second, other.microsecond)\n        n = self.n\n\n        if n >= 0:\n            if orig_dt.time() not in self.end or not self._is_on_offset(orig_dt):\n                orig_dt = self._next_opening_time(orig_dt)\n        else:\n            if orig_dt.time() in self.start:\n                orig_dt = orig_dt - timedelta(seconds=1)\n            if not self._is_on_offset(orig_dt):\n                orig_dt = self._next_opening_time(orig_dt)\n                orig_dt = self._get_closing_time(orig_dt)\n        \n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n        \n        if bd != 0:\n            skip_bd = CustomBusinessHour(n=bd, holidays=self.holidays, start=self.start[0], end=self.end[0])\n            if not skip_bd.next_bday.is_on_offset(orig_dt):\n                prev_open = self._prev_opening_time(orig_dt)\n                remain = orig_dt - prev_open\n                orig_dt = prev_open + skip_bd + remain\n            else:\n                orig_dt = orig_dt + skip_bd\n\n        bhour_remain = timedelta(minutes=r)\n\n        if n >= 0:\n            while bhour_remain != timedelta(0):\n                bhour = self._get_closing_time(self._prev_opening_time(orig_dt)) - orig_dt\n                if bhour_remain < bhour:\n                    orig_dt += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    orig_dt = self._next_opening_time(orig_dt + bhour)\n        else:\n            while bhour_remain != timedelta(0):\n                bhour = self._next_opening_time(orig_dt) - orig_dt\n                if bhour_remain > bhour or (bhour_remain == bhour and nanosecond != 0):\n                    orig_dt += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    orig_dt = self._get_closing_time(self._next_opening_time(orig_dt + bhour - timedelta(seconds=1)))\n        \n        return orig_dt\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import apply_wraps, ApplyWrapper",
                "from pandas.tseries.offsets import CustomBusinessHour",
                "from datetime import datetime, time, timedelta"
            ]
        }
    ]
}