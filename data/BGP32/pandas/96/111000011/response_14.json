{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        adjusted_dt = other\n\n        if self._is_on_offset(adjusted_dt) and adjusted_dt.time() in self.start:\n            adjusted_dt = self._next_opening_time(adjusted_dt)\n\n        if self.n < 0:\n            midnight_adjustment = timedelta(seconds=1)\n            if adjusted_dt.time() in self.end or not self._is_on_offset(adjusted_dt):\n                adjusted_dt = self._prev_opening_time(adjusted_dt)\n        \n        bd, r = divmod(abs(self.n * 60), businesshours // 60)\n        \n        if self.n < 0:\n            bd, r = -bd, -r\n\n        if bd != 0:\n            if self.n >= 0:\n                skip_bd = BusinessDay(n=bd)\n                adjusted_dt = skip_bd.rollforward(adjusted_dt)\n            else:\n                skip_bd = BusinessDay(n=-bd)\n                adjusted_dt = skip_bd.rollback(adjusted_dt)\n\n        bhour_remain = timedelta(minutes=r)\n\n        while bhour_remain != timedelta(0):\n            if self.n >= 0:\n                bhour = self._get_closing_time(self._prev_opening_time(adjusted_dt)) - adjusted_dt\n                next_opening = self._next_opening_time(adjusted_dt)\n            else:\n                bhour = self._next_opening_time(adjusted_dt) - adjusted_dt\n                next_opening = self._get_closing_time(self._next_opening_time(adjusted_dt - midnight_adjustment))\n\n            if bhour_remain < bhour:\n                adjusted_dt += bhour_remain\n                bhour_remain = timedelta(0)\n            else:\n                bhour_remain -= bhour\n                adjusted_dt = next_opening\n\n        return adjusted_dt\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}