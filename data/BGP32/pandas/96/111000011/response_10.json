{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            business_hours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        \n            # Adjust other based on n and holidays\n            holiday_offset = 0\n            if hasattr(self, 'holidays') and other in self.holidays:\n                holiday_offset = 1\n            \n            other = self._next_opening_time(other, sign=1)\n            final_date = other\n            \n            periods_left = abs(n) + holiday_offset\n            while periods_left > 0:\n                if n >= 0:\n                    next_opening = self._next_opening_time(final_date)\n                    time_diff = next_opening - final_date\n                else:\n                    next_closing = self._get_closing_time(final_date)\n                    time_diff = next_closing - final_date + timedelta(seconds=1)\n                \n                if time_diff:\n                    if time_diff.total_seconds() >= periods_left * business_hours * 60:\n                        # Adjust to the final datetime after calculating business hours left\n                        final_date += timedelta(seconds=periods_left * business_hours * 60)\n                        periods_left = 0\n                    else:\n                        # Move to next opening or closing based on n\n                        final_date = self._next_opening_time(final_date + time_diff)\n                        # Decrease periods_left by the hours spent\n                        periods_left -= time_diff.total_seconds() / 60\n\n            return final_date\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}