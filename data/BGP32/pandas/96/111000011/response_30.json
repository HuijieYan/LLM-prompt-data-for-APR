{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if getattr(other, \"nanosecond\", 0):\n            raise ValueError(\"CustomBusinessHour does not support sub-second frequency.\")\n        \n        n = self.n\n\n        # Determine if other falls on a holiday\n        if other in self.holidays:\n            other = self._next_opening_time(other)\n\n        # adjust other to reduce number of cases to handle\n        business_day_start = self._prev_opening_time(other)\n        business_day_end = self._get_closing_time(self._next_opening_time(other))\n\n        # Determine if other falls within business hours\n        if business_day_start <= other < business_day_end and self._is_on_offset(other):\n            if n >= 0:\n                other = self._next_opening_time(other)\n            else:\n                other = self._get_closing_time(other + timedelta(seconds=1))\n\n        # Adjust for business days\n        skip_days = abs(n) // self.business_day_offset\n        if n < 0:\n            skip_days = -skip_days\n\n        # Skip holidays during business day adjustments\n        for _ in range(skip_days):\n            if other in self.holidays:\n                other = self._next_opening_time(other)\n\n        # Adjust remaining business hours\n        remaining_minutes = abs(n) % self.business_day_offset * 60\n        business_day_duration = self.business_day_end - self.business_day_start\n        remaining_hours, remaining_minutes = divmod(remaining_minutes, 60)\n\n        if n < 0:\n            remaining_hours, remaining_minutes = -remaining_hours, -remaining_minutes\n\n        business_hours = self._get_business_hours_by_sec(self.business_day_start, self.business_day_end)\n\n        if n >= 0:\n            while remaining_hours > 0 or (remaining_hours == 0 and remaining_minutes > 0):\n                next_opening_time = self._next_opening_time(other)\n                time_till_next_open = next_opening_time - other\n                if remaining_hours * 60 + remaining_minutes < time_till_next_open.total_seconds() // 60:\n                    other += timedelta(hours=remaining_hours, minutes=remaining_minutes)\n                    break\n                else:\n                    remaining_hours -= time_till_next_open.total_seconds() // 3600\n                    remaining_minutes -= time_till_next_open.total_seconds() // 60 % 60\n                    other = next_opening_time\n        else:\n            while remaining_hours < 0 or (remaining_hours == 0 and remaining_minutes < 0):\n                time_till_closing = business_day_end - other\n                if abs(remaining_hours) * 60 + abs(remaining_minutes) < time_till_closing.total_seconds() // 60:\n                    other += timedelta(hours=remaining_hours, minutes=remaining_minutes)\n                    break\n                else:\n                    remaining_hours += time_till_closing.total_seconds() // 3600\n                    remaining_minutes += time_till_closing.total_seconds() // 60 % 60\n                    other = self._get_closing_time(self._next_opening_time(other - timedelta(hours=1)))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}