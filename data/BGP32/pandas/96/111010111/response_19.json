{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if isinstance(other, pd.Timestamp):\n            other = other.to_pydatetime()\n        else:\n            nanosecond = getattr(other, \"nanosecond\", 0)\n            other = datetime(\n                other.year,\n                other.month,\n                other.day,\n                other.hour,\n                other.minute,\n                other.second,\n                other.microsecond,\n            )\n        \n        n = self.n\n\n        adjusted = False\n        holidays = set(self.holidays)\n\n        if other in holidays:\n            while other in holidays:\n                other += timedelta(days=1)\n            adjusted = True\n\n        start, end = self.start[0], self.end[0]\n        business_duration = (end.hour - start.hour) * 60\n\n        if n > 0:\n            if not adjusted and (other.time() >= end or not self._is_on_offset(other)):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() < start or other.time() == end:\n                other -= timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        working_days = business_duration // 60\n        adjust_days, remaining_minutes = divmod(abs(n) * 60, working_days)\n\n        if n < 0:\n            adjust_days *= -1\n            remaining_minutes *= -1\n\n        skip_bd = pd.offsets.CustomBusinessDay(n=adjust_days)\n        if not self.next_bday.is_on_offset(other):\n            prev_open = self._prev_opening_time(other)\n            remain = other - prev_open\n            other = prev_open + skip_bd + remain\n        else:\n            other += skip_bd\n\n        remaining_timedelta = timedelta(minutes=remaining_minutes)\n\n        while remaining_timedelta != timedelta(0):\n            bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n            if remaining_timedelta < bhour:\n                other += remaining_timedelta\n                remaining_timedelta = timedelta(0)\n            else:\n                remaining_timedelta -= bhour\n                other = self._next_opening_time(other + bhour)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}