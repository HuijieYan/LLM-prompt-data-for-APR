{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if not isinstance(other, Timestamp):\n            other = Timestamp(other)\n            \n        business_day_only = BusinessDay(n=0, holidays=self.holidays, weekmask=self.weekmask)\n        \n        if business_day_only.is_on_offset(other):\n            next_valid_day = business_day_only.rollforward(other)\n        else:\n            next_valid_day = business_day_only.rollforward(other + timedelta(days=1))\n\n        base_dt = other.replace(hour=self.start[0].hour, minute=self.start[0].minute, second=0, microsecond=0)\n        if other < base_dt:\n            other = base_dt\n\n        n = self.n\n        if n >= 0:\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if self.is_on_offset(other):\n                other = self._prev_opening_time(other)\n            prev_open = self._prev_opening_time(other)\n            if not self._is_on_offset(prev_open):\n                other = prev_open\n\n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n\n        if n < 0:\n            bd, r = -bd, -r\n\n        valid_day = business_day_only.rollforward(other)\n        final_dt = valid_day + timedelta(hours=bd * 24)\n        remaining_minutes = r\n\n        while remaining_minutes > 0:\n            end_of_hours = self._get_closing_time(self._prev_opening_time(final_dt))\n            next_open_time = self._next_opening_time(final_dt)\n            time_until_next_open = next_open_time - final_dt\n            if remaining_minutes >= time_until_next_open.seconds // 60:\n                remaining_minutes -= time_until_next_open.seconds // 60\n                final_dt = next_open_time\n            else:\n                final_dt += timedelta(minutes=remaining_minutes)\n                remaining_minutes = 0\n                \n        return Timestamp(final_dt)\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}