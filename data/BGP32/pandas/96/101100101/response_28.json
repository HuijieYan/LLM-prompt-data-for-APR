{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, date):\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        \n        n = self.n\n\n        # Adjust the timestamp based on business hours\n        if n >= 0:\n            while not (\n                other.time() in self.end\n                and self._is_on_offset(other)\n            ):\n                other = self._next_opening_time(other)\n        else:\n            while (\n                other.time() in self.start\n                or not self._is_on_offset(other)\n            ):\n                other -= timedelta(seconds=1)\n                while not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n        \n        # Calculate business days adjustment\n        bd = n // 24\n        n %= 24\n\n        # Adjust the timestamp by business days\n        if bd != 0:\n            other += BusinessDay(n=bd)\n        \n        # Remaining business hours to adjust\n        bhour_remain = timedelta(minutes=n * 60)\n\n        while bhour_remain > timedelta(0):\n            interval_start = other.replace(\n                hour=self.start[0].hour,\n                minute=self.start[0].minute,\n                second=0,\n                microsecond=0\n            )\n            time_to_next_open = self._next_opening_time(other) - other\n            if bhour_remain >= time_to_next_open:\n                other = self._next_opening_time(other) + timedelta(seconds=1)\n                bhour_remain -= time_to_next_open\n            else:\n                other += bhour_remain\n                break\n        \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}