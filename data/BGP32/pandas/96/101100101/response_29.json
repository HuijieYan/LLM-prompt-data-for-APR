{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            start_time = datetime(other.year, other.month, other.day, other.hour, other.minute, other.second, other.microsecond)\n\n            if n >= 0:\n                if start_time.time() not in self.start or not self.is_on_offset(start_time):\n                    start_time = self._next_opening_time(start_time)\n            else:\n                if start_time.time() in self.start:\n                    start_time -= timedelta(seconds=1)\n                if not self.is_on_offset(start_time):\n                    start_time = self._next_opening_time(start_time)\n                    start_time = self._get_closing_time(start_time)\n\n            total_business_hours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            bd, r = divmod(abs(n * 60), total_business_hours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n\n            new_time = start_time\n\n            if bd != 0:\n                skip_bd = CustomBusinessDay(n=bd)\n                if not self.next_bday.is_on_offset(new_time):\n                    prev_open = self._prev_opening_time(new_time)\n                    remain = new_time - prev_open\n                    new_time = prev_open + skip_bd + remain\n                else:\n                    new_time = new_time + skip_bd\n            \n            bhour_remain = timedelta(minutes=r)\n\n            direction = 1 if n >= 0 else -1\n\n            while bhour_remain.total_seconds() != 0:\n                current_time = new_time\n\n                if direction == 1:\n                    closing_time = self._get_closing_time(self._prev_opening_time(new_time))\n                    remaining_bhours = closing_time - new_time\n                else:\n                    next_opening_time = self._next_opening_time(new_time)\n                    remaining_bhours = next_opening_time - new_time\n\n                if abs(remaining_bhours.total_seconds()) <= abs(bhour_remain.total_seconds()):\n                    new_time += remaining_bhours\n                    bhour_remain -= remaining_bhours\n                else:\n                    new_time += timedelta(seconds=bhour_remain.total_seconds())\n                    bhour_remain = timedelta(0)\n\n            return new_time\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import CustomBusinessHour, CustomBusinessDay",
                "from datetime import timedelta",
                "import numpy as np"
            ]
        }
    ]
}