{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            nanosecond = getattr(other, \"nanosecond\", 0)\n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n            n = self.n\n            is_positive = n >= 0\n\n            # adjust `other` based on business hours\n            if is_positive:\n                if other.time() in self.end or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start:\n                    other -= timedelta(seconds=1)\n                \n                if not self._is_on_offset(other):\n                   other = self._next_opening_time(other)\n                   other = self._get_closing_time(other)\n\n            # calculate business days, business hours and adjust `other`\n            days_adjustment, business_remain = divmod(abs(n * 60), businesshours // 60)\n            if not is_positive:\n                days_adjustment = -days_adjustment\n                business_remain = -business_remain\n\n            # adjust by business days first\n            skip_bd = BusinessDay(n=days_adjustment)\n            if skip_bd.apply(other) != other:\n                other = skip_bd.apply(other)\n            else:\n                other = other + skip_bd\n\n            # adjust remaining business hours\n            bhour_remain = timedelta(minutes=business_remain)\n\n            while bhour_remain != timedelta(0):\n                opening_time = (self._prev_opening_time(other) if is_positive else self._next_opening_time(other))\n                closing_time = self._get_closing_time(opening_time)\n\n                if is_positive:\n                    bhour = closing_time - other\n                    if bhour_remain < bhour:\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        bhour_remain -= bhour\n                        other = self._next_opening_time(closing_time)\n                else:\n                    bhour = other - opening_time\n                    if bhour_remain > bhour or (bhour_remain == bhour and nanosecond != 0):\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        bhour_remain -= bhour\n                        other = self._get_closing_time(self._next_opening_time(other) - timedelta(seconds=1))\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}