{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n\n            if n >= 0:\n                if other.time() in self.end or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start:\n                    other = other - timedelta(seconds=1)\n                if not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n\n            business_hours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            hours, remainder = divmod(abs(n * 60), business_hours // 60)\n\n            if n < 0:\n                hours, remainder = -hours, -remainder\n\n            if hours != 0:\n                business_day_offset = BusinessDay(n=hours)\n                if not self._is_on_offset(other):\n                    prev_opening = self._prev_opening_time(other)\n                    remainder_time = other - prev_opening\n                    other = prev_opening + business_day_offset + remainder_time\n                else:\n                    other = other + business_day_offset\n\n            remainder_hours = timedelta(minutes=remainder)\n\n            while remainder_hours != timedelta(0):\n                if n >= 0:\n                    business_hour = self._get_closing_time(self._prev_opening_time(other)) - other\n                    if business_hour > remainder_hours:\n                        other += remainder_hours\n                        remainder_hours = timedelta(0)\n                    else:\n                        remainder_hours -= business_hour\n                        other = self._next_opening_time(other + business_hour)\n                else:\n                    business_hour = self._next_opening_time(other) - other\n                    if business_hour < remainder_hours:\n                        other += remainder_hours\n                        remainder_hours = timedelta(0)\n                    else:\n                        remainder_hours -= business_hour\n                        other = self._get_closing_time(self._next_opening_time(other + business_hour))\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}