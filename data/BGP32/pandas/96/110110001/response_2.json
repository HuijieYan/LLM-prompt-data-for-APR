{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n        \n            if n >= 0:\n                if not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start:\n                    other -= timedelta(seconds=1)\n                if not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n        \n            remaining_hours = n % 24\n            business_hours = sum(self._get_business_hours_by_sec(start, end) for start, end in zip(self.start, self.end))\n        \n            business_days = n // 24\n            if business_days != 0:\n                other = self.next_bday.apply(other)\n                for _ in range(abs(business_days-1)):\n                    other = self.next_bday.apply(other)\n            \n            remaining_time = timedelta(hours=remaining_hours)\n        \n            if n >= 0:\n                while remaining_time > timedelta(0):\n                    open_time = self._next_opening_time(other)\n                    time_diff = open_time - other\n                    \n                    if time_diff <= remaining_time:\n                        other = open_time\n                        remaining_time -= time_diff\n                    else:\n                        other += remaining_time\n                        remaining_time = timedelta(0)\n            \n            else:\n                while remaining_time < timedelta(0):\n                    close_time = self._get_closing_time(other)\n                    time_diff = other - close_time\n                    \n                    if time_diff <= abs(remaining_time):\n                        other = close_time\n                        remaining_time += time_diff\n                    else:\n                        other += remaining_time\n                        remaining_time = timedelta(0)\n        \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}