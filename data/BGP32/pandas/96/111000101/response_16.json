{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # reset timezone and nanosecond\n        other = other.replace(tzinfo=None, nanosecond=0)\n        n = self.n\n\n        # adjust other to reduce number of cases to handle\n        if n >= 0:\n            if other.time() >= self.end[0] or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() <= self.start[0]:\n                # adjustment to move to previous business day\n                other -= timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        total_business_hours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n        business_days, remaining_minutes = divmod(abs(n * 60), total_business_hours // 60)\n        if n < 0:\n            business_days, remaining_minutes = -business_days, -remaining_minutes\n\n        # adjust by business days first\n        if business_days != 0:\n            if not self.next_bday().is_on_offset(other):\n                prev_open = self._prev_opening_time(other)\n                remain = other - prev_open\n                other = prev_open + BusinessDay(n=business_days) + remain\n            else:\n                other += BusinessDay(n=business_days)\n\n        remaining_timedelta = timedelta(minutes=remaining_minutes)\n\n        if n >= 0:\n            while remaining_timedelta != timedelta(0):\n                bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                if remaining_timedelta < bhour:\n                    other += remaining_timedelta\n                    remaining_timedelta = timedelta(0)\n                else:\n                    remaining_timedelta -= bhour\n                    other = self._next_opening_time(other + bhour)\n        else:\n            while remaining_timedelta != timedelta(0):\n                bhour = self._next_opening_time(other) - other\n                if remaining_timedelta > bhour:\n                    other += remaining_timedelta\n                    remaining_timedelta = timedelta(0)\n                else:\n                    remaining_timedelta -= bhour\n                    other = self._get_closing_time(self._next_opening_time(other + bhour - timedelta(seconds=1)))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}