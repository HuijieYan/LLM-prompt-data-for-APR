{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # reset timezone and nanosecond\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n         )\n        \n        n = self.n\n\n        opening_time = max(self.start[0], other.time())\n        closing_time = self.end[0]\n\n        # Adjust based on the sign of n\n        if n >= 0:\n            if opening_time != self.start[0] or not self.is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if opening_time == self.start[0]:\n                other = other - timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                other = self._prev_opening_time(other)\n                \n        # Count total business hours per day\n        business_hours_per_day = sum(\n            self._get_business_hours_by_sec(st, en) \n            for st, en in zip(self.start, self.end)\n        )\n\n        # Adjust by business days first\n        business_days_adjustment = n\n        if business_days_adjustment != 0:\n            if not self.next_bday.is_on_offset(other):\n                other = self._prev_opening_time(other)\n                other = self.next_bday.apply(other)\n            else:\n                business_day_offset = CustomBusinessDay(n=business_days_adjustment)\n                other = business_day_offset.apply(other)\n        \n        # Remaining business hours to adjust\n        remaining_business_hours = timedelta(minutes=(n * 60) % (business_hours_per_day // 60))\n\n        while remaining_business_hours != timedelta(0):\n            if n >= 0:\n                # In current Business Hour duration\n                hours_remaining_in_interval = closing_time - other.time()\n\n                if remaining_business_hours <= hours_remaining_in_interval:\n                    other = datetime.combine(other.date(), other.time() + remaining_business_hours)\n                    remaining_business_hours = timedelta(0)\n                else:\n                    remaining_business_hours -= hours_remaining_in_interval\n                    other = self._next_opening_time(other)    \n            else:\n                # In current Business Hour duration\n                hours_remaining_in_interval = other.time() - opening_time\n\n                if remaining_business_hours <= hours_remaining_in_interval:\n                    other = datetime.combine(other.date(), other.time() - remaining_business_hours)\n                    remaining_business_hours = timedelta(0)\n                else:\n                    remaining_business_hours -= hours_remaining_in_interval\n                    other = self._prev_opening_time(other)\n                    \n        return other\n        \n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}