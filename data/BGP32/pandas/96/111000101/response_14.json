{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        if n >= 0:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start or not self._is_on_offset(other):\n                other = self._prev_opening_time(other)\n\n        # Skipping business days if necessary\n        if n != 0:\n            curr_day = pd.Timestamp(other)\n            skip_bd = BusinessDay(n=n)\n            other = skip_bd.apply(curr_day)\n\n    \n        # Adjusting remaining business hours\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n    \n        bd, r = divmod(abs(n * 60), businesshours // 60)\n    \n        if n < 0:\n            bd, r = -bd, -r\n    \n        if r != 0:\n            minutes_remaining = r\n            current_time = other.time()\n    \n            for st, en in zip(self.start, self.end):\n                start_time = datetime.combine(other, st)\n                if current_time >= st and current_time < en:\n                    diff_sec = (en.hour * 3600 + en.minute * 60) - (current_time.hour * 3600 + current_time.minute * 60)\n    \n                    if minutes_remaining <= diff_sec / 60:\n                        other = start_time + timedelta(minutes=minutes_remaining)\n                        break\n                    else:\n                        minutes_remaining -= diff_sec / 60\n                        current_time = en\n    \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}