{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        if n >= 0:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                other = self._prev_opening_time(other)\n            \n            if not self._is_on_offset(other):\n                other = self._prev_opening_time(self._next_opening_time(other))\n\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        bd, r = divmod(abs(n), businesshours // 3600)\n        if n < 0:\n            bd, r = -bd, -r\n\n        business_days_to_skip = BusinessDay(n=bd)\n        other += business_days_to_skip\n        other_time = sum(self._get_business_hours_by_sec(self.start[i], self.end[i]) for i in range(len(self.start)))\n        \n        if r != 0:\n            if n >= 0:\n                while r != 0:\n                    business_hour_left = other_time - ((other - self._prev_opening_time(other)).seconds / 3600)\n                    if r < business_hour_left:\n                        other += timedelta(hours=r)\n                        r = 0\n                    else:\n                        r -= business_hour_left\n                        other = self._next_opening_time(other) + timedelta(hours=r)\n            else:\n                while r != 0:\n                    business_hour_left = (self._get_closing_time(self._next_opening_time(other)) - other).seconds / 3600\n                    if r < business_hour_left or (r == business_hour_left and getattr(other, \"nanosecond\", 0) != 0):\n                        other += timedelta(hours=r)\n                        r = 0\n                    else:\n                        r -= business_hour_left\n                        other = self._get_closing_time(self._next_opening_time(other) + timedelta(hours=r))\n        \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}