{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if hasattr(other, 'to_pydatetime'):\n            other = other.to_pydatetime()\n        \n        n = self.n\n        \n        if n == 0:\n            return other\n        \n        if n < 0:\n            preceding = True\n            n = -n\n        else:\n            preceding = False\n        \n        if other.time() in self.start:\n            if preceding:\n                other -= timedelta(seconds=1)\n        else:\n            other = self._next_opening_time(other)\n            if preceding:\n                other = self._get_closing_time(other)\n        \n        business_hours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        \n        total_seconds = n * 60 * business_hours // 60\n        total_business_days = total_seconds // business_hours\n        \n        if not total_business_days:\n            return other\n        \n        other = other + BusinessDay(n=total_business_days)\n        \n        total_seconds %= business_hours\n        total_seconds = total_seconds * 60\n        result = self._get_offset(total_seconds)\n        \n        if preceding and total_seconds % 86400:\n            diff_seconds = timedelta(seconds=total_seconds)\n            result = other + diff_seconds\n        \n        return result\n    \n    raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.frequencies import to_offset"
            ]
        }
    ]
}