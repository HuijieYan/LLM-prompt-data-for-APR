{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        nanosecond = getattr(other, \"nanosecond\", 0)\n        \n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n        \n        if n < 0:\n            n = -n\n            other -= timedelta(seconds=1)\n        \n        total_seconds = n * 60 * 60\n        business_days, remaining_seconds = divmod(total_seconds, businesshours)\n\n        adjusted = other.replace(\n            hour=self.start[0].hour, \n            minute=self.start[0].minute, \n            second=0, \n            microsecond=0\n        )\n\n        if n >= 0:\n            adjusted += timedelta(days=business_days)\n\n            while remaining_seconds > 0:\n                closing_time = self._get_closing_time(adjusted)\n                time_difference = closing_time - adjusted\n                if remaining_seconds >= time_difference.seconds:\n                    adjusted = self._next_opening_time(closing_time)\n                    remaining_seconds -= time_difference.seconds\n                else:\n                    adjusted += timedelta(seconds=remaining_seconds)\n                    remaining_seconds = 0\n        else:\n            adjusted += timedelta(days=business_days)\n            \n            while remaining_seconds > 0:\n                opening_time = self._next_opening_time(adjusted)\n                time_difference = opening_time - adjusted\n                if remaining_seconds > time_difference.seconds or (remaining_seconds == time_difference.seconds and nanosecond != 0):\n                    adjusted = self._get_closing_time(opening_time - timedelta(seconds=1))\n                    remaining_seconds -= time_difference.seconds\n                else:\n                    adjusted += timedelta(seconds=remaining_seconds)\n                    remaining_seconds = 0\n        \n        return adjusted\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}