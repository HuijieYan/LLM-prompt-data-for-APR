{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        # adjust other to reduce number of cases to handle\n        adjust_minutes = n * 60\n\n        # Filtering non-excluded dates\n        if n >= 0 and (other.hour >= self.end[-1].hour or other.hour < self.start[0].hour):\n            holiday_flag = True\n            while holiday_flag:\n                other += timedelta(days=1)\n                if other.weekday() not in [5, 6] and other not in self.holidays:\n                    holiday_flag = False\n\n        # get total business hours by sec in one business day\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        bd, r = divmod(abs(adjust_minutes), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # adjust by business days first\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            other_date = date(other.year, other.month, other.day) + skip_bd\n            other = datetime(other_date.year, other_date.month, other_date.day, other.hour, other.minute)\n\n        # remaining business hours to adjust\n        bhour_remain = timedelta(minutes=r)\n\n        if n >= 0:\n            while bhour_remain:\n                # business hour left in this business time interval\n                current_hour_start = datetime(other.year, other.month, other.day, other.hour, self.start[0].minute)\n                bhour = current_hour_start + timedelta(hours=1) - other\n                if bhour_remain < bhour:\n                    # finish adjusting if possible\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    # go to next business time interval\n                    bhour_remain -= bhour\n                    other = current_hour_start + timedelta(hours=1)\n        else:\n            while bhour_remain:\n                # business hour left in this business time interval\n                current_hour_end = datetime(other.year, other.month, other.day, other.hour, self.end[-1].minute)\n                bhour = other - current_hour_end\n                if bhour_remain < bhour:\n                    # finish adjusting if possible\n                    other -= bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    # go to next business time interval\n                    bhour_remain -= bhour\n                    other = current_hour_end - timedelta(seconds=1)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}