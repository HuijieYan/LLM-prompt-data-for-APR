{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            if isinstance(self, BusinessHour):\n                n = self.n\n\n                # Adjust other to remove timezone and nanosecond\n                other = other.replace(tzinfo=None, nanosecond=0)\n\n                # Calculate total business hours in one business day\n                businesshours = sum(\n                    self._get_business_hours_by_sec(st, en)\n                    for st, en in zip(self.start, self.end)\n                )\n\n                bd, r = divmod(abs(n), businesshours)\n\n                if n < 0:\n                    bd, r = -bd, -r\n\n                skip_bd = BusinessDay(n=bd)\n                other_start = other.replace(hour=0, minute=0, second=0, microsecond=0)\n\n                if n >= 0:\n                    while bd != 0:\n                        if self.next_bday.is_on_offset(other):\n                            other += skip_bd\n                        else:\n                            other = other_start\n                            bd -= 1\n\n                    while r != 0:\n                        next_opening = self._next_opening_time(other)\n                        bhours = next_opening - other\n                        if bhours.total_seconds() <= r * 60:\n                            other = next_opening\n                            r -= bhours.total_seconds() / 60\n                        else:\n                            other += timedelta(minutes=r)\n                            r = 0\n                else:\n                    while bd != 0:\n                        if self.next_bday.is_on_offset(other):\n                            other -= skip_bd\n                        else:\n                            other = other_start\n                            bd += 1\n\n                    while r != 0:\n                        prev_opening = self._prev_opening_time(other)\n                        bhours = other - prev_opening\n                        if bhours.total_seconds() <= abs(r) * 60:\n                            other = prev_opening\n                            r += bhours.total_seconds() / 60\n                        else:\n                            other -= timedelta(minutes=abs(r))\n                            r = 0\n\n                return other\n\n            else:\n                raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import BusinessHour, BusinessDay"
            ]
        }
    ]
}