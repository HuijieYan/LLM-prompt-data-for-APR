{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            businesshours = (self.end[0].hour - self.start[0].hour) * 60 * 60\n            \n            if n >= 0:\n                if other.time() >= self.end[0] or not self.is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() < self.start[0]:\n                    other -= timedelta(seconds=1)\n                if not self.is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n            \n            working_days = n // businesshours\n            remaining_seconds = n % businesshours\n            \n            if working_days != 0:\n                business_day_offset = timedelta(days=working_days)\n                if not self.next_bday.is_on_offset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + business_day_offset + remain\n                else:\n                    other += business_day_offset\n            \n            remain_timedelta = timedelta(seconds=remaining_seconds)\n            \n            if n >= 0:\n                while remain_timedelta > timedelta(0):\n                    bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                    if remain_timedelta < bhour:\n                        other += remain_timedelta\n                        remain_timedelta = timedelta(0)\n                    else:\n                        remain_timedelta -= bhour\n                        other = self._next_opening_time(other) + bhour\n            else:\n                while remain_timedelta > timedelta(0):\n                    bhour = self._next_opening_time(other) - other\n                    if remain_timedelta > bhour:\n                        other += remain_timedelta\n                        remain_timedelta = timedelta(0)\n                    else:\n                        remain_timedelta -= bhour\n                        other = self._get_closing_time(self._next_opening_time(other - timedelta(seconds=1)))\n                    \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta",
                "from pandas._libs.tslibs.offsets import BaseOffset, ApplyTypeError"
            ]
        }
    ]
}