{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, (datetime, Timestamp)):\n        original_tz = other.tz\n        other = other.replace(tzinfo=None, nanosecond=0)\n        \n        n = self.n\n        original_day = other.day\n        \n        if n >= 0:\n            if other.hour >= 17 or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.hour < 15:\n                other = other.replace(hour=15, minute=0, second=0, microsecond=0) - timedelta(hours=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n        \n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        \n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n        \n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            if not self.next_bday.is_on_offset(other):\n                other = self.next_bday.apply(other)\n            other = other + skip_bd\n        \n        if n >= 0:\n            while r > 0:\n                bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                if r < bhour.total_seconds() // 60:\n                    other += timedelta(minutes=r)\n                    r = 0\n                else:\n                    r -= bhour.total_seconds() // 60\n                    other = self._next_opening_time(other + bhour)\n        else:\n            while r < 0:\n                bhour = self._next_opening_time(other) - other\n                if abs(r) < bhour.total_seconds() // 60 or abs(r) == bhour.total_seconds() // 60:\n                    other += timedelta(minutes=r)\n                    r = 0\n                else:\n                    r += bhour.total_seconds() // 60\n                    other = self._get_closing_time(self._next_opening_time(other + bhour - timedelta(seconds=1)))\n        \n        # Restore the original timezone after adjustments\n        other = other.replace(tzinfo=original_tz)\n        \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas._libs.tslibs.offsets import ApplyTypeError"
            ]
        }
    ]
}