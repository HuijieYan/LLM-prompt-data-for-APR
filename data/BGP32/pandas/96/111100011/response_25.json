{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if self.start is None or self.end is None:\n            raise ValueError(\"start and end times must not be None\")\n        \n        n = self.n\n\n        # adjust other to reduce number of cases to handle\n        cleaned_other = datetime(\n            other.year, other.month, other.day,\n            other.hour, other.minute, other.second, other.microsecond\n        )\n\n        # Handle moving to the next opening time based on the specified frequency\n        if n >= 0:\n            if cleaned_other.time() in self.end or not self._is_on_offset(cleaned_other):\n                cleaned_other = self._next_opening_time(cleaned_other)\n        else:\n            if cleaned_other.time() in self.start:\n                # adjust to move to the previous business day\n                cleaned_other = cleaned_other - timedelta(seconds=1)\n            if not self._is_on_offset(cleaned_other):\n                cleaned_other = self._next_opening_time(cleaned_other)\n                cleaned_other = self._get_closing_time(cleaned_other)\n\n        if self.holidays and cleaned_other.date() in self.holidays:\n            cleaned_other = self._next_opening_time(cleaned_other)\n\n        return cleaned_other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}