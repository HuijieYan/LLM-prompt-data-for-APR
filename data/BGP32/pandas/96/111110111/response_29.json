{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, (datetime, Timestamp)):\n            n = self.n\n            if n > 0:\n                offset = CustomBusinessHour(self.start, end=self.end, holidays=self.holidays, weekmask=self.weekmask)\n            else:\n                offset = CustomBusinessHour(self.start, end=self.end, holidays=self.holidays, weekmask=self.weekmask)\n            \n            res = super().apply(other)\n            \n            if 'freq' in other.fields and other.freq is not None:\n                offset.n = n + 1\n            else:\n                offset.n = 1\n\n            for _ in range(abs(n) - 1):\n                prev_res = offset.apply(res)\n                if n > 0:\n                    if prev_res.time() not in offset.start or offset._is_on_offset(prev_res):\n                        res = prev_res\n                    else:\n                        res = offset._next_opening_time(prev_res)\n                else:\n                    if prev_res.time() in offset.end and not offset._is_on_offset(prev_res):\n                        res = prev_res\n                    else:\n                        res = offset._prev_opening_time(prev_res)\n            \n            return res\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import CustomBusinessHour, CustomBusinessDay",
                "from datetime import timedelta"
            ]
        }
    ]
}