{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, pd.Timestamp):\n            n = self.n\n            start = pd.Timestamp.combine(other.date(), self.start[0])\n            end = pd.Timestamp.combine(other.date(), self.end[0])\n\n            if n >= 0:\n                if other < start or other.time() not in self.end or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start:\n                    other = other - pd.Timedelta(seconds=1)\n                if not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n\n            business_hours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            business_minutes, r = divmod(abs(n) * 60, business_hours // 60)\n            if n < 0:\n                business_minutes = -business_minutes\n                r = -r\n\n            skip_business_days = pd.offsets.CustomBusinessDay(n=business_minutes // 480)\n            business_remainder = pd.Timedelta(minutes=r)\n\n            if business_minutes != 0:\n                if not self.next_bday.is_on_offset(other):\n                    prev_opening = self._prev_opening_time(other)\n                    remain = other - prev_opening\n                    other = prev_opening + skip_business_days + remain\n                else:\n                    other = other + skip_business_days\n\n            if n >= 0:\n                while business_remainder != pd.Timedelta(0):\n                    next_opening = self._next_opening_time(other)\n                    business_time_left = next_opening - other\n                    if business_remainder <= business_time_left:\n                        other += business_remainder\n                        business_remainder = pd.Timedelta(0)\n                    else:\n                        business_remainder -= business_time_left\n                        other = self._next_opening_time(next_opening)\n            else:\n                while business_remainder != pd.Timedelta(0):\n                    prev_opening = self._prev_opening_time(other)\n                    business_time_left = other - prev_opening\n                    if business_remainder >= business_time_left:\n                        other -= business_time_left\n                        business_remainder -= business_time_left\n                    else:\n                        business_remainder = pd.Timedelta(0)\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "import pandas as pd",
                "from pandas.tseries.offsets import ApplyTypeError"
            ]
        }
    ]
}