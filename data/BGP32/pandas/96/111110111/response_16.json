{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        # Adjust the input for edge conditions\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond\n        )\n\n        n = self.n\n        \n        # Get business hours count for one business day\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        # Calculate business days and remaining hours\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n        \n        # Check for holidays and adjust periods accordingly\n        if self.holidays and n > 0:\n            next_holiday = max(h for h in self.holidays if h.date() > other.date())\n            if self._is_on_offset(next_holiday):\n                bd += 1\n\n        # Handle business days first\n        skip_bd = BusinessDay(n=bd)\n        other = other + skip_bd\n        \n        # Distribute remaining hours\n        while r > 0:\n            # Get the time difference until closing\n            time_diff = self._get_closing_time(self._prev_opening_time(other)) - other\n            if time_diff.total_seconds() < r * 60:\n                # Move to the next business day\n                other = self._next_opening_time(other) - timedelta(seconds=1)\n            other += timedelta(minutes=r)\n            r = 0\n\n        return other",
            "import_list": [
                "from pandas.tseries.frequencies import to_offset, get_offset"
            ]
        }
    ]
}