{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            \n            # Determine if the given timestamp falls on an offset\n            is_on_offset = self.is_on_offset(other)\n            \n            if n >= 0:\n                if other.time() in self.end or not is_on_offset:\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start:\n                    other = other - timedelta(minutes=1)\n                if not is_on_offset:\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n            \n            # Get total business hours in a day\n            business_hours = sum((en - st).seconds for st, en in zip(self.start, self.end))\n            \n            # Calculate business days and remaining hours\n            bd, r = divmod(abs(n * 60), business_hours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n            \n            # Adjust by business days first\n            if bd != 0:\n                other = other + CustomBusinessDay(n=bd)\n            \n            # Remaining business hours to adjust\n            bhour_remain = CustomBusinessHour(minutes=r)\n            \n            if n >= 0:\n                while bhour_remain != timedelta(0):\n                    bhour = self._get_closing_time(other) - other\n                    if bhour_remain < bhour:\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        bhour_remain -= bhour\n                        other = self._next_opening_time(other) + CustomBusinessHour(seconds=(bhour.total_seconds()))\n            else:\n                while bhour_remain != timedelta(0):\n                    bhour = other - self._prev_opening_time(other)\n                    if bhour_remain > bhour:\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        bhour_remain -= bhour\n                        other = self._get_closing_time(self._next_opening_time(other + bhour - timedelta(seconds=1)))\n            \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import CustomBusinessHour",
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}