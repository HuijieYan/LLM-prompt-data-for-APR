{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n            \n            # Adjust the timezone and nanosecond for other\n            other_dt = datetime(other.year, other.month, other.day, other.hour, other.minute, other.second, other.microsecond)\n            \n            # Adjust other based on business hours\n            while n > 0:\n                if self._is_on_offset(other_dt):\n                    other_dt = self._next_opening_time(other_dt)\n                elif other_dt.time() in self.end:\n                    other_dt = self._next_opening_time(self._get_closing_time(other_dt))\n                else:\n                    other_dt = self._next_opening_time(other_dt)\n\n                n -= 1\n\n            while n < 0:\n                if other_dt.time() == self.start[0]:\n                    other_dt -= timedelta(seconds=1)\n                if self._is_on_offset(other_dt):\n                    other_dt = self._next_opening_time(other_dt)\n                    other_dt = self._get_closing_time(other_dt)\n\n                n += 1\n\n            return other_dt\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import ApplyTypeError",
                "from pandas.tseries.offsets import BaseOffset"
            ]
        }
    ]
}