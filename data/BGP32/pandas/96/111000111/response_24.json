{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n\n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            adjusted_time = other\n            remaining_minutes = abs(n) * 60\n\n            if n >= 0:\n                while remaining_minutes > 0:\n                    business_time_remaining = self._get_closing_time(adjusted_time) - adjusted_time\n                    if remaining_minutes < business_time_remaining.total_seconds() // 60:\n                        adjusted_time += timedelta(minutes=remaining_minutes)\n                        remaining_minutes = 0\n                    else:\n                        remaining_minutes -= business_time_remaining.total_seconds() // 60\n                        adjusted_time = self._next_opening_time(adjusted_time, force_move_next=True)\n\n            else:\n                while remaining_minutes > 0:\n                    business_time_remaining = adjusted_time - self._get_closing_time(adjusted_time)\n                    if remaining_minutes < abs(business_time_remaining.total_seconds()) // 60:\n                        adjusted_time -= timedelta(minutes=remaining_minutes)\n                        remaining_minutes = 0\n                    else:\n                        remaining_minutes -= abs(business_time_remaining.total_seconds()) // 60\n                        adjusted_time = self._prev_opening_time(adjusted_time, force_move_previous=True)\n\n            return adjusted_time\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import CustomBusinessDay",
                "from pandas.tseries.offsets import CustomBusinessHour"
            ]
        }
    ]
}