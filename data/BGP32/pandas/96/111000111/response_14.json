{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        # adjust other to reduce number of cases to handle\n        adjusted_other = datetime(\n            year=other.year,\n            month=other.month,\n            day=other.day,\n            hour=other.hour,\n            minute=other.minute,\n            second=other.second,\n            microsecond=other.microsecond\n        )\n\n        if n >= 0:\n            if adjusted_other.time() in self.end or not self._is_on_offset(adjusted_other):\n                adjusted_other = self._next_opening_time(adjusted_other)\n        else:\n            if adjusted_other.time() in self.start:\n                adjusted_other -= timedelta(seconds=1)\n            if not self._is_on_offset(adjusted_other):\n                adjusted_other = self._next_opening_time(adjusted_other)\n                adjusted_other = self._get_closing_time(adjusted_other)\n\n        business_hours_total = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        business_days, remaining_minutes = divmod(abs(n * 60), business_hours_total // 60)\n        if n < 0:\n            business_days, remaining_minutes = -business_days, -remaining_minutes\n\n        if business_days != 0:\n            skip_bd = CustomBusinessDay(n=business_days)\n            if not skip_bd.is_on_offset(adjusted_other):\n                prev_open = self._prev_opening_time(adjusted_other)\n                remain = adjusted_other - prev_open\n                adjusted_other = prev_open + skip_bd + remain\n            else:\n                adjusted_other += skip_bd\n\n        remaining_timedelta = timedelta(minutes=remaining_minutes)\n\n        if n >= 0:\n            while remaining_timedelta != timedelta(0):\n                bhour = self._get_closing_time(self._prev_opening_time(adjusted_other)) - adjusted_other\n                if remaining_timedelta < bhour:\n                    adjusted_other += remaining_timedelta\n                    remaining_timedelta = timedelta(0)\n                else:\n                    remaining_timedelta -= bhour\n                    adjusted_other = self._next_opening_time(adjusted_other + bhour)\n        else:\n            while remaining_timedelta != timedelta(0):\n                bhour = self._next_opening_time(adjusted_other) - adjusted_other\n                if remaining_timedelta > bhour or (remaining_timedelta == bhour and other.nanosecond != 0):\n                    adjusted_other += remaining_timedelta\n                    remaining_timedelta = timedelta(0)\n                else:\n                    remaining_timedelta -= bhour\n                    adjusted_other = self._get_closing_time(\n                        self._next_opening_time(adjusted_other + bhour - timedelta(seconds=1))\n                    )\n\n        return adjusted_other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}