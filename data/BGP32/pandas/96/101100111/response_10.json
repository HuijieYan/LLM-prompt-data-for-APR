{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def _move_forward(self, other, n):\n    businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n    total_minutes = n * 60\n    one_day_minutes = businesshours // 60\n\n    if n >= 0:\n        total_days, remaining_minutes = divmod(total_minutes, one_day_minutes)\n        other += timedelta(days=total_days)\n\n        bhour_remain = timedelta(minutes=remaining_minutes)\n        while bhour_remain.total_seconds() > 0:\n            business_hour = self._get_next_business_hour(other)\n            if bhour_remain < business_hour:\n                other += bhour_remain\n                bhour_remain = timedelta(0)\n            else:\n                bhour_remain -= business_hour\n                other = self._next_opening_time(other + business_hour)\n    else:\n        total_days, remaining_minutes = divmod(-total_minutes, one_day_minutes)\n        other -= timedelta(days=total_days)\n\n        bhour_remain = timedelta(minutes=-remaining_minutes)\n        while bhour_remain.total_seconds() > 0:\n            business_hour = self._get_previous_business_hour(other)\n            if bhour_remain < business_hour:\n                other -= bhour_remain\n                bhour_remain = timedelta(0)\n            else:\n                bhour_remain -= business_hour\n                other = self._previous_opening_time(other - business_hour)\n\n    return other",
            "import_list": []
        }
    ]
}