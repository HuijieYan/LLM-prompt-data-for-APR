{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n\n        if n >= 0:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                other = other - timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        bd = divmod(abs(n), len(self)) * (-1 if n < 0 else 1)\n        \n        if bd != 0:\n            other = self.next_bday.rollforward(other + timedelta(days=bd))\n\n        remaining_minutes = n % len(self) * 60\n        while remaining_minutes != 0:\n            current_hour = other.hour\n            current_minute = other.minute\n            current_seconds = current_hour * 3600 + current_minute * 60\n            if n >= 0:\n                closing_time = self._get_closing_time(other)\n                time_to_closing = (closing_time - other).total_seconds() / 60\n                if time_to_closing < remaining_minutes:\n                    remaining_minutes -= time_to_closing\n                    other = self._next_opening_time(closing_time)\n                else:\n                    other += timedelta(minutes=remaining_minutes)\n                    remaining_minutes = 0\n            else:\n                opening_time = self._next_opening_time(other.replace(hour=0, minute=0, second=0, microsecond=0))\n                time_to_opening = (opening_time - other).total_seconds() / 60\n                if time_to_opening > abs(remaining_minutes):\n                    other += timedelta(minutes=remaining_minutes)\n                    remaining_minutes = 0\n                else:\n                    remaining_minutes += time_to_opening\n                    other = self._get_closing_time(opening_time - timedelta(seconds=1))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}