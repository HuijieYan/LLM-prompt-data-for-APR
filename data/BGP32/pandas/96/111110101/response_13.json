{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            start_time = self.start[0]\n            end_time = self.end[0]\n            \n            if n >= 0:\n                if not (start_time <= other.time() < end_time):\n                    other = self._nearest_opening(other, start_time)\n            else:\n                if other.time() == start_time:\n                    other -= timedelta(seconds=1)\n                if other.time() < start_time:\n                    other = self._nearest_opening(other, start_time)\n                    other = self._nearest_opening(other, end_time)\n\n            business_hours_mins = sum([(e.hour - s.hour) * 60 + (e.minute - s.minute) for s, e in zip(self.start, self.end)])\n\n            bd, r = divmod(abs(n * 60), business_hours_mins)\n            if n < 0:\n                bd, r = -bd, -r\n\n            if bd != 0:\n                skip_bd = BusinessDay(n=bd)\n                if not self.next_bday.is_on_offset(other):\n                    prev_open = self._nearest_opening(other, start_time)\n                    remain = other - prev_open\n                    other = prev_open + skip_bd + remain\n                else:\n                    other = other + skip_bd\n\n            bhour_remain = timedelta(minutes=r)\n\n            while bhour_remain != timedelta(0):\n                if n >= 0:\n                    next_closing = self._nearest_opening(other, end_time)\n                    bhour = next_closing - other\n                else:\n                    next_opening = self._nearest_opening(other, start_time)\n                    bhour = next_opening - other\n                if bhour_remain < bhour:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    other = next_opening if n < 0 else next_closing\n                    other = other.replace(second=0, microsecond=0)\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import ApplyTypeError, BusinessDay",
                "import numpy as np"
            ]
        }
    ]
}