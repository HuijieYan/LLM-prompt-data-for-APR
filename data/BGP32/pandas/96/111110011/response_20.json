{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n    \n            # Logic to adjust datetime for business hours taking holidays into account\n            if n >= 0:\n                other = self._next_opening_time(other)\n            else:\n                other = self._prev_opening_time(other) - timedelta(seconds=1)\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n            \n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n            \n            # Handle business days adjustment\n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            bd, r = (-bd, -r) if n < 0 else (bd, r)\n            \n            # Adjust by business days first\n            if bd != 0:\n                skip_bd = BusinessDay(n=bd)\n                if not skip_bd.is_on_offset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + skip_bd + remain\n                else:\n                    other = other + skip_bd\n                \n            # Remaining business hours to adjust\n            bhour_remain = timedelta(minutes=r)\n            \n            # Adjust remaining business hours\n            while bhour_remain != timedelta(0):\n                bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                if n >= 0:\n                    other += min(bhour_remain, bhour)\n                    bhour_remain -= bhour\n                    other = self._next_opening_time(other)\n                else:\n                    other += bhour_remain if bhour_remain <= bhour else bhour\n                    bhour_remain = max(bhour_remain - bhour, timedelta(0))\n                    other = self._get_closing_time(self._next_opening_time(other - timedelta(seconds=1)))\n            \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}