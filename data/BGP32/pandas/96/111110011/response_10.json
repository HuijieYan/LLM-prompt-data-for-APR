{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        bd, r = divmod(abs(n), 60) if n >= 0 else divmod(-abs(n), 60)\n        \n        holiday_offset = timedelta(0)\n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        \n        if n >= 0:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n            \n            for _ in range(bd):\n                while other.weekday() >= 5 or other.date() in self.holidays:\n                    other += timedelta(days=1)\n                other = self._next_opening_time(other)\n                \n        else:\n            if other.time() in self.start:\n                other -= timedelta(seconds=1)\n                \n            while other.weekday() >= 5 or other.date() in self.holidays:\n                other -= timedelta(days=1)\n\n            other = self._next_opening_time(other)\n            \n        for _ in range(r):\n            while other.weekday() >= 5 or other.date() in self.holidays:\n                other += timedelta(days=1)\n            \n            bhour = self._get_closing_time(self._next_opening_time(other)) - other\n            if bhour.total_seconds() <= 0:\n                other = self._next_opening_time(other)\n            elif bhour.total_seconds() > 60*60:\n                other += timedelta(hours=1)\n            else:\n                other += bhour\n        \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}