{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def business_hour_adjustment(self, start_time):\n        adjusted_time = start_time\n        bhours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n        minutes_in_hour = 60\n        total_minutes = abs(self.n) * minutes_in_hour\n        sign = 1 if self.n >= 0 else -1\n\n        while total_minutes > 0:\n            # Check if adjusted time falls within business hours\n            if adjusted_time.time() in self.end or not self._is_on_offset(adjusted_time):\n                adjusted_time = self._next_opening_time(adjusted_time, sign)\n            next_open_time = self._next_opening_time(adjusted_time, sign)\n            time_delta = next_open_time - adjusted_time\n            minutes_increment = min(time_delta.total_seconds() / 60, total_minutes)\n            adjusted_time += timedelta(minutes=minutes_increment)\n            total_minutes -= minutes_increment\n        \n        return adjusted_time",
            "import_list": [
                "from pandas.tseries.offsets import DateOffset"
            ]
        }
    ]
}