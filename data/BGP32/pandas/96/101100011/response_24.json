{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            start = self.start[0]\n            end = self.end[0]\n    \n            if n >= 0:\n                if other.time() >= end or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() < start:\n                    other = other.replace(hour=start.hour, minute=start.minute, second=0, microsecond=0)\n    \n            bd, r = divmod(abs(n), len(self.start))\n            if n < 0:\n                bd, r = -bd, -r\n    \n            skip_bd = BusinessDay(n=bd)\n            bd_time = skip_bd + timedelta(hours=r)\n    \n            if n >= 0:\n                if other.time() >= end:\n                    other = self._next_opening_time(other)\n                other = other.replace(hour=start.hour, minute=start.minute, second=0, microsecond=0)\n                while bd_time > timedelta(0):\n                    bhour = self._get_business_hours_by_sec(self.start, self.end)\n                    if bd_time <= bhour:\n                        other += bd_time\n                        break\n                    other = self._next_opening_time(other)\n                    bd_time -= bhour\n            else:\n                if other.time() < start:\n                    other = self._prev_opening_time(other)\n                while bd_time < timedelta(0):\n                    bhour = self._get_business_hours_by_sec(self.start, self.end)\n                    if bd_time >= -bhour:\n                        other += bd_time\n                        break\n                    other = self._prev_opening_time(other)\n                    bd_time += bhour\n    \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}