{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            if isinstance(other, pd.Timestamp):\n                other = other.to_pydatetime()\n                \n            n = self.n\n            businessdays = n // len(self.start)\n            remaining_hours = int(n % len(self.start)) * 60\n\n            if n >= 0:\n                adjusted_dt = self.add_business_days(other, businessdays)\n                adjusted_dt = self.adjust_for_holidays(adjusted_dt)\n                \n                while remaining_hours > 0:\n                    if self._is_closing_time(adjusted_dt):\n                        adjusted_dt = self._next_opening_time(adjusted_dt)\n                    delta_time = min(remaining_hours, self.get_business_hours_remaining(adjusted_dt))\n                    adjusted_dt += timedelta(minutes=delta_time)\n                    remaining_hours -= delta_time\n\n            else:\n                adjusted_dt = self.subtract_business_days(other, abs(businessdays))\n                adjusted_dt = self.adjust_for_holidays(adjusted_dt)\n                \n                while remaining_hours < 0:\n                    if self._is_opening_time(adjusted_dt):\n                        adjusted_dt -= timedelta(minutes=1)\n                    delta_time = min(abs(remaining_hours), self.get_business_hours_from_opening(adjusted_dt))\n                    adjusted_dt -= timedelta(minutes=delta_time)\n                    remaining_hours += delta_time\n\n            return adjusted_dt\n\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}