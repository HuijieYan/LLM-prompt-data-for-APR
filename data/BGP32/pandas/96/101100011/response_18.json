{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            holidays = getattr(self, \"holidays\", [])\n            other_date = date(other.year, other.month, other.day)\n            adjusted_other = other.replace(microsecond=0)\n\n            if other in holidays:\n                raise ApplyTypeError(\"Provided date is a holiday\")\n\n            # Adjust other to reduce number of cases to handle\n            if n >= 0:\n                while adjusted_other.time() in self.end or not self._is_on_offset(adjusted_other):\n                    adjusted_other = self._next_opening_time(adjusted_other)\n            else:\n                if adjusted_other.time() <= self.start:\n                    adjusted_other = adjusted_other.replace(hour=self.start.hour, minute=0)\n                if adjusted_other.time() in self.start and not self._is_on_offset(adjusted_other):\n                    adjusted_other = self._next_opening_time(adjusted_other)\n                    adjusted_other = self._get_closing_time(adjusted_other)\n\n            # Adjust based on BusinessDay and remaining business hours\n            bd, r = divmod(abs(n * 60), self._get_business_hours_by_sec(self.start, self.end) // 60)\n            if n < 0:\n                bd, r = -bd, -r\n\n            if bd != 0:\n                skip_bd = BusinessHour(n=bd)\n                if not self.next_bday.is_on_offset(adjusted_other):\n                    prev_open = self._prev_opening_time(adjusted_other)\n                    remain = adjusted_other - prev_open\n                    adjusted_other = prev_open + skip_bd + remain\n                else:\n                    adjusted_other = adjusted_other + skip_bd\n\n            bhour_remain = timedelta(minutes=r)\n\n            if n >= 0:\n                while bhour_remain.total_seconds() > 0:\n                    bhour = self._get_closing_time(self._prev_opening_time(adjusted_other)) - adjusted_other\n                    if bhour_remain < bhour:\n                        adjusted_other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        bhour_remain -= bhour\n                        adjusted_other = self._next_opening_time(adjusted_other + bhour)\n            else:\n                while bhour_remain.total_seconds() > 0:\n                    bhour = self._next_opening_time(adjusted_other) - adjusted_other\n                    if bhour_remain >= bhour:\n                        adjusted_other += bhour\n                        bhour_remain -= bhour\n                    else:\n                        bhour_remain = timedelta(0)\n\n            return adjusted_other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}