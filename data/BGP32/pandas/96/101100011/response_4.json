{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            start_times = sorted(self.start)\n            end_times = sorted(self.end)\n            end_times += [end_times[0]]  # Close the loop for calculating next opening time\n    \n            all_hours = [(st, en) for st, en in zip(start_times, end_times)]\n            business_hours = sum(self._get_business_hours_by_sec(st, en) for st, en in all_hours)\n    \n            bd, r = divmod(n * business_hours // 60, business_hours // 60)\n    \n            offset = timedelta(hours=bd*24)\n            other = other + offset\n    \n            for _ in range(abs(r)):\n                current_hour = other.hour\n                current_minute = other.minute\n    \n                can_move_forward = 1 if n >= 0 else 0\n                offset = pd.Timedelta(0, unit='h')\n    \n                attempts = 0\n                while True:\n                    attempts += 1\n                    # Handle being at the opening hour already\n                    if (current_hour, current_minute) not in start_times:\n                        other = other + offset\n                        break\n                    \n                    is_on_holiday = lib.map_infer(other.timestamp(), self.holidays)\n                    if is_on_holiday:\n                        offset += pd.DateOffset(hours=24 * can_move_forward)\n                    else:\n                        other = other + offset\n                        break\n    \n                    if attempts > business_hours * 4:\n                        raise ValueError(\"Could not adjust to business hour due to conflicting offset and holidays.\")\n    \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.frequencies import CustomBusinessHour",
                "import pandas as pd",
                "import pandas._libs.lib as lib"
            ]
        }
    ]
}