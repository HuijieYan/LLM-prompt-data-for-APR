{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if not self.onOffset(other):\n            # Get total business hours in a day\n            business_hours = sum((en - st) for st, en in zip(self.start, self.end))\n\n            n = self.n\n\n            if n >= 0:\n                # Adjust for positive business hour offset\n                other = self._next_opening_time(other)\n                business_hours_to_adjust = n * 60\n\n                while business_hours_to_adjust > 0:\n                    current_time_diff = self._get_closing_time(other) - other\n                    if current_time_diff.total_seconds() < business_hours_to_adjust * 60:\n                        other = self._next_opening_time(other)\n                        business_hours_to_adjust -= current_time_diff.total_seconds() / 60\n                    else:\n                        other += timedelta(minutes=business_hours_to_adjust)\n                        business_hours_to_adjust = 0\n            else:\n                # Adjust for negative business hour offset\n                other = self._prev_opening_time(other)\n                business_hours_to_adjust = abs(n) * 60\n\n                while business_hours_to_adjust > 0:\n                    current_time_diff = other - self._get_closing_time(other)\n                    if current_time_diff.total_seconds() < business_hours_to_adjust * 60:\n                        other = self._prev_opening_time(other)\n                        business_hours_to_adjust -= current_time_diff.total_seconds() / 60\n                    else:\n                        other -= timedelta(minutes=business_hours_to_adjust)\n                        business_hours_to_adjust = 0\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}