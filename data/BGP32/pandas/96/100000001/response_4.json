{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        start_time = datetime.combine(date.today(), self.start) if self.start else datetime.min.time()\n        end_time = datetime.combine(date.today(), self.end) if self.end else datetime.max.time()\n\n        # Adjust based on business days (if necessary)\n        if n != 0:\n            if n > 0:\n                while n > 0:\n                    other = self._next_opening_time(other)\n                    if other.time() not in self.end:\n                        n -= 1\n            else:\n                while n < 0:\n                    if other.time() in self.start:\n                        other = other - timedelta(days=1)\n                    other = self._prev_opening_time(other)\n                    if other.time() not in self.end:\n                        n += 1\n\n        # Adjust based on remaining business hours\n        b = abs(n) if n < 0 else n\n        hours = b * 60\n        minutes = hours // 60\n        seconds = (hours % 60) * 60\n\n        if n >= 0:\n            while minutes > 0:\n                bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                if minutes * 60 <= bhour.total_seconds():\n                    other += timedelta(seconds=minutes * 60)\n                    minutes = 0\n                else:\n                    minutes -= bhour.total_seconds() // 60 + 1\n                    other = self._next_opening_time(other)\n        else:\n            while minutes > 0:\n                bhour = self._next_opening_time(other) - other\n                if minutes * 60 <= bhour.total_seconds() or (minutes * 60 == bhour.total_seconds() and other.nanosecond != 0):\n                    other += timedelta(seconds=minutes * 60)\n                    minutes = 0\n                else:\n                    minutes -= bhour.total_seconds() // 60\n                    other = self._get_closing_time(self._next_opening_time(other) - timedelta(seconds=1))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}