{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n        nanosecond = getattr(other, \"nanosecond\", 0)\n        if n >= 0:\n            if other.time() not in self.start or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                other -= timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        total_seconds = n * 60 * 60\n        business_days, remaining_seconds = divmod(abs(total_seconds), businesshours)\n\n        if n < 0:\n            business_days, remaining_seconds = -business_days, -remaining_seconds\n\n        other += timedelta(days=business_days)\n\n        while remaining_seconds != 0:\n            if n >= 0:\n                closing_time = self._get_closing_time(self._prev_opening_time(other))\n                remaining_hours = (closing_time - other).total_seconds() / 3600\n            else:\n                opening_time = self._next_opening_time(other)\n                remaining_hours = (opening_time - other).total_seconds() / 3600\n\n            if n >= 0 and remaining_seconds > remaining_hours * 3600:\n                other = closing_time\n                remaining_seconds -= remaining_hours * 3600\n            elif n < 0 and remaining_seconds < remaining_hours * 3600:\n                other += timedelta(seconds=remaining_seconds)\n                remaining_seconds = 0\n            else:\n                if n >= 0:\n                    other = self._next_opening_time(closing_time)\n                else:\n                    other = self._get_closing_time(self._next_opening_time(other))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}