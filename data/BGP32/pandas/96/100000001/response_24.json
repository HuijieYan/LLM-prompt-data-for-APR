{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        \n        if n >= 0:\n            businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n            \n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            \n            if n < 0:\n                bd, r = -bd, -r\n                \n        # adjust by business days first\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            if not self._is_on_offset(other):\n                next_opening = self._next_opening_time(other)\n                previous_opening = self._prev_opening_time(other)\n                \n                if n >= 0:\n                    other = next_opening + skip_bd\n                else:\n                    if other.time() >= self.start[0]:  # Check if the time is in the next day's range\n                        other = next_opening + skip_bd\n                    else:\n                        other = previous_opening + skip_bd\n                \n            else:\n                other += skip_bd\n\n        Remain = timedelta(minutes=r)\n\n        if n >= 0:\n            while Remain != timedelta(0):\n                closing_time = self._get_closing_time(other)\n                closing_prev_opening = self._prev_opening_time(other)\n\n                business_time_remain = closing_time - other\n\n                if business_time_remain <= Remain:\n                    Remain -= business_time_remain\n                    other = self._next_opening_time(closing_prev_opening)\n                else:\n                    other += Remain\n                    Remain = timedelta(0)\n                    \n        else:\n            while Remain != timedelta(0):\n                next_opening = self._next_opening_time(other)\n                business_time_remain = next_opening - other\n\n                if business_time_remain < Remain:\n                    Remain -= business_time_remain\n                    other = self._get_closing_time(self._next_opening_time(other))\n                else:\n                    other += Remain\n                    Remain = timedelta(0)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}