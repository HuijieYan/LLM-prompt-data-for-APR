{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        \n        modified_datetime = datetime(\n            year=other.year,\n            month=other.month,\n            day=other.day,\n            hour=other.hour,\n            minute=other.minute,\n            second=other.second,\n            microsecond=other.microsecond\n        )\n\n        # Get total business hours by seconds in one business day\n        business_hours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        additional_days, remaining_seconds = divmod(abs(n * 60), business_hours // 60)\n        if n < 0:\n            additional_days, remaining_seconds = -additional_days, -remaining_seconds\n\n        business_day_offset = timedelta(days=additional_days)\n\n        if additional_days != 0:\n            business_hour_remainder = timedelta(seconds=remaining_seconds)\n            \n            if n >= 0:\n                while business_hour_remainder > timedelta(0):\n                    next_opening = self._next_opening_time(modified_datetime)\n                    closing_time = self._get_closing_time(next_opening)\n                    business_hour_diff = closing_time - modified_datetime\n                    \n                    if business_hour_remainder < business_hour_diff:\n                        modified_datetime += business_hour_remainder\n                        business_hour_remainder = timedelta(0)\n                    else:\n                        business_hour_remainder -= business_hour_diff\n                        modified_datetime = self._next_opening_time(next_opening)\n            else:\n                while business_hour_remainder > timedelta(0):\n                    next_opening = self._next_opening_time(modified_datetime)\n                    business_hour_diff = next_opening - modified_datetime\n                    \n                    if business_hour_remainder >= business_hour_diff:\n                        modified_datetime += business_hour_remainder\n                        business_hour_remainder = timedelta(0)\n                    else:\n                        business_hour_remainder -= business_hour_diff\n                        modified_datetime = next_opening\n\n            modified_datetime += business_day_offset\n\n        return modified_datetime\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}