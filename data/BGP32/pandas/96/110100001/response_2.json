{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            start_time = other.time()\n            \n            if n >= 0:\n                if start_time >= self.end[0] or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if start_time < self.start[0]:\n                    other = other - timedelta(seconds=1)\n                if not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n            \n            if n < 0:\n                n *= -1\n            \n            business_hours = sum(self._get_business_hours_by_sec(st, en)\n                                 for st, en in zip(self.start, self.end))\n            \n            bd, r = divmod(n * 60, business_hours // 60)\n            if self.n < 0:\n                bd, r = -bd, -r\n            \n            if bd != 0:\n                bd_offset = BusinessDay(n=bd)\n                if not self.next_bday.is_on_offset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + bd_offset + remain\n                else:\n                    other = other + bd_offset\n            \n            bhour_remain = timedelta(minutes=r)\n            \n            while bhour_remain:\n                bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                if bhour_remain >= bhour:\n                    other += bhour\n                    bhour_remain -= bhour\n                    other = self._next_opening_time(other)\n                else:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n            \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import BusinessMixin, BusinessDay",
                "from pandas._libs.tslibs.offsets import ApplyTypeError",
                "from pandas.tseries.offsets import apply_wraps",
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}