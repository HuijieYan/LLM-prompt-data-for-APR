{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            if n >= 0:\n                start_time = self.start[0]\n                is_on_offset = other.time() in self.start or not self._is_on_offset(other)\n                if is_on_offset:\n                    closest_opening = max([t for t in self.start if t <= other.time()])\n                    if closest_opening == other.time():\n                        other = datetime.combine(other.date(), closest_opening)\n                    else:\n                        close_time = min([t for t in self.end if t >= closest_opening])\n                        other = datetime.combine(other.date(), close_time)\n                else:\n                    next_opening = self._next_opening_time(other)\n                    other = datetime.combine(other.date(), next_opening.time())\n            else:\n                start_time = self.start[-1]\n                if other.time() in self.start:\n                    other = datetime.combine(other.date() - timedelta(days=1), start_time)\n                elif other.time() in self.end:\n                    closest_opening = max([t for t in self.start if t <= start_time])\n                    other = datetime.combine(other.date(), closest_opening)\n                else:\n                    closest_opening = max([t for t in self.start if t <= other.time()])\n                    other = datetime.combine(other.date(), closest_opening)\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}