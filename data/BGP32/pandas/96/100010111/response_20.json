{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        adjusted = other\n\n        if n >= 0:\n            if other.time() not in self.end or not self._is_on_offset(other):\n                adjusted = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                adjusted = other - timedelta(seconds=1)\n\n            if not self._is_on_offset(adjusted):\n                adjusted = self._next_opening_time(adjusted)\n                adjusted = self._get_closing_time(adjusted)\n\n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n\n        if n < 0:\n            bd, r = -bd, -r\n\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            if not self.start[0] <= self.next_bday.apply(other) < self.end[0]:\n                skip_bd = BusinessDay(n=bd - 1)\n\n            adjusted = self.next_bday.apply(other)\n            bhour_remain = timedelta(minutes=r)\n\n            while bhour_remain.total_seconds() != 0:\n                business_hour = timedelta(hours=1)\n\n                if n < 0:\n                    if business_hour <= bhour_remain:\n                        adjusted += business_hour\n                        bhour_remain -= business_hour\n                    else:\n                        break\n                else:\n                    adjusted += business_hour\n                    bhour_remain -= business_hour\n\n        return adjusted\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}