{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        other = other.replace(tzinfo=None, nanosecond=0)\n\n        n = self.n\n\n        is_holiday = other.date() in self.holidays\n\n        # Adjust business days based on direction of offset\n        business_day_offset = BusinessDay(n=n)\n        other += business_day_offset\n\n        if n < 0:  # Adjust to the previous business day\n            other = self._previous_opening_time(other)\n        else:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n\n        if is_holiday:  # Adjust for holidays\n            other = self._next_opening_time(other)\n\n        business_hour = self._get_first_business_hour(other)\n        business_hour_offset = timedelta(minutes=self._get_business_hour_offset())\n\n        while business_hour_offset > timedelta(0):\n            business_hour_length = self._get_business_hour_length(business_hour)\n            if business_hour_offset < business_hour_length:\n                other += business_hour_offset\n                business_hour_offset = timedelta(0)\n            else:\n                other += business_hour_length\n                business_hour_offset -= business_hour_length\n                business_hour = self._next_opening_time(self._next_opening_time(other))\n\n        return other\n\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}