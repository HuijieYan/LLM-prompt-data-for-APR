{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if self._is_on_offset(other):\n            return other\n        \n        adjusted = other.replace(\n            hour=self.start[0].hour,\n            minute=self.start[0].minute,\n            second=0,\n            microsecond=0\n        )\n        \n        if self.n >= 0:\n            adjusted = self._next_opening_time(adjusted)\n        else:\n            if adjusted.time() in self.start:\n                adjusted -= timedelta(seconds=1)\n            adjusted = self._next_closing_time(adjusted)\n        \n        hours_diff = self._get_business_hours(adjusted, other)\n        new_dt = adjusted\n        \n        if self.n >= 0:\n            delta = timedelta(minutes=hours_diff * 60)\n            while delta > timedelta(0):\n                new_dt = self._next_opening_time(new_dt + delta)\n                delta -= self._get_business_hours(new_dt, new_dt + delta)\n        else:\n            delta = timedelta(minutes=-hours_diff * 60)\n            while delta < timedelta(0):\n                new_dt = self._prev_opening_time(new_dt + delta)\n                delta += self._get_business_hours(new_dt, new_dt + delta)\n        \n        return new_dt\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}