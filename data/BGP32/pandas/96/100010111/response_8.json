{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        holiday_dates = [date.fromisoformat(str(h)) for h in self.holidays]\n\n        adjusted_value = other\n\n        while n != 0:\n            adj_day = adjusted_value.date()\n\n            while bool(n > 0) == (adj_day.weekday() >= 5 or adj_day in holiday_dates):\n                adj_day += timedelta(days=1)\n            \n            adjusted_value = datetime.combine(adj_day, self.start[0])\n\n            if adjusted_value < other:\n                direction = 1\n            elif adjusted_value > other:\n                direction = -1\n            else:\n                break\n\n            while True:\n                if n == 0:\n                    break\n\n                closed = adjusted_value + timedelta(hours=2) if adjusted_value.time() == self.start[0] else adjusted_value.replace(hour=0)\n\n                steps = int(n / abs(n))  # Either +1 or -1\n                if direction == steps:\n                    adjusted_value = closed\n                else:\n                    adjusted_value += timedelta(hours=2)\n\n                n -= steps\n\n        return adjusted_value\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}