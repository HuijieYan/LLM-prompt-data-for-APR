{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if self.on_offset(other):\n            return other\n\n        business_days_passed = self._business_days_passed(other)\n\n        if business_days_passed == 0:\n            if self._is_on_offset(other):\n                return other\n            else:\n                return self._next_opening_time(other)\n\n        closed = self._date_ofset(other, business_days_passed)\n\n        if business_days_passed < 0:\n            closed = self._prev_opening_time(closed)\n        else:\n            if closed.time() in self.end:\n                closed = self._next_opening_time(closed)\n        \n        if self._is_on_offset(closed):\n            business_days_passed += 1\n\n        next_offset = timedelta(0)\n        if business_days_passed != 0:\n            adjusted = BusinessDay(n=business_days_passed)._apply_partially(closed, self.on_offset)\n\n            if adjusted.time() != closed.time():\n                offset = timedelta(hours=closed.hour, minutes=closed.minute, seconds=closed.second)\n\n                closed = closed.replace(hour=0, minute=0, second=0)\n                closed += BusinessMinute(n=offset.total_seconds() // 60)._apply(closed, self.on_offset)\n\n                next_offset = offset - timedelta(minutes=adjusted.minute * 60 + adjusted.second)\n\n        remaining_offset = self._remaining_offset(other, closed) + next_offset\n\n        adjusted = self._apply(remaining_offset, closed, self.on_offset)\n\n        return adjusted\n    \n    raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}