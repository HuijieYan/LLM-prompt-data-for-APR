{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if not self._is_on_offset(other):\n            other = self._next_opening_time(other)\n        \n        adjusted_date = other\n        business_hours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        n_minutes = self.n * 60\n        \n        if self.n >= 0:\n            while n_minutes > 0:\n                business_hour_left = self._get_closing_time(self._prev_opening_time(adjusted_date)) - adjusted_date\n                if n_minutes <= business_hour_left.total_seconds() / 60:\n                    adjusted_date += timedelta(minutes=n_minutes)\n                    break\n                else:\n                    n_minutes -= business_hour_left.total_seconds() / 60\n                    adjusted_date = self._next_opening_time(adjusted_date + business_hour_left)\n        else:\n            while n_minutes < 0:\n                business_hour_left = self._next_opening_time(adjusted_date) - adjusted_date\n                if n_minutes >= business_hour_left.total_seconds() / 60:\n                    adjusted_date += timedelta(minutes=n_minutes)\n                    break\n                else:\n                    n_minutes += business_hour_left.total_seconds() / 60\n                    adjusted_date = self._prev_opening_time(self._get_closing_time(adjusted_date))\n        \n        return adjusted_date\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}