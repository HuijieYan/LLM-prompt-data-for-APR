{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if not isinstance(other, datetime):\n        raise ApplyTypeError(\"Business hour can only be combined with datetime objects\")\n\n    n = self.n\n\n    nanosecond = getattr(other, \"nanosecond\", 0)\n    other = datetime(\n        other.year, other.month, other.day, other.hour, other.minute, other.second, other.microsecond\n    )\n\n    if n > 0:\n        if other.time() in self.end or not self._is_on_offset(other):\n            other = self._next_opening_time(other)\n    elif n < 0:\n        if other.time() in self.start:\n            other = other - timedelta(seconds=1)\n        \n        if not self._is_on_offset(other):\n            other = self._prev_opening_time(other)\n            other = self._get_closing_time(other)\n\n    business_hours_per_day = sum(self._get_business_hours_by_sec(st, en)\n                                 for st, en in zip(self.start, self.end))\n    \n    business_days, remaining_hours = divmod(abs(n * 60), business_hours_per_day // 60)\n\n    if n < 0:\n        business_days, remaining_hours = -business_days, -remaining_hours\n\n    other += BusinessDay(n=business_days)\n\n    while remaining_hours != 0:\n        if n >= 0:\n            next_closing_time = self._get_closing_time(self._next_opening_time(other))\n            hours_left_in_interval = next_closing_time - other\n        else:\n            next_opening_time = self._next_opening_time(other)\n            hours_left_in_interval = next_opening_time - other\n\n        if remaining_hours >= hours_left_in_interval.total_seconds() / 60 or \\\n                (remaining_hours == hours_left_in_interval.total_seconds() / 60 and nanosecond != 0):\n            other += hours_left_in_interval\n            remaining_hours = 0\n        else:\n            other += timedelta(minutes=remaining_hours)\n            remaining_hours = 0\n\n    return other",
            "import_list": []
        }
    ]
}