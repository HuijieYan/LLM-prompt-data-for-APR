{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # Reset timezone and nanosecond\n            other = datetime(\n                other.year,\n                other.month,\n                other.day,\n                other.hour,\n                other.minute,\n                other.second,\n                other.microsecond,\n            )\n\n            n = self.n\n\n            opening_times = [self._next_opening_time(t) for t in self.start]\n            closing_times = [self._get_closing_time(t) for t in self.end]\n\n            total_business_hours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n\n            business_days, remaining_minutes = divmod(abs(n * 60), total_business_hours // 60)\n            if n < 0:\n                business_days = -business_days\n                remaining_minutes = -remaining_minutes\n\n            # Adjust by business days first\n            if business_days != 0:\n                other = other + timedelta(days=business_days)\n                if not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n\n            # Adjust remaining business hours\n            while remaining_minutes != 0:\n                if n >= 0:\n                    closing_time = self._get_closing_time(other)\n                    business_hour_length = closing_time - other\n                else:\n                    opening_time = self._next_opening_time(other)\n                    business_hour_length = opening_time - other\n\n                if remaining_minutes > business_hour_length.seconds // 60:\n                    other = opening_times[closing_times.index(closing_time)] if n >= 0 else closing_time\n                    remaining_minutes -= business_hour_length.seconds // 60\n                else:\n                    other += timedelta(minutes=remaining_minutes)\n                    remaining_minutes = 0\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}