{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if other.time() in self.start:\n            other = self._next_opening_time(other)\n        elif other.time() in self.end:\n            other = self._get_closing_time(other)\n        else:\n            if other in self.onOffset(other):\n                other = self._get_closing_time(other)\n\n        n = self.n\n\n        business_hours_seconds = sum(\n            self._get_business_hours_by_sec(start, end)\n            for start, end in zip(self.start, self.end)\n        )\n        \n        business_days, remaining_seconds = divmod(abs(n * 60), business_hours_seconds // 60)\n\n        if n < 0:\n            business_days, remaining_seconds = -business_days, -remaining_seconds\n        \n        if business_days != 0:\n            skip_bd = BusinessDay(n=business_days)\n            if on_offset(other):\n                other += skip_bd\n            else:\n                prev_open = self._prev_opening_time(other)\n                remaining = other - prev_open\n                other = prev_open + skip_bd + remaining\n\n        remaining_td = timedelta(seconds=remaining_seconds)\n\n        if n >= 0:\n            while remaining_td != timedelta(0):\n                b_hour = self._get_closing_time(self._prev_opening_time(other)) - other\n                if remaining_td < b_hour:\n                    other += remaining_td\n                    remaining_td = timedelta(0)\n                else:\n                    remaining_td -= b_hour\n                    other = self._next_opening_time(other + b_hour)\n        else:\n            while remaining_td != timedelta(0):\n                b_hour = self._next_opening_time(other) - other\n                if remaining_td >= b_hour:\n                    other += remaining_td\n                    remaining_td = timedelta(0)\n                else:\n                    remaining_td -= b_hour\n                    other = self._get_closing_time(self._next_opening_time(other))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}