{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        if self._has_holidays:\n            # Skipping holidays in the date range\n            while other in self._holidays_list:\n                if n >= 0:\n                    other += timedelta(days=1)\n                else:\n                    other -= timedelta(days=1)\n\n        # Adjust for business days\n        if n != 0:\n            skip_days = BusinessDay(n=n)\n            other += skip_days\n        \n        # Adjust for remaining business hours\n        businesshours = sum(self._get_business_hours_by_sec(st, en) // 3600 for st, en in zip(self.start, self.end))\n        total_minutes = abs(n) * 60\n        bd, r = divmod(total_minutes, businesshours)\n\n        if n < 0:\n            bd, r = -bd, -r\n\n        if r != 0:\n            bhour_remain = timedelta(minutes=r)\n            if n >= 0:\n                while bhour_remain > timedelta(0):\n                    bhour = self._get_closing_time(other) - other\n                    if bhour_remain < bhour:\n                        other += bhour_remain\n                        break\n                    other = self._next_opening_time(other + bhour)\n                    bhour_remain -= bhour\n            else:\n                while bhour_remain < timedelta(0):\n                    bhour = other - self._prev_opening_time(other)\n                    if abs(bhour_remain) <= bhour:\n                        other += bhour_remain\n                        break\n                    other = self._get_closing_time(other - bhour)\n                    bhour_remain += bhour\n        \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import ApplyTypeError, BusinessDay",
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}