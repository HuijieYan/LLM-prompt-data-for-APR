{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n   if isinstance(other, datetime):  \n       if other.time() in self.start and self._is_on_offset(other):\n           return other\n       \n       if other.time() not in self.end:\n           other = self._next_opening_time(other)\n           if not self._is_on_offset(other):\n               other = self._get_closing_time(other)\n        \n       n = self.n\n       businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n       total_secs = n * 60 * businesshours // 60\n       \n       bd, r = divmod(abs(total_secs), businesshours // 60)\n       if n < 0:\n           bd, r = -bd, -r\n       \n       skip_bd = BusinessDay(n=bd)\n       if bd != 0:\n           other = other + skip_bd\n           \n       bhour_remain = timedelta(minutes=r)\n       interval_start = self._prev_opening_time(other) if n >= 0 else other\n       \n       while bhour_remain != timedelta(0):\n           next_time = self._next_opening_time(interval_start)\n           bhour = next_time - interval_start if n >= 0 else interval_start - next_time\n           \n           if bhour_remain >= bhour:\n               bhour_remain -= bhour\n               interval_start = next_time + timedelta(0) if n >= 0 else next_time - timedelta(seconds=1)\n           else:\n               other = interval_start + bhour_remain\n               break\n       \n       return other\n   else:\n       raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}