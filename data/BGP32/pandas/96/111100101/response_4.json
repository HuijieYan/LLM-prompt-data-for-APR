{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            offset_hours = _get_offset_hours(self)\n            business_hours = sum(end.hour * 60 + end.minute - start.hour * 60 - start.minute for start, end in zip(self.start, self.end))\n            total_offset_hours = n * business_hours\n            \n            adjusted_dt = other\n            day_counter = 0\n            \n            while total_offset_hours != 0:\n                if n >= 0:\n                    if adjusted_dt.time() in self.end or not self._is_on_offset(adjusted_dt):\n                        adjusted_dt = self._next_opening_time(adjusted_dt)\n                else:\n                    if adjusted_dt.time() in self.start:\n                        adjusted_dt -= timedelta(seconds=1)\n                    if not self._is_on_offset(adjusted_dt):\n                        adjusted_dt = self._next_opening_time(adjusted_dt)\n                        adjusted_dt = self._get_closing_time(adjusted_dt)\n                \n                bhours = (self._get_closing_time(self._prev_opening_time(adjusted_dt)) - adjusted_dt).seconds // 60\n                if bhours < total_offset_hours:\n                    total_offset_hours -= bhours\n                    adjusted_dt = self._next_opening_time(adjusted_dt + timedelta(minutes=bhours))\n                else:\n                    adjusted_dt += timedelta(minutes=total_offset_hours)\n                    total_offset_hours = 0\n                \n                day_counter += 1\n            \n            return adjusted_dt\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import BusinessMixin"
            ]
        }
    ]
}