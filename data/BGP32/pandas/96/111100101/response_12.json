{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        base_time = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n\n        if n > 0:\n            if base_time.time() in self.end or not self._is_on_offset(base_time):\n                other = self._next_opening_time(base_time)\n        elif n < 0:\n            if base_time.time() in self.start:\n                base_time = base_time - timedelta(seconds=1)\n            if not self._is_on_offset(base_time):\n                other = self._next_opening_time(base_time)\n                other = self._get_closing_time(other)\n\n        business_hours_sec = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        business_hours_min = business_hours_sec // 60\n        remainder = abs(n) % business_hours_min\n        offset_minutes = remainder if n >= 0 else -remainder\n\n        adjusted_time = base_time\n        if n != 0:\n            business_day_offset = BusinessDay(n=n)\n            if not self.next_bday.is_on_offset(base_time):\n                prev_open = self._prev_opening_time(base_time)\n                remain = base_time - prev_open\n                adjusted_time = prev_open + business_day_offset + remain\n            else:\n                adjusted_time = base_time + business_day_offset\n\n        adjusted_time += timedelta(minutes=offset_minutes)\n        \n        return adjusted_time\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}