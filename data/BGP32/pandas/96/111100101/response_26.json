{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            nanosecond = getattr(other, \"nanosecond\", 0)\n            other = datetime(\n                other.year,\n                other.month,\n                other.day,\n                other.hour,\n                other.minute,\n                other.second,\n                other.microsecond,\n            )\n            n = self.n\n\n            # adjust other to reduce number of cases to handle\n            on_offset = other.time() in self.start or other.time() in self.end or self._is_on_offset(other)\n\n            if n >= 0:\n                if not on_offset:\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() == self.start[0]:\n                    other -= timedelta(seconds=1)\n                if on_offset:\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n\n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            if n < 0:\n                bd = -bd\n                r = -r\n\n            if bd != 0:\n                adjusted_date = other\n                \n                if bd > 0:\n                    for _ in range(bd):\n                        adjusted_date = self.next_bday.rollforward(adjusted_date)\n                else:\n                    for _ in range(abs(bd)):\n                        adjusted_date = self.next_bday.rollback(adjusted_date)\n\n                other = adjusted_date\n\n            while r != 0:\n                if n >= 0:\n                    bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                    if r < bhour.total_seconds() // 60:\n                        other += timedelta(minutes=r)\n                        r = 0\n                    else:\n                        r -= bhour.total_seconds() // 60\n                        other = self._next_opening_time(other) + bhour\n                else:\n                    bhour = self._next_opening_time(other) - other\n                    if r > bhour.total_seconds() // 60 or (r == bhour.total_seconds() // 60 and nanosecond != 0):\n                        other += timedelta(minutes=r)\n                        r = 0\n                    else:\n                        r -= bhour.total_seconds() // 60\n                        other = self._get_closing_time(self._next_opening_time(other + bhour - timedelta(seconds=1)))\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import ApplyTypeError, BusinessDay",
                "from datetime import datetime, timedelta"
            ]
        }
    ]
}