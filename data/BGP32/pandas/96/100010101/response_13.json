{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        nanosecond = getattr(other, \"nanosecond\", 0)\n        orig_tz = other.tzinfo  # Preserve original timezone\n        other = other.replace(tzinfo=None, nanosecond=0)\n\n        if n >= 0:\n            skip_bh = sum(self._get_business_hours_by_sec(st, en)\n                          for st, en in zip(self.start, self.end))\n            processed_time = other\n            while n > 0:\n                processed_time += timedelta(hours=1)\n                if self._is_on_offset(processed_time) and processed_time.time() in self.start:\n                    n -= 1\n                    skip_bh += self._get_business_hours_by_sec(self.start[0], self.end[0])\n\n            result = other + timedelta(seconds=skip_bh)\n        else:\n            raise NotImplementedError(\"Negative business hours adjustment is not supported at the moment.\")\n        \n        return result.replace(tzinfo=orig_tz)  # Restore original timezone\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import BusinessHour"
            ]
        }
    ]
}