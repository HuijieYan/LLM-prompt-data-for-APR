{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            nanosecond = getattr(other, \"nanosecond\", 0)\n            other = datetime(\n                other.year,\n                other.month,\n                other.day,\n                other.hour,\n                other.minute,\n                other.second,\n                other.microsecond,\n            )\n            n = self.n\n            \n            if n >= 0:\n                if other.time() in self.end or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start:\n                    other = other - timedelta(seconds=1)\n                if not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n    \n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n    \n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n    \n            if bd != 0:\n                skip_bd = BusinessDay(n=bd)\n                if not self.next_bday.is_on_offset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + skip_bd + remain\n                else:\n                    other = other + skip_bd\n    \n            bhour_remain = timedelta(minutes=r)\n            \n            if n >= 0:\n                while bhour_remain != timedelta(0):\n                    bhour = (\n                        self._get_closing_time(self._prev_opening_time(other)) - other\n                    )\n                    if bhour_remain < bhour:\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        bhour_remain -= bhour\n                        other = self._next_opening_time(other + bhour)\n            else:\n                while bhour_remain != timedelta(0):\n                    bhour = self._next_opening_time(other) - other\n                    if (\n                        bhour_remain > bhour\n                        or bhour_remain == bhour\n                        and nanosecond != 0\n                    ):\n                        other += bhour_remain\n                        bhour_remain = timedelta(0)\n                    else:\n                        bhour_remain -= bhour\n                        other = self._get_closing_time(\n                            self._next_opening_time(\n                                other + bhour - timedelta(seconds=1)\n                            )\n                        )\n    \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}