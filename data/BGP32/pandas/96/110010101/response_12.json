{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            nanosecond = getattr(other, \"nanosecond\", 0)\n            \n            n = self.n\n            total_hours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n            \n            business_days, remaining_hours = divmod(abs(n * 60), total_hours // 60)\n            if n < 0:\n                business_days, remaining_hours = -business_days, -remaining_hours\n            \n            other = self._get_next_time(other, n)\n            \n            if business_days != 0:\n                skip_business_days = BusinessDay(n=business_days)\n                if not self.next_bday.is_on_offset(other):\n                    remain = other - self._prev_opening_time(other)\n                    other = self._prev_opening_time(other) + skip_business_days + remain\n                else:\n                    other += skip_business_days\n            \n            remaining_time = timedelta(minutes=remaining_hours)\n            \n            if n >= 0:\n                while remaining_time != timedelta(0):\n                    current_interval_end = self._get_closing_time(self._prev_opening_time(other))\n                    interval_hours = current_interval_end - other\n                    \n                    if remaining_time < interval_hours:\n                        other += remaining_time\n                        remaining_time = timedelta(0)\n                    else:\n                        remaining_time -= interval_hours\n                        other = self._next_opening_time(current_interval_end)\n            else:\n                while remaining_time != timedelta(0):\n                    current_interval_start = self._next_opening_time(other)\n                    interval_hours = current_interval_start - other\n                    \n                    if remaining_time >= interval_hours or (remaining_time == interval_hours and nanosecond != 0):\n                        other += remaining_time\n                        remaining_time = timedelta(0)\n                    else:\n                        remaining_time -= interval_hours\n                        other = self._get_closing_time(self._next_opening_time(current_interval_start - timedelta(seconds=1)))\n            \n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}