{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        nanosecond = getattr(other, \"nanosecond\", 0)\n        \n        n = self.n\n        start_time = self.start[0]\n        end_time = self.end[0]\n        business_hours_per_day = sum(self._get_business_hours_by_sec(start, end) for start, end in zip(self.start, self.end)) // 60\n        \n        if n >= 0:\n            if other.time() >= end_time or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() < start_time:\n                other = other.replace(hour=start_time.hour, minute=end_time.minute)\n            if not self._is_on_offset(other):\n                other = self._prev_opening_time(other)\n        \n        business_days_to_adjust = n // business_hours_per_day\n        remaining_business_hours = n % business_hours_per_day\n        \n        other += timedelta(days=business_days_to_adjust)\n        \n        if remaining_business_hours != 0:\n            if n >= 0:\n                while remaining_business_hours > 0:\n                    bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                    if remaining_business_hours < bhour.seconds // 60:\n                        other += timedelta(minutes=remaining_business_hours)\n                        break\n                    else:\n                        remaining_business_hours -= bhour.seconds // 60\n                        other = self._next_opening_time(other) + timedelta(minutes=business_hours_per_day)\n            else:\n                remaining_business_hours = abs(remaining_business_hours)\n                while remaining_business_hours > 0:\n                    bhour = self._next_opening_time(other) - other\n                    if remaining_business_hours < bhour.seconds // 60:\n                        other += timedelta(minutes=remaining_business_hours * -1)\n                        break\n                    else:\n                        remaining_business_hours -= bhour.seconds // 60\n                        other = self._get_closing_time(self._next_opening_time(other) - timedelta(seconds=1))\n        \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}