{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            # adjust timezone and microsecond\n            other = other.replace(tzinfo=None, microsecond=0)\n            n = self.n\n\n            if n >= 0:\n                if other.time() in self.end or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other.time() in self.start:\n                    other = other - timedelta(seconds=1)\n                if not self._is_on_offset(other):\n                    other = self._prev_opening_time(other)\n\n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            bd, r = divmod(abs(n * 60), businesshours // 60)\n            if n < 0:\n                bd, r = -bd, -r\n\n            for _ in range(abs(bd)):\n                if n >= 0:\n                    other = self.next_bday.rollforward(other)\n                else:\n                    other = self.next_bday.rollback(other)\n\n            remaining_business_hours = timedelta(minutes=r)\n            current_time = other.time()\n\n            if r == 0:\n                return datetime(other.year, other.month, other.day, 0, 0, 0)\n\n            while remaining_business_hours > timedelta(0):\n                if n >= 0:\n                    if current_time < self.start[0]:\n                        current_time = self.start[0]\n                    else:\n                        current_time = self._next_opening_time(\n                            datetime(other.year, other.month, other.day, current_time.hour, current_time.minute)\n                        ).time()\n                else:\n                    if current_time >= self.end[0]:\n                        current_time = self.get_close(second=0).time()\n                    else:\n                        current_time = self._prev_opening_time(\n                            datetime(other.year, other.month, other.day, current_time.hour, current_time.minute)\n                        ).time()\n\n                remaining_time = timedelta(\n                    hours=current_time.hour,\n                    minutes=current_time.minute,\n                    seconds=current_time.second,\n                    microseconds=current_time.microsecond,\n                )\n                if remaining_time <= remaining_business_hours:\n                    remaining_business_hours -= remaining_time\n                else:\n                    return datetime(\n                        other.year, other.month, other.day,\n                        remaining_time.hour, remaining_time.minute, remaining_time.second, remaining_time.microsecond\n                    )\n\n            return other.replace(hour=0, minute=0, second=0, microsecond=0)\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}