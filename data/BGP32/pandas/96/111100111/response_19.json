{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        adjusted_time = other.replace(hour=0, minute=0, second=0, microsecond=0)\n        \n        if n >= 0:\n            if adjusted_time.time() in self.end or not self._is_on_offset(adjusted_time):\n                adjusted_time = self._next_opening_time(adjusted_time)\n        else:\n            if adjusted_time.time() in self.start:\n                adjusted_time -= timedelta(seconds=1)\n            if not self._is_on_offset(adjusted_time):\n                adjusted_time = self._next_opening_time(adjusted_time)\n                adjusted_time = self._get_closing_time(adjusted_time)\n                \n        business_hours_total = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n        \n        bd, r = divmod(abs(n * 60), business_hours_total // 60)\n        if n < 0:\n            bd, r = -bd, -r\n        \n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            if not self.next_bday.is_on_offset(adjusted_time):\n                prev_open = self._prev_opening_time(adjusted_time)\n                remain = adjusted_time - prev_open\n                adjusted_time = prev_open + skip_bd + remain\n            else:\n                adjusted_time += skip_bd\n\n        bhour_remain = timedelta(minutes=r)\n\n        if n >= 0:\n            while bhour_remain.total_seconds() != 0:\n                bhour = self._get_closing_time(self._prev_opening_time(adjusted_time)) - adjusted_time\n                if bhour_remain < bhour:\n                    adjusted_time += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    adjusted_time = self._next_opening_time(adjusted_time + bhour)\n        else:\n            while bhour_remain.total_seconds() != 0:\n                bhour = self._next_opening_time(adjusted_time) - adjusted_time\n                if bhour_remain > bhour or (bhour_remain == bhour and getattr(other, \"nanosecond\", 0) != 0):\n                    adjusted_time += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    adjusted_time = self._get_closing_time(self._next_opening_time(adjusted_time + bhour - timedelta(seconds=1)))\n        \n        return adjusted_time\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}