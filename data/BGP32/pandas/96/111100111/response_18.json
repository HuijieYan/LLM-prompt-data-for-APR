{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        nanosecond = getattr(other, \"nanosecond\", 0)\n        other = datetime(\n            year=other.year,\n            month=other.month,\n            day=other.day,\n            hour=other.hour,\n            minute=other.minute,\n            second=other.second,\n            microsecond=other.microsecond,\n        )\n        n = self.n\n\n        if n >= 0:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                other -= timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        business_hours_per_day = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        business_days, remainder = divmod(abs(n * 60), business_hours_per_day // 60)\n        if n < 0:\n            business_days, remainder = -business_days, -remainder\n\n        if business_days != 0:\n            skip_business_day = CustomBusinessDay(n=business_days)\n            if not skip_business_day.is_on_offset(other):\n                prev_opening = self._prev_opening_time(other)\n                remaining_time = other - prev_opening\n                other = prev_opening + skip_business_day + remaining_time\n            else:\n                other += skip_business_day\n\n        remaining_business_hours = timedelta(minutes=remainder)\n\n        if n >= 0:\n            while remaining_business_hours != timedelta(0):\n                business_hours_left = self._get_closing_time(self._prev_opening_time(other)) - other\n                if remaining_business_hours < business_hours_left:\n                    other += remaining_business_hours\n                    remaining_business_hours = timedelta(0)\n                else:\n                    remaining_business_hours -= business_hours_left\n                    other = self._next_opening_time(other + business_hours_left)\n        else:\n            while remaining_business_hours != timedelta(0):\n                business_hours_left = self._next_opening_time(other) - other\n                if remaining_business_hours > business_hours_left or (remaining_business_hours == business_hours_left and nanosecond != 0):\n                    other += remaining_business_hours\n                    remaining_business_hours = timedelta(0)\n                else:\n                    remaining_business_hours -= business_hours_left\n                    other = self._get_closing_time(self._next_opening_time(other + business_hours_left - timedelta(seconds=1)))\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}