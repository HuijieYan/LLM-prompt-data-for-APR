{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # retrieve holidays as numpy.datetime64 objects\n        holidays = self.holidays\n        if isinstance(other, pd.Timestamp):\n            other = other.to_pydatetime()\n\n        if holidays is None or other not in holidays:\n            if self._is_on_offset(other):\n                return other\n\n        n = self.n\n        if n < 0:\n            n += 1\n\n        # calculate the number of business hours in a day\n        business_hours_per_day = self._get_business_hours_by_sec(self.start, self.end)\n\n        abs_n_minutes = abs(n) * 60\n        business_days, remaining_minutes = divmod(abs_n_minutes, business_hours_per_day // 60)\n        \n        adjusted_timestamp = other\n\n        if n < 0:\n            remaining_minutes = -remaining_minutes\n            business_days = -business_days\n\n        if remaining_minutes != 0:\n            remaining_timedelta = timedelta(minutes=remaining_minutes)\n            while remaining_timedelta != timedelta(0):\n                if n > 0:\n                    time_interval_end = self._get_closing_time(adjusted_timestamp)\n                    time_remaining = time_interval_end - adjusted_timestamp\n                else:\n                    time_interval_start = self._next_opening_time(adjusted_timestamp, sign=-1)\n                    time_remaining = adjusted_timestamp - time_interval_start\n\n                if time_remaining >= remaining_timedelta:\n                    adjusted_timestamp += remaining_timedelta\n                    remaining_timedelta = timedelta(0)\n                else:\n                    remaining_timedelta -= time_remaining\n                    if n > 0:\n                        adjusted_timestamp = self._next_opening_time(time_interval_end)\n                    else:\n                        adjusted_timestamp = self._get_closing_time(time_interval_start - timedelta(seconds=1))\n                \n            business_days, _ = divmod(abs(n) * 60, business_hours_per_day)\n            if n < 0:\n                business_days = -business_days\n\n        if business_days != 0:\n            adjusted_timestamp += np.busdayoffset(business_days, holidays=holidays)\n\n        return adjusted_timestamp\n\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}