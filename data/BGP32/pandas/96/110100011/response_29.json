{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        if not isinstance(other, date):\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")\n        \n        n = self.n\n        \n        if not self._is_on_offset(other):\n            other = self._next_opening_time(other)\n        \n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(self.start, self.end))\n        \n        total_seconds = abs(n * 60) * 60\n        bd, r = divmod(total_seconds, businesshours)\n        if n < 0:\n            bd, r = -bd, -r\n\n        if bd != 0:\n                skip_bd = BusinessDay(n=bd)\n                if not self.next_bday.on_offset(other):\n                    prev_open = self._prev_opening_time(other)\n                    remain = other - prev_open\n                    other = prev_open + skip_bd + remain\n                else:\n                    other = other + skip_bd\n                    \n        if n >= 0:\n            while r >= 0:\n                bhour = self._get_closing_time(other) - other\n                if r < bhour.total_seconds():\n                    other += timedelta(seconds=r)\n                    break\n                other = self._next_opening_time(other)\n                r -= bhour.total_seconds()\n        else:\n            while r <= 0:\n                bhour = other - self._prev_opening_time(other)\n                if r > -bhour.total_seconds() or (r == -bhour.total_seconds() and nanosecond != 0):\n                    other += timedelta(seconds=r)\n                    break\n                other = self._get_closing_time(\n                            self._next_opening_time(\n                                other - bhour\n                            )\n                        )\n                r += bhour.total_seconds()\n        \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}