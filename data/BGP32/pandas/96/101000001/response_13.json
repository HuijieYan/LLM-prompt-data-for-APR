{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            \n            start_time = datetime.combine(other.date(), self.start[0].time())\n            end_time = datetime.combine(other.date(), self.end[-1].time())\n            \n            if n >= 0:\n                if other < start_time or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n            else:\n                if other >= end_time or not self._is_on_offset(other):\n                    other = self._next_opening_time(other)\n                    other = self._get_closing_time(other)\n            \n            # Calculate business hours in a day\n            total_business_hours = sum((en - st).total_seconds() // 60 for st, en in zip(self.start, self.end))\n            \n            num_days, remaining_minutes = divmod(abs(n * 60), total_business_hours)\n            if n < 0:\n                num_days, remaining_minutes = -num_days, -remaining_minutes\n\n            business_day_offset = BusinessDay(n=num_days)\n            other += business_day_offset\n\n            while remaining_minutes != 0:\n                if n >= 0:\n                    next_open_time = self._next_opening_time(other)\n                    closing_time = self._get_closing_time(next_open_time)\n                    business_duration = closing_time - other\n                else:\n                    next_open_time = self._next_opening_time(other)\n                    business_duration = next_open_time - other\n\n                if remaining_minutes < business_duration.total_seconds() / 60:\n                    other += timedelta(minutes=remaining_minutes)\n                    remaining_minutes = 0\n                else:\n                    other = closing_time\n                    remaining_minutes -= business_duration.total_seconds() / 60\n\n            return other\n        else:\n            raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": [
                "from pandas.tseries.offsets import BusinessDay"
            ]
        }
    ]
}