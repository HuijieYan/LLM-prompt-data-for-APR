{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # reset timezone and nanosecond\n        other = other.replace(\n            hour=other.hour,\n            minute=other.minute,\n            second=other.second,\n            microsecond=other.microsecond\n        )\n        n = self.n\n\n        # adjust other to reduce number of cases to handle\n        if n >= 0:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                other -= timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        if n >= 0:\n            shift_time = self._get_closing_time(self._prev_opening_time(other)) - other\n        else:\n            shift_time = self._next_opening_time(other) - other\n\n        bd, r = divmod(abs(n), 1)  # divmod to get business days and remaining hours\n\n        if n < 0:\n            bd = -bd\n\n        other += bd * shift_time  # adjust by business days\n\n        if r != 0:\n            if n >= 0:\n                while r > 0:\n                    next_opening = self._next_opening_time(other)\n                    time_left = (next_opening - other)\n                    if time_left >= timedelta(minutes=r):\n                        other += timedelta(minutes=r)\n                        r = 0\n                    else:\n                        r -= time_left.total_seconds() / 60\n                        other = next_opening\n            else:\n                while r < 0:\n                    time_to_prev_closing = other - self._get_closing_time(self._prev_opening_time(other))\n                    if time_to_prev_closing >= timedelta(minutes=abs(r)):\n                        other -= timedelta(minutes=abs(r))\n                        r = 0\n                    else:\n                        r += time_to_prev_closing.total_seconds() / 60\n                        other = self._prev_opening_time(other)\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}