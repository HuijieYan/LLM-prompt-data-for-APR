{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        # Initial timezone and nanosecond adjustments\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        n = self.n\n\n        # Calculate total business hours in one business day\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        bd, remaining_minutes = divmod(abs(n * 60), businesshours // 60)\n\n        if n < 0:\n            bd, remaining_minutes = -bd, -remaining_minutes\n\n        # Adjust by business days first\n        if bd != 0:\n            skip_bd = BusinessDay(n=bd)\n            if self.next_bday.is_on_offset(other):\n                other = other + skip_bd\n            else:\n                prev_open = self._prev_opening_time(other)\n                remain = other - prev_open\n                other = prev_open + skip_bd + remain\n\n        # Remaining minutes adjustment\n        if remaining_minutes != 0:\n            current_time = other\n            sign = 1 if n >= 0 else -1\n\n            while remaining_minutes != 0:\n                if sign == 1:\n                    closing_time = self._next_opening_time(current_time)\n\n                    time_diff = closing_time - current_time\n                    if remaining_minutes < time_diff.total_seconds() // 60:\n                        other += timedelta(minutes=remaining_minutes)\n                        remaining_minutes = 0\n                    else:\n                        other = closing_time\n                        remaining_minutes -= time_diff.total_seconds() // 60\n                        current_time = self._next_opening_time(closing_time)\n                else:\n                    opening_time = self._prev_opening_time(current_time)\n\n                    time_diff = current_time - opening_time\n                    if remaining_minutes <= time_diff.total_seconds() // 60:\n                        other -= timedelta(minutes=remaining_minutes)\n                        remaining_minutes = 0\n                    else:\n                        other = opening_time\n                        remaining_minutes -= time_diff.total_seconds() // 60\n                        current_time = opening_time\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}