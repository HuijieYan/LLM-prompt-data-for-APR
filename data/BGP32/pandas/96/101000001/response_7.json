{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 96,
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n\n        # Determine whether to adjust for positive or negative offset\n        if n >= 0:\n            # Adjust for positive offset\n            if other.time() in self.start and self._is_on_offset(other):\n                other = self._next_opening_time(other)\n\n            # Calculate the total business hours in a day\n            businesshours = sum(\n                self._get_business_hours_by_sec(st, en)\n                for st, en in zip(self.start, self.end)\n            )\n\n            # Calculate remaining business hours to adjust\n            bd, r = divmod(n * 60, businesshours // 60)\n\n            # Adjust by business days first\n            if bd != 0:\n                skip_bd = BusinessDay(n=bd)\n                other = self.next_bday.apply(other) if not self.next_bday.is_on_offset(other) else self.next_bday.apply(other)\n\n                other += skip_bd\n\n            # Remaining business hours adjustment\n            bhour_remain = timedelta(minutes=r) if r >= 0 else timedelta(minutes=-r)\n\n            while bhour_remain != timedelta(0):\n                bhour = self._get_closing_time(self._prev_opening_time(other)) - other\n                next_opening = self._next_opening_time(other)\n\n                if (n > 0 and bhour_remain >= bhour) or (n < 0 and bhour_remain < bhour):\n                    other = next_opening\n                    bhour_remain -= bhour\n                else:\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n\n            return other\n        else:\n            # Handle negative offsets\n            pass\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
            "import_list": []
        }
    ]
}