{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ) -> \"Tuple[List[Block], Index]\":\n\n        data: BlockManager = self._get_data_to_aggregate()\n    \n        if numeric_only:\n            data = data.get_numeric_data(copy=False)\n    \n        agg_blocks: List[Block] = []\n        new_items: List[np.array] = []\n    \n        for block in data.blocks:\n            locs = block.mgr_locs.as_array\n            try:\n                aggregate_result, _ = self.grouper.aggregate(\n                    block.values, how, axis=1, min_count=min_count\n                )\n            except NotImplementedError:\n                # if non-applicable functions try python agg\n                if alt is None:\n                    raise NotImplementedError(\"Operation not applicable\")\n                else:\n                    # call alternate function\n                    aggregate_result = alt(block.values, axis=1)\n    \n            # safely cast aggregated result back to the original dtype\n            aggregated_values = maybe_convert_objects(\n                block.make_block(aggregate_result), copy=False\n            )\n            agg_blocks.append(aggregated_values)\n            new_items.append(locs)\n    \n        if not agg_blocks:\n            raise DataError(\"No numeric types to aggregate\")\n    \n        indexer = np.concatenate(new_items)\n        agg_items = data.items.take(np.sort(indexer))\n    \n        return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}