{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ) -> Tuple[List[Block], Index]:\n\n        data: BlockManager = self._get_data_to_aggregate()\n    \n        if numeric_only:\n            data = data.convert(numeric_only)\n        \n        if data._is_single_block():\n            block = data.blocks[0]\n            values = block.values\n            new_items = [block.mgr_locs.as_array]\n            if pd.api.types.is_integer_dtype(values.dtype):\n                values = values.as_array\n                result = np.array([[np.nanmean(values)]], dtype=float)\n                agg_block = block.make_block(result)\n                agg_items = data.items\n            else:\n                result, agg_items = self.grouper.aggregate(\n                    block, how, axis=1, min_count=min_count\n                )\n                agg_block = block.make_block(result)\n        else:\n            agg_items = []\n            agg_blocks = []\n            for block in data.blocks:\n                if pd.api.types.is_integer_dtype(block.dtype):\n                    values = block.values\n                    values = values.as_array\n                    result = np.array([[np.nanmean(values)]], dtype=float)\n                    agg_block = block.make_block(result)\n                else:\n                    result, _ = self.grouper.aggregate(\n                        block.values, how, axis=1, min_count=min_count\n                    )\n                    agg_block = block.make_block(result)\n                    \n                agg_blocks.append(agg_block)\n                agg_items.append(block.mgr_locs.as_array)\n        \n        if not (agg_blocks):\n            raise DataError(\"No numeric types to aggregate\")\n            \n        return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}