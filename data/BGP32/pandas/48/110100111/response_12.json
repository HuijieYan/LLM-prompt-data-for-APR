{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n\n    for block in data.blocks:\n        locs = block.mgr_locs.as_array\n        result, _ = self.grouper.aggregate(block.values, how, min_count=min_count)\n\n        # Check for non-implemented function error\n        if result is np.nan:\n            deleted_items.append(locs)\n            continue\n\n        # Handling split blocks\n        if isinstance(result, tuple):\n            split_items.append(locs)\n            split_frames.append(result[1])\n            result = result[0]\n\n        agg_block: Block = block.make_block(result)\n        new_items.append(locs)\n        agg_blocks.append(agg_block)\n\n    if not agg_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n\n    # Handling split blocks by adjusting agg_blocks and new_items\n    for locs, result_frame in zip(split_items, split_frames):\n        for i, column in enumerate(result_frame.columns):\n            new_items.append(np.array([locs[i]], dtype=locs.dtype))\n            agg_blocks.append(result_frame[column].mgr.blocks[0])\n\n    indexer = np.concatenate(new_items)\n\n    # Adjust agg_items for deleted items\n    if deleted_items:\n        deleted = np.concatenate(deleted_items)\n        indexer = np.array([idx for idx in indexer if idx not in deleted])\n\n    for i, blk in enumerate(agg_blocks):\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = BlockPlacement(indexer[:loc])\n        indexer = indexer[loc:]\n\n    return agg_blocks, data.items.take(indexer)",
            "import_list": []
        }
    ]
}