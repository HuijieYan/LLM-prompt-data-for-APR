{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n\n    for block in data.blocks:\n        result = self.grouper.aggregate(block.values, how, axis=1, min_count=min_count)\n\n        if result is not None:\n            # performing type compatible cast\n            result = maybe_convert_objects(result, block.values)\n\n            agg_block: Block = block.make_block(result)\n\n            new_items.append(block.mgr_locs.as_array)\n            agg_blocks.append(agg_block)\n\n    if not agg_blocks:\n        raise DataError(\"No data to aggregate\")\n\n    # Updating indices and blocks\n    new_concat, dist_sizes = np.unique(np.concatenate(new_items), return_counts=True)\n    new_locs = np.cumsum(dist_sizes)\n\n    if deleted_items:\n        # Exclude removed items\n        deleted = np.concatenate(deleted_items)\n        delete_locs = np.searchsorted(new_concat, deleted)\n        new_locs = new_locs - np.searchsorted(delete_locs, new_locs)\n\n    offset = 0\n    for blk, locs in zip(agg_blocks, new_locs):\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = new_concat[offset : offset + loc]\n        offset += loc\n\n    return agg_blocks, data.items.take(new_concat)",
            "import_list": []
        }
    ]
}