{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n    \n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n    \n    agg_blocks: List[Block] = []\n    new_items: List[int] = []\n    deleted_items: List[int] = []\n    split_items: List[int] = []\n    split_frames: List[DataFrame] = []\n    \n    no_result = object()\n    for block in data.blocks:\n        result = no_result\n        locs = block.mgr_locs.as_array\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            if alt is None:\n                assert how == \"ohlc\"\n                deleted_items.extend(locs)\n                continue\n    \n            obj = self.obj[data.items[locs]]\n            s = get_groupby(obj, self.grouper)\n            try:\n                result = s.aggregate(lambda x: alt(x, axis=self.axis))\n            except TypeError:\n                deleted_items.extend(locs)\n                continue\n            else:\n                result = cast(DataFrame, result)\n                if len(result._data.blocks) != 1:\n                    split_items.extend(locs)\n                    split_frames.append(result)\n                    continue\n    \n                assert len(result._data.blocks) == 1\n                result = result._data.blocks[0].values\n                if isinstance(result, np.ndarray) and result.ndim == 1:\n                    result = result.reshape(1, -1)\n    \n        if not isinstance(result, DataFrame):\n            result = maybe_downcast_numeric(result, block.dtype)\n            agg_block: Block = block.make_block(result)\n    \n            new_items.extend(locs)\n            agg_blocks.append(agg_block)\n    \n    if not (agg_blocks or split_frames):\n        raise DataError(\"No numeric types to aggregate\")\n    \n    if split_items:\n        for i, locs in enumerate(split_items):\n            result = split_frames[i]\n            split_loc = data.items.get_indexer(result.index)\n            for j, loc in enumerate(locs):\n                idx = data.items[loc]\n                new_locs = split_loc[data.items[loc]:data.items[loc] + 1]\n                new_items.extend(new_locs)\n                agg_blocks.append(result._data.blocks[0].iloc[:, j].make_block(result.iloc[:, j].values))\n    \n    indexer = np.argsort(new_items)\n    agg_items = data.items.take(indexer)\n    \n    if deleted_items:\n        deleted = np.array(deleted_items)\n        indexer = np.delete(indexer, deleted)\n    \n    offset = 0\n    for blk in agg_blocks:\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = indexer[offset : offset + loc]\n        offset += loc\n    \n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}