{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n\n    no_result = object()\n    for _, block in data.items():\n        result = no_result\n        locs = data.get_slice_locs(block.mgr_locs)\n        try:\n            result = self.grouper.aggregate(block.values, how, axis=self.axis, min_count=min_count)\n        except NotImplementedError:\n            if alt is None:\n                deleted_items.append(block.mgr_locs)\n                continue\n\n            obj = self.obj[data.items[locs]]\n            s = obj.groupby(self.grouper)\n            result = alt(s)\n        \n        if result is not no_result:\n            result = result.reshape(1, -1)\n            agg_block = FloatBlock(result, placement=block.mgr_locs, ndim=2)\n            agg_blocks.append(agg_block)\n            new_items.append(block.mgr_locs)\n\n    if not agg_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n\n    indexer = np.concatenate(new_items)\n    agg_items = data.items.take(indexer)\n\n    # Adjust the indexer for removed items\n    for di in deleted_items:\n        indexer = np.where(indexer > di, indexer - 1, indexer)\n\n    offset = 0\n    for idx, new_loc in enumerate(indexer):\n        block = agg_blocks[idx]\n        block.set_placement(slice(offset, offset + len(block.mgr_locs)))\n        offset += len(block.mgr_locs)\n\n    return agg_blocks, Index(agg_items)",
            "import_list": [
                "from pandas.core.indexes.base import Index",
                "from pandas.core.internals.blocks.extension import ExtensionBlock",
                "from pandas.core.internals.blocks.numeric import FloatBlock",
                "from pandas.core.internals.managers import BlockManager",
                "import numpy as np"
            ]
        }
    ]
}