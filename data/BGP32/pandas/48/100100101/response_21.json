{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> Tuple[List[Block], Index]:\n    data: DataFrame = self._get_data_to_aggregate()\n    \n    if numeric_only:\n        data = data.select_dtypes(include=np.number)\n\n    agg_blocks: List[Block] = []\n    new_items: List[int] = []\n\n    for block in data._data.blocks:\n        if is_numeric_dtype(block.dtype):\n            values = block.values\n            result = np.asarray([values.mean() if how == 'mean' else values.median() if how == 'median' else values.var(axis=1, ddof=0)])\n\n            if min_count > 0 and len(values) < min_count:\n                continue\n\n            agg_block = block.make_block(result)\n            agg_blocks.append(agg_block)\n            new_items.append(block.mgr_locs)\n\n    if not agg_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n\n    if len(agg_blocks) != 1:\n        raise DataError(\"Unexpected multi-block output during aggregation\")\n\n    if alt is not None:\n        # Handle alternate aggregation methods\n        pass\n\n    agg_items = data.items.take(new_items)\n    \n    return agg_blocks, agg_items",
            "import_list": [
                "from typing import List, Tuple",
                "import numpy as np",
                "from pandas import DataFrame, Index",
                "from pandas.core.internals.blocks import Block",
                "from pandas.core.dtypes.common import is_numeric_dtype"
            ]
        }
    ]
}