{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _aggregate_block(self, block, how, alt, min_count):\n    locs = block.mgr_locs.as_array\n    values = block.values\n\n    try:\n        result, _ = self.grouper.aggregate(values, how, axis=1, min_count=min_count)\n    except NotImplementedError:\n        if alt is None:\n            return None\n\n        obj = self.obj.iloc[locs]\n        s = get_groupby(obj, self.grouper)\n        try:\n            result = s.aggregate(lambda x: alt(x, axis=self.axis))\n        except TypeError:\n            return None\n\n        result = cast(DataFrame, result)\n        if len(result._data.blocks) != 1:\n            raise ValueError(\"Multiple blocks encountered after aggregation\")\n\n        result_block = result._data.blocks[0]\n        result_values = result_block.values\n        if isinstance(result_values, np.ndarray) and result_values.ndim == 1:\n            result_values = result_values.reshape(1, -1)\n\n        result = result_values\n\n    if not isinstance(result, np.ndarray):\n        raise ValueError(\"Aggregated result must be an ndarray\")\n\n    return result",
            "import_list": []
        }
    ]
}