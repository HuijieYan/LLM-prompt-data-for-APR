{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n   \n\tdata: BlockManager = self._get_data_to_aggregate()\n\n\tif numeric_only:\n\t    data = data.get_numeric_data(copy=False)\n\n\tagg_blocks: List[Block] = []\n\tnew_items: List[np.ndarray] = []\n\tdeleted_items: List[np.ndarray] = []\n\tsplit_items: List[np.ndarray] = []\n\tsplit_frames: List[DataFrame] = []\n\n\tno_result = object()\n\tfor block in data.blocks:\n\t    result = block.mgr_locs.as_array.copy()\n\t    try:\n\t        result, _ = self.grouper.aggregate(\n\t            block.values, how, axis=1, min_count=min_count\n\t        )\n\t        result_single = result[1] if isinstance(result, tuple) else result\n\t        \n\t        # Adjust dtype after aggregation based on the output type\n\t        result_single = maybe_convert_objects(result_single, block.dtype)\n\t        \n\t        agg_block: Block = make_block(result_single, block.items, axis=0)\n\t        \n\t    except (NotImplementedError, TypeError):\n\t    \t# Handle the exceptions for specific operations\n\t        if alt is None:\n\t            deleted_items.append(result)\n\t        else: \n\t            deleted_items.append(result)\n\t    else:\n\t        agg_blocks.append(agg_block)\n\n\tif not agg_blocks:\n\t    raise DataError(\"No numeric types to aggregate\")\n\n\tindexer = np.concatenate(new_items)\n\tagg_items = data.items.take(np.sort(indexer))\n\n\t# No need for adjustments for deleted items\n\n\treturn agg_blocks, agg_items",
            "import_list": []
        }
    ]
}