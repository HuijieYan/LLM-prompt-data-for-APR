{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    # Some object-dtype blocks might be split into List[Block[T], Block[U]]\n    split_items: List[np.ndarray] = []\n    split_frames: List[DataFrame] = []\n    \n    no_result = object()\n    for block in data.blocks:\n        # Avoid inheriting result from earlier in the loop\n        result = no_result\n        locs = block.mgr_locs.as_array\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            # Handle cases where the specified aggregation operation is not supported\n            if alt is None:\n                assert how == \"ohlc\"\n                deleted_items.append(locs)\n                continue\n            else:\n                # Perform aggregation using an alternate function\n                obj = self.obj[data.items[locs]]\n                if obj.shape[1] == 1:\n                    obj = obj.iloc[:, 0]\n\n                s = get_groupby(obj, self.grouper)\n                result = s.agg(alt)\n        \n        if result is not no_result:\n            result = maybe_convert_objects(result)\n            result = maybe_downcast_to_dtype(result, block.dtype)\n            agg_block: Block = make_block(result, placement=locs)\n            agg_blocks.append(agg_block)\n            new_items.append(locs)\n\n    if not agg_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n    \n    for locs, result in zip(split_items, split_frames):\n        for i in range(result.shape[1]):\n            new_locs = np.array([loc[i] for loc in locs])\n            new_items.append(new_locs)\n            block = make_block(result.iloc[:, i], locs=new_locs, klass=block.__class__)\n            agg_blocks.append(block)\n    \n    new_locs = np.concatenate(new_items)\n    new_items = data.items.take(new_locs)\n    \n    for i, block in enumerate(agg_blocks):\n        block.mgr_locs = new_locs[block.mgr_locs]\n    \n    return agg_blocks, new_items",
            "import_list": []
        }
    ]
}