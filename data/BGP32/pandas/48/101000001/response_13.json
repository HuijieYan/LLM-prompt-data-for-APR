{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    if alt is None:\n        alt = lambda x, axis: x\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    agg_items: List[int] = []\n    track_deleted: Dict[int, np.ndarray] = {}\n\n    for block in data.blocks:\n        result = no_result = object()\n        locs = block.mgr_locs\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            result = no_result\n        if result is not no_result:\n            result = maybe_downcast_numeric(result, block.dtype)\n            if block.is_extension and isinstance(result, np.ndarray):\n                result = type(block.extension)(result, dtype=block.dtype)\n            agg_block = block.make_block(result)\n            new_items.append(agg_block.mgr_locs.as_array)\n            agg_blocks.append(agg_block)\n            agg_items.extend([i for i in agg_block.mgr_locs.as_array])\n        else:\n            track_deleted.update({i: locs.as_array for i in locs.as_array})\n\n    if not agg_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n\n    if track_deleted:\n        deleted_locs = np.concatenate(list(track_deleted.values()))\n        indexer = np.concatenate(new_items)\n        agg_items = np.array(agg_items)\n        \n        indexer = np.setdiff1d(indexer, deleted_locs)\n\n        offset = 0\n        for blk in agg_blocks:\n            loc = len(blk.mgr_locs)\n            blk.mgr_locs = indexer[offset:offset + loc]\n            offset += loc\n\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}