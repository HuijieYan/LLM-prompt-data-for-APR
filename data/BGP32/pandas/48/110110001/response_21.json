{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 48,
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    # Get the data to aggregate\n    data: BlockManager = self._get_data_to_aggregate()\n\n    # Filter out non-numeric columns if required\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n\n    for block in data.blocks:\n        locs = block.mgr_locs.as_array\n        result, _ = self.grouper.aggregate(block.values, how, axis=1, min_count=min_count)\n        \n        # Ensure the result is not a dataframe\n        result = maybe_convert_objects(result)\n        result = maybe_downcast_to_dtype(result, dtype=result.dtype)\n\n        # Check if block is extension and not a DataFrame\n        if block.is_extension and not isinstance(result, DataFrame):\n            # Convert the result back to original dtype\n            result = maybe_downcast_numeric(result, dtype=block.dtype)\n            \n            # Create a new Block with the aggregated values\n            agg_block: Block = make_block(result, locs, columns=block.items)\n\n            agg_blocks.append(agg_block)\n\n    if not agg_blocks:\n        raise DataError(\"No numeric types to aggregate\")\n    \n    agg_items = data.items\n\n    return agg_blocks, agg_items",
            "import_list": []
        }
    ]
}