{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 34,
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    first, last = _get_timestamp_range_edges(\n        ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base\n    )\n\n    # Ensure that first and last preserve nanoseconds\n    first = first.tz_localize(None)\n    last = last.tz_localize(None)\n\n    if self.closed == 'left':\n        binner_freq = f'{self.freq.n}D'\n        if self.freq.nanos:\n            binner_freq += f'{self.freq.nanos}N'\n        if first == first.round(binner_freq):\n            first += pd.Timedelta(1, 'ns')\n    else:\n        last += pd.Timedelta(1, 'ns')\n\n    binner = labels = date_range(\n        start=first, end=last, freq=self.freq, tz=ax.tz, name=ax.name,\n        closed=self.closed, ambiguous='infer', nonexistent='shift_forward'\n    )\n\n    ax_values = ax.asi8\n    binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n\n    # general version, knowing nothing about relative frequencies\n    bins = lib.generate_bins_dt64(\n        ax_values, bin_edges, self.closed, hasnans=ax.hasnans\n    )\n\n    if self.closed == \"right\":\n        labels = binner\n        if self.label == 'right':\n            labels = labels[1:]\n    elif self.label == 'right':\n        labels = labels[1:]\n\n    if ax.hasnans:\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n\n    # if we end up with more labels than bins\n    # adjust the labels\n    # GH4076\n    if len(bins) < len(labels):\n        labels = labels[:len(bins)]\n\n    return binner, bins, labels",
            "import_list": []
        }
    ]
}