{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 34,
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    ax_values = ax.asi8\n\n    first, last = ax.min(), ax.max()\n    \n    bin_edges = date_range(start=first, end=last, freq=to_offset(self.freq), closed=self.closed).shift(1)\n\n    bins = generate_bins(ax_values, bin_edges.asi8, self.closed, has_nans=ax.hasnans)\n\n    binner = IntervalIndex([Interval(left=left, right=right) for left, right in zip(bin_edges, bin_edges[1:])])\n    labels = IntervalIndex([Interval(left=left, right=right) for left, right in zip(binner.left, binner.right[1:])])\n\n    if self.label != \"right\":\n        labels = labels.set_categories(labels.categories[1:], ordered=True)\n\n    if ax.hasnans:\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n\n    if len(bins) < len(labels):\n        labels = labels[:len(bins)]\n\n    return binner, bins, labels",
            "import_list": [
                "from pandas.tseries.frequencies import to_offset",
                "from pandas.tseries.offsets import DateOffset",
                "from pandas.core.arrays.datetimes import generate_bins",
                "from pandas.core.indexes.interval import Interval, IntervalIndex"
            ]
        }
    ]
}