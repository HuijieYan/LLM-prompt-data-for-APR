{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 0,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 169,
            "start_line": 8143,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation=\"linear\"):\n    \"\"\"\n    Return values at the given quantile over the requested axis.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value between 0 <= q <= 1, the quantile(s) to compute.\n    axis : {0, 1, 'index', 'columns'} (default 0)\n        Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n    numeric_only : bool, default True\n        If False, the quantile of datetime and timedelta data will be computed as well.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        This optional parameter specifies the interpolation method to use:\n            - linear: `i + (j - i) * fraction`, where `fraction` is the fractional part of the index surrounded by `i` and` j`.\n            - lower: `i`.\n            - higher: `j`.\n            - nearest: `i` or `j` whichever is nearest.\n            - midpoint: (`i` + `j`) / 2.\n\n    Returns\n    -------\n    Series or DataFrame\n        If `q` is an array, a DataFrame will be returned where the index is `q`, the columns are the columns of self,\n        and the values are the quantiles.\n        If `q` is a float, a Series will be returned where the index is the columns of self and the values are the quantiles.\n    \"\"\"\n    self._check_percentile(q)\n\n    data = self._get_numeric_data() if numeric_only else self\n    is_transposed = axis == 1\n\n    if is_transposed:\n        data = data.T\n\n    result = data.quantile(q=q, axis=1 if is_transposed else 0, interpolation=interpolation)\n\n    if isinstance(q, list) or isinstance(q, pd.Index):\n        return result  # Return DataFrame for list of quantiles\n    if result.ndim == 2:\n        return result.iloc[0]  # Return Series if quantile is a float\n    return result",
            "import_list": []
        }
    ]
}