{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 0,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 169,
            "start_line": 8143,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation=\"linear\"):\n    \"\"\"\n    Return values at the given quantile over requested axis.\n\n    Parameters\n    ----------\n    q : float, array-like, or Series, default 0.5\n        Value between 0 <= q <= 1, the quantile(s) to compute.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis along which to perform the quantile calculation.\n    numeric_only : bool, default True\n        If False, the quantile of datetime and timedelta data will be computed as well.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}, default 'linear'\n        Specifies the interpolation method to use when calculating quantiles.\n\n    Returns\n    -------\n    Series, DataFrame or ndarray\n        If q is a single value, returns a Series. If q is an array or Series, returns a DataFrame.\n\n    See Also\n    --------\n    pandas.Series.quantile\n    numpy.percentile\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': pd.date_range('1/1/18', periods=3)})\n    >>> df\n       A          B\n    0  1 2018-01-01\n    1  2 2018-01-02\n    2  3 2018-01-03\n    >>> df.quantile(0.5)\n    A    2\n    B    2018-01-02\n    Name: 0.5, dtype: object\n    >>> df.quantile([0.25, 0.75])\n         A          B\n    0.25  1 2018-01-01\n    0.75  3 2018-01-03\n    \"\"\"\n\n    self._check_percentile(q)\n\n    data = self._get_numeric_data() if numeric_only else self\n    axis = self._get_axis_number(axis)\n    is_transposed = axis == 1\n\n    if is_transposed:\n        data = data.T\n\n    result = data._data.quantile(q, axis=1, interpolation=interpolation)\n    result = self._constructor(result)\n\n    if is_transposed:\n        result = result.T\n\n    return result",
            "import_list": []
        }
    ]
}