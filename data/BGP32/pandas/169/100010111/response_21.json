{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 0,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 169,
            "start_line": 8143,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation=\"linear\"):\n    self._check_percentile(q)\n\n    data = self._get_numeric_data() if numeric_only else self\n    axis = self._get_axis_number(axis)\n    is_transposed = axis == 1\n\n    if is_transposed:\n        data = data.T\n\n    if data.empty:  # Add this condition to handle empty DataFrames\n        if isinstance(q, (list, tuple)):\n            result = self._constructor_sliced(\n                np.full(len(q), np.nan),\n                index=q,\n                name=data.columns[0] if not is_transposed else None\n            )\n        else:\n            result = self._constructor_sliced(\n                np.nan,\n                index=data.columns,\n                name=q\n            )\n    else:\n        result = data._data.quantile(\n            qs=q, axis=1, interpolation=interpolation, transposed=is_transposed\n        )\n\n    if isinstance(result, DataFrame) and result.shape[1] == 1:\n        result = Series(result.iloc[:, 0], name=q)\n    elif isinstance(result, DataFrame):\n        result = DataFrame(result, index=pd.Index(q))\n\n    if is_transposed:\n        result = result.T\n\n    return result",
            "import_list": []
        }
    ]
}