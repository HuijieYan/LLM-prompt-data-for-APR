{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 0,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 169,
            "start_line": 8143,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation=\"linear\"):\n    \"\"\"\n    Return values at the given quantile over the requested axis.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n    Value between 0 <= q <= 1, the quantile(s) to compute.\n    axis : {0, 1, 'columns', 'index'} (default 0)\n    Equals 0 or 'columns' for column-wise, 1 or 'index' for row-wise.\n    numeric_only : bool, default True\n    If False, the quantile of non-numeric data will also be computed.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n    The interpolation method to use when the quantile lies between two data points.\n\n    Returns\n    -------\n    Series or DataFrame\n    If ``q`` is an array, a DataFrame will be returned where the\n    index is ``q``, the columns are the columns of self, and the\n    values are the quantiles.\n    If ``q`` is a float, a Series will be returned where the\n    index is the columns of self and the values are the quantiles.\n    \"\"\"\n    self._check_percentile(q)\n\n    if not numeric_only:\n        data = self\n    else:\n        data = self._get_numeric_data()\n    \n    axis = self._get_axis_number(axis)\n    is_transposed = axis == 1\n\n    if is_transposed:\n        data = data.T\n\n    if isinstance(data.iloc[0, 0], pd.Timestamp):\n        result = pd.concat([data.quantile(q=qi, axis=1 if is_transposed else 0, interpolation=interpolation).transpose() for qi in q], axis=1)\n    else:\n        result = data._data.quantile(\n            qs=q, axis=1 if is_transposed else 0,\n            interpolation=interpolation, transposed=is_transposed\n        )\n\n    if result.ndim == 2:\n        result = self._constructor(result)\n    else:\n        result = self._constructor_sliced(result, name=q)\n\n    if is_transposed:\n        result = result.T\n\n    return result",
            "import_list": []
        }
    ]
}