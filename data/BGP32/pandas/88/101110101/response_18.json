{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 88,
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    # Convert index and columns to a list if they are not None\n    index = _convert_by(index) if index is not None else []\n    columns = _convert_by(columns) if columns is not None else []\n\n    # If aggfunc is a list, process each function separately\n    if isinstance(aggfunc, list):\n        pieces: List[DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            table = pivot_table(\n                data=data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return concat(pieces, keys=keys, axis=1)\n\n    keys = index + columns\n\n    # Check if values are provided\n    values_passed = values is not None\n    if values_passed:\n        if is_list_like(values):\n            values_multi = True\n            values = list(values)\n        else:\n            values_multi = False\n            values = [values]\n\n        # Check if value labels are in data\n        for i in values:\n            if i not in data:\n                raise KeyError(i)\n\n        # Filter data to include only keys and values that are present in data\n        to_filter = []\n        for x in keys + values:\n            if isinstance(x, Grouper):\n                x = x.key\n            try:\n                if x in data:\n                    to_filter.append(x)\n            except TypeError:\n                pass\n\n        if len(to_filter) < len(data.columns):\n            data = data[to_filter]\n    else:\n        values = data.columns\n        # Drop key if it doesn't exist in values\n        for key in keys:\n            try:\n                values = values.drop(key)\n            except (TypeError, ValueError, KeyError):\n                pass\n        values = list(values)\n\n    grouped = data.groupby(keys, observed=observed)\n    # Aggregate the grouped data\n    agged = grouped.agg(aggfunc)\n\n    # If dropna is True, drop rows where all values are NaN\n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n\n        # Downcast to float if the original values are ints\n        for v in values:\n            if (\n                v in data\n                and is_integer_dtype(data[v])\n                and v in agged\n                and not is_integer_dtype(agged[v])\n            ):\n                agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n\n    table = agged\n\n    # Unstack the index levels if index has more than one level\n    if table.index.nlevels > 1:\n        table = table.unstack(level=range(len(index), len(keys)))\n\n    # Reindex to fill empty columns or rows if dropna is False\n    if not dropna:\n        m = MultiIndex.from_tuples(cartesian_product(table.index.levels), names=table.index.names)\n        table = table.reindex(m, axis=0)\n\n        m = MultiIndex.from_tuples(cartesian_product(table.columns.levels), names=table.columns.names)\n        table = table.reindex(m, axis=1)\n\n    # Sort columns if type is DataFrame\n    if isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n\n    # Fill NaN values if fill_value is provided\n    if fill_value is not None:\n        table = table.fillna(fill_value)\n\n    # Add margins if requested\n    if margins:\n        if dropna:\n            data = data.dropna()\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n\n    # Discard top level if values are not multi\n    if values_passed and not values_multi and not table.empty and (table.columns.nlevels > 1):\n        table = table[values[0]]\n\n    # Transpose table if index is empty and columns have values\n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    # Drop empty columns if dropna is True\n    if isinstance(table, ABCDataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table",
            "import_list": []
        }
    ]
}