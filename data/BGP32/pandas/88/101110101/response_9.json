{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 88,
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False) -> 'DataFrame':\n    if isinstance(aggfunc, list):\n        pieces = []\n        keys = columns + index\n\n        for func in aggfunc:\n            grouped = data.groupby(keys, observed=observed)\n            agged = grouped.agg(func)\n            \n            if dropna and agged.columns.nlevels > 1:\n                agged = agged.dropna(how=\"all\")\n            \n            pieces.append(agged)\n        \n        table = pd.concat(pieces, axis=1, keys=[getattr(func, '__name__', func) for func in aggfunc])\n        \n    else:\n        index = _convert_by(index)\n        columns = _convert_by(columns)\n        \n        keys = index + columns\n\n        values_passed = values is not None\n        if values_passed:\n            values = [values] if not is_list_like(values) else list(values)\n\n            missing_values = [v for v in values if v not in data]\n            if missing_values:\n                raise KeyError(missing_values)\n        else:\n            values = list(data.columns)\n\n        to_filter = [x.key if isinstance(x, Grouper) else x for x in keys + values if hasattr(x, 'key')]\n        data = data[to_filter] if len(to_filter) < len(data.columns) else data\n\n        grouped = data.groupby(keys, observed=observed)\n        table = grouped.agg(aggfunc)\n\n        if dropna and isinstance(table, ABCDataFrame) and table.columns.size > 0:\n            table = table.dropna(how='all')\n            \n    if fill_value is not None:\n        table.fillna(fill_value, inplace=True)\n        \n    if margins:\n        table = _add_margins(table, data, values, rows=index, cols=columns, aggfunc=aggfunc, observed=observed, margins_name=margins_name, fill_value=fill_value)\n\n    if values_passed and not values_multi and not table.empty and table.columns.nlevels > 1:\n        table = table.xs(values[0], axis=1, drop_level=True)\n        \n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    return table",
            "import_list": [
                "from pandas import DataFrame"
            ]
        }
    ]
}