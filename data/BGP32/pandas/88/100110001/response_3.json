{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 88,
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(data, values=None, index=None, columns=None, aggfunc=\"mean\", fill_value=None, margins=False, dropna=True, margins_name=\"All\", observed=False) -> DataFrame:\n    table = DataFrame()\n    \n    index = _convert_by(index)\n    columns = _convert_by(columns)\n    \n    keys = index + columns\n    \n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    \n    if dropna and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n        \n        for v in values:\n            if v in data and is_integer_dtype(data[v]) and v in agged and not is_integer_dtype(agged[v]):\n                agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n    \n    table = agged\n    \n    if table.index.nlevels > 1:\n        index_names = agged.index.names[:len(index)]\n        to_unstack = []\n        \n        for i in range(len(index), len(keys)):\n            name = agged.index.names[i]\n            \n            if name is None or name in index_names:\n                to_unstack.append(i)\n            else:\n                to_unstack.append(name)\n        \n        table = agged.unstack(to_unstack)\n    \n    if not dropna:\n        if table.index.nlevels > 1:\n            m = MultiIndex.from_arrays(cartesian_product(table.index.levels), names=table.index.names)\n            table = table.reindex(m, axis=0)\n\n        if table.columns.nlevels > 1:\n            m = MultiIndex.from_arrays(cartesian_product(table.columns.levels), names=table.columns.names)\n            table = table.reindex(m, axis=1)\n\n    if isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table._ensure_type(table.fillna(fill_value, downcast=\"infer\"))\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        \n        table = _add_margins(table, data, values, rows=index, cols=columns, aggfunc=aggfunc, observed=dropna, margins_name=margins_name, fill_value=fill_value)\n    \n    if table.empty:\n        raise ValueError(\"No data to pivot\")\n    \n    return table",
            "import_list": [
                "from pandas import DataFrame",
                "from pandas.core.frame import DataFrame",
                "from pandas.core.reshape.util import cartesian_product"
            ]
        }
    ]
}