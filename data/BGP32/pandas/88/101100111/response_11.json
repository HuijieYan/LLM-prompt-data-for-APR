{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 88,
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces: List[DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            table = pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return concat(pieces, keys=keys, axis=1)\n\n    keys = index + columns\n\n    # Ensuring values is a list for consistent handling\n    values = [values] if is_scalar(values) else values\n\n    if values is None:\n        values = list(data.columns)\n    else:\n        values = [values] if is_scalar(values) else list(values)\n\n    if isinstance(data, ABCDataFrame):\n        # Make sure value labels are in data\n        for i in values:\n            if i not in data:\n                raise KeyError(i)\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    \n    # Additional checks for consistency with non-multi-index columns\n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n        \n        for v in values:\n            if (\n                v in data\n                and is_integer_dtype(data[v])\n                and v in agged\n                and not is_integer_dtype(agged[v])\n            ):\n                agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n\n    if not dropna:\n        m = MultiIndex.from_arrays(\n            cartesian_product([\n                agged.index.levels[i] if isinstance(i, int) else agged.index.get_level_values(i)\n                for i in range(len(keys))\n            ]),\n            names=get_objs_combined_axis([getattr(k, 'name', k) for k in keys])\n        )\n        table = agged.reindex(m, axis=0)\n\n        m = MultiIndex.from_arrays(\n            cartesian_product([\n                agged.columns.levels[i] if isinstance(i, int) else agged.columns.get_level_values(i)\n                for i in range(agged.columns.nlevels)\n            ]),\n            names=get_objs_combined_axis(agged.columns.names)\n        )\n        table = table.reindex(m, axis=1)\n\n    if isinstance(table, ABCDataFrame):\n        # Ensuring final sort\n        table = table.sort_index(axis=1)\n\n    # Filling values if necessary\n    if fill_value is not None:\n        table = table._ensure_type(table.fillna(fill_value, downcast=\"infer\"))\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n\n    return table",
            "import_list": []
        }
    ]
}