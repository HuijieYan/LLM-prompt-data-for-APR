{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 88,
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces: List[DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            table = pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return concat(pieces, keys=keys, axis=1)\n\n    # Modify the section for handling the values input parameter\n    keys = index + columns\n    values_passed = values is not None\n    if values_passed:\n        if is_list_like(values):\n            values_multi = True\n            values = list(values)\n        else:\n            values_multi = False\n            values = [values]\n\n        if not set(values).issubset(data.columns):\n            missing_values = set(values) - set(data.columns)\n            raise KeyError(f\"Columns {missing_values} not in input data\")\n\n        to_filter = list(set(keys + values) & set(data.columns))\n        if len(to_filter) < len(data.columns):\n            data = data[to_filter]\n    else:\n        values = data.columns.difference(set(keys))\n        values = list(values)\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n\n    if dropna and isinstance(agged, ABCDataFrame):\n        agged = agged.dropna(how=\"all\")\n\n    if isinstance(data, ABCDataFrame) and fill_value is not None:\n        agged = agged.fillna(fill_value)\n\n    table = agged\n\n    if table.index.nlevels > 1:\n        names = [x.name for x in agged.index[: len(keys)]]\n        to_unstack = [idx for idx in range(len(keys), len(agged.index.names))]\n\n        table = agged.unstack(to_unstack)\n\n    if not dropna:\n        if table.index.nlevels > 1:\n            index_levels = list(cartesian_product([lvl_values for lvl_values in table.index.levels]))\n            index_names = table.index.names\n            table = table.reindex(index=MultiIndex.from_tuples(index_levels, names=index_names))\n\n        if table.columns.nlevels > 1:\n            col_levels = list(cartesian_product([lvl_values for lvl_values in table.columns.levels]))\n            col_names = table.columns.names\n            table = table.reindex(columns=MultiIndex.from_tuples(col_levels, names=col_names))\n\n    if isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n\n    if margins:\n        subset = data.dropna(how=\"all\", axis=0).dropna(how=\"all\", axis=1)\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n\n    if values_passed and not values_multi and not table.empty and (table.columns.nlevels > 1):\n        table = table[values[0]]\n\n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    if isinstance(table, ABCDataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table",
            "import_list": [
                "from typing import TYPE_CHECKING, Callable, Dict, List, Tuple, Union",
                "from pandas.util._decorators import Appender, Substitution",
                "from pandas.core.dtypes.cast import maybe_downcast_to_dtype",
                "from pandas.core.dtypes.common import is_integer_dtype, is_list_like, is_scalar",
                "from pandas.core.dtypes.generic import ABCDataFrame, ABCSeries",
                "from pandas.core.frame import _shared_docs",
                "from pandas.core.groupby import Grouper",
                "from pandas import DataFrame",
                "from pandas.core.reshape.concat import concat",
                "from pandas.core.reshape.util import cartesian_product",
                "from pandas import DataFrame"
            ]
        }
    ]
}