{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 88,
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(data, values=None, index=None, columns=None, aggfunc='mean',\n                fill_value=None, margins=False, dropna=True, margins_name='All',\n                observed=False):\n\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        raise ValueError(\"List input for aggfunc is not supported for multi-index columns\")\n    \n    keys = index + columns\n\n    values_passed = values is not None\n    if values_passed:\n        values = [values] if not is_list_like(values) else list(values)\n        \n        for i in values:\n            if i not in data:\n                raise KeyError(i)\n\n        to_filter = [x for x in keys + values if isinstance(x, Grouper) or x in data]\n        data = data[to_filter]\n\n    else:\n        values = list(data.columns)\n        values = [v for v in values if v not in keys]\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n\n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n        agged = agged.dropna(how='all')\n\n        for v in values:\n            if data[v].dtype == 'int' and v in agged.columns and agged[v].dtype != 'int':\n                agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n\n    if agged.index.nlevels > 1:\n        table = agged.unstack(keys[1])\n\n    if not dropna:\n        if table.index.nlevels > 1:\n            new_index = pd.MultiIndex.from_product(table.index.levels)\n            table = table.reindex(new_index)\n\n        if table.columns.nlevels > 1:\n            new_columns = pd.MultiIndex.from_product(table.columns.levels)\n            table = table.reindex(columns=new_columns)\n\n    table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table.fillna(fill_value, downcast='infer')\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        table = _add_margins(table, data, values, rows=index, cols=columns, aggfunc=aggfunc,\n                             observed=dropna, margins_name=margins_name, fill_value=fill_value)\n\n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    if isinstance(table, ABCDataFrame) and dropna:\n        table = table.dropna(how='all', axis=1)\n\n    return table",
            "import_list": [
                "from pandas.core.dtypes.cast import maybe_downcast_to_dtype",
                "from pandas.core.dtypes.common import is_integer_dtype, is_list_like",
                "from pandas.core.frame import _shared_docs",
                "from pandas.core.groupby import Grouper",
                "from pandas.core.reshape.concat import concat",
                "from pandas.core.reshape.util import cartesian_product"
            ]
        }
    ]
}