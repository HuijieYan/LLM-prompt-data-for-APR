{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 88,
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> DataFrame:\n    # Convert the index and columns to lists\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    # Handling the case when aggfunc is a list\n    if isinstance(aggfunc, list):\n        pieces = []\n        keys = []\n        for func in aggfunc:\n            table = aggfunc(data, values, index, columns, func, fill_value, dropna, observed)\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return concat(pieces, keys=keys, axis=1)\n\n    keys = index + columns\n\n    # Perform aggregations and create the final table\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n\n    # Drop NaN values if needed\n    if dropna:\n        agged = agged.dropna(how=\"all\")\n\n    # Handle integer downcasting as needed\n    for v in values:\n        if v in data and is_integer_dtype(data[v]) and v in agged and not is_integer_dtype(agged[v]):\n            agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n\n    table = agged\n\n    if table.index.nlevels > 1:\n        table = table.unstack()\n    \n    if not dropna:\n        if table.index.nlevels > 1:\n            m = MultiIndex.from_arrays(cartesian_product(table.index.levels), names=table.index.names)\n            table = table.reindex(m, axis=0)\n\n        if table.columns.nlevels > 1:\n            m = MultiIndex.from_arrays(cartesian_product(table.columns.levels), names=table.columns.names)\n            table = table.reindex(m, axis=1)\n\n    if isinstance(table, DataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table.fillna(fill_value)\n\n    if margins:\n        table = _add_margins(table, data, values, rows=index, cols=columns, aggfunc=aggfunc, observed=observed, margins_name=margins_name, fill_value=fill_value)\n\n    if values is not None and not is_list_like(values) and (not table.empty) and (table.columns.nlevels > 1):\n        table = table[values]\n\n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    if isinstance(table, DataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table",
            "import_list": [
                "from pandas.core.frame import DataFrame",
                "from pandas._libs.missing import isna"
            ]
        }
    ]
}