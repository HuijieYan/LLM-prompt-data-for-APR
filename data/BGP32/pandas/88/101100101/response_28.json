{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 88,
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        return _agg_table(data, values, index, columns, aggfunc, fill_value, margins, dropna, margins_name, observed)\n\n    keys = index + columns\n\n    values_passed = values is not None\n    if values_passed:\n        if is_list_like(values):\n            values_multi = True\n            values = list(values)\n        else:\n            values_multi = False\n            values = [values]\n\n        # Ensure value labels are in data\n        for i in values:\n            if i not in data:\n                raise KeyError(i)\n\n        # Filter to required columns\n        to_filter = [x for x in keys + values if x in data]\n        data = data[to_filter]\n\n    else:\n        values = [col for col in data.columns if col not in keys]\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    \n    # Modify columns based on dropna option\n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n    \n    table = agged\n    \n    # Unstack if necessary\n    if table.index.nlevels > 1:\n        to_unstack = [idx for idx, name in enumerate(table.index.names) if name is None or name in agged.index.names[:len(index)]]\n        table = table.unstack(to_unstack)\n    \n    # Check dropna option and reindex\n    if not dropna:\n        table = table.reindex(cartesian_product(table.index.levels), axis=0)\n        table = table.reindex(cartesian_product(table.columns.levels), axis=1)\n    \n    if isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n    \n    if fill_value is not None:\n        table = table.fillna(fill_value)\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n\n    # Discard the top level\n    if values_passed and not values_multi and not table.empty and table.columns.nlevels > 1:\n        table = table[values[0]]\n\n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    return table",
            "import_list": []
        }
    ]
}