{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 88,
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data: DataFrame,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False\n) -> DataFrame:\n    if isinstance(aggfunc, list):\n        pieces: List[DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            table = pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n        \n        return DataFrame(data=pieces, columns=keys)\n    \n    keys = index + columns\n\n    values_passed = values is not None\n    if values_passed:\n        if not isinstance(values, list):\n            values = [values]\n\n        # Make sure value labels are in data\n        for i in values:\n            if i not in data:\n                raise KeyError(i)\n\n        to_filter = [x for x in keys + values if x in data]\n        data = data[to_filter]\n\n    else:\n        values = data.columns\n        for key in keys:\n            try:\n                values = values.drop(key)\n            except (TypeError, ValueError, KeyError):\n                pass\n        values = list(values)\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    \n    if dropna and isinstance(agged, DataFrame) and not agged.empty:\n        agged = agged.dropna(how=\"all\")\n        \n        for v in values:\n            if v in data and data[v].dtype.kind == 'i' and v in agged and agged[v].dtype.kind != 'i':\n                agged[v] = agged[v].astype(data[v].dtype)\n\n    table = agged\n    \n    if table.index.nlevels > 1:\n        index_names = agged.index.names[:len(index)]\n        cols_to_unstack = [col for i, col in enumerate(keys) if agged.index.names[i] not in index_names]\n        table = table.unstack(cols_to_unstack)\n\n    if not dropna:\n        if table.index.nlevels > 1:\n            mi = MultiIndex.from_product([lvl for lvl in table.index.levels], names=table.index.names)\n            table = table.reindex(mi, axis=0)\n\n        if table.columns.nlevels > 1:\n            mi = MultiIndex.from_product([lvl for lvl in table.columns.levels], names=table.columns.names)\n            table = table.reindex(mi, axis=1)\n\n    table.sort_index(axis=1, inplace=True)\n\n    if fill_value is not None:\n        table.fillna(fill_value, inplace=True)\n\n    if margins:\n        data_filtered = data.dropna(axis=0, how='any')\n        table = _add_margins(\n            table,\n            data_filtered,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=observed,\n            margins_name=margins_name,\n            fill_value=fill_value\n        )\n\n    if values_passed and len(values) == 1 and table.columns.nlevels > 1:\n        table = table[values[0]]\n\n    if not index and columns and len(columns) > 1:\n        table = table.T\n\n    if dropna and isinstance(table, DataFrame):\n        table = table.dropna(how='all', axis=1)\n\n    return table",
            "import_list": [
                "from typing import List, Tuple, Union",
                "from pandas.core.frame import DataFrame",
                "from pandas.core.reshape.util import cartesian_product",
                "from pandas import Index, MultiIndex"
            ]
        }
    ]
}