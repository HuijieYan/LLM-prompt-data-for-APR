{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 88,
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False\n) -> DataFrame:\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces = []\n        keys = []\n        for func in aggfunc:\n            grouped = data.groupby(index + columns, observed=observed)\n            agged = grouped.agg(func)\n            pieces.append(agged)\n            keys.append(getattr(func, \"__name__\", func))\n\n        table = concat(pieces, keys=keys, axis=1)\n        return table\n\n    keys = index + columns\n\n    values_passed = values is not None\n    if values_passed:\n        values = [values] if not is_list_like(values) else list(values)\n        if any(value not in data.columns for value in values):\n            raise KeyError([value for value in values if value not in data.columns])\n\n        columns_to_select = keys + values\n        data = data[columns_to_select]\n\n    else:\n        values = data.columns.drop(keys, errors='ignore').tolist()\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    \n    if dropna and isinstance(agged, DataFrame) and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n\n        for value in values:\n            if value in data and is_integer_dtype(data[value]) and value in agged and not is_integer_dtype(agged[value]):\n                agged[value] = agged[value].astype(data[value].dtype)\n\n    table = agged\n    if table.index.nlevels > 1:\n        index_names = agged.index.names[: len(index)]\n        to_unstack = [i for i, name in enumerate(agged.index.names) if name is None or name in index_names]\n        table = agged.unstack(to_unstack)\n\n    if not dropna:\n        if table.index.nlevels > 1:\n            m = MultiIndex.from_arrays(cartesian_product(table.index.levels), names=table.index.names)\n            table = table.reindex(m, axis=0)\n\n        if table.columns.nlevels > 1:\n            m = MultiIndex.from_arrays(cartesian_product(table.columns.levels), names=table.columns.names)\n            table = table.reindex(m, axis=1)\n\n    if isinstance(table, DataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table.fillna(fill_value)\n\n    if margins:\n        table = _add_margins(\n            table,\n            data[data.notna().all(axis=1)],\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=observed,\n            margins_name=margins_name,\n            fill_value=fill_value\n        )\n\n    if values_passed and not any(isinstance(val, list) for val in values):\n        if table.columns.nlevels > 1:\n            table = table[values[0]]\n\n    if not index and columns:\n        table = table.T\n\n    if dropna and isinstance(table, DataFrame):\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table",
            "import_list": [
                "from pandas.core.groupby import Grouper",
                "from pandas import DataFrame, Index, MultiIndex",
                "from pandas.core.reshape.concat import concat"
            ]
        }
    ]
}