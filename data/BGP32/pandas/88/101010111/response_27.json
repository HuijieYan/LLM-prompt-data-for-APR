{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 88,
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces: List[DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            table = pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return concat(pieces, keys=keys, axis=1)\n\n    keys = index + columns\n\n    values_passed = values is not None\n    if values_passed:\n        values = [values] if not is_list_like(values) else list(values)\n        keys_values = keys + values\n        \n        # Validate value labels are in data\n        data_key_set = set(data)\n        \n        for value in values:\n            if value not in data_key_set:\n                raise KeyError(value)\n        \n        # Extract keys and values existing in the data\n        selected_keys_values = [key_value for key_value in keys_values if key_value in data_key_set]\n        \n        data_filtered = data[selected_keys_values]\n\n    else:\n        values = [col for col in data.columns if col not in keys]\n        \n        data_filtered = data[keys + values]\n\n    grouped = data_filtered.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    \n    if dropna and isinstance(agged, ABCDataFrame) and agged.shape[1]:\n        # Drop rows with all NaN values\n        agged = agged.dropna(how=\"all\")\n        \n        # Down-cast int columns to float if they contain NaN after groupby\n        for col in values:\n            if col in data and is_integer_dtype(data[col]):\n                if col in agged and not is_integer_dtype(agged[col]):\n                    agged[col] = maybe_downcast_to_dtype(agged[col], data[col].dtype)\n\n    table = agged\n    \n    if table.index.nlevels > 1:\n        index_names = agged.index.names[:len(index)]\n        to_unstack = []\n        for i, name in enumerate(agged.index.names[len(index):]):\n            if name in index_names or name is None:\n                to_unstack.append(i)\n            else:\n                to_unstack.append(name)\n        \n        table = agged.unstack(to_unstack)\n\n    if not dropna:\n        if table.index.nlevels > 1:\n            m = MultiIndex.from_product(table.index.levels, names=table.index.names)\n            table = table.reindex(m, axis=0)\n\n        if table.columns.nlevels > 1:\n            m = MultiIndex.from_product(table.columns.levels, names=table.columns.names)\n            table = table.reindex(m, axis=1)\n\n    if isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table.fillna(fill_value)\n\n    if margins:\n        if dropna:\n            data_filtered = data_filtered.dropna(axis=0, how=\"all\")\n        table = _add_margins(table, data_filtered, values, index, columns, aggfunc, observed, margins_name, fill_value)\n\n    if values_passed and not table.empty and table.columns.nlevels > 1:\n        # Return the aggregated data filtered by the selected columns\n        table = table[values[0]]\n        \n    if len(index) == 0 and len(columns) > 0:\n        # Transpose the table if no index but columns specified\n        table = table.T\n\n    if isinstance(table, ABCDataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table",
            "import_list": []
        }
    ]
}