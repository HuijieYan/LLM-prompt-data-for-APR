{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None and isinstance(group_axis, MultiIndex):\n        if is_list_like(level) and len(level) == 1:\n            level = level[0]\n\n        if key is None and is_scalar(level):\n            key = group_axis.get_level_values(level)\n            level = None\n\n    else:\n        if is_list_like(level):\n            nlevels = len(level)\n            if nlevels == 1:\n                level = level[0]\n            elif nlevels == 0:\n                raise ValueError(\"No group keys passed!\")\n            else:\n                raise ValueError(\"Multiple levels only valid with MultiIndex\")\n\n        if isinstance(level, str):\n            if obj.index.name != level:\n                raise ValueError(\"Level name {} is not the name of the index\".format(level))\n        elif level is not None and (level > 0 or level < -1):\n            raise ValueError(\"Level > 0 or level < -1 only valid with MultiIndex\")\n\n        level = None\n        key = group_axis\n\n    if isinstance(key, list):\n        keys = key\n    else:\n        keys = [key]\n\n    groupings = []\n    exclusions = []\n\n    for key in keys:\n        if isinstance(key, Grouper):\n            binner, grouper, obj = key._get_grouper(obj, validate=False)\n            if key.key is None:\n                groupings.append(grouper)\n            else:\n                groupings.append(grouper)\n                exclusions.append(key.key)\n\n        elif isinstance(key, BaseGrouper):\n            groupings.append(key)\n        else:\n            is_hashable = is_hashable(key)\n            if is_hashable and key not in obj and set([key]).issubset(obj):\n                msg = (\n                    \"Interpreting tuple 'by' as a list of keys, rather than \"\n                    \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n                    \"the future, a tuple will always mean a single key.\"\n                )\n                warnings.warn(msg, FutureWarning, stacklevel=5)\n                key = [key]\n\n            if isinstance(key, list):\n                keys = key\n                match_axis_length = False\n            else:\n                keys = [key]\n                match_axis_length = len(keys) == len(group_axis)\n\n            any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n            any_groupers = any(isinstance(g, Grouper) for g in keys)\n            any_arraylike = any(isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys)\n\n            if not any_callable and not any_arraylike and not any_groupers and match_axis_length and level is None:\n                if isinstance(obj, DataFrame):\n                    all_in_columns_index = all(g in obj.columns or g in obj.index.names for g in keys)\n                elif isinstance(obj, Series):\n                    all_in_columns_index = all(g in obj.index.names for g in keys)\n\n                if not all_in_columns_index:\n                    keys = [com.asarray_tuplesafe(keys)]\n\n            if isinstance(level, (tuple, list)):\n                if key is None:\n                    keys = [None] * len(level)\n                levels = level\n            else:\n                levels = [level] * len(keys)\n\n            for i, (gpr, level) in enumerate(zip(keys, levels)):\n                if isinstance(level, list):\n                    levels = [None] * len(level)\n                else:\n                    levels = [level] * len(keys)\n\n                if not _is_label_like(gpr):\n                    try:\n                        obj._data.items.get_loc(gpr)\n                    except Exception:\n                        continue\n                else:\n                    try:\n                        return id(gpr) == id(obj[gpr.name])\n                    except Exception:\n                        continue",
            "import_list": []
        }
    ]
}