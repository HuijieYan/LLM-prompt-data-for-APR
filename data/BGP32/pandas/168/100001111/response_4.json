{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        if isinstance(group_axis, MultiIndex) and is_list_like(level) and len(level) == 1:\n            level = level[0]\n        \n        if key is None and is_scalar(level):\n            key = group_axis.get_level_values(level)\n            level = None\n\n    else:\n        if is_list_like(level):\n            nlevels = len(level)\n            if nlevels == 1:\n                level = level[0]\n            elif nlevels == 0:\n                raise ValueError(\"No group keys passed!\")\n            else:\n                raise ValueError(\"Multiple levels only valid with MultiIndex\")\n\n        if not isinstance(level, (int, str)):\n            raise ValueError(\"Invalid level value\")\n\n        if isinstance(level, str):\n            if obj.index.name != level:\n                raise ValueError(f\"Level name '{level}' is not the name of the index\")\n        elif not isinstance(level, int):\n            raise ValueError(\"Level must be an integer for single level indexing\")\n\n        if isinstance(level, int) and isinstance(group_axis, MultiIndex):\n            if level >= 0 or level < -1:\n                raise ValueError(\"Invalid level value for MultiIndex\")\n\n        if is_categorical_dtype(group_axis) and len(group_axis) != obj.shape[axis]:\n            raise ValueError(\"Length of grouper and axis must be the same length\")\n\n    if isinstance(key, str):\n        if key in group_axis:\n            warnings.warn(\"Using a single label 'by' value is deprecated\", FutureWarning)\n        key = [key]\n\n    if isinstance(key, list):\n        if len(key) == 1 and key[0] not in obj and set(key).issubset(obj):\n            warnings.warn(\"Interpreting list 'by' as a single key value\", FutureWarning)\n            key = key[0]\n\n    if key in obj:\n        return key, [], obj\n    else:\n        raise KeyError(key)",
            "import_list": []
        }
    ]
}