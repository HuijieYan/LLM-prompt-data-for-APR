{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None and isinstance(group_axis, MultiIndex):\n        if is_list_like(level) and len(level) == 1:\n            level = level[0]\n\n        if key is None and is_scalar(level):\n            key = group_axis.get_level_values(level)\n            level = None\n\n    else:\n        if is_list_like(level):\n            nlevels = len(level)\n            if nlevels == 1:\n                level = level[0]\n            elif nlevels == 0:\n                raise ValueError(\"No group keys passed!\")\n            else:\n                raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n        if level is not None:\n            if is_scalar(level):\n                if obj.index.name != level:\n                    raise ValueError(\n                        \"level name {} is not the name of the index\".format(level)\n                    )\n            elif not (-1 <= level < obj.index.nlevels):\n                raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n\n    if key is not None:\n        if isinstance(key, Grouper):\n            binner, grouper, obj = key._get_grouper(obj, validate=False)\n            return grouper, {key.key} if key.key is not None else set(), obj\n\n        if isinstance(key, BaseGrouper):\n            return key, [], obj\n\n        if isinstance(key, tuple):\n            if all(is_hashable(k) for k in key) and key not in obj and set(key).issubset(obj):\n                warnings.warn(\n                    \"Interpreting tuple 'by' as a list of keys, rather than a single key. Use 'by=[...]' instead of 'by=(...)'.\",\n                    FutureWarning,\n                    stacklevel=5,\n                )\n                key = list(key)\n\n        if not isinstance(key, list):\n            keys = [key]\n            match_axis_length = False\n        else:\n            keys = key\n            match_axis_length = len(keys) == len(group_axis)\n\n        any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n        any_groupers = any(isinstance(g, Grouper) for g in keys)\n        any_arraylike = any(\n            isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys\n        )\n\n        if not any_callable and not any_arraylike and not any_groupers and match_axis_length and level is None:\n            if isinstance(obj, DataFrame):\n                all_in_columns_index = all(\n                    g in obj.columns or g in obj.index.names for g in keys\n                )\n            elif isinstance(obj, Series):\n                all_in_columns_index = all(g in obj.index.names for g in keys)\n\n            if not all_in_columns_index:\n                keys = [com.asarray_tuplesafe(keys)]\n\n        if len(keys) > 1:\n            raise ValueError(\"Grouper for {} not 1-dimensional\".format(keys))\n        if not isinstance(keys[0], str):\n            return None, None, None\n\n        if keys[0] not in obj.columns:\n            raise KeyError(f\"Column '{keys[0]}' not found\")\n        gpr = obj[keys[0]]\n\n        # Creating the Grouping\n        ping = Grouping(\n            group_axis,\n            gpr,\n            obj=obj,\n            name=keys[0],\n            level=None,\n            sort=sort,\n            observed=observed,\n            in_axis=False,\n        )\n        return BaseGrouper(group_axis, [ping], sort=sort, mutated=mutated), [ping.name], obj\n\n    return None, [], None",
            "import_list": []
        }
    ]
}