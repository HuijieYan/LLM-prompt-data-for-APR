{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        if isinstance(group_axis, MultiIndex):\n            if is_list_like(level) and len(level) == 1:\n                level = level[0]\n\n            if key is None and is_scalar(level):\n                key = group_axis.get_level_values(level)\n                level = None\n        else:\n            if is_list_like(level):\n                nlevels = len(level)\n                if nlevels == 1:\n                    level = level[0]\n                elif nlevels == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n            if isinstance(level, str):\n                if obj.index.name != level:\n                    raise ValueError(\n                        f\"level name {level} is not the name of the index\"\n                    )\n            elif level > 0 or level < -1:\n                raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n\n            level = None\n            key = group_axis\n\n    if isinstance(key, (list, tuple)):\n        keys = key\n    else:\n        keys = [key]\n\n    groupings = []\n    exclusions = []\n\n    for key in keys:\n        if isinstance(key, Grouper):\n            binner, grouper, obj = key._get_grouper(obj, validate=False)\n            if key.key is None:\n                groupings.append(grouper)\n            else:\n                groupings.append({key.key})\n        elif isinstance(key, BaseGrouper):\n            groupings.append(key)\n        else:\n            if not isinstance(key, list):\n                key = [key]\n            match_axis_length = len(key) == len(group_axis)\n\n            if not any(callable(key) or isinstance(key, dict) for key in key):\n                if isinstance(obj, DataFrame):\n                    all_in_columns_index = all(\n                        k in obj.columns or k in obj.index.names for k in key\n                    )\n                elif isinstance(obj, Series):\n                    all_in_columns_index = all(k in obj.index.names for k in key)\n\n                if not all_in_columns_index:\n                    key = [com.asarray_tuplesafe(key)]\n\n            for i, k in enumerate(key):\n                in_axis = is_in_axis(k)\n                name = gpr_name = None\n                if in_axis:\n                    if k in obj:\n                        if validate:\n                            obj._check_label_or_level_ambiguity(k)\n                        name, gpr = k, obj[k]\n                    elif obj._is_level_reference(k):\n                        in_axis = False\n                    else:\n                        raise KeyError(k)\n\n                ping = (\n                    Grouping(\n                        group_axis,\n                        k,\n                        obj=obj,\n                        name=name,\n                        level=None,\n                        sort=sort,\n                        observed=observed,\n                        in_axis=in_axis,\n                    )\n                    if not isinstance(k, Grouping)\n                    else k\n                )\n                groupings.append(ping)\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    elif len(groupings) == 0:\n        groupings.append(\n            Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp))\n        )\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}