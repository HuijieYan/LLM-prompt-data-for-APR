{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        if isinstance(group_axis, MultiIndex):\n            if is_list_like(level) and len(level) == 1:\n                level = level[0]\n            if key is None and is_scalar(level):\n                key = group_axis.get_level_values(level)\n                level = None\n        else:\n            if is_list_like(level):\n                nlevels = len(level)\n                if nlevels == 1:\n                    level = level[0]\n                elif nlevels == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n            if isinstance(level, str) and isinstance(obj.index, MultiIndex):\n                if level not in obj.index.names:\n                    raise ValueError(\n                        \"level name {} is not the name of the index\".format(level)\n                    )\n            if isinstance(level, int) and isinstance(obj.index, MultiIndex):\n                if level > obj.index.nlevels - 1 or level < -1:\n                    raise ValueError(\n                        \"level > 0 or level < -1 only valid with MultiIndex\"\n                    )\n\n            level = None\n            key = group_axis\n\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key.key}, obj\n\n    if isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    # Process keys for grouping by columns\n    if isinstance(key, str):  # Group by column name\n        if key in obj.columns:\n            key = obj[key]\n        else:\n            raise KeyError(key)\n\n    # Check if key is a list or tuple and process each item\n    if isinstance(key, (list, tuple)):\n        keys = [obj[k] if k in obj.columns else k for k in key]\n    else:\n        keys = [key]\n\n    groupings = []\n    exclusions = []\n\n    for i, gpr in enumerate(keys):\n        if not is_hashable(gpr) and gpr not in obj and set(gpr).issubset(obj):\n            warnings.warn(\n                \"Interpreting tuple 'by' as a list of keys, rather than a single key. \"\n                \"Use 'by=[...]' instead of 'by=(...)'. In the future, a tuple will always \"\n                \"mean a single key.\",\n                FutureWarning,\n                stacklevel=5,\n            )\n            gpr = list(gpr)\n\n        if is_categorical_dtype(gpr) and len(gpr) != obj.shape[axis]:\n            raise ValueError(\n                \"Length of grouper ({len_gpr}) and axis ({len_axis}) must be the same length\".format(\n                    len_gpr=len(gpr), len_axis=obj.shape[axis]\n                )\n            )\n\n        ping = Grouping(\n            group_axis,\n            gpr,\n            obj=obj,\n            name=gpr.name,\n            level=None,\n            sort=sort,\n            observed=observed,\n            in_axis=True,\n        )\n        groupings.append(ping)\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}