{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        if is_list_like(level):\n            if len(level) == 1:\n                level = level[0]\n            else:\n                raise ValueError(\"multiple levels are only valid with MultiIndex\")\n\n        if isinstance(group_axis, MultiIndex):\n            if key is None and is_scalar(level):\n                key = group_axis.get_level_values(level)\n                level = None\n        else:\n            if isinstance(level, str):\n                if obj.index.name != level:\n                    raise ValueError(f\"level name {level} is not the name of the index\")\n            elif level != 0 and level != -1:\n                raise ValueError(\"level should be 0 or -1 when not using MultiIndex\")\n\n            level = None\n            key = group_axis\n\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        return grouper, {key.key} if key.key is not None else [], obj\n\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    elif isinstance(key, tuple):\n        if is_hashable(key) or key in obj or set(key).issubset(obj):\n            warnings.warn(\n                \"'by' as a list of keys, rather than a single key. Use 'by=[...]' instead of 'by=(...)'.\",\n                FutureWarning,\n                stacklevel=5,\n            )\n            key = list(key)\n\n    keys = [key] if not isinstance(key, list) else key\n    match_axis_length = len(keys) == len(group_axis)\n    keys = [com.asarray_tuplesafe(keys)] if not match_axis_length else keys\n\n    if isinstance(level, (tuple, list)):\n        if key is None:\n            keys = [None] * len(level)\n        levels = level\n    else:\n        levels = [level] * len(keys)\n\n    groupings = []\n    exclusions = []\n\n    for i, (gpr, level) in enumerate(zip(keys, levels)):\n        in_axis, name, gpr = False, None, gpr\n\n        if not _is_label_like(gpr):\n            try:\n                obj._data.items.get_loc(gpr)\n                in_axis = True\n                name = gpr\n            except Exception:\n                pass\n\n        if in_axis is False:\n            raise KeyError(gpr)\n\n        if is_categorical_dtype(gpr) and len(gpr) != obj.shape[axis]:\n            raise ValueError(\n                f\"Length of grouper ({len(gpr)}) and axis ({obj.shape[axis]}) must be the same length\"\n            )\n\n        ping = Grouping(\n            group_axis,\n            gpr,\n            obj=obj,\n            name=name,\n            level=level,\n            sort=sort,\n            observed=observed,\n            in_axis=in_axis,\n        )\n\n        groupings.append(ping)\n\n    if not groupings:\n        raise ValueError(\"No group keys passed!\")\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}