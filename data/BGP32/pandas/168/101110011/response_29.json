{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if isinstance(key, str):\n        key = [key]\n\n    if isinstance(key, list) and all(isinstance(k, str) for k in key):\n        keys = key\n        match_axis_length = len(keys) == len(group_axis)\n\n        any_arraylike = any(isinstance(g, str) for g in keys)\n\n        if not any_arraylike:\n            raise ValueError(\"Invalid key for grouping\")\n\n        groupings = []\n\n        for i, gpr in enumerate(keys):\n            if gpr in group_axis:\n                groupings.append(\n                    Grouping(\n                        group_axis,\n                        gpr,\n                        obj=obj,\n                        name=gpr,\n                        level=None,\n                        sort=sort,\n                        observed=observed,\n                        in_axis=True,\n                    )\n                )\n            else:\n                raise KeyError(gpr)\n\n        if not groupings:\n            raise ValueError(\"No group keys passed!\")\n\n        grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n        return grouper, [gpr for gpr in keys if gpr not in group_axis], obj\n\n    else:\n        raise ValueError(\"Invalid key type for grouping\")",
            "import_list": []
        }
    ]
}