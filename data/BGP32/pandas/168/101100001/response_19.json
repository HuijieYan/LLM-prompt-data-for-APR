{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    # Create group_axis object based on the provided axis\n    group_axis = obj._get_axis(axis)\n\n    # Check if the level is not None\n    if level is not None:\n        if isinstance(group_axis, MultiIndex):\n            if is_list_like(level):\n                level = level[0] if len(level) == 1 else tuple(level)\n\n            if key is None and is_scalar(level):\n                level = group_axis.get_level_values(level)\n                key = None\n\n        else:\n            if is_list_like(level):\n                if len(level) == 1:\n                    level = level[0]\n                elif len(level) == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"Multiple levels are only valid with MultiIndex\")\n\n            if isinstance(level, str):\n                if obj.index.name != level:\n                    raise ValueError(f\"Level name '{level}' is not the name of the index\")\n            elif level > 0 or level < -1:\n                raise ValueError(\"Level > 0 or level < -1 is only valid with MultiIndex\")\n\n            level = None\n            key = group_axis\n\n    # Check if the key is a Grouper or BaseGrouper already\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        return (grouper, {key.key} if key.key is not None else [], obj)\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    # Handle tuple key scenario\n    if isinstance(key, tuple):\n        if all(is_hashable(k) for k in key):\n            if key not in obj and set(key).issubset(obj):\n                warnings.warn(\n                    \"Interpreting tuple 'by' as a list of keys, rather than a single key. Use 'by=[...]' instead of 'by=(...)'. In the future, a tuple will always mean a single key.\",\n                    FutureWarning,\n                    stacklevel=2,\n                )\n                key = list(key)\n\n    if not isinstance(key, list):\n        keys = [key]\n        match_axis_length = False\n    else:\n        keys = key\n        match_axis_length = len(keys) == len(group_axis)",
            "import_list": []
        }
    ]
}