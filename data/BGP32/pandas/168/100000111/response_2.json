{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(obj, key=None, axis=0, level=None, sort=True, observed=False, mutated=False, validate=True):\n    \n    group_axis = obj._get_axis(axis)\n    \n    if level is not None:\n        if isinstance(group_axis, MultiIndex):\n            if is_list_like(level) and len(level) == 1:\n                level = level[0]\n            \n            if key is None and is_scalar(level):\n                key = group_axis.get_level_values(level)\n                level = None\n        \n        else:\n            if is_list_like(level):\n                nlevels = len(level)\n                if nlevels == 1:\n                    level = level[0]\n                elif nlevels == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"Multiple levels only valid with MultiIndex\")\n            \n            if isinstance(level, str):\n                if obj.columns.name != level:\n                    raise ValueError(\"Level name {} is not the name of the columns\".format(level))\n            elif level > 0 or level < -1:\n                raise ValueError(\"Level > 0 or level < -1 only valid with MultiIndex\")\n            \n            level = None\n            key = group_axis\n    \n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key.key}, obj\n    \n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n    \n    if isinstance(key, tuple):\n        if key not in obj.columns and set(key).issubset(obj.columns):\n            msg = \"Interpreting tuple 'by' as a list of keys, rather than a single key. Use 'by=[...]' instead of 'by=(...)'. In the future, a tuple will always mean a single key.\"\n            warnings.warn(msg, FutureWarning, stacklevel=5)\n            key = list(key)\n\n    if not isinstance(key, list):\n        keys = [key]\n        match_axis_length = False\n    else:\n        keys = key\n        match_axis_length = len(keys) == len(group_axis)\n\n    any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n    any_groupers = any(isinstance(g, Grouper) for g in keys)\n    any_arraylike = any(isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys)\n\n    if not any_callable and not any_arraylike and not any_groupers and match_axis_length and level is None:\n        if isinstance(obj, DataFrame):\n            all_in_index = all(g in obj.columns or g in obj.index.names for g in keys)\n        else:\n            all_in_index = all(g in obj.index.names for g in keys)\n        \n        if not all_in_index:\n            keys = [com.asarray_tuplesafe(keys)]\n    \n    if isinstance(level, (tuple, list)):\n        if key is None:\n            keys = [None] * len(level)\n        levels = level\n    else:\n        levels = [level] * len(keys)\n    \n    groupings = []\n    exclusions = []\n    \n    for i, (gpr, level) in enumerate(zip(keys, levels)):\n        if gpr in obj:\n            in_axis, name, gpr = True, gpr, obj[gpr]\n            exclusions.append(name)\n        elif is_categorical_dtype(gpr) and len(gpr) != obj.shape[axis]:\n            raise ValueError(\"Length of grouper and axis must be same length\")\n        \n        ping = Grouping(group_axis, gpr, obj=obj, name=name, level=level, sort=sort, observed=observed, in_axis=in_axis)\n        groupings.append(ping)\n    \n    if len(groupings) == 0:\n        raise ValueError(\"No group keys passed!\")\n    elif len(groupings) == 0:\n        groupings.append(Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp)))\n    \n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}