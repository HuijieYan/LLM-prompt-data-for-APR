{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        if isinstance(group_axis, MultiIndex):\n            if is_list_like(level) and len(level) == 1:\n                level = level[0]\n            \n        if key is None and is_scalar(level):\n            key = group_axis.get_level_values(level)\n            level = None\n        else:\n            if isinstance(level, str):\n                if obj.columns.name != level:\n                    raise ValueError(\"level name {} is not the name of the columns\".format(level))       \n            else:\n                if level > 0 or level < -1:\n                    raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n            level = None\n            key = group_axis\n\n    if isinstance(key, (str, tuple)):\n        key = [key]\n\n    if not is_list_like(key):\n        key = [key]\n\n    keys = key\n    match_axis_length = len(keys) == len(group_axis)\n    \n    if all(isinstance(g, str) for g in keys) and match_axis_length:\n        if not all(g in obj.columns or g in obj.index.names for g in keys):\n            keys = [com.asarray_tuplesafe(keys)]\n\n    groupings = []\n    exclusions = []\n\n    for i, gpr in enumerate(keys):\n        if is_categorical_dtype(gpr) and len(gpr) != obj.shape[axis]:\n            raise ValueError(\n                \"Length of grouper ({len_gpr}) and axis ({len_axis})\"\n                \" must be the same length\".format(\n                    len_gpr=len(gpr), len_axis=obj.shape[axis]\n                )\n            )\n\n        in_axis = False\n        name = None\n\n        if isinstance(gpr, str):\n            if gpr in obj.columns:\n                in_axis = gpr in obj.columns\n                gpr = obj[gpr]\n                name = gpr.name\n                exclusions.append(name)\n\n        if isinstance(gpr, Grouping) and gpr.key is not None:\n            exclusions.append(gpr.key)\n            in_axis = False\n\n        ping = Grouping(\n            group_axis,\n            gpr,\n            obj=obj,\n            name=name,\n            level=level,\n            sort=sort,\n            observed=observed,\n            in_axis=in_axis\n        )\n\n        groupings.append(ping)\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    elif len(groupings) == 0:\n        groupings.append(Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp)))\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}