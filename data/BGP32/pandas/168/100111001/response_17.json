{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        if not isinstance(level, list):\n            level = [level]\n\n    exclusions = []\n    groupings = []\n\n    if not isinstance(key, list):\n        keys = [key]\n    else:\n        keys = key\n\n    for idx, k in enumerate(keys):\n        if idx < len(level):\n            lev = level[idx]\n        else:\n            lev = None\n\n        if isinstance(k, Grouper):\n            binner, grouper, obj = k._get_grouper(obj, validate=False)\n            if k.key is None:\n                groupings.append((grouper, set(), obj))\n            else:\n                groupings.append((grouper, {k.key}, obj))\n        elif isinstance(k, BaseGrouper):\n            groupings.append((k, [], obj))\n        elif isinstance(k, tuple):\n            warnings.warn(\"Interpreting tuple 'by' as a list of keys. Use 'by=[...]' instead of 'by=(...)'.\", FutureWarning)\n            groupings.append((None, set(k), obj))\n        elif com.is_hashable(k):\n            if k in obj:\n                groupings.append((None, {k}, obj))\n            elif k in obj.index:\n                if validate:\n                    obj._check_label_or_level_ambiguity(k)\n                groupings.append((None, {k}, obj[k]))\n        else:\n            raise KeyError(k)\n\n    if not groupings:\n        raise ValueError(\"No group keys passed!\")\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}