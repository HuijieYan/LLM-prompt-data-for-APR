{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        if isinstance(group_axis, MultiIndex):\n            if key is None and is_scalar(level):\n                key = group_axis.get_level_values(level)\n                level = None\n        else:\n            if isinstance(level, str):\n                if obj.columns.name != level:\n                    raise ValueError(\n                        \"level name {} is not the name of the columns\".format(level)\n                    )\n            elif level not in [None, 0, -1]:\n                raise ValueError(\"level != 0 and level != -1 only valid with MultiIndex\")\n\n        level = None\n        key = group_axis\n\n    if not isinstance(key, list):\n        key = [key]\n\n    if len(key) > 1:\n        raise ValueError(\"Grouping by multiple columns is not supported\")\n\n    if isinstance(key[0], Grouper):\n        binner, grouper, obj = key[0]._get_grouper(obj, validate=False)\n        if key[0].key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key[0].key}, obj\n\n    if isinstance(key[0], BaseGrouper):\n        return key[0], [], obj\n\n    if isinstance(key[0], tuple) or not all(is_hashable(k) for k in key[0]):\n        msg = (\n            \"Interpreting tuple 'by' as a list of keys, rather than \"\n            \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n            \"the future, a tuple will always mean a single key.\"\n        )\n        warnings.warn(msg, FutureWarning, stacklevel=3)\n        key = list(key[0])\n\n    match_axis_length = len(key) == group_axis.size\n\n    groupings = []\n    exclusions = []\n\n    for i, gpr in enumerate(key):\n        ping = Grouping(\n            group_axis,\n            gpr,\n            obj=obj,\n            name=gpr,\n            level=level,\n            sort=sort,\n            observed=observed,\n            in_axis=True,\n        )\n        groupings.append(ping)\n        exclusions.append(gpr)\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}