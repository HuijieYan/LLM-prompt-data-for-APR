{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if axis == 1 and key is not None:\n        if is_list_like(key):\n            keys = key\n        else:\n            keys = [key]\n\n        groupings = []\n        exclusions = []\n\n        for i, gpr in enumerate(keys):\n            # Check and ensure the key is in the columns\n            if gpr not in obj.columns:\n                raise KeyError(f\"Column '{gpr}' not found\")\n\n            # Create the Grouping for each specified column\n            if is_categorical_dtype(obj[gpr]) and len(obj[gpr]) != obj.shape[0]:\n                raise ValueError(\n                    (\n                        \"Length of grouper ({len_gpr}) and axis ({len_axis})\"\n                        \" must be the same length\".format(\n                            len_gpr=len(obj[gpr]), len_axis=obj.shape[0]\n                        )\n                    )\n                )\n\n            # Create the Grouping for the column\n            groupings.append(\n                Grouping(\n                    group_axis,\n                    obj[gpr],\n                    obj=obj,\n                    name=gpr,\n                    level=None,\n                    sort=sort,\n                    observed=observed,\n                    in_axis=True,\n                )\n            )\n\n        grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n        return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}