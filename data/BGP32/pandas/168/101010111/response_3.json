{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        if isinstance(group_axis, MultiIndex):\n            if is_list_like(level) and len(level) == 1:\n                level = level[0]\n\n            if key is None and is_scalar(level):\n                key = group_axis.get_level_values(level)\n                level = None\n\n        else:\n            if is_list_like(level):\n                nlevels = len(level)\n                if nlevels == 1:\n                    level = level[0]\n                elif nlevels == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n            if isinstance(level, str):\n                if obj.index.name != level:\n                    raise ValueError(\n                        f\"level name {level} is not the name of the index\"\n                    )\n            elif level > 0 or level < -1:\n                raise ValueError(\n                    \"level > 0 or level < -1 only valid with MultiIndex\"\n                )\n\n            level = None\n            key = group_axis\n\n    if isinstance(key, str):\n        key = [key]\n\n    if isinstance(key, list):\n        keys = key\n        match_axis_length = len(keys) == group_axis.nlevels\n\n        any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n        any_groupers = any(isinstance(g, Grouper) for g in keys)\n        any_arraylike = any(\n            isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys\n        )\n\n        if (\n            not any_callable\n            and not any_arraylike\n            and not any_groupers\n            and match_axis_length\n            and level is None\n        ):\n            all_in_columns_index = all(\n                g in obj.columns or g in obj.index.names for g in keys\n            )\n            if not all_in_columns_index:\n                keys = [com.asarray_tuplesafe(keys)]\n\n        levels = [None] * len(keys)\n\n        groupings = []\n        exclusions = []\n\n        for i, (gpr, level) in enumerate(zip(keys, levels)):\n            name = gpr\n            in_axis = True\n            if gpr in obj:\n                if validate:\n                    obj._check_label_or_level_ambiguity(gpr)\n                gpr = obj[gpr]\n                exclusions.append(name)\n            else:\n                raise KeyError(gpr)\n\n            if is_categorical_dtype(gpr) and len(gpr) != obj.shape[axis]:\n                raise ValueError(\n                    f\"Length of grouper ({len(gpr)}) and axis ({obj.shape[axis]}) must be same length\"\n                )\n\n            ping = Grouping(\n                group_axis,\n                gpr,\n                obj=obj,\n                name=name,\n                level=level,\n                sort=sort,\n                observed=observed,\n                in_axis=in_axis,\n            )\n\n            groupings.append(ping)\n\n        if len(groupings) == 0 and len(obj):\n            raise ValueError(\"No group keys passed!\")\n\n        grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n        return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}