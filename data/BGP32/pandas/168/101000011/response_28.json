{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    if axis == 1:\n        group_axis = obj.columns\n    else:\n        group_axis = obj.index\n\n    if key is None:\n        raise ValueError(\"No group keys passed!\")\n\n    if isinstance(key, str):\n        if key not in group_axis:\n            raise KeyError(key)\n\n    exclusions = []\n\n    if all(isinstance(val, (str, int)) for val in key):\n        key = [val for val in key if val in group_axis]\n        exclusions.extend(key)\n\n    groupings = []\n\n    for gpr in key:\n        if isinstance(gpr, str) and gpr not in group_axis:\n            raise KeyError(gpr)\n\n        if axis == 1 and not is_hashable(gpr):\n            raise ValueError(\"Unhashable elements: grouping by columns\")\n\n        if axis == 1:\n            gpr_obj = obj[gpr]\n        else:\n            gpr_obj = gpr\n\n        if is_categorical_dtype(gpr_obj) and len(gpr_obj) != obj.shape[axis]:\n            raise ValueError(\n                f\"Length of grouper ({len(gpr_obj)}) and axis ({obj.shape[axis]}) must be the same length\"\n            )\n\n        ping = Grouping(\n            group_axis, gpr_obj, obj=obj, name=gpr, level=level, sort=sort, observed=observed, in_axis=axis == 1\n        )\n\n        groupings.append(ping)\n\n    if len(groupings) == 0:\n        raise ValueError(\"No group keys passed!\")\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}