{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        if is_list_like(level) and len(level) == 1:\n            level = level[0]\n        \n        if key is None and is_scalar(level):\n            key = group_axis.get_level_values(level)\n            level = None\n\n        if isinstance(level, (str, int)):\n            if isinstance(group_axis, MultiIndex):\n                if level not in group_axis.names:\n                    raise ValueError(\"level name {} is not the name of the MultiIndex\".format(level))\n            else:\n                if level != group_axis.name:\n                    raise ValueError(\"level name {} is not the name of the index\".format(level))\n        else:\n            raise ValueError(\"Invalid type for level parameter\")\n\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key.key}, obj\n\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    # Warning for interpretation of tuple key as a list\n    if isinstance(key, tuple):\n        if not all(is_hashable(k) for k in key):\n            key = list(key)\n            warnings.warn(\"Interpreting tuple 'by' as a list of keys, rather than a single key. Use 'by=[...]' instead of 'by=(...)'.\", FutureWarning)\n\n    if not isinstance(key, list):\n        keys = [key]\n    else:\n        keys = key\n\n    groupings = []\n    exclusions = []\n\n    for gpr in keys:\n        if not _is_label_like(gpr):\n            if gpr not in obj.columns:\n                raise KeyError(gpr)\n        exclusions.append(gpr)\n\n        if len(group_axis) != len(obj):\n            raise ValueError(\"Length of grouper ({}) and axis ({}) must be of the same length\".format(len(group_axis), len(obj)))\n\n        groupings.append(\n            Grouping(\n                group_axis, gpr, obj=obj, name=gpr, level=None, sort=sort, observed=observed, in_axis=True\n            )\n        )\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    elif len(groupings) == 0:\n        groupings.append(Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp)))\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}