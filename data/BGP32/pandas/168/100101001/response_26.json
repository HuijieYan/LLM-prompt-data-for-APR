{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None and isinstance(group_axis, MultiIndex):\n        level = level[0] if is_list_like(level) and len(level) == 1 else level\n\n        if key is None and is_scalar(level):\n            key = group_axis.get_level_values(level)\n            level = None\n    else:\n        if is_list_like(level):\n            nlevels = len(level)\n            if nlevels == 1:\n                level = level[0]\n            elif nlevels == 0:\n                raise ValueError(\"No group keys passed!\")\n            else:\n                raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n        if isinstance(level, str):\n            if obj.index.name != level:\n                raise ValueError(\"level name {} is not the name of the index\".format(level))\n        elif level is not None and (level > 0 or level < -1):\n            raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n        level = None\n        key = group_axis\n\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        return (grouper, {key.key}, obj) if key.key is not None else (grouper, [], obj)\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    is_tuple = isinstance(key, tuple)\n    all_hashable = is_tuple and is_hashable(key)\n\n    if is_tuple:\n        if not all_hashable and (key not in obj and set(key).issubset(obj)):\n            msg = (\n                \"Interpreting tuple 'by' as a list of keys, rather than \"\n                \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n                \"the future, a tuple will always mean a single key.\"\n            )\n            warnings.warn(msg, FutureWarning, stacklevel=5)\n            key = list(key)\n\n    if not isinstance(key, list):\n        keys = [key]\n        match_axis_length = False\n    else:\n        keys = key\n        match_axis_length = len(keys) == len(group_axis)\n\n    any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n    any_groupers = any(isinstance(g, Grouper) for g in keys)\n    any_arraylike = any(isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys)\n\n    if not any_callable and not any_arraylike and not any_groupers and match_axis_length and level is None:\n        if isinstance(obj, DataFrame):\n            all_in_columns_index = all(g in obj.columns or g in obj.index.names for g in keys)\n        elif isinstance(obj, Series):\n            all_in_columns_index = all(g in obj.index.names for g in keys)\n\n        if not all_in_columns_index:\n            keys = [com.asarray_tuplesafe(keys)]\n\n    if isinstance(level, (tuple, list)):\n        if key is None:\n            keys = [None] * len(level)\n        levels = level if level is not None else [None] * len(keys)\n    else:\n        levels = [level] * len(keys)\n\n    groupings = []\n    exclusions = []\n\n    for i, (gpr, level) in enumerate(zip(keys, levels)):\n        if not _is_label_like(gpr):\n            try:\n                obj._data.items.get_loc(gpr)\n            except Exception:\n                in_axis = False\n            else:\n                in_axis, name, gpr = True, gpr, obj[gpr]\n                exclusions.append(name)\n        else:\n            in_axis, name = False, None\n\n        if is_categorical_dtype(gpr) and len(gpr) != obj.shape[axis]:\n            raise ValueError(\n                \"Length of grouper ({}) and axis ({}) must be same length\".format(len(gpr), obj.shape[axis])\n            )\n\n        ping = Grouping(\n            group_axis,\n            gpr,\n            obj=obj,\n            name=name,\n            level=level,\n            sort=sort,\n            observed=observed,\n            in_axis=in_axis\n        )\n        groupings.append(ping)\n\n    if not groupings:\n        raise ValueError(\"No group keys passed!\")\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}