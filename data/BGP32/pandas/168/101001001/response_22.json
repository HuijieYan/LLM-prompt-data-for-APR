{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None:\n        if not isinstance(group_axis, MultiIndex):\n            level = [level] if is_scalar(level) else level\n            if len(level) > 1:\n                raise ValueError(\"Multiple levels are only valid with MultiIndex\")\n            if isinstance(level, str):\n                if obj.index.name != level:\n                    raise ValueError(\"Level name is not the name of the index\")\n            elif level > 0 or level < -1:\n                raise ValueError(\"Level > 0 or level < -1 only valid with MultiIndex\")\n    \n    keys = key if isinstance(key, list) else [key]\n    groupings = []\n    exclusions = []\n\n    for i, gpr in enumerate(keys):\n        name = None\n\n        if isinstance(gpr, Grouper):\n            binner, grouper, obj = gpr._get_grouper(obj, validate=False)\n            exclusions.append(gpr.key or gpr)\n            groupings.append(grouper)\n        \n        else:\n            in_axis = is_label_like(gpr)\n\n            if in_axis:\n                obj_idx = obj._data.items.get_loc(gpr)\n                name = gpr if gpr in obj else obj_idx\n                if validate and gpr != obj_idx:\n                    obj._check_label_or_level_ambiguity(gpr)\n            elif isinstance(gpr, Grouping) and gpr.key is not None:\n                exclusions.append(gpr.key)\n            else:\n                exclusions.append(None)\n\n            if is_categorical_dtype(gpr) and len(gpr) != obj.shape[axis]:\n                raise ValueError(\"Length of grouper and axis must be same length\")\n\n            ping = Grouping(\n                group_axis,\n                gpr,\n                obj=obj,\n                name=name,\n                level=level,\n                sort=sort,\n                observed=observed,\n                in_axis=in_axis\n            )\n            groupings.append(ping)\n\n    if not groupings:\n        raise ValueError(\"No group keys passed!\")\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}