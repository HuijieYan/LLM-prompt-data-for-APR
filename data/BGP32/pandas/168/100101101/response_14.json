{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None and isinstance(group_axis, MultiIndex):\n        if is_list_like(level) and len(level) == 1:\n            level = level[0]\n\n        if key is None and is_scalar(level):\n            key = group_axis.get_level_values(level)\n            level = None\n\n    if is_list_like(level):\n        nlevels = len(level)\n        if nlevels == 1:\n            level = level[0]\n        elif nlevels == 0:\n            raise ValueError(\"No group keys passed!\")\n        else:\n            raise ValueError(\"Multiple levels only valid with MultiIndex\")\n\n    if isinstance(level, str):\n        if level not in group_axis.names:\n            raise ValueError(\"level name {} is not a level in the MultiIndex\".format(level))\n    elif isinstance(level, int) and (level > group_axis.nlevels - 1 or level < -1):\n        raise ValueError(\"Invalid level for MultiIndex\")\n\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key.key}, obj\n\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    if isinstance(key, tuple):\n        keys = key\n        msg = (\n            \"Interpreting tuple 'by' as a list of keys, rather than \"\n            \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n            \"the future, a tuple will always mean a single key.\"\n        )\n        warnings.warn(msg, FutureWarning, stacklevel=5)\n\n    elif not isinstance(key, list):\n        keys = [key]\n    else:\n        keys = key\n\n    if isinstance(level, (tuple, list)):\n        if key is None:\n            keys = [None] * len(level)\n\n    groupings = []\n    exclusions = []\n\n    for i, (gpr, level) in enumerate(zip(keys, levels)):\n        if isinstance(gpr, Grouper) and gpr.key is not None:\n            exclusions.append(gpr.key)\n        else:\n            exclusions.append(None)\n\n        if isinstance(gpr, str):\n            level = None\n\n        ping = Grouping(\n            group_axis,\n            gpr,\n            obj=obj,\n            level=level,\n            sort=sort,\n            observed=observed,\n        )\n\n        groupings.append(ping)\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    elif len(groupings) == 0:\n        groupings.append(\n            Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp))\n        )\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}