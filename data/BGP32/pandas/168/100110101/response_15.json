{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n    \n    if level is not None:\n        if not isinstance(group_axis, MultiIndex):\n            # Make level a list-like object if necessary\n            if not is_list_like(level):\n                level = [level]\n            elif len(level) != 1:\n                raise ValueError(\"multiple levels only valid with MultiIndex\")\n            \n            # Check level\n            for lev in level:\n                if isinstance(lev, str) and obj.index.name != lev:\n                    raise ValueError(f\"level name {lev} is not the name of the index\")\n                elif not (isinstance(lev, int) and level == 0):\n                    raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n        \n            key = [group_axis.get_level_values(lev) for lev in level]\n\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        return grouper, {key.key}, obj\n\n    if isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    if not isinstance(key, list):\n        keys = [key]\n    else:\n        keys = key\n\n    match_axis_length = len(keys) == len(group_axis)\n    \n    groupings = []\n    exclusions = []\n\n    for i, key in enumerate(keys):\n        in_axis = True if key in group_axis else False\n        name = key if in_axis else None\n\n        if is_categorical_dtype(key) and len(key) != obj.shape[axis]:\n            raise ValueError(\n                f\"Length of grouper ({len(key)}) and axis ({obj.shape[axis]}) must be the same length\"\n            )\n\n        groupings.append(Grouping(\n            group_axis,\n            key,\n            obj=obj,\n            name=name,\n            level=None,\n            sort=sort,\n            observed=observed,\n            in_axis=in_axis\n        ))\n\n    if not groupings:\n        raise ValueError(\"No group keys passed!\")\n\n    return BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated), exclusions, obj",
            "import_list": []
        }
    ]
}