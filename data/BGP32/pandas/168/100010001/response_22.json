{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(obj, key=None, axis=0, level=None, sort=True, observed=False, mutated=False, validate=True):\n    group_axis = obj._get_axis(axis)\n    \n    if level is not None:\n        if key is None and is_list_like(level) and len(level) == 1:\n            level = level[0]\n        \n        if isinstance(group_axis, MultiIndex):\n            if is_scalar(level):\n                key = group_axis.get_level_values(level)\n                level = None\n        else:\n            if is_list_like(level):\n                nlevels = len(level)\n                if nlevels == 1:\n                    level = level[0]\n                elif nlevels == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n            if isinstance(level, str) and obj.index.name != level:\n                raise ValueError(\"level name {} is not the name of the index\".format(level))\n            elif not isinstance(level, str) and (level > 0 or level < -1):\n                raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n\n            level = None\n            key = group_axis\n\n    if isinstance(key, list):\n        if not all(k in obj for k in key):\n            raise KeyError(key)\n    elif isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key.key}, obj\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n    elif isinstance(key, tuple):\n        if not all(k in obj for k in key if is_hashable(k)):\n            key = list(key)\n            warnings.warn(\"Interpreting tuple 'by' as a list of keys, rather than a single key.\", FutureWarning, stacklevel=5)\n\n    keys = key if isinstance(key, list) else [key]\n    match_axis_length = len(keys) == len(group_axis)",
            "import_list": []
        }
    ]
}