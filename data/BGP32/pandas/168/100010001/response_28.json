{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    # Existing code ...\n\n    if isinstance(key, list):  # Handle list input\n        keys = key\n        match_axis_length = len(keys) == len(group_axis)\n\n        for k in keys:\n            if not is_scalar(k):\n                raise ValueError(\"MultiIndex only supports single key\")\n\n            # Process each key individually\n            if isinstance(k, str):\n                if obj.index.name != k:\n                    raise ValueError(f\"level name {k} is not the name of the index\")\n            elif isinstance(k, int) and (k > 0 or k < -1):\n                raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n\n    else:  # Handle normal single key input\n        if isinstance(key, str):\n            if obj.index.name != key:\n                raise ValueError(f\"level name {key} is not the name of the index\")\n        elif isinstance(key, int) and (key > 0 or key < -1):\n            raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n\n        # Normalize key to a list for consistent handling\n        keys = [key]\n\n    # Existing code ...\n\n    return grouper, exclusions, obj",
            "import_list": []
        }
    ]
}