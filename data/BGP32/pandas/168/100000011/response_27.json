{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if isinstance(group_axis, DataFrame):\n        if key is not None:\n            if isinstance(key, str):\n                if key in group_axis.columns:\n                    key = group_axis[key]\n                else:\n                    raise KeyError(f\"Column name '{key}' not found in DataFrame columns\")\n            elif isinstance(key, list):\n                keys = [group_axis[k] if k in group_axis.columns else k for k in key]\n                key = keys\n\n    if key is None:\n        raise ValueError(\"No group keys passed!\")\n\n    if isinstance(key, (Series, np.ndarray)):\n        key = key.values  # Convert Series or array-like keys to numpy array\n\n    if axis == 1:\n        level = None  # Set level to None for column grouping\n\n    # Create Grouping objects based on keys\n    groupings = []\n    for k in key:\n        if is_categorical_dtype(k) and len(k) != obj.shape[axis]:\n            raise ValueError(\n                f\"Length of grouper ({len(k)}) and axis ({obj.shape[axis]}) must be of the same length\"\n            )\n        ping = Grouping(\n            group_axis,\n            k,\n            obj=obj,\n            name=None if axis == 0 else k.name,\n            level=level,\n            sort=sort,\n            observed=observed,\n            in_axis=False if axis == 0 else True,\n        )\n        groupings.append(ping)\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, [], obj",
            "import_list": []
        }
    ]
}