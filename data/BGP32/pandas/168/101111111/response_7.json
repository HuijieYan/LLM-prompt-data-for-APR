{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    group_axis = obj._get_axis(axis)\n\n    if level is not None and isinstance(group_axis, MultiIndex):\n        if is_list_like(level) and len(level) == 1:\n            level = level[0]\n\n        if key is None and is_scalar(level):\n            key = group_axis.get_level_values(level)\n            level = None\n\n    if not isinstance(key, (Grouper, BaseGrouper)):\n\n        if isinstance(key, tuple):\n            if key not in obj and set(key).issubset(obj):\n                warnings.warn(\n                    \"Interpreting tuple 'by' as a list of keys, rather than a single key. Use 'by=[...]' instead of 'by=(...)'. In the future, a tuple will always mean a single key.\",\n                    FutureWarning,\n                    stacklevel=5,\n                )\n                key = list(key)\n\n        if not isinstance(key, list):\n            keys = [key]\n            match_axis_length = False\n        else:\n            keys = key\n            match_axis_length = len(keys) == len(group_axis)\n\n        if not any([callable(g) or isinstance(g, dict) for g in keys]):\n            if not any([is_list_like(g) for g in keys]):\n                if all([g in obj.columns or g in obj.index.names for g in keys]):\n                    keys = [list(keys)]\n                else:\n                    keys = [com.asarray_tuplesafe(keys)]\n\n        if isinstance(level, (tuple, list)):\n            levels = level\n        else:\n            levels = [level] * len(keys)\n    \n        groupings = []\n        exclusions = []\n\n        for i, (gpr, level) in enumerate(zip(keys, levels)):\n            in_axis, name = False, None\n\n            if gpr in obj.columns:\n                in_axis, name, gpr = True, gpr, obj[gpr]\n                exclusions.append(name)\n            elif is_categorical_dtype(gpr) and len(gpr) != obj.shape[axis]:\n                raise ValueError(\n                    f\"Length of grouper ({len(gpr)}) and axis ({obj.shape[axis]}) must be the same.\"\n                )\n\n            ping = Grouping(\n                group_axis,\n                gpr,\n                obj=obj,\n                name=name,\n                level=level,\n                sort=sort,\n                observed=observed,\n                in_axis=in_axis,\n            )\n\n            groupings.append(ping)\n\n        grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n        return grouper, exclusions, obj\n    else:\n        return key, [], obj",
            "import_list": []
        }
    ]
}