{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 168,
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    level_values = None\n\n    if level is not None:\n        if isinstance(obj.index, MultiIndex):\n            if is_list_like(level) and len(level) == 1:\n                level_values = obj.index.get_level_values(level[0])\n            if key is None and is_scalar(level):\n                level_values = obj.index.get_level_values(level)\n        else:\n            if is_list_like(level):\n                if len(level) == 1:\n                    level_values = obj.index.get_level_values(level[0])\n                elif len(level) == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"multiple levels only valid with MultiIndex\")\n            else:\n                raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key.key}, obj\n\n    if not isinstance(key, (list, tuple)):\n        keys = [key]\n    else:\n        keys = list(key)\n\n    group_axis = obj._get_axis(axis)\n    groupings = []\n\n    for key in keys:\n        if isinstance(key, str):\n            if key in group_axis:\n                groupings.append(Grouping(group_axis, obj[key], obj=obj, name=key, level=level_values, sort=sort, observed=observed, in_axis=True))\n        elif key in obj:\n            if validate:\n                obj._check_label_or_level_ambiguity(key)\n            groupings.append(Grouping(group_axis, obj[key], obj=obj, name=key, level=level_values, sort=sort, observed=observed, in_axis=True))\n        else:\n            raise KeyError(key)\n\n    if not groupings:\n        raise ValueError(\"No group keys passed!\")\n\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, [], obj",
            "import_list": []
        }
    ]
}