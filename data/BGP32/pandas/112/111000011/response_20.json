{
    "pandas": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 1,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 112,
            "start_line": 907,
            "file_name": "pandas/core/indexes/interval.py",
            "replace_code": "def get_indexer(\n        self,\n        target: AnyArrayLike,\n        method: Optional[str] = None,\n        limit: Optional[int] = None,\n        tolerance: Optional[Any] = None,\n    ) -> np.ndarray:\n    \n        self._check_method(method)\n    \n        if is_object_dtype(target):\n            target = ensure_index(target)\n    \n        if self.equals(target):\n            return np.arange(len(self), dtype=\"intp\")\n    \n        common_subtype = find_common_type([self.dtype.subtype, target.dtype.subtype])\n    \n        if self.closed != target.closed or is_object_dtype(common_subtype):\n            return np.repeat(np.intp(-1), len(target))\n    \n        if isinstance(target, IntervalIndex):\n            left_indexer = self.left.get_indexer(target.left)\n            right_indexer = self.right.get_indexer(target.right)\n            indexer = np.where(left_indexer == right_indexer, left_indexer, -1)\n        elif not is_object_dtype(target):\n            target = self._maybe_convert_i8(target)\n            indexer = self._engine.get_indexer(target)\n        else:\n            indexer = []\n            for key in target:\n                try:\n                    loc = self.get_loc(key)\n                except KeyError:\n                    loc = -1\n                indexer.append(loc)\n    \n        return ensure_platform_int(indexer)",
            "import_list": [
                "from pandas.core.indexes.base import ensure_index",
                "from pandas.core.dtypes.common import is_object_dtype",
                "from pandas.core.dtypes.cast import find_common_type",
                "from pandas.core.indexes.interval import IntervalIndex, IntervalMixin, InvalidIndexError",
                "from pandas.core.dtypes.common import ensure_platform_int",
                "from pandas import Index",
                "import numpy as np"
            ]
        }
    ]
}