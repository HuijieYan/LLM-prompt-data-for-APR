{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 0,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 25,
            "start_line": 21,
            "file_name": "keras/applications/imagenet_utils.py",
            "replace_code": "def _preprocess_numpy_input(x, data_format, mode):\n    if mode == 'tf':\n        x = x.astype('float32') / 127.5 - 1.\n        return x\n\n    if mode == 'torch':\n        x = x.astype('float32') / 255.\n        mean = np.array([0.485, 0.456, 0.406], dtype='float32')\n        std = np.array([0.229, 0.224, 0.225], dtype='float32')\n    else:\n        if data_format == 'channels_first':\n            if x.ndim == 3:\n                x = x[:, ::-1, ...]\n            else:\n                x = x[:, :, ::-1, ...]\n        else:\n            x = x[..., ::-1]  # 'RGB'->'BGR'\n        mean = np.array([103.939, 116.779, 123.68], dtype='float32')\n        std = None\n\n    # Zero-center by mean pixel\n    x = x.astype('float32')\n    if data_format == 'channels_first':\n        x -= mean.reshape(1, 3, 1, 1)\n        if std is not None:\n            x /= std.reshape(1, 3, 1, 1)\n    else:\n        x -= mean\n        if std is not None:\n            x /= std\n\n    return x",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}