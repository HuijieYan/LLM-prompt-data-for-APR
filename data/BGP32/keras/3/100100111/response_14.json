{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n\n    if input_tensors is None:\n        input_layers = [Input(batch_shape=layer.batch_input_shape, dtype=layer.dtype,\n                              sparse=layer.sparse, name=layer.name) for layer in model._input_layers]\n        input_tensors = input_layers\n    else:\n        input_tensors = to_list(input_tensors)\n        for i, x in enumerate(input_tensors):\n            if not K.is_keras_tensor(x):\n                name = model._input_layers[i].name\n                input_tensors[i] = Input(tensor=x, name='input_wrapper_for_' + name)\n\n    layer_map = {}\n    tensor_map = {}\n    \n    for original_layer, new_layer in zip(model._input_layers, input_tensors):\n        layer_map[original_layer] = new_layer\n        \n    for depth in range(len(model._nodes_by_depth)):\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            layer = node.outbound_layer\n            \n            if layer not in layer_map:\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n            else:\n                new_layer = layer_map[layer]\n                if isinstance(layer, InputLayer):\n                    continue\n\n            reference_input_tensors = node.input_tensors\n            computed_data = [tensor_map[x] for x in reference_input_tensors if x in tensor_map]\n            \n            if len(computed_data) == len(reference_input_tensors):\n                kwargs = node.arguments if node.arguments else {}\n                computed_tensors, computed_masks = zip(*computed_data) if computed_data else ([], [])\n\n                try:\n                    outputs = to_list(layer(computed_tensors, **kwargs))\n                    if has_arg(layer.call, 'mask'):\n                        if 'mask' not in kwargs:\n                            kwargs['mask'] = computed_masks\n                        output_masks = to_list(layer.compute_mask(computed_tensors, computed_masks))\n                    else:\n                        output_masks = [None] * len(outputs)\n                    for x, y, mask in zip(node.output_tensors, outputs, output_masks):\n                        tensor_map[x] = (y, mask)\n                except ValueError:\n                    pass\n\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}