{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    layer_map = {}\n    tensor_map = {}\n    \n    if input_tensors is None:\n        input_tensors = [Input(shape=layer.input.shape[1:]) for layer in model.layers if isinstance(layer, InputLayer)]\n    \n    for i, layer in enumerate(model.layers):\n        if isinstance(layer, InputLayer):\n            layer_map[layer] = input_tensors[i]\n        else:\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n\n    for node in topology_in_order(model):\n        inbound_layers = node.inbound_layers\n        inbound_nodes = node.inbound_nodes\n        \n        if not all(layer in layer_map for layer in inbound_layers):\n            continue\n        \n        computed_tensors = [tensor_map[node.outbound_layer][0] for node in inbound_nodes]\n        kwargs = {key: value for key, value in node.arguments.items()}\n        \n        computed_tensor = computed_tensors[0]\n        if has_arg(node.outbound_layer.call, 'mask'):\n            kwargs['mask'] = tensor_map[node.outbound_layer][1]\n        \n        output_tensors = to_list(node.outbound_layer(computed_tensor, **kwargs))\n        output_masks = to_list(node.outbound_layer.compute_mask(computed_tensor, tensor_map[node.outbound_layer][1]))\n        \n        for i, output_node in enumerate(node.output_nodes):\n            for j, tensor in enumerate(output_node.output_tensors):\n                tensor_map[tensor] = (output_tensors[j], output_masks[j])\n    \n    output_tensors = [tensor_map[tensor][0] for tensor in model.outputs]\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}