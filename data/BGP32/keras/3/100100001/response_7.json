{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument '\n                         'to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument '\n                         'to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    \n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [Input(batch_shape=layer.output_shape[1:]) for layer in model.layers if getattr(layer, '_keras_history', None)]\n    \n    for original_layer, new_layer in zip(model.layers, input_tensors):\n        layer_map[original_layer._keras_history[0]] = new_layer\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)\n\n    for layer in model.layers:\n        refer_input_tensors = [tensor_map[x][0] for x in layer._inbound_nodes[0].input_tensors]\n        computed_data = [(tensor_map[x][0], tensor_map[x][1]) for x in refer_input_tensors if x in tensor_map]\n        \n        computed_tensors, computed_masks = zip(*computed_data)\n        \n        kwargs = layer._inbound_nodes[0].arguments if layer._inbound_nodes and layer._inbound_nodes[0].arguments else {}\n\n        out_tensors = layer.compute_output_shape(layer.input_shape).as_list()\n        computed_data = Input(shape=out_tensors[1:])(computed_tensors[0])\n\n        tensor_map[layer._keras_history[0]] = (computed_data, None)\n\n    output_tensors = []\n    \n    for output in model.outputs:\n        assert output in tensor_map, 'Could not compute output ' + str(output)\n        computed_tensor, _ = tensor_map[output]\n        output_tensors.append(computed_tensor)\n    \n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}