{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n    \n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    \n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [Input(batch_shape=layer.batch_input_shape,\n                                dtype=layer.dtype,\n                                sparse=layer.sparse,\n                                name=layer.name) for layer in model._input_layers]\n    \n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n    \n    for layer in model.layers:\n        new_layer = layer.__class__.from_config(layer.get_config())\n        layer_map[layer] = new_layer\n    \n    for layer in model.layers:\n        if isinstance(layer, InputLayer):\n            continue\n        \n        reference_input_tensors = layer.input\n        computed_data = []  # List of tuples (input, mask).\n        for x in reference_input_tensors:\n            if x in tensor_map:\n                computed_data.append(tensor_map[x])\n        \n        if len(computed_data) == len(reference_input_tensors):\n            kwargs = layer.get_config()\n            computed_tensors = [x[0] for x in computed_data]\n            if len(computed_data) == 1:\n                output_tensors = to_list(layer(computed_tensors[0], **kwargs))\n            else:\n                output_tensors = to_list(layer(computed_tensors, **kwargs))\n            for x, y in zip(layer.output, output_tensors):\n                tensor_map[x] = (y, None)\n    \n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    \n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}