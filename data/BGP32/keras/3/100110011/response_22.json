{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead: ', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    if input_tensors is None:\n        input_tensors = [Input(shape=layer.input_shape[1:], name=layer.name) for layer in model.layers if isinstance(layer, InputLayer)]\n    else:\n        input_tensors = to_list(input_tensors)\n\n    for layer in model.layers:\n        if isinstance(layer, InputLayer):\n            layer_map[layer] = layer\n        else:\n            config = layer.get_config()\n            new_layer = layer.__class__.from_config(config)  # Clone layer\n            layer_map[layer] = new_layer\n\n    for node in model._nodes_by_depth.values():\n        for node_id, node_data in node.items():\n            outbound_layer = node_data['outbound_layer']\n            if outbound_layer in layer_map:\n                outbound_layer = layer_map[outbound_layer]\n\n            inbound_tensors = [tensor_map[tensor] for tensor in node_data['input_tensors']]\n\n            if len(inbound_tensors) == len(node_data['input_tensors']):\n                kwargs = node_data.get('arguments', {})\n                output_tensors = to_list(outbound_layer(inbound_tensors, **kwargs))\n\n                for idx, output_tensor in enumerate(node_data['output_tensors']):\n                    tensor_map[output_tensor] = output_tensors[idx]\n\n    outputs = []\n    for node_id, output_tensors in tensor_map.items():\n        if node_id in model.outputs:\n            outputs.append(output_tensors)\n\n    return Model(inputs=input_tensors, outputs=outputs, name=model.name)",
            "import_list": []
        }
    ]
}