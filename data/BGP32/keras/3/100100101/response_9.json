{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  \n    tensor_map = {}\n    new_input_layers = []\n    input_tensors = input_tensors if input_tensors is not None else []\n    for layer in model.layers:\n        new_layer = layer.__class__.from_config(layer.get_config())\n        layer_map[layer] = new_layer\n        if isinstance(layer, InputLayer):\n            new_input_layers.append(new_layer)\n        tensor_map[layer.output] = new_layer.output\n\n    for layer in model.layers:\n        if not isinstance(layer, InputLayer):\n            new_layer = layer_map[layer]\n            for node in layer._inbound_nodes:\n                input_tensors = [tensor_map[x] for x in node.input_tensors]\n                output_tensors = new_layer(input_tensors)\n                if not isinstance(output_tensors, list):\n                    output_tensors = [output_tensors]\n                for i, input_tensor in enumerate(node.input_tensors):\n                    tensor_map[input_tensor] = output_tensors[i]\n    \n    inputs = [tensor_map[x] for x in model.inputs]\n    outputs = [tensor_map[x] for x in model.outputs]\n    return Model(inputs=inputs, outputs=outputs, name=model.name)",
            "import_list": []
        }
    ]
}