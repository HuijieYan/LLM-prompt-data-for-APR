{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model: keras.Model, input_tensors: List[tf.Tensor] = None) -> keras.Model:\n    if not isinstance(model, keras.Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [Input(batch_shape=layer.batch_input_shape,\n                                dtype=layer.dtype,\n                                sparse=layer.sparse,\n                                name=layer.name) for layer in model._input_layers]\n        for original, cloned in zip(model._input_layers, input_tensors):\n            layer_map[original] = cloned\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    for depth in sorted(model._nodes_by_depth.keys(), reverse=True):\n        for node in model._nodes_by_depth[depth]:\n            layer = node.outbound_layer\n\n            if layer not in layer_map:\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n                layer = new_layer\n            else:\n                layer = layer_map[layer]\n                if isinstance(layer, InputLayer):\n                    continue\n\n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n\n            computed_data = [(tensor_map[x][0], tensor_map[x][1]) for x in reference_input_tensors if x in tensor_map]\n\n            if len(computed_data) == len(reference_input_tensors):\n                kwargs = node.arguments if node.arguments else {}\n                computed_tensors = [x[0] for x in computed_data]\n                if len(computed_data) == 1:\n                    computed_tensors = computed_tensors[0]\n                if has_arg(layer.call, 'mask'):\n                    if 'mask' not in kwargs:\n                        kwargs['mask'] = [x[1] for x in computed_data if x[1] is not None]\n\n                output_tensors = to_list(layer(computed_tensors, **kwargs))\n                output_masks = [layer.compute_mask(computed_tensors, mask) if mask is not None else None\n                                for computed_tensors, mask in zip(computed_tensors, [x[1] for x in computed_data])]\n                \n                for x, y, mask in zip(reference_output_tensors, output_tensors, output_masks):\n                    tensor_map[x] = (y, mask)\n\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return keras.Model(input_tensors, output_tensors, name=model.name)",
            "import_list": [
                "import tensorflow as tf",
                "from tensorflow import keras",
                "from tensorflow.keras import backend as K",
                "from tensorflow.keras.engine.input_layer import Input",
                "from tensorflow.keras.engine.engine import Node",
                "from typing import List"
            ]
        }
    ]
}