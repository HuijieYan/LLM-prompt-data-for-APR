{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got:', model)\n    \n    layer_map = {}\n    tensor_map = {}\n    \n    for node in model._nodes:\n        inbound_layers = [l for l in node.inbound_layers if l]\n        if any([l not in tensor_map and l not in layer_map for l in inbound_layers]):\n            continue\n        \n        for layer in inbound_layers:\n            if layer not in layer_map:\n                cloned_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = cloned_layer\n        \n        computed_data = [(tensor_map[x][0], None) if x in tensor_map else (layer_map[x], None) for x in inbound_layers]\n        \n        if all([data[0] is not None for data in computed_data]):\n            kwargs = node.arguments if node.arguments else {}\n            \n            if len(computed_data) == 1:\n                computed_tensor = computed_data[0][0]\n                layer_output = layer(computed_tensor, **kwargs)\n                if isinstance(layer_output, list):\n                    computed_tensors = layer_output\n                else:\n                    computed_tensors = [layer_output]\n            else:\n                computed_tensors = [x[0] for x in computed_data]\n                layer_output = layer(computed_tensors, **kwargs)\n                computed_tensors = layer_output\n            \n            if isinstance(layer_output, list):\n                output_tensors = layer_output\n            else:\n                output_tensors = [layer_output]\n            \n            for x, y in zip(node.input_tensors, output_tensors):\n                tensor_map[x] = (y, None)\n    \n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(model.inputs, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}