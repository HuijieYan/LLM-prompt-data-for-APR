{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got', model)\n\n    layer_map = {}  # Cache for created layers\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    # Retrieve existing input layers or create new ones\n    input_layers = []\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.batch_input_shape,\n                               dtype=layer.dtype,\n                               sparse=layer.sparse,\n                               name=layer.name) for layer in model._input_layers]\n\n    for orig_layer, input_tensor in zip(model._input_layers, input_tensors):\n        layer_map[orig_layer] = input_tensor\n\n    for orig_tensor, input_tensor in zip(model.inputs, input_tensors):\n        tensor_map[orig_tensor] = (input_tensor, None)  # tensor, mask\n\n    # Iterated over every node in the reference model, in depth order\n    depth_keys = list(model._nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n\n    for depth in depth_keys:\n        for node in model._nodes_by_depth[depth]:\n            layer = node.outbound_layer\n            \n            # Get or create the layer\n            if layer not in layer_map:\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n\n            # Gather inputs to call the new layer\n            input_tensors = [tensor_map[x][0] for x in node.input_tensors]\n\n            # Call the layer and update tensor_map\n            kwargs = {} if not node.arguments else node.arguments\n            output_tensors = to_list(layer(*input_tensors, **kwargs))\n\n            for orig_tensor, output_tensor in zip(node.output_tensors, output_tensors):\n                tensor_map[orig_tensor] = (output_tensor, None)\n\n    # Check that all model outputs have been computed\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n\n    # Return the new cloned model\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}