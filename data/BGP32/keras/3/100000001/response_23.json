{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}\n    tensor_map = {}\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.input_shape[1:], dtype=layer.input.dtype) for layer in model.layers]\n\n    for i, model_input in enumerate(model.inputs):\n        if not K.is_keras_tensor(input_tensors[i]):\n            name = model_input.name\n            input_tensor = Input(tensor=input_tensors[i], name='input_wrapper_for_' + name)\n            tensor_map[model_input] = (input_tensor, None)\n            layer_map[model._input_layers[i]] = input_tensor._keras_history[0]\n        else:\n            tensor_map[model_input] = (input_tensors[i], None)\n\n    for layer in model.layers:\n        if layer not in layer_map:\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n\n        layer_obj = layer_map[layer]\n        for node in layer._inbound_nodes:\n            inbound_tensors = [tensor_map[x][0] for x in node.input_tensors]\n            node_arguments = node.arguments if node.arguments else {}\n\n            if len(inbound_tensors) == 1:\n                output_tensors = to_list(layer_obj(inbound_tensors[0], **node_arguments))\n            else:\n                output_tensors = to_list(layer_obj(inbound_tensors, **node_arguments))\n\n            for x, y in zip(node.output_tensors, output_tensors):\n                tensor_map[x] = (y, None)\n\n    output_tensors = [tensor_map[model_output][0] for model_output in model.outputs]\n    return Model([tensor_map[input][0] for input in model.inputs], output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}