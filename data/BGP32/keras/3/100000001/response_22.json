{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    \n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [Input(batch_shape=layer.batch_input_shape, dtype=layer.dtype, sparse=layer.sparse, name=layer.name)\n                         for layer in model._input_layers]\n    else:\n        # Make sure that all input tensors come from a Keras layer.\n        input_tensors = [Input(tensor=x, name=f'input_wrapper_for_{model._input_layers[i].name}')\n                         if not K.is_keras_tensor(x) else x\n                         for i, x in enumerate(to_list(input_tensors))]\n\n    for original_layer, cloned_layer in zip(model._input_layers, input_tensors):\n        layer_map[original_layer] = cloned_layer\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    for depth in sorted(model._nodes_by_depth.keys(), reverse=True):\n        for node in model._nodes_by_depth[depth]:\n            layer = node.outbound_layer\n            if layer not in layer_map:\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n            else:\n                new_layer = layer_map[layer]\n                if isinstance(new_layer, InputLayer):\n                    continue\n            \n            computed_data = [(tensor_map[x] if x in tensor_map else None) for x in node.input_tensors]\n            if all(computed_data):\n                kwargs = node.arguments if node.arguments else {}\n                computed_tensors, computed_masks = zip(*computed_data)\n                kwargs['mask'] = computed_masks if has_arg(new_layer.call, 'mask') and 'mask' not in kwargs else None\n                output_tensors = to_list(new_layer(computed_tensors, **kwargs))\n                output_masks = to_list(new_layer.compute_mask(computed_tensors, computed_masks))\n                for output_tensor, reference_output_tensor, output_mask in zip(output_tensors, node.output_tensors, output_masks):\n                    tensor_map[reference_output_tensor] = (output_tensor, output_mask)\n\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    \n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}