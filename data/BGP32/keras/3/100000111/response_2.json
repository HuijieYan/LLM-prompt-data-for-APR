{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}\n    tensor_map = {}\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_layers = []\n        original_input_layers = model._input_layers.copy()\n        for layer in original_input_layers:\n            input_tensor = Input(batch_shape=layer.batch_input_shape,\n                                 dtype=layer.dtype,\n                                 sparse=layer.sparse,\n                                 name=layer.name)\n            input_layers.append(input_tensor)\n            newly_created_input_layer = input_tensor._keras_history[0]\n            layer_map[layer] = newly_created_input_layer\n            tensor_map[layer.output] = (input_tensor, None)\n    else:\n        input_tensors = to_list(input_tensors)\n        _input_tensors = []\n        for i, tensor in enumerate(input_tensors):\n            if not K.is_keras_tensor(tensor):\n                original_layer = model._input_layers[i]\n                input_tensor = Input(tensor=tensor, name='input_wrapper_for_' + original_layer.name)\n                _input_tensors.append(input_tensor)\n                newly_created_layer = input_tensor._keras_history[0]\n                layer_map[original_layer] = newly_created_layer\n                tensor_map[model.inputs[i]] = (input_tensor, None)\n            else:\n                _input_tensors.append(tensor)\n        input_tensors = _input_tensors\n\n    for output_tensor in model.outputs:\n        assert output_tensor in tensor_map, 'Could not compute output ' + str(output_tensor)\n\n    return Model(input_tensors, [tensor_map[tensor][0] for tensor in model.outputs], name=model.name)",
            "import_list": []
        }
    ]
}