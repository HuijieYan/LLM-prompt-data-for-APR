{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  \n    tensor_map = {}  \n\n    if input_tensors is None:\n        input_layers = []\n        input_tensors = []\n        \n        for layer in model._input_layers:\n            input_tensor = Input(batch_shape=layer.batch_input_shape,\n                                 dtype=layer.dtype,\n                                 sparse=layer.sparse,\n                                 name=layer.name)\n\n            input_layers.append(layer)\n            input_tensors.append(input_tensor)\n\n            layer_map[layer] = input_tensor\n            tensor_map[layer.output] = (input_tensor, None)\n\n        for idx, layer in enumerate(model._input_layers):\n            if idx < len(input_layers):\n                layer_map[layer] = input_layers[idx]\n\n    else:\n        input_tensors = to_list(input_tensors)\n        new_input_tensors = []\n        \n        for i, x in enumerate(input_tensors):\n            if K.is_keras_tensor(x):\n                new_input_tensors.append(x)\n\n            else:\n                name = model._input_layers[i].name\n                input_tensor = Input(tensor=x,\n                                     name='input_wrapper_for_' + name)\n\n                new_input_tensors.append(input_tensor)\n                layer_map[x] = input_tensor\n                tensor_map[x] = (input_tensor, None)\n\n        input_tensors = new_input_tensors\n\n    for x in model.inputs:\n        tensor_map[x] = (layer_map[x], None)\n\n    nodes_depth = sorted(model._nodes_by_depth.keys(), reverse=True)\n\n    for depth in nodes_depth:\n        nodes = model._nodes_by_depth[depth]\n\n        for node in nodes:\n            layer = node.outbound_layer\n\n            if layer not in layer_map:\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n            else:\n                new_layer = layer_map[layer]\n\n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n\n            computed_data = []\n            \n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n\n            if len(computed_data) == len(reference_input_tensors):\n                kwargs = node.arguments if node.arguments else {}\n                \n                computed_tensors = [x[0] for x in computed_data]\n                computed_masks = [x[1] for x in computed_data]\n                if 'mask' not in kwargs and has_arg(new_layer.call, 'mask'):\n                    kwargs['mask'] = computed_masks\n\n                output_tensors = to_list(new_layer(computed_tensors, **kwargs))\n                output_masks = to_list(new_layer.compute_mask(computed_tensors, computed_masks))\n\n                for idx, x in enumerate(reference_output_tensors):\n                    tensor_map[x] = (output_tensors[idx], output_masks[idx])\n\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    \n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}