{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n        \n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    input_layers = []\n    input_tensor_map = {}\n    \n    if input_tensors is None:\n        for layer in model._input_layers:\n            new_input = Input(batch_shape=layer.batch_input_shape, dtype=layer.dtype, sparse=layer.sparse, name=layer.name)\n            input_layers.append(new_input)\n            input_tensor_map[layer] = new_input\n    else:\n        for x in to_list(input_tensors):\n            if not K.is_keras_tensor(x):\n                name = model._input_layers[len(input_layers)].name\n                new_input = Input(tensor=x, name='input_wrapper_for_' + name)\n                input_layers.append(new_input)\n                input_tensor_map[model._input_layers[len(input_layers)]] = new_input\n            else:\n                input_layers.append(x)\n    \n    layer_map = {}\n    for layer in model.layers:\n        new_layer = layer.__class__.from_config(layer.get_config())\n        layer_map[layer] = new_layer\n\n    tensor_map = {}\n    for orig_input, new_input in zip(model._input_layers, input_layers):\n        tensor_map[orig_input.output] = new_input\n    \n    for layer in model.layers:\n        if layer not in layer_map:\n            raise ValueError('Layer not found in layer map:', layer)\n        else:\n            new_layer = layer_map[layer]\n            for node in layer._inbound_nodes:\n                input_tensors = [tensor_map[tensor] for tensor in node.input_tensors]\n                output_tensors = new_layer(input_tensors)\n                tensor_map.update(zip(node.output_tensors, output_tensors))\n    \n    output_tensors = [tensor_map[output] for output in model.outputs]\n    \n    cloned_model = Model(input_layers, output_tensors, name=model.name)\n    \n    return cloned_model",
            "import_list": []
        }
    ]
}