{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    layer_map = {}  # Cache for created layers\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    input_layers = []\n    \n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.batch_input_shape[1:], dtype=layer.dtype, sparse=layer.sparse,\n                               name=layer.name) for layer in model._input_layers]\n        for original, cloned in zip(model._input_layers, input_tensors):\n            layer_map[original] = cloned\n    else:\n        input_tensors = to_list(input_tensors)\n        for i, x in enumerate(input_tensors):\n            input_tensor = Input(tensor=x, name='input_wrapper_for_' + model._input_layers[i].name)\n            input_layers.append(input_tensor)\n            layer_map[model._input_layers[i]] = input_tensor\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)\n        \n    for depth in sorted(model._nodes_by_depth.keys(), reverse=True):\n        for node in model._nodes_by_depth[depth]:\n            layer = node.outbound_layer\n\n            if layer not in layer_map:\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n\n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n\n            computed_data = []\n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n\n            if len(computed_data) == len(reference_input_tensors):\n                if node.arguments:\n                    kwargs = node.arguments\n                else:\n                    kwargs = {}\n\n                computed_tensors, computed_masks = zip(*computed_data)\n                if 'mask' in kwargs and len(computed_data) == 1:\n                    kwargs['mask'] = computed_masks[0]\n\n                output_tensors = to_list(layer(computed_tensors, **kwargs))\n                \n                for x, y in zip(reference_output_tensors, output_tensors):\n                    tensor_map[x] = (y, None)\n\n    output_tensors = []\n    for x in model.outputs:\n        if x not in tensor_map:\n            raise ValueError('Could not compute output ' + str(x))\n        tensor, _ = tensor_map[x]\n        output_tensors.append(tensor)\n    \n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}