{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  \n    tensor_map = {}  \n\n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.input_shape[1:]) for layer in model._input_layers]\n    else:\n        input_tensors = to_list(input_tensors)\n\n    for original_input, input_tensor in zip(model._input_layers, input_tensors):\n        layer_map[original_input] = input_tensor\n        tensor_map[original_input.output] = input_tensor\n\n    for depth in sorted(model._nodes_by_depth.keys(), reverse=True):\n        for node in model._nodes_by_depth[depth]:\n            inbound_tensors = [tensor_map[x] for x in node.input_tensors]\n            kwargs = node.arguments or {}\n            layer = node.outbound_layer\n\n            if len(inbound_tensors) == 1:\n                computed_data = [(inbound_tensors[0], None)]\n            else:\n                computed_data = [(x, None) for x in inbound_tensors]\n\n            if all(x in tensor_map for x in node.input_tensors):\n                if len(computed_data) == 1:\n                    computed_tensor, computed_mask = computed_data[0]\n                else:\n                    computed_tensors, computed_masks = zip(*computed_data)\n                output_tensors = to_list(layer(inbound_tensors, **kwargs))\n                tensor_map.update(zip(node.output_tensors, output_tensors))\n\n    output_tensors = [tensor_map[x] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}