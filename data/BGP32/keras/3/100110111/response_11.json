{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1,
                "8": 1,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    layer_map = {}\n    tensor_map = {}\n    model_inputs = model.inputs\n\n    for original_input, input_tensor in zip(model._input_layers, input_tensors or model_inputs):\n        tensor_map[original_input] = (input_tensor, None)\n\n    for node in model.nodes_by_depth:\n        outbound_layer = node.outbound_layer\n\n        if outbound_layer not in layer_map:\n            new_layer = outbound_layer.__class__.from_config(outbound_layer.get_config())\n            layer_map[outbound_layer] = new_layer\n        outbound_layer = layer_map[outbound_layer]\n\n        reference_input_tensors = node.input_tensors\n        reference_output_tensors = node.output_tensors\n\n        computed_data = []\n        for x in reference_input_tensors:\n            if x in tensor_map:\n                computed_data.append(tensor_map[x])\n\n        if len(computed_data) == len(reference_input_tensors):\n            kwargs = node.arguments or {}\n            output_tensors = []\n            if len(computed_data) == 1:\n                computed_tensor, computed_mask = computed_data[0]\n                if hasattr(outbound_layer, 'compute_mask'):\n                    computed_mask = outbound_layer.compute_mask(computed_tensor, computed_mask)\n                    kwargs['mask'] = computed_mask\n                output_tensors = to_list(outbound_layer(computed_tensor, **kwargs))\n            else:\n                computed_tensors, computed_masks = zip(*computed_data)\n                if hasattr(outbound_layer, 'compute_mask'):\n                    computed_masks = outbound_layer.compute_mask(computed_tensors, computed_masks)\n                    kwargs['mask'] = computed_masks\n                output_tensors = to_list(outbound_layer(computed_tensors, **kwargs))\n\n            for x, y in zip(reference_output_tensors, output_tensors):\n                tensor_map[x] = (y, None)\n\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(input_tensors or model_inputs, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}