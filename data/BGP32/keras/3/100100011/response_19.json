{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    layer_map = {}\n    tensor_map = {}\n    if input_tensors is None:\n        input_layers = [Input(batch_shape=layer.batch_input_shape, dtype=layer.dtype, sparse=layer.sparse, name=layer.name)\n                        for layer in model._input_layers]\n        input_tensors = input_layers\n\n        for original, cloned in zip(model._input_layers, input_layers):\n            layer_map[original] = cloned\n    else:\n        input_tensors = to_list(input_tensors)\n        new_input_tensors = []\n\n        for i, x in enumerate(input_tensors):\n            if not K.is_keras_tensor(x):\n                name = model._input_layers[i].name\n                input_tensor = Input(tensor=x, name='input_wrapper_for_' + name)\n                new_input_tensors.append(input_tensor)\n\n                original_input_layer = x._keras_history[0]\n                newly_created_input_layer = input_tensor._keras_history[0]\n                layer_map[original_input_layer] = newly_created_input_layer\n            else:\n                new_input_tensors.append(x)\n\n        input_tensors = new_input_tensors\n\n    for orig_input, new_input in zip(model.inputs, input_tensors):\n        tensor_map[orig_input] = (new_input, None)\n\n    for depth in reversed(range(len(model._nodes_by_depth))):\n        for node in model._nodes_by_depth[depth]:\n            layer = node.outbound_layer\n\n            if layer not in layer_map:\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n            else:\n                new_layer = layer_map[layer]\n                if isinstance(new_layer, InputLayer):\n                    continue\n\n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n            computed_data = [(tensor_map[x][0], tensor_map[x][1]) for x in reference_input_tensors if x in tensor_map]\n\n            if len(computed_data) == len(reference_input_tensors):\n                kwargs = node.arguments if node.arguments else {}\n                computed_tensors, computed_masks = zip(*computed_data) if computed_data else ([], [])\n                \n                if has_arg(new_layer.call, 'mask'):\n                    kwargs['mask'] = computed_masks if computed_masks and all(mask is not None for mask in computed_masks) else None\n\n                output_tensors = to_list(new_layer(computed_tensors, **kwargs))\n                \n                if has_arg(new_layer.call, 'mask'):\n                    output_masks = to_list(new_layer.compute_mask(computed_tensors, computed_masks))\n                else:\n                    output_masks = [None] * len(output_tensors)\n\n                for x, y, mask in zip(reference_output_tensors, output_tensors, output_masks):\n                    tensor_map[x] = (y, mask)\n\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    \n    for x in model.outputs:\n        if x not in tensor_map:\n            raise ValueError('Could not compute output ' + str(x))\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}