{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    input_layers = model.input_layers\n    output_layers = model.output_layers\n\n    layer_map = {}  \n    tensor_map = {}  \n\n    input_tensors = to_list(input_tensors) if input_tensors is not None else input_layers\n\n    for x, y in zip(input_layers, input_tensors):\n        tensor_map[x] = (y, None)\n\n    for output_layer in output_layers:\n        # Get or create layer.\n        if output_layer not in layer_map:\n            # Clone layer.\n            new_layer = output_layer.__class__.from_config(output_layer.get_config())\n            layer_map[output_layer] = new_layer\n        else:\n            # Reuse previously cloned layer.\n            new_layer = layer_map[output_layer]\n\n        layer_tensors = []\n        for input_layer in output_layer._inbound_nodes[0].input_tensors:\n            tensor, mask = tensor_map[input_layer]\n            layer_tensors.append(tensor)\n\n        kwargs = output_layer._inbound_nodes[0].arguments if output_layer._inbound_nodes else {}\n\n        output_tensor = new_layer(layer_tensors[0] if len(layer_tensors) == 1 else layer_tensors, **kwargs)\n        tensor_map[output_layer] = (output_tensor, None)\n\n    output_tensors = [tensor_map[output_layer][0] for output_layer in output_layers]\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}