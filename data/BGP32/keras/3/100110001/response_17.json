{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n    \n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    \n    if input_tensors is None:\n        input_tensors = [Input(shape=layer.output.shape[1:]) for layer in model.layers if isinstance(layer, InputLayer)]\n        input_tensors += [Input(batch_shape=layer.batch_input_shape[1:], dtype=layer.dtype, name=layer.name) for layer in model.layers if isinstance(layer, InputLayer)]\n    \n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n    \n    for layer in model.layers:\n        if isinstance(layer, InputLayer):\n            continue\n        \n        new_layer = layer.__class__.from_config(layer.get_config())\n        layer_map[layer] = new_layer\n    \n    for node in model._nodes_by_depth.values():\n        for layer in node:\n            new_layer = layer_map[layer]\n            reference_input_tensors = layer._inbound_nodes[0].input_tensors\n            \n            computed_data = [(tensor_map[x][0], tensor_map[x][1]) for x in reference_input_tensors if x in tensor_map]\n            \n            if len(computed_data) == len(reference_input_tensors):\n                kwargs = layer.get_config()\n                computed_tensors, computed_masks = zip(*computed_data)\n                if has_arg(new_layer.call, 'mask'):\n                    kwargs['mask'] = [mask for tensor, mask in computed_data]\n                outputs = new_layer(computed_tensors, **kwargs)\n                for i, x in enumerate(layer._inbound_nodes[0].output_tensors):\n                    tensor_map[x] = (outputs[i], None)\n    \n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}