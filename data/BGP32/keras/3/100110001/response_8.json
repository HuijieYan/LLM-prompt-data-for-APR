{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    \n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.input_shape, dtype=layer.input_dtype, name=layer.name) \n                         for layer in model._input_layers]\n\n    for orig_input, input_tensor in zip(model._input_layers, input_tensors):\n        layer_map[orig_input] = input_tensor\n\n    for depth in range(len(model._nodes_by_depth)):\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            inbound_layers = [layer_map[in_node.outbound_layer] for in_node in node.inbound_nodes]\n            kwargs = node.arguments\n        \n            if len(inbound_layers) == 1:\n                layer = node.outbound_layer.__class__.from_config(node.outbound_layer.get_config())\n                output_tensor = layer(inbound_layers[0], **kwargs)\n                layer_map[node.outbound_layer] = layer\n                tensor_map[node.output_tensors[0]] = (output_tensor, None)\n            else:\n                input_tensors = [tensor_map[in_node.outbound_layer][0] for in_node in node.inbound_nodes]\n                layer = node.outbound_layer.__class__.from_config(node.outbound_layer.get_config())\n                output_tensor = layer(input_tensors, **kwargs)\n                layer_map[node.outbound_layer] = layer\n                tensor_map[node.output_tensors[0]] = (output_tensor, None)\n    \n    output_tensors = [tensor_map[orig_out_tensor][0] for orig_out_tensor in model.outputs]\n    return Model(inputs=input_tensors, outputs=output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}