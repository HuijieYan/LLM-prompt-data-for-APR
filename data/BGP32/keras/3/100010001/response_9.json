{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_layers = []\n        input_tensors = []\n        for layer in model.inputs:\n            input_tensor = Input(tensor=layer)\n            layer_map[layer] = input_tensor\n            input_tensors.append(input_tensor)\n    else:\n        input_tensors = to_list(input_tensors)\n        for i, x in enumerate(input_tensors):\n            if not K.is_keras_tensor(x):\n                name = model.inputs[i].name\n                input_tensor = Input(tensor=x, name='input_wrapper_for_' + name)\n                layer_map[model.inputs[i]] = input_tensor\n                input_tensors[i] = input_tensor\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)\n\n    for node in model._nodes_by_depth[model._depth]: \n        inbound_layers = node.inbound_layers\n        computed_data = []  # List of tuples (input, mask).\n        for x in node.input_tensors:\n            if x in tensor_map:\n                computed_data.append(tensor_map[x])\n\n        if len(computed_data) == len(node.input_tensors):\n            kwargs = node.arguments if node.arguments else {}\n            if len(computed_data) == 1:\n                computed_tensor, computed_mask = computed_data[0]\n            else:\n                computed_tensors = [x[0] for x in computed_data]\n                computed_masks = [x[1] for x in computed_data]\n                kwargs['mask'] = computed_masks if has_arg(node.outbound_layer.call, 'mask') else None\n\n            output_tensors = to_list(node.outbound_layer(computed_tensors, **kwargs))\n            output_masks = to_list(node.outbound_layer.compute_mask(computed_tensors, computed_masks))\n\n            if len(output_tensors) == 1:\n                output_tensors = output_tensors[0] \n                output_masks = output_masks[0]\n\n            for x, y, mask in zip(node.output_tensors, output_tensors, output_masks):\n                tensor_map[x] = (y, mask)\n\n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(input_tensors, to_list(output_tensors), name=model.name)",
            "import_list": []
        }
    ]
}