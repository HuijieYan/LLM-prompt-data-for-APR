{
    "keras": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 3,
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    \n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n\n    layer_map = {}  \n    tensor_map = {}  \n    \n    if input_tensors is None:\n        input_layers = []\n        input_tensors = []\n        \n        for layer in model.inputs:\n            input_tensor = Input(batch_shape=layer.shape.as_list(),\n                                 dtype=layer.dtype,\n                                 sparse=layer._keras_mask,\n                                 name=layer.name)\n            input_tensors.append(input_tensor)\n\n            newly_created_input_layer = input_tensor._keras_history[0]\n            layer_map[layer] = newly_created_input_layer\n\n        for _original, _cloned in zip(model.inputs, input_tensors):\n            layer_map[_original] = _cloned\n    else:\n        input_tensors = to_list(input_tensors)\n        _input_tensors = []\n        \n        for i, x in enumerate(input_tensors):\n            if not K.is_keras_tensor(x):\n                name = model.inputs[i].name\n                input_tensor = Input(tensor=x, name='input_wrapper_for_' + name)\n                _input_tensors.append(input_tensor)\n                \n                original_input_layer = x._keras_history[0]\n                newly_created_input_layer = input_tensor._keras_history[0]\n                layer_map[original_input_layer] = newly_created_input_layer\n            else:\n                _input_tensors.append(x)\n        \n        input_tensors = _input_tensors\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  \n\n    for layer in model.layers:\n        # clone the layer\n        new_layer = layer.__class__.from_config(layer.get_config())\n        layer_map[layer] = new_layer\n\n    for node in model._nodes:\n        layer = layer_map[node.outbound_layer]\n\n        reference_input_tensors = node.input_tensors\n        reference_output_tensors = node.output_tensors\n\n        computed_data = []\n        for x in reference_input_tensors:\n            if x in tensor_map:\n                computed_data.append(tensor_map[x])\n\n        if len(computed_data) == len(reference_input_tensors):\n            if node.arguments:\n                kwargs = node.arguments\n            else:\n                kwargs = {}\n                \n            computed_tensors = [x[0] for x in computed_data]\n            computed_masks = [x[1] for x in computed_data]\n\n            output_tensors = to_list(layer(computed_tensors, **kwargs))\n            tensor_map[node.outbound_layer] = (output_tensors, None)\n\n    output_tensors = tensor_map[model.output][0]\n\n    return Model(input_tensors, output_tensors, name=model.name)",
            "import_list": []
        }
    ]
}