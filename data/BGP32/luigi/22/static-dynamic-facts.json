{
    "luigi:22": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/luigi_22/luigi/scheduler.py": {
            "buggy_functions": [
                {
                    "function_name": "__init__",
                    "function_code": "def __init__(self, worker_id, last_active=None):\n    self.id = worker_id\n    self.reference = None  # reference to the worker in the real world. (Currently a dict containing just the host)\n    self.last_active = last_active  # seconds since epoch\n    self.started = time.time()  # seconds since epoch\n    self.tasks = set()  # task objects\n    self.info = {}\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 227,
                    "end_line": 233,
                    "variables": {
                        "self.id": [
                            228
                        ],
                        "self": [
                            228,
                            229,
                            230,
                            231,
                            232,
                            233
                        ],
                        "worker_id": [
                            228
                        ],
                        "self.reference": [
                            229
                        ],
                        "self.last_active": [
                            230
                        ],
                        "last_active": [
                            230
                        ],
                        "self.started": [
                            231
                        ],
                        "time.time": [
                            231
                        ],
                        "time": [
                            231
                        ],
                        "self.tasks": [
                            232
                        ],
                        "set": [
                            232
                        ],
                        "self.info": [
                            233
                        ]
                    },
                    "filtered_variables": {
                        "self.id": [
                            228
                        ],
                        "self": [
                            228,
                            229,
                            230,
                            231,
                            232,
                            233
                        ],
                        "worker_id": [
                            228
                        ],
                        "self.reference": [
                            229
                        ],
                        "self.last_active": [
                            230
                        ],
                        "last_active": [
                            230
                        ],
                        "self.started": [
                            231
                        ],
                        "time.time": [
                            231
                        ],
                        "time": [
                            231
                        ],
                        "self.tasks": [
                            232
                        ],
                        "self.info": [
                            233
                        ]
                    },
                    "diff_line_number": 227,
                    "class_data": {
                        "signature": "class Worker(object)",
                        "docstring": "Structure for tracking worker activity and keeping their references.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, worker_id, last_active=None):\n    self.id = worker_id\n    self.reference = None\n    self.last_active = last_active\n    self.started = time.time()\n    self.tasks = set()\n    self.info = {}",
                            "def add_info(self, info):\n    self.info.update(info)",
                            "def update(self, worker_reference):\n    if worker_reference:\n        self.reference = worker_reference\n    self.last_active = time.time()",
                            "def prune(self, config):\n    if self.last_active + config.worker_disconnect_delay < time.time():\n        return True",
                            "def get_pending_tasks(self):\n    return six.moves.filter(lambda task: task.status in [PENDING, RUNNING], self.tasks)",
                            "def is_trivial_worker(self):\n    \"\"\"\n    If it's not an assistant having only tasks that are without\n    requirements\n    \"\"\"\n    if self.assistant:\n        return False\n    return all((not task.resources for task in self.get_pending_tasks()))",
                            "@property\ndef assistant(self):\n    return self.info.get('assistant', False)",
                            "def __str__(self):\n    return self.id"
                        ],
                        "constructor_variables": [
                            "self.id = worker_id",
                            "self.reference = None",
                            "self.last_active = last_active",
                            "self.started = time.time()",
                            "self.tasks = set()",
                            "self.info = {}"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, worker_id, last_active=None)",
                            "add_info(self, info)",
                            "update(self, worker_reference)",
                            "prune(self, config)",
                            "get_pending_tasks(self)",
                            "is_trivial_worker(self)",
                            "assistant(self)",
                            "__str__(self)"
                        ],
                        "class_level_variable_names": [],
                        "constructor_variable_names": [
                            "id",
                            "last_active",
                            "tasks",
                            "started",
                            "reference",
                            "info"
                        ]
                    },
                    "used_imports": [
                        "import time"
                    ],
                    "variable_values": [
                        [
                            {
                                "self.id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.Worker object at 0x7f0429dd8220>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": "123",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.reference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.last_active": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "last_active": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.started": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.info": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.id": {
                                    "variable_value": "123",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.Worker object at 0x7f0429dd8220>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": "123",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.reference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.last_active": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "last_active": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.started": {
                                    "variable_value": "1709218610.1382782",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.tasks": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "self.info": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.Worker object at 0x7f6a2f11b3d0>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": "123",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.reference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.last_active": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "last_active": {
                                    "variable_value": "1709218610.8782065",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.started": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.tasks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.info": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "time.time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.id": {
                                    "variable_value": "123",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<luigi.scheduler.Worker object at 0x7f6a2f11b3d0>",
                                    "variable_type": "Worker",
                                    "variable_shape": null
                                },
                                "worker_id": {
                                    "variable_value": "123",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.reference": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.last_active": {
                                    "variable_value": "1709218610.8782065",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "last_active": {
                                    "variable_value": "1709218610.8782065",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.started": {
                                    "variable_value": "1709218610.884734",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.tasks": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "self.info": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "def fix_time(x):\n    # Backwards compatibility for a fix in Dec 2014. Prior to the fix, pickled state might store datetime objects\n    # Let's remove this function soon\n    if isinstance(x, datetime.datetime):\n        return time.mktime(x.timetuple())\n    else:\n        return x",
                        "signature": "fix_time(x)"
                    },
                    {
                        "code": "def _get_default(x, default):\n    if x is not None:\n        return x\n    else:\n        return default",
                        "signature": "_get_default(x, default)"
                    }
                ],
                "file_scope_classes": [
                    {
                        "class_declaration": "class Scheduler:",
                        "functions": []
                    },
                    {
                        "class_declaration": "class scheduler:",
                        "functions": []
                    },
                    {
                        "class_declaration": "class Failures:",
                        "functions": [
                            {
                                "code": "def __init__(self, window):\n    \"\"\"\n    Initialize with the given window.\n\n    :param window: how long to track failures for, as a float (number of seconds).\n    \"\"\"\n    self.window = window\n    self.failures = collections.deque()\n    self.first_failure_time = None",
                                "signature": "__init__(self, window)"
                            },
                            {
                                "code": "def add_failure(self):\n    \"\"\"\n    Add a failure event with the current timestamp.\n    \"\"\"\n    failure_time = time.time()\n\n    if not self.first_failure_time:\n        self.first_failure_time = failure_time\n\n    self.failures.append(failure_time)",
                                "signature": "add_failure(self)"
                            },
                            {
                                "code": "def num_failures(self):\n    \"\"\"\n    Return the number of failures in the window.\n    \"\"\"\n    min_time = time.time() - self.window\n\n    while self.failures and fix_time(self.failures[0]) < min_time:\n        self.failures.popleft()\n\n    return len(self.failures)",
                                "signature": "num_failures(self)"
                            },
                            {
                                "code": "def clear(self):\n    \"\"\"\n    Clear the failure queue.\n    \"\"\"\n    self.failures.clear()",
                                "signature": "clear(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class Task:",
                        "functions": [
                            {
                                "code": "def __init__(self, task_id, status, deps, resources=None, priority=0, family='', module=None,\n             params=None, disable_failures=None, disable_window=None, disable_hard_timeout=None):\n    self.id = task_id\n    self.stakeholders = set()  # workers ids that are somehow related to this task (i.e. don't prune while any of these workers are still active)\n    self.workers = set()  # workers ids that can perform task - task is 'BROKEN' if none of these workers are active\n    if deps is None:\n        self.deps = set()\n    else:\n        self.deps = set(deps)\n    self.status = status  # PENDING, RUNNING, FAILED or DONE\n    self.time = time.time()  # Timestamp when task was first added\n    self.retry = None\n    self.remove = None\n    self.worker_running = None  # the worker id that is currently running the task or None\n    self.time_running = None  # Timestamp when picked up by worker\n    self.expl = None\n    self.priority = priority\n    self.resources = _get_default(resources, {})\n    self.family = family\n    self.module = module\n    self.params = _get_default(params, {})\n    self.disable_failures = disable_failures\n    self.disable_hard_timeout = disable_hard_timeout\n    self.failures = Failures(disable_window)\n    self.scheduler_disable_time = None",
                                "signature": "__init__(self, task_id, status, deps, resources=None, priority=0, family='', module=None, params=None, disable_failures=None, disable_window=None, disable_hard_timeout=None)"
                            },
                            {
                                "code": "def __repr__(self):\n    return \"Task(%r)\" % vars(self)",
                                "signature": "__repr__(self)"
                            },
                            {
                                "code": "def add_failure(self):\n    self.failures.add_failure()",
                                "signature": "add_failure(self)"
                            },
                            {
                                "code": "def has_excessive_failures(self):\n\n    excessive_failures = False\n\n    if (self.failures.first_failure_time is not None and\n            self.disable_hard_timeout):\n        if (time.time() >= self.failures.first_failure_time +\n                self.disable_hard_timeout):\n            excessive_failures = True\n\n    if self.failures.num_failures() >= self.disable_failures:\n        excessive_failures = True\n\n    return excessive_failures",
                                "signature": "has_excessive_failures(self)"
                            },
                            {
                                "code": "def can_disable(self):\n    return (self.disable_failures is not None or\n            self.disable_hard_timeout is not None)",
                                "signature": "can_disable(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class Worker:",
                        "functions": [
                            {
                                "code": "def __init__(self, worker_id, last_active=None):\n    self.id = worker_id\n    self.reference = None  # reference to the worker in the real world. (Currently a dict containing just the host)\n    self.last_active = last_active  # seconds since epoch\n    self.started = time.time()  # seconds since epoch\n    self.tasks = set()  # task objects\n    self.info = {}",
                                "signature": "__init__(self, worker_id, last_active=None)"
                            },
                            {
                                "code": "def add_info(self, info):\n    self.info.update(info)",
                                "signature": "add_info(self, info)"
                            },
                            {
                                "code": "def update(self, worker_reference):\n    if worker_reference:\n        self.reference = worker_reference\n    self.last_active = time.time()",
                                "signature": "update(self, worker_reference)"
                            },
                            {
                                "code": "def prune(self, config):\n    # Delete workers that haven't said anything for a while (probably killed)\n    if self.last_active + config.worker_disconnect_delay < time.time():\n        return True",
                                "signature": "prune(self, config)"
                            },
                            {
                                "code": "def get_pending_tasks(self):\n    return six.moves.filter(lambda task: task.status in [PENDING, RUNNING],\n                            self.tasks)",
                                "signature": "get_pending_tasks(self)"
                            },
                            {
                                "code": "def is_trivial_worker(self):\n    \"\"\"\n    If it's not an assistant having only tasks that are without\n    requirements\n    \"\"\"\n    if self.assistant:\n        return False\n    return all(not task.resources for task in self.get_pending_tasks())",
                                "signature": "is_trivial_worker(self)"
                            },
                            {
                                "code": "@property\ndef assistant(self):\n    return self.info.get('assistant', False)",
                                "signature": "assistant(self)"
                            },
                            {
                                "code": "def __str__(self):\n    return self.id",
                                "signature": "__str__(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class SimpleTaskState:",
                        "functions": [
                            {
                                "code": "def __init__(self, state_path):\n    self._state_path = state_path\n    self._tasks = {}  # map from id to a Task object\n    self._status_tasks = collections.defaultdict(dict)\n    self._active_workers = {}  # map from id to a Worker object",
                                "signature": "__init__(self, state_path)"
                            },
                            {
                                "code": "def dump(self):\n    state = (self._tasks, self._active_workers)\n    try:\n        with open(self._state_path, 'wb') as fobj:\n            pickle.dump(state, fobj)\n    except IOError:\n        logger.warning(\"Failed saving scheduler state\", exc_info=1)\n    else:\n        logger.info(\"Saved state in %s\", self._state_path)",
                                "signature": "dump(self)"
                            },
                            {
                                "code": "def load(self):\n    if os.path.exists(self._state_path):\n        logger.info(\"Attempting to load state from %s\", self._state_path)\n        try:\n            with open(self._state_path, 'rb') as fobj:\n                state = pickle.load(fobj)\n        except BaseException:\n            logger.exception(\"Error when loading state. Starting from clean slate.\")\n            return\n\n        self._tasks, self._active_workers = state\n        self._status_tasks = collections.defaultdict(dict)\n        for task in six.itervalues(self._tasks):\n            self._status_tasks[task.status][task.id] = task\n\n        # Convert from old format\n        # TODO: this is really ugly, we need something more future-proof\n        # Every time we add an attribute to the Worker class, this code needs to be updated\n        for k, v in six.iteritems(self._active_workers):\n            if isinstance(v, float):\n                self._active_workers[k] = Worker(worker_id=k, last_active=v)\n\n        if any(not hasattr(w, 'tasks') for k, w in six.iteritems(self._active_workers)):\n            # If you load from an old format where Workers don't contain tasks.\n            for k, worker in six.iteritems(self._active_workers):\n                worker.tasks = set()\n            for task in six.itervalues(self._tasks):\n                for worker_id in task.workers:\n                    self._active_workers[worker_id].tasks.add(task)\n    else:\n        logger.info(\"No prior state file exists at %s. Starting with clean slate\", self._state_path)",
                                "signature": "load(self)"
                            },
                            {
                                "code": "def get_active_tasks(self, status=None):\n    if status:\n        for task in six.itervalues(self._status_tasks[status]):\n            yield task\n    else:\n        for task in six.itervalues(self._tasks):\n            yield task",
                                "signature": "get_active_tasks(self, status=None)"
                            },
                            {
                                "code": "def get_running_tasks(self):\n    return six.itervalues(self._status_tasks[RUNNING])",
                                "signature": "get_running_tasks(self)"
                            },
                            {
                                "code": "def get_pending_tasks(self):\n    return itertools.chain.from_iterable(six.itervalues(self._status_tasks[status])\n                                         for status in [PENDING, RUNNING])",
                                "signature": "get_pending_tasks(self)"
                            },
                            {
                                "code": "def get_task(self, task_id, default=None, setdefault=None):\n    if setdefault:\n        task = self._tasks.setdefault(task_id, setdefault)\n        self._status_tasks[task.status][task.id] = task\n        return task\n    else:\n        return self._tasks.get(task_id, default)",
                                "signature": "get_task(self, task_id, default=None, setdefault=None)"
                            },
                            {
                                "code": "def has_task(self, task_id):\n    return task_id in self._tasks",
                                "signature": "has_task(self, task_id)"
                            },
                            {
                                "code": "def re_enable(self, task, config=None):\n    task.scheduler_disable_time = None\n    task.failures.clear()\n    if config:\n        self.set_status(task, FAILED, config)\n        task.failures.clear()",
                                "signature": "re_enable(self, task, config=None)"
                            },
                            {
                                "code": "def set_status(self, task, new_status, config=None):\n    if new_status == FAILED:\n        assert config is not None\n\n    # not sure why we have SUSPENDED, as it can never be set\n    if new_status == SUSPENDED:\n        new_status = PENDING\n\n    if new_status == DISABLED and task.status == RUNNING:\n        return\n\n    if task.status == DISABLED:\n        if new_status == DONE:\n            self.re_enable(task)\n\n        # don't allow workers to override a scheduler disable\n        elif task.scheduler_disable_time is not None:\n            return\n\n    if new_status == FAILED and task.can_disable():\n        task.add_failure()\n        if task.has_excessive_failures():\n            task.scheduler_disable_time = time.time()\n            new_status = DISABLED\n            notifications.send_error_email(\n                'Luigi Scheduler: DISABLED {task} due to excessive failures'.format(task=task.id),\n                '{task} failed {failures} times in the last {window} seconds, so it is being '\n                'disabled for {persist} seconds'.format(\n                    failures=config.disable_failures,\n                    task=task.id,\n                    window=config.disable_window,\n                    persist=config.disable_persist,\n                ))\n    elif new_status == DISABLED:\n        task.scheduler_disable_time = None\n\n    self._status_tasks[task.status].pop(task.id)\n    self._status_tasks[new_status][task.id] = task\n    task.status = new_status",
                                "signature": "set_status(self, task, new_status, config=None)"
                            },
                            {
                                "code": "def prune(self, task, config, assistants):\n    remove = False\n\n    # Mark tasks with no remaining active stakeholders for deletion\n    if not task.stakeholders:\n        if task.remove is None:\n            logger.info(\"Task %r has stakeholders %r but none remain connected -> will remove \"\n                        \"task in %s seconds\", task.id, task.stakeholders, config.remove_delay)\n            task.remove = time.time() + config.remove_delay\n\n    # If a running worker disconnects, tag all its jobs as FAILED and subject it to the same retry logic\n    if task.status == RUNNING and task.worker_running and task.worker_running not in task.stakeholders | assistants:\n        logger.info(\"Task %r is marked as running by disconnected worker %r -> marking as \"\n                    \"FAILED with retry delay of %rs\", task.id, task.worker_running,\n                    config.retry_delay)\n        task.worker_running = None\n        self.set_status(task, FAILED, config)\n        task.retry = time.time() + config.retry_delay\n\n    # Re-enable task after the disable time expires\n    if task.status == DISABLED and task.scheduler_disable_time:\n        if time.time() - fix_time(task.scheduler_disable_time) > config.disable_persist:\n            self.re_enable(task, config)\n\n    # Remove tasks that have no stakeholders\n    if task.remove and time.time() > task.remove:\n        logger.info(\"Removing task %r (no connected stakeholders)\", task.id)\n        remove = True\n\n    # Reset FAILED tasks to PENDING if max timeout is reached, and retry delay is >= 0\n    if task.status == FAILED and config.retry_delay >= 0 and task.retry < time.time():\n        self.set_status(task, PENDING, config)\n\n    return remove",
                                "signature": "prune(self, task, config, assistants)"
                            },
                            {
                                "code": "def inactivate_tasks(self, delete_tasks):\n    # The terminology is a bit confusing: we used to \"delete\" tasks when they became inactive,\n    # but with a pluggable state storage, you might very well want to keep some history of\n    # older tasks as well. That's why we call it \"inactivate\" (as in the verb)\n    for task in delete_tasks:\n        task_obj = self._tasks.pop(task)\n        self._status_tasks[task_obj.status].pop(task)",
                                "signature": "inactivate_tasks(self, delete_tasks)"
                            },
                            {
                                "code": "def get_active_workers(self, last_active_lt=None):\n    for worker in six.itervalues(self._active_workers):\n        if last_active_lt is not None and worker.last_active >= last_active_lt:\n            continue\n        yield worker",
                                "signature": "get_active_workers(self, last_active_lt=None)"
                            },
                            {
                                "code": "def get_assistants(self, last_active_lt=None):\n    return filter(lambda w: w.assistant, self.get_active_workers(last_active_lt))",
                                "signature": "get_assistants(self, last_active_lt=None)"
                            },
                            {
                                "code": "def get_worker_ids(self):\n    return self._active_workers.keys()  # only used for unit tests",
                                "signature": "get_worker_ids(self)"
                            },
                            {
                                "code": "def get_worker(self, worker_id):\n    return self._active_workers.setdefault(worker_id, Worker(worker_id))",
                                "signature": "get_worker(self, worker_id)"
                            },
                            {
                                "code": "def inactivate_workers(self, delete_workers):\n    # Mark workers as inactive\n    for worker in delete_workers:\n        self._active_workers.pop(worker)\n\n    # remove workers from tasks\n    for task in self.get_active_tasks():\n        task.stakeholders.difference_update(delete_workers)\n        task.workers.difference_update(delete_workers)",
                                "signature": "inactivate_workers(self, delete_workers)"
                            },
                            {
                                "code": "def get_necessary_tasks(self):\n    necessary_tasks = set()\n    for task in self.get_active_tasks():\n        if task.status not in (DONE, DISABLED) or \\\n                getattr(task, 'scheduler_disable_time', None) is not None:\n            necessary_tasks.update(task.deps)\n            necessary_tasks.add(task.id)\n    return necessary_tasks",
                                "signature": "get_necessary_tasks(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class CentralPlannerScheduler:",
                        "functions": [
                            {
                                "code": "def __init__(self, config=None, resources=None, task_history_impl=None, **kwargs):\n    \"\"\"\n    Keyword Arguments:\n    :param config: an object of class \"scheduler\" or None (in which the global instance will be used)\n    :param resources: a dict of str->int constraints\n    :param task_history_override: ignore config and use this object as the task history\n    \"\"\"\n    self._config = config or scheduler(**kwargs)\n    self._state = SimpleTaskState(self._config.state_path)\n\n    if task_history_impl:\n        self._task_history = task_history_impl\n    elif self._config.record_task_history:\n        from luigi import db_task_history  # Needs sqlalchemy, thus imported here\n        self._task_history = db_task_history.DbTaskHistory()\n    else:\n        self._task_history = history.NopHistory()\n    self._resources = resources or configuration.get_config().getintdict('resources')  # TODO: Can we make this a Parameter?\n    self._make_task = functools.partial(\n        Task, disable_failures=self._config.disable_failures,\n        disable_hard_timeout=self._config.disable_hard_timeout,\n        disable_window=self._config.disable_window)",
                                "signature": "__init__(self, config=None, resources=None, task_history_impl=None, **kwargs)"
                            },
                            {
                                "code": "def load(self):\n    self._state.load()",
                                "signature": "load(self)"
                            },
                            {
                                "code": "def dump(self):\n    self._state.dump()",
                                "signature": "dump(self)"
                            },
                            {
                                "code": "def prune(self):\n    logger.info(\"Starting pruning of task graph\")\n    remove_workers = []\n    for worker in self._state.get_active_workers():\n        if worker.prune(self._config):\n            logger.info(\"Worker %s timed out (no contact for >=%ss)\", worker, self._config.worker_disconnect_delay)\n            remove_workers.append(worker.id)\n\n    self._state.inactivate_workers(remove_workers)\n\n    assistant_ids = set(w.id for w in self._state.get_assistants())\n    remove_tasks = []\n\n    if assistant_ids:\n        necessary_tasks = self._state.get_necessary_tasks()\n    else:\n        necessary_tasks = ()\n\n    for task in self._state.get_active_tasks():\n        if task.id not in necessary_tasks and self._state.prune(task, self._config, assistant_ids):\n            remove_tasks.append(task.id)\n\n    self._state.inactivate_tasks(remove_tasks)\n\n    logger.info(\"Done pruning task graph\")",
                                "signature": "prune(self)"
                            },
                            {
                                "code": "def update(self, worker_id, worker_reference=None):\n    \"\"\"\n    Keep track of whenever the worker was last active.\n    \"\"\"\n    worker = self._state.get_worker(worker_id)\n    worker.update(worker_reference)",
                                "signature": "update(self, worker_id, worker_reference=None)"
                            },
                            {
                                "code": "def _update_priority(self, task, prio, worker):\n    \"\"\"\n    Update priority of the given task.\n\n    Priority can only be increased.\n    If the task doesn't exist, a placeholder task is created to preserve priority when the task is later scheduled.\n    \"\"\"\n    task.priority = prio = max(prio, task.priority)\n    for dep in task.deps or []:\n        t = self._state.get_task(dep)\n        if t is not None and prio > t.priority:\n            self._update_priority(t, prio, worker)",
                                "signature": "_update_priority(self, task, prio, worker)"
                            },
                            {
                                "code": "def add_task(self, task_id=None, status=PENDING, runnable=True,\n             deps=None, new_deps=None, expl=None, resources=None,\n             priority=0, family='', module=None, params=None,\n             assistant=False, **kwargs):\n    \"\"\"\n    * add task identified by task_id if it doesn't exist\n    * if deps is not None, update dependency list\n    * update status of task\n    * add additional workers/stakeholders\n    * update priority when needed\n    \"\"\"\n    worker_id = kwargs['worker']\n    self.update(worker_id)\n\n    task = self._state.get_task(task_id, setdefault=self._make_task(\n        task_id=task_id, status=PENDING, deps=deps, resources=resources,\n        priority=priority, family=family, module=module, params=params))\n\n    # for setting priority, we'll sometimes create tasks with unset family and params\n    if not task.family:\n        task.family = family\n    if not getattr(task, 'module', None):\n        task.module = module\n    if not task.params:\n        task.params = _get_default(params, {})\n\n    if task.remove is not None:\n        task.remove = None  # unmark task for removal so it isn't removed after being added\n\n    if not (task.status == RUNNING and status == PENDING):\n        # don't allow re-scheduling of task while it is running, it must either fail or succeed first\n        if status == PENDING or status != task.status:\n            # Update the DB only if there was a acctual change, to prevent noise.\n            # We also check for status == PENDING b/c that's the default value\n            # (so checking for status != task.status woule lie)\n            self._update_task_history(task_id, status)\n        self._state.set_status(task, PENDING if status == SUSPENDED else status, self._config)\n        if status == FAILED:\n            task.retry = time.time() + self._config.retry_delay\n\n    if deps is not None:\n        task.deps = set(deps)\n\n    if new_deps is not None:\n        task.deps.update(new_deps)\n\n    if resources is not None:\n        task.resources = resources\n\n    if not assistant:\n        task.stakeholders.add(worker_id)\n\n        # Task dependencies might not exist yet. Let's create dummy tasks for them for now.\n        # Otherwise the task dependencies might end up being pruned if scheduling takes a long time\n        for dep in task.deps or []:\n            t = self._state.get_task(dep, setdefault=self._make_task(task_id=dep, status=UNKNOWN, deps=None, priority=priority))\n            t.stakeholders.add(worker_id)\n\n    self._update_priority(task, priority, worker_id)\n\n    if runnable:\n        task.workers.add(worker_id)\n        self._state.get_worker(worker_id).tasks.add(task)\n\n    if expl is not None:\n        task.expl = expl",
                                "signature": "add_task(self, task_id=None, status=PENDING, runnable=True, deps=None, new_deps=None, expl=None, resources=None, priority=0, family='', module=None, params=None, assistant=False, **kwargs)"
                            },
                            {
                                "code": "def add_worker(self, worker, info, **kwargs):\n    self._state.get_worker(worker).add_info(info)",
                                "signature": "add_worker(self, worker, info, **kwargs)"
                            },
                            {
                                "code": "def update_resources(self, **resources):\n    if self._resources is None:\n        self._resources = {}\n    self._resources.update(resources)",
                                "signature": "update_resources(self, **resources)"
                            },
                            {
                                "code": "def _has_resources(self, needed_resources, used_resources):\n    if needed_resources is None:\n        return True\n\n    available_resources = self._resources or {}\n    for resource, amount in six.iteritems(needed_resources):\n        if amount + used_resources[resource] > available_resources.get(resource, 1):\n            return False\n    return True",
                                "signature": "_has_resources(self, needed_resources, used_resources)"
                            },
                            {
                                "code": "def _used_resources(self):\n    used_resources = collections.defaultdict(int)\n    if self._resources is not None:\n        for task in self._state.get_active_tasks():\n            if task.status == RUNNING and task.resources:\n                for resource, amount in six.iteritems(task.resources):\n                    used_resources[resource] += amount\n    return used_resources",
                                "signature": "_used_resources(self)"
                            },
                            {
                                "code": "def _rank(self, among_tasks):\n    \"\"\"\n    Return worker's rank function for task scheduling.\n\n    :return:\n    \"\"\"\n    dependents = collections.defaultdict(int)\n\n    def not_done(t):\n        task = self._state.get_task(t, default=None)\n        return task is None or task.status != DONE\n    for task in among_tasks:\n        if task.status != DONE:\n            deps = list(filter(not_done, task.deps))\n            inverse_num_deps = 1.0 / max(len(deps), 1)\n            for dep in deps:\n                dependents[dep] += inverse_num_deps\n\n    return lambda task: (task.priority, dependents[task.id], -task.time)",
                                "signature": "_rank(self, among_tasks)"
                            },
                            {
                                "code": "def _schedulable(self, task):\n    if task.status != PENDING:\n        return False\n    for dep in task.deps:\n        dep_task = self._state.get_task(dep, default=None)\n        if dep_task is None or dep_task.status != DONE:\n            return False\n    return True",
                                "signature": "_schedulable(self, task)"
                            },
                            {
                                "code": "def get_work(self, host=None, assistant=False, **kwargs):\n    # TODO: remove any expired nodes\n\n    # Algo: iterate over all nodes, find the highest priority node no dependencies and available\n    # resources.\n\n    # Resource checking looks both at currently available resources and at which resources would\n    # be available if all running tasks died and we rescheduled all workers greedily. We do both\n    # checks in order to prevent a worker with many low-priority tasks from starving other\n    # workers with higher priority tasks that share the same resources.\n\n    # TODO: remove tasks that can't be done, figure out if the worker has absolutely\n    # nothing it can wait for\n\n    worker_id = kwargs['worker']\n    # Return remaining tasks that have no FAILED descendents\n    self.update(worker_id, {'host': host})\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n    best_task = None\n    locally_pending_tasks = 0\n    running_tasks = []\n    upstream_table = {}\n\n    greedy_resources = collections.defaultdict(int)\n    n_unique_pending = 0\n\n    worker = self._state.get_worker(worker_id)\n    if worker.is_trivial_worker():\n        relevant_tasks = worker.get_pending_tasks()\n        used_resources = collections.defaultdict(int)\n        greedy_workers = dict()  # If there's no resources, then they can grab any task\n    else:\n        relevant_tasks = self._state.get_pending_tasks()\n        used_resources = self._used_resources()\n        greedy_workers = dict((worker.id, worker.info.get('workers', 1))\n                              for worker in self._state.get_active_workers())\n    tasks = list(relevant_tasks)\n    tasks.sort(key=self._rank(among_tasks=tasks), reverse=True)\n\n    for task in tasks:\n        upstream_status = self._upstream_status(task.id, upstream_table)\n        in_workers = (assistant and task.workers) or worker_id in task.workers\n        if task.status == RUNNING and in_workers:\n            # Return a list of currently running tasks to the client,\n            # makes it easier to troubleshoot\n            other_worker = self._state.get_worker(task.worker_running)\n            more_info = {'task_id': task.id, 'worker': str(other_worker)}\n            if other_worker is not None:\n                more_info.update(other_worker.info)\n                running_tasks.append(more_info)\n\n        if task.status == PENDING and in_workers and upstream_status != UPSTREAM_DISABLED:\n            locally_pending_tasks += 1\n            if len(task.workers) == 1 and not assistant:\n                n_unique_pending += 1\n\n        if task.status == RUNNING and (task.worker_running in greedy_workers):\n            greedy_workers[task.worker_running] -= 1\n            for resource, amount in six.iteritems((task.resources or {})):\n                greedy_resources[resource] += amount\n\n        if not best_task and self._schedulable(task) and self._has_resources(task.resources, greedy_resources):\n            if in_workers and self._has_resources(task.resources, used_resources):\n                best_task = task\n            else:\n                workers = itertools.chain(task.workers, [worker_id]) if assistant else task.workers\n                for task_worker in workers:\n                    if greedy_workers.get(task_worker, 0) > 0:\n                        # use up a worker\n                        greedy_workers[task_worker] -= 1\n\n                        # keep track of the resources used in greedy scheduling\n                        for resource, amount in six.iteritems((task.resources or {})):\n                            greedy_resources[resource] += amount\n\n                        break\n\n    reply = {'n_pending_tasks': locally_pending_tasks,\n             'running_tasks': running_tasks,\n             'task_id': None,\n             'n_unique_pending': n_unique_pending}\n\n    if best_task:\n        self._state.set_status(best_task, RUNNING, self._config)\n        best_task.worker_running = worker_id\n        best_task.time_running = time.time()\n        self._update_task_history(best_task.id, RUNNING, host=host)\n\n        reply['task_id'] = best_task.id\n        reply['task_family'] = best_task.family\n        reply['task_module'] = getattr(best_task, 'module', None)\n        reply['task_params'] = best_task.params\n\n    return reply",
                                "signature": "get_work(self, host=None, assistant=False, **kwargs)"
                            },
                            {
                                "code": "def ping(self, **kwargs):\n    worker_id = kwargs['worker']\n    self.update(worker_id)",
                                "signature": "ping(self, **kwargs)"
                            },
                            {
                                "code": "def _upstream_status(self, task_id, upstream_status_table):\n    if task_id in upstream_status_table:\n        return upstream_status_table[task_id]\n    elif self._state.has_task(task_id):\n        task_stack = [task_id]\n\n        while task_stack:\n            dep_id = task_stack.pop()\n            if self._state.has_task(dep_id):\n                dep = self._state.get_task(dep_id)\n                if dep_id not in upstream_status_table:\n                    if dep.status == PENDING and dep.deps:\n                        task_stack = task_stack + [dep_id] + list(dep.deps)\n                        upstream_status_table[dep_id] = ''  # will be updated postorder\n                    else:\n                        dep_status = STATUS_TO_UPSTREAM_MAP.get(dep.status, '')\n                        upstream_status_table[dep_id] = dep_status\n                elif upstream_status_table[dep_id] == '' and dep.deps:\n                    # This is the postorder update step when we set the\n                    # status based on the previously calculated child elements\n                    upstream_status = [upstream_status_table.get(task_id, '') for task_id in dep.deps]\n                    upstream_status.append('')  # to handle empty list\n                    status = max(upstream_status, key=UPSTREAM_SEVERITY_KEY)\n                    upstream_status_table[dep_id] = status\n        return upstream_status_table[dep_id]",
                                "signature": "_upstream_status(self, task_id, upstream_status_table)"
                            },
                            {
                                "code": "def _serialize_task(self, task_id, include_deps=True):\n    task = self._state.get_task(task_id)\n    ret = {\n        'status': task.status,\n        'workers': list(task.workers),\n        'worker_running': task.worker_running,\n        'time_running': getattr(task, \"time_running\", None),\n        'start_time': task.time,\n        'params': task.params,\n        'name': task.family,\n        'priority': task.priority,\n        'resources': task.resources,\n    }\n    if task.status == DISABLED:\n        ret['re_enable_able'] = task.scheduler_disable_time is not None\n    if include_deps:\n        ret['deps'] = list(task.deps)\n    return ret",
                                "signature": "_serialize_task(self, task_id, include_deps=True)"
                            },
                            {
                                "code": "def graph(self, **kwargs):\n    self.prune()\n    serialized = {}\n    for task in self._state.get_active_tasks():\n        serialized[task.id] = self._serialize_task(task.id)\n    return serialized",
                                "signature": "graph(self, **kwargs)"
                            },
                            {
                                "code": "def _recurse_deps(self, task_id, serialized):\n    if task_id not in serialized:\n        task = self._state.get_task(task_id)\n        if task is None or not task.family:\n            logger.warn('Missing task for id [%s]', task_id)\n\n            # try to infer family and params from task_id\n            try:\n                family, _, param_str = task_id.rstrip(')').partition('(')\n                params = dict(param.split('=') for param in param_str.split(', '))\n            except BaseException:\n                family, params = '', {}\n            serialized[task_id] = {\n                'deps': [],\n                'status': UNKNOWN,\n                'workers': [],\n                'start_time': UNKNOWN,\n                'params': params,\n                'name': family,\n                'priority': 0,\n            }\n        else:\n            serialized[task_id] = self._serialize_task(task_id)\n            for dep in task.deps:\n                self._recurse_deps(dep, serialized)",
                                "signature": "_recurse_deps(self, task_id, serialized)"
                            },
                            {
                                "code": "def dep_graph(self, task_id, **kwargs):\n    self.prune()\n    serialized = {}\n    if self._state.has_task(task_id):\n        self._recurse_deps(task_id, serialized)\n    return serialized",
                                "signature": "dep_graph(self, task_id, **kwargs)"
                            },
                            {
                                "code": "def task_list(self, status, upstream_status, limit=True, search=None, **kwargs):\n    \"\"\"\n    Query for a subset of tasks by status.\n    \"\"\"\n    self.prune()\n    result = {}\n    upstream_status_table = {}  # used to memoize upstream status\n    if search is None:\n        filter_func = lambda _: True\n    else:\n        terms = search.split()\n        filter_func = lambda t: all(term in t.id for term in terms)\n    for task in filter(filter_func, self._state.get_active_tasks(status)):\n        if (task.status != PENDING or not upstream_status or\n                upstream_status == self._upstream_status(task.id, upstream_status_table)):\n            serialized = self._serialize_task(task.id, False)\n            result[task.id] = serialized\n    if limit and len(result) > self._config.max_shown_tasks:\n        return {'num_tasks': len(result)}\n    return result",
                                "signature": "task_list(self, status, upstream_status, limit=True, search=None, **kwargs)"
                            },
                            {
                                "code": "def worker_list(self, include_running=True, **kwargs):\n    self.prune()\n    workers = [\n        dict(\n            name=worker.id,\n            last_active=worker.last_active,\n            started=getattr(worker, 'started', None),\n            **worker.info\n        ) for worker in self._state.get_active_workers()]\n    workers.sort(key=lambda worker: worker['started'], reverse=True)\n    if include_running:\n        running = collections.defaultdict(dict)\n        num_pending = collections.defaultdict(int)\n        num_uniques = collections.defaultdict(int)\n        for task in self._state.get_pending_tasks():\n            if task.status == RUNNING and task.worker_running:\n                running[task.worker_running][task.id] = self._serialize_task(task.id, False)\n            elif task.status == PENDING:\n                for worker in task.workers:\n                    num_pending[worker] += 1\n                if len(task.workers) == 1:\n                    num_uniques[list(task.workers)[0]] += 1\n        for worker in workers:\n            tasks = running[worker['name']]\n            worker['num_running'] = len(tasks)\n            worker['num_pending'] = num_pending[worker['name']]\n            worker['num_uniques'] = num_uniques[worker['name']]\n            worker['running'] = tasks\n    return workers",
                                "signature": "worker_list(self, include_running=True, **kwargs)"
                            },
                            {
                                "code": "def inverse_dep_graph(self, task_id, **kwargs):\n    self.prune()\n    serialized = {}\n    if self._state.has_task(task_id):\n        self._traverse_inverse_deps(task_id, serialized)\n    return serialized",
                                "signature": "inverse_dep_graph(self, task_id, **kwargs)"
                            },
                            {
                                "code": "def _traverse_inverse_deps(self, task_id, serialized):\n    stack = [task_id]\n    serialized[task_id] = self._serialize_task(task_id)\n    while len(stack) > 0:\n        curr_id = stack.pop()\n        for task in self._state.get_active_tasks():\n            if curr_id in task.deps:\n                serialized[curr_id][\"deps\"].append(task.id)\n                if task.id not in serialized:\n                    serialized[task.id] = self._serialize_task(task.id)\n                    serialized[task.id][\"deps\"] = []\n                    stack.append(task.id)",
                                "signature": "_traverse_inverse_deps(self, task_id, serialized)"
                            },
                            {
                                "code": "def task_search(self, task_str, **kwargs):\n    \"\"\"\n    Query for a subset of tasks by task_id.\n\n    :param task_str:\n    :return:\n    \"\"\"\n    self.prune()\n    result = collections.defaultdict(dict)\n    for task in self._state.get_active_tasks():\n        if task.id.find(task_str) != -1:\n            serialized = self._serialize_task(task.id, False)\n            result[task.status][task.id] = serialized\n    return result",
                                "signature": "task_search(self, task_str, **kwargs)"
                            },
                            {
                                "code": "def re_enable_task(self, task_id):\n    serialized = {}\n    task = self._state.get_task(task_id)\n    if task and task.status == DISABLED and task.scheduler_disable_time:\n        self._state.re_enable(task, self._config)\n        serialized = self._serialize_task(task_id)\n    return serialized",
                                "signature": "re_enable_task(self, task_id)"
                            },
                            {
                                "code": "def fetch_error(self, task_id, **kwargs):\n    if self._state.has_task(task_id):\n        return {\"taskId\": task_id, \"error\": self._state.get_task(task_id).expl}\n    else:\n        return {\"taskId\": task_id, \"error\": \"\"}",
                                "signature": "fetch_error(self, task_id, **kwargs)"
                            },
                            {
                                "code": "def _update_task_history(self, task_id, status, host=None):\n    try:\n        if status == DONE or status == FAILED:\n            successful = (status == DONE)\n            self._task_history.task_finished(task_id, successful)\n        elif status == PENDING:\n            self._task_history.task_scheduled(task_id)\n        elif status == RUNNING:\n            self._task_history.task_started(task_id, host)\n    except BaseException:\n        logger.warning(\"Error saving Task history\", exc_info=True)",
                                "signature": "_update_task_history(self, task_id, status, host=None)"
                            },
                            {
                                "code": "@property\ndef task_history(self):\n    # Used by server.py to expose the calls\n    return self._task_history",
                                "signature": "task_history(self)"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "ImportError": [
                    27
                ],
                "logger": [
                    290,
                    515,
                    292,
                    325,
                    519,
                    839,
                    297,
                    426,
                    45,
                    302,
                    978,
                    406,
                    538,
                    412
                ],
                "logging.getLogger": [
                    45
                ],
                "logging": [
                    45
                ],
                "object": [
                    168,
                    269,
                    48,
                    114,
                    222
                ],
                "add_task": [
                    54
                ],
                "NotImplemented": [
                    56,
                    54,
                    55
                ],
                "get_work": [
                    55
                ],
                "ping": [
                    56
                ],
                "UPSTREAM_RUNNING": [
                    73,
                    65,
                    58
                ],
                "UPSTREAM_MISSING_INPUT": [
                    66,
                    59,
                    74
                ],
                "UPSTREAM_FAILED": [
                    72,
                    67,
                    60
                ],
                "UPSTREAM_DISABLED": [
                    75,
                    68,
                    61,
                    735
                ],
                "UPSTREAM_SEVERITY_ORDER": [
                    70,
                    63
                ],
                "UPSTREAM_SEVERITY_KEY": [
                    805,
                    70
                ],
                "UPSTREAM_SEVERITY_ORDER.index": [
                    70
                ],
                "STATUS_TO_UPSTREAM_MAP": [
                    798,
                    71
                ],
                "FAILED": [
                    416,
                    357,
                    72,
                    361,
                    970,
                    430,
                    597,
                    379
                ],
                "RUNNING": [
                    770,
                    740,
                    904,
                    73,
                    649,
                    589,
                    975,
                    336,
                    368,
                    340,
                    726,
                    249,
                    411,
                    767
                ],
                "PENDING": [
                    675,
                    74,
                    906,
                    589,
                    366,
                    431,
                    560,
                    591,
                    735,
                    881,
                    340,
                    596,
                    973,
                    249,
                    794,
                    575
                ],
                "DISABLED": [
                    420,
                    393,
                    75,
                    368,
                    371,
                    822,
                    471,
                    957,
                    383
                ],
                "Config": [
                    79
                ],
                "retry_delay": [
                    82
                ],
                "parameter.FloatParameter": [
                    82,
                    83,
                    84
                ],
                "parameter": [
                    97,
                    98,
                    100,
                    102,
                    82,
                    83,
                    84,
                    85,
                    89,
                    91,
                    93,
                    95
                ],
                "remove_delay": [
                    83
                ],
                "worker_disconnect_delay": [
                    84
                ],
                "state_path": [
                    85,
                    279
                ],
                "parameter.Parameter": [
                    85,
                    102
                ],
                "disable_window": [
                    89,
                    193
                ],
                "parameter.IntParameter": [
                    97,
                    89,
                    91,
                    93,
                    95
                ],
                "dict": [
                    96,
                    900,
                    102,
                    892,
                    714,
                    844,
                    718,
                    306,
                    947,
                    281,
                    90,
                    92,
                    94
                ],
                "disable_failures": [
                    91,
                    191
                ],
                "disable_hard_timeout": [
                    192,
                    93
                ],
                "disable_persist": [
                    95
                ],
                "max_shown_tasks": [
                    97
                ],
                "prune_done_tasks": [
                    98
                ],
                "parameter.BoolParameter": [
                    98,
                    100
                ],
                "record_task_history": [
                    100
                ],
                "visualization_graph": [
                    102
                ],
                "isinstance": [
                    314,
                    108
                ],
                "x": [
                    162,
                    163,
                    108,
                    109,
                    111
                ],
                "datetime.datetime": [
                    108
                ],
                "datetime": [
                    108
                ],
                "time.mktime": [
                    109
                ],
                "time": [
                    417,
                    769,
                    421,
                    231,
                    136,
                    425,
                    109,
                    430,
                    208,
                    241,
                    147,
                    180,
                    245,
                    598,
                    408,
                    382
                ],
                "x.timetuple": [
                    109
                ],
                "self.window": [
                    128,
                    147
                ],
                "self": [
                    512,
                    517,
                    518,
                    519,
                    522,
                    524,
                    528,
                    532,
                    533,
                    536,
                    544,
                    556,
                    558,
                    572,
                    574,
                    595,
                    596,
                    598,
                    615,
                    618,
                    622,
                    628,
                    631,
                    632,
                    633,
                    639,
                    128,
                    129,
                    130,
                    647,
                    648,
                    138,
                    139,
                    141,
                    147,
                    149,
                    150,
                    663,
                    152,
                    158,
                    678,
                    172,
                    173,
                    174,
                    176,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    699,
                    701,
                    197,
                    710,
                    200,
                    716,
                    717,
                    206,
                    207,
                    208,
                    209,
                    719,
                    721,
                    212,
                    724,
                    729,
                    218,
                    219,
                    228,
                    229,
                    230,
                    231,
                    232,
                    233,
                    745,
                    746,
                    236,
                    240,
                    241,
                    245,
                    250,
                    767,
                    257,
                    770,
                    259,
                    263,
                    266,
                    781,
                    786,
                    279,
                    280,
                    281,
                    282,
                    791,
                    792,
                    285,
                    287,
                    292,
                    296,
                    297,
                    810,
                    299,
                    305,
                    306,
                    307,
                    308,
                    313,
                    315,
                    317,
                    829,
                    319,
                    831,
                    321,
                    832,
                    323,
                    325,
                    837,
                    329,
                    332,
                    336,
                    339,
                    344,
                    345,
                    857,
                    859,
                    348,
                    862,
                    351,
                    864,
                    865,
                    357,
                    872,
                    880,
                    882,
                    883,
                    373,
                    885,
                    890,
                    897,
                    903,
                    905,
                    396,
                    397,
                    920,
                    922,
                    923,
                    416,
                    928,
                    931,
                    422,
                    935,
                    431,
                    946,
                    948,
                    950,
                    440,
                    441,
                    444,
                    956,
                    958,
                    959,
                    450,
                    963,
                    964,
                    453,
                    456,
                    972,
                    461,
                    974,
                    464,
                    976,
                    470,
                    983,
                    492,
                    493,
                    496,
                    497,
                    499,
                    501,
                    502,
                    503,
                    504,
                    505,
                    506,
                    509
                ],
                "window": [
                    128
                ],
                "self.failures": [
                    129,
                    193,
                    200,
                    141,
                    206,
                    208,
                    212,
                    149,
                    150,
                    152,
                    158
                ],
                "collections.deque": [
                    129
                ],
                "collections": [
                    129,
                    707,
                    900,
                    901,
                    646,
                    902,
                    713,
                    306,
                    947,
                    660,
                    281
                ],
                "self.first_failure_time": [
                    130,
                    139,
                    138
                ],
                "failure_time": [
                    136,
                    139,
                    141
                ],
                "time.time": [
                    417,
                    769,
                    421,
                    231,
                    136,
                    425,
                    430,
                    208,
                    241,
                    147,
                    180,
                    245,
                    598,
                    408,
                    382
                ],
                "self.failures.append": [
                    141
                ],
                "min_time": [
                    147,
                    149
                ],
                "fix_time": [
                    149,
                    421
                ],
                "self.failures.popleft": [
                    150
                ],
                "len": [
                    737,
                    929,
                    909,
                    913,
                    885,
                    886,
                    152,
                    668
                ],
                "self.failures.clear": [
                    158
                ],
                "default": [
                    348,
                    165
                ],
                "self.id": [
                    266,
                    172,
                    228
                ],
                "task_id": [
                    784,
                    785,
                    786,
                    787,
                    922,
                    923,
                    927,
                    928,
                    803,
                    810,
                    172,
                    956,
                    574,
                    575,
                    959,
                    963,
                    836,
                    837,
                    964,
                    839,
                    966,
                    843,
                    972,
                    974,
                    847,
                    976,
                    595,
                    344,
                    857,
                    348,
                    351,
                    864,
                    865
                ],
                "self.stakeholders": [
                    173
                ],
                "set": [
                    320,
                    232,
                    524,
                    173,
                    174,
                    176,
                    178,
                    469,
                    601
                ],
                "self.workers": [
                    174
                ],
                "deps": [
                    175,
                    178,
                    600,
                    601,
                    667,
                    668,
                    669,
                    575
                ],
                "self.deps": [
                    176,
                    178
                ],
                "self.status": [
                    179
                ],
                "status": [
                    805,
                    806,
                    328,
                    329,
                    970,
                    971,
                    589,
                    973,
                    591,
                    880,
                    975,
                    339,
                    179,
                    340,
                    595,
                    596,
                    597
                ],
                "self.time": [
                    180
                ],
                "self.retry": [
                    181
                ],
                "self.remove": [
                    182
                ],
                "self.worker_running": [
                    183
                ],
                "self.time_running": [
                    184
                ],
                "self.expl": [
                    185
                ],
                "self.priority": [
                    186
                ],
                "priority": [
                    576,
                    186,
                    618,
                    615
                ],
                "self.resources": [
                    187
                ],
                "_get_default": [
                    584,
                    187,
                    190
                ],
                "resources": [
                    575,
                    502,
                    633,
                    187,
                    606,
                    607
                ],
                "self.family": [
                    188
                ],
                "family": [
                    576,
                    580,
                    843,
                    846,
                    853,
                    188
                ],
                "self.module": [
                    189
                ],
                "module": [
                    576,
                    189,
                    582
                ],
                "self.params": [
                    190
                ],
                "params": [
                    576,
                    584,
                    844,
                    846,
                    852,
                    190
                ],
                "self.disable_failures": [
                    218,
                    212,
                    191
                ],
                "self.disable_hard_timeout": [
                    192,
                    209,
                    219,
                    207
                ],
                "Failures": [
                    193
                ],
                "self.scheduler_disable_time": [
                    194
                ],
                "vars": [
                    197
                ],
                "self.failures.add_failure": [
                    200
                ],
                "excessive_failures": [
                    210,
                    204,
                    213,
                    215
                ],
                "self.failures.first_failure_time": [
                    208,
                    206
                ],
                "self.failures.num_failures": [
                    212
                ],
                "worker_id": [
                    768,
                    780,
                    781,
                    544,
                    697,
                    571,
                    572,
                    701,
                    699,
                    322,
                    323,
                    710,
                    456,
                    725,
                    610,
                    228,
                    616,
                    618,
                    621,
                    622,
                    749
                ],
                "self.reference": [
                    240,
                    229
                ],
                "self.last_active": [
                    241,
                    245,
                    230
                ],
                "last_active": [
                    230
                ],
                "self.started": [
                    231
                ],
                "self.tasks": [
                    232,
                    250
                ],
                "self.info": [
                    233,
                    236,
                    263
                ],
                "self.info.update": [
                    236
                ],
                "info": [
                    628,
                    236
                ],
                "worker_reference": [
                    240,
                    545,
                    239
                ],
                "config.worker_disconnect_delay": [
                    245
                ],
                "config": [
                    416,
                    417,
                    388,
                    357,
                    356,
                    390,
                    391,
                    421,
                    362,
                    422,
                    492,
                    430,
                    431,
                    245,
                    407,
                    408,
                    414
                ],
                "six.moves.filter": [
                    249
                ],
                "six.moves": [
                    249
                ],
                "six": [
                    640,
                    321,
                    742,
                    313,
                    329,
                    650,
                    332,
                    336,
                    307,
                    339,
                    756,
                    249,
                    444,
                    317,
                    319
                ],
                "task.status": [
                    904,
                    649,
                    906,
                    396,
                    398,
                    664,
                    666,
                    411,
                    675,
                    420,
                    812,
                    430,
                    308,
                    822,
                    951,
                    957,
                    589,
                    591,
                    726,
                    471,
                    345,
                    735,
                    740,
                    368,
                    881,
                    371,
                    249
                ],
                "task": [
                    532,
                    533,
                    534,
                    554,
                    555,
                    574,
                    579,
                    580,
                    581,
                    582,
                    583,
                    584,
                    586,
                    587,
                    589,
                    591,
                    596,
                    598,
                    601,
                    604,
                    607,
                    610,
                    614,
                    618,
                    621,
                    622,
                    625,
                    648,
                    649,
                    650,
                    663,
                    664,
                    665,
                    666,
                    667,
                    672,
                    675,
                    677,
                    723,
                    724,
                    725,
                    726,
                    729,
                    730,
                    735,
                    737,
                    740,
                    741,
                    742,
                    745,
                    746,
                    747,
                    749,
                    756,
                    249,
                    259,
                    810,
                    812,
                    813,
                    814,
                    815,
                    816,
                    817,
                    818,
                    307,
                    308,
                    819,
                    820,
                    822,
                    823,
                    825,
                    831,
                    832,
                    321,
                    322,
                    323,
                    837,
                    838,
                    329,
                    330,
                    332,
                    333,
                    344,
                    345,
                    346,
                    858,
                    354,
                    355,
                    357,
                    358,
                    368,
                    880,
                    881,
                    371,
                    882,
                    373,
                    883,
                    884,
                    376,
                    379,
                    380,
                    381,
                    382,
                    385,
                    389,
                    903,
                    904,
                    905,
                    394,
                    906,
                    396,
                    397,
                    398,
                    907,
                    909,
                    910,
                    404,
                    405,
                    407,
                    408,
                    411,
                    413,
                    415,
                    416,
                    417,
                    931,
                    420,
                    421,
                    422,
                    932,
                    933,
                    425,
                    426,
                    934,
                    935,
                    936,
                    430,
                    431,
                    937,
                    948,
                    949,
                    950,
                    439,
                    440,
                    441,
                    951,
                    956,
                    957,
                    958,
                    464,
                    465,
                    466,
                    470,
                    471,
                    472,
                    473,
                    474
                ],
                "self.assistant": [
                    257
                ],
                "all": [
                    259,
                    879
                ],
                "task.resources": [
                    259,
                    742,
                    649,
                    650,
                    745,
                    746,
                    756,
                    820,
                    607
                ],
                "self.get_pending_tasks": [
                    259
                ],
                "self.info.get": [
                    263
                ],
                "property": [
                    980,
                    261
                ],
                "self._state_path": [
                    292,
                    325,
                    296,
                    297,
                    299,
                    279,
                    287
                ],
                "self._tasks": [
                    321,
                    344,
                    440,
                    332,
                    305,
                    307,
                    280,
                    348,
                    285,
                    351
                ],
                "self._status_tasks": [
                    345,
                    329,
                    441,
                    396,
                    397,
                    336,
                    306,
                    339,
                    308,
                    281
                ],
                "collections.defaultdict": [
                    707,
                    900,
                    901,
                    646,
                    902,
                    713,
                    306,
                    947,
                    660,
                    281
                ],
                "self._active_workers": [
                    323,
                    453,
                    317,
                    456,
                    461,
                    305,
                    313,
                    282,
                    315,
                    444,
                    285,
                    319
                ],
                "state": [
                    288,
                    305,
                    300,
                    285
                ],
                "open": [
                    299,
                    287
                ],
                "fobj": [
                    288,
                    299,
                    300,
                    287
                ],
                "pickle.dump": [
                    288
                ],
                "pickle": [
                    288,
                    300
                ],
                "IOError": [
                    289
                ],
                "logger.warning": [
                    978,
                    290
                ],
                "logger.info": [
                    515,
                    292,
                    325,
                    519,
                    297,
                    426,
                    406,
                    538,
                    412
                ],
                "os.path.exists": [
                    296
                ],
                "os.path": [
                    296
                ],
                "os": [
                    296
                ],
                "pickle.load": [
                    300
                ],
                "BaseException": [
                    977,
                    845,
                    301
                ],
                "logger.exception": [
                    302
                ],
                "six.itervalues": [
                    321,
                    329,
                    332,
                    336,
                    307,
                    339,
                    444
                ],
                "task.id": [
                    385,
                    389,
                    905,
                    396,
                    397,
                    533,
                    534,
                    407,
                    413,
                    672,
                    933,
                    934,
                    935,
                    936,
                    937,
                    426,
                    308,
                    949,
                    950,
                    951,
                    832,
                    724,
                    345,
                    474,
                    730,
                    882,
                    883,
                    884
                ],
                "k": [
                    313,
                    315,
                    317,
                    319
                ],
                "v": [
                    313,
                    314,
                    315
                ],
                "six.iteritems": [
                    640,
                    742,
                    650,
                    756,
                    313,
                    317,
                    319
                ],
                "float": [
                    314
                ],
                "Worker": [
                    456,
                    315
                ],
                "any": [
                    317
                ],
                "hasattr": [
                    317
                ],
                "w": [
                    450,
                    524,
                    317
                ],
                "worker": [
                    896,
                    897,
                    898,
                    517,
                    518,
                    519,
                    520,
                    907,
                    908,
                    911,
                    912,
                    913,
                    914,
                    915,
                    916,
                    544,
                    545,
                    558,
                    444,
                    445,
                    319,
                    320,
                    447,
                    710,
                    711,
                    712,
                    460,
                    461,
                    718,
                    719,
                    628,
                    893,
                    894,
                    895
                ],
                "worker.tasks": [
                    320
                ],
                "task.workers": [
                    737,
                    322,
                    907,
                    621,
                    749,
                    813,
                    909,
                    910,
                    466,
                    725
                ],
                "tasks.add": [
                    323,
                    622
                ],
                "tasks": [
                    323,
                    622,
                    720,
                    721,
                    912,
                    723,
                    913,
                    916
                ],
                "itertools.chain.from_iterable": [
                    339
                ],
                "itertools.chain": [
                    339,
                    749
                ],
                "itertools": [
                    339,
                    749
                ],
                "setdefault": [
                    344,
                    343
                ],
                "self._tasks.setdefault": [
                    344
                ],
                "self._tasks.get": [
                    348
                ],
                "task.scheduler_disable_time": [
                    354,
                    420,
                    421,
                    394,
                    823,
                    376,
                    957,
                    382
                ],
                "task.failures.clear": [
                    355,
                    358
                ],
                "task.failures": [
                    355,
                    358
                ],
                "self.set_status": [
                    416,
                    357,
                    431
                ],
                "new_status": [
                    361,
                    393,
                    365,
                    366,
                    397,
                    368,
                    398,
                    372,
                    379,
                    383
                ],
                "SUSPENDED": [
                    596,
                    365
                ],
                "DONE": [
                    679,
                    970,
                    971,
                    372,
                    471,
                    664,
                    666
                ],
                "self.re_enable": [
                    373,
                    422
                ],
                "task.can_disable": [
                    379
                ],
                "task.add_failure": [
                    380
                ],
                "task.has_excessive_failures": [
                    381
                ],
                "notifications.send_error_email": [
                    384
                ],
                "notifications": [
                    384
                ],
                "format": [
                    385,
                    386
                ],
                "config.disable_failures": [
                    388
                ],
                "config.disable_window": [
                    390
                ],
                "config.disable_persist": [
                    421,
                    391
                ],
                "pop": [
                    441,
                    396
                ],
                "remove": [
                    433,
                    401,
                    427
                ],
                "task.stakeholders": [
                    610,
                    465,
                    404,
                    407,
                    411
                ],
                "task.remove": [
                    425,
                    586,
                    587,
                    405,
                    408
                ],
                "config.remove_delay": [
                    408,
                    407
                ],
                "task.worker_running": [
                    740,
                    741,
                    904,
                    905,
                    814,
                    729,
                    411,
                    413,
                    415
                ],
                "assistants": [
                    411
                ],
                "config.retry_delay": [
                    417,
                    430,
                    414
                ],
                "task.retry": [
                    417,
                    430,
                    598
                ],
                "delete_tasks": [
                    439
                ],
                "task_obj": [
                    440,
                    441
                ],
                "self._tasks.pop": [
                    440
                ],
                "task_obj.status": [
                    441
                ],
                "last_active_lt": [
                    450,
                    445
                ],
                "worker.last_active": [
                    445,
                    894
                ],
                "filter": [
                    880,
                    450,
                    667
                ],
                "w.assistant": [
                    450
                ],
                "self.get_active_workers": [
                    450
                ],
                "self._active_workers.keys": [
                    453
                ],
                "self._active_workers.setdefault": [
                    456
                ],
                "delete_workers": [
                    465,
                    466,
                    460
                ],
                "self._active_workers.pop": [
                    461
                ],
                "self.get_active_tasks": [
                    464,
                    470
                ],
                "task.stakeholders.difference_update": [
                    465
                ],
                "task.workers.difference_update": [
                    466
                ],
                "necessary_tasks": [
                    528,
                    530,
                    469,
                    533,
                    473,
                    474,
                    475
                ],
                "getattr": [
                    581,
                    774,
                    815,
                    472,
                    895
                ],
                "necessary_tasks.update": [
                    473
                ],
                "task.deps": [
                    932,
                    677,
                    614,
                    555,
                    473,
                    825,
                    601,
                    858,
                    667,
                    604
                ],
                "necessary_tasks.add": [
                    474
                ],
                "Scheduler": [
                    478
                ],
                "self._config": [
                    518,
                    519,
                    492,
                    493,
                    497,
                    596,
                    533,
                    598,
                    885,
                    504,
                    505,
                    506,
                    958,
                    767
                ],
                "scheduler": [
                    492
                ],
                "kwargs": [
                    697,
                    571,
                    492,
                    780
                ],
                "self._state": [
                    512,
                    897,
                    517,
                    903,
                    648,
                    522,
                    524,
                    528,
                    786,
                    532,
                    533,
                    663,
                    536,
                    791,
                    792,
                    922,
                    544,
                    931,
                    678,
                    810,
                    556,
                    948,
                    956,
                    574,
                    831,
                    958,
                    963,
                    964,
                    837,
                    710,
                    716,
                    719,
                    596,
                    729,
                    864,
                    615,
                    493,
                    622,
                    880,
                    628,
                    509,
                    767
                ],
                "SimpleTaskState": [
                    493
                ],
                "self._config.state_path": [
                    493
                ],
                "task_history_impl": [
                    496,
                    495
                ],
                "self._task_history": [
                    972,
                    974,
                    496,
                    976,
                    499,
                    501,
                    983
                ],
                "self._config.record_task_history": [
                    497
                ],
                "db_task_history.DbTaskHistory": [
                    499
                ],
                "db_task_history": [
                    499
                ],
                "history.NopHistory": [
                    501
                ],
                "history": [
                    501
                ],
                "self._resources": [
                    647,
                    502,
                    631,
                    632,
                    633,
                    639
                ],
                "getintdict": [
                    502
                ],
                "configuration.get_config": [
                    502
                ],
                "configuration": [
                    502
                ],
                "self._make_task": [
                    615,
                    574,
                    503
                ],
                "functools.partial": [
                    503
                ],
                "functools": [
                    503
                ],
                "Task": [
                    504
                ],
                "self._config.disable_failures": [
                    504
                ],
                "self._config.disable_hard_timeout": [
                    505
                ],
                "self._config.disable_window": [
                    506
                ],
                "self._state.load": [
                    509
                ],
                "self._state.dump": [
                    512
                ],
                "remove_workers": [
                    520,
                    522,
                    516
                ],
                "self._state.get_active_workers": [
                    897,
                    517,
                    719
                ],
                "worker.prune": [
                    518
                ],
                "self._config.worker_disconnect_delay": [
                    519
                ],
                "remove_workers.append": [
                    520
                ],
                "worker.id": [
                    520,
                    893,
                    718
                ],
                "self._state.inactivate_workers": [
                    522
                ],
                "assistant_ids": [
                    524,
                    533,
                    527
                ],
                "w.id": [
                    524
                ],
                "self._state.get_assistants": [
                    524
                ],
                "remove_tasks": [
                    536,
                    525,
                    534
                ],
                "self._state.get_necessary_tasks": [
                    528
                ],
                "self._state.get_active_tasks": [
                    931,
                    648,
                    880,
                    532,
                    948,
                    831
                ],
                "self._state.prune": [
                    533
                ],
                "remove_tasks.append": [
                    534
                ],
                "self._state.inactivate_tasks": [
                    536
                ],
                "self._state.get_worker": [
                    544,
                    710,
                    622,
                    628,
                    729
                ],
                "worker.update": [
                    545
                ],
                "task.priority": [
                    672,
                    554,
                    819
                ],
                "prio": [
                    554,
                    557,
                    558
                ],
                "max": [
                    554,
                    668,
                    805
                ],
                "dep": [
                    800,
                    859,
                    803,
                    677,
                    614,
                    615,
                    678,
                    555,
                    556,
                    798,
                    858,
                    792,
                    794,
                    795,
                    669,
                    670
                ],
                "t": [
                    615,
                    616,
                    556,
                    557,
                    558,
                    879,
                    663
                ],
                "self._state.get_task": [
                    964,
                    837,
                    678,
                    615,
                    810,
                    556,
                    663,
                    792,
                    956,
                    574
                ],
                "t.priority": [
                    557
                ],
                "self._update_priority": [
                    618,
                    558
                ],
                "self.update": [
                    699,
                    572,
                    781
                ],
                "task.family": [
                    818,
                    579,
                    580,
                    838
                ],
                "task.module": [
                    582
                ],
                "task.params": [
                    584,
                    817,
                    583
                ],
                "self._update_task_history": [
                    770,
                    595
                ],
                "self._state.set_status": [
                    596,
                    767
                ],
                "self._config.retry_delay": [
                    598
                ],
                "new_deps": [
                    603,
                    604
                ],
                "task.deps.update": [
                    604
                ],
                "assistant": [
                    609,
                    737,
                    749,
                    725,
                    700,
                    701
                ],
                "task.stakeholders.add": [
                    610
                ],
                "UNKNOWN": [
                    849,
                    851,
                    615
                ],
                "t.stakeholders.add": [
                    616
                ],
                "t.stakeholders": [
                    616
                ],
                "runnable": [
                    620
                ],
                "task.workers.add": [
                    621
                ],
                "expl": [
                    624,
                    625,
                    964
                ],
                "task.expl": [
                    625
                ],
                "add_info": [
                    628
                ],
                "self._resources.update": [
                    633
                ],
                "needed_resources": [
                    640,
                    636
                ],
                "available_resources": [
                    641,
                    639
                ],
                "resource": [
                    640,
                    641,
                    742,
                    743,
                    650,
                    651,
                    756,
                    757
                ],
                "amount": [
                    640,
                    641,
                    742,
                    743,
                    650,
                    651,
                    756,
                    757
                ],
                "used_resources": [
                    641,
                    646,
                    713,
                    746,
                    651,
                    652,
                    717
                ],
                "available_resources.get": [
                    641
                ],
                "int": [
                    707,
                    901,
                    646,
                    902,
                    713,
                    660
                ],
                "dependents": [
                    672,
                    660,
                    670
                ],
                "among_tasks": [
                    665
                ],
                "list": [
                    813,
                    910,
                    720,
                    825,
                    795,
                    667
                ],
                "not_done": [
                    667
                ],
                "inverse_num_deps": [
                    668,
                    670
                ],
                "task.time": [
                    672,
                    816
                ],
                "dep_task": [
                    678,
                    679
                ],
                "dep_task.status": [
                    679
                ],
                "host": [
                    976,
                    770,
                    699
                ],
                "self.add_worker": [
                    701
                ],
                "best_task": [
                    768,
                    769,
                    770,
                    772,
                    773,
                    774,
                    775,
                    745,
                    747,
                    766,
                    702,
                    767
                ],
                "locally_pending_tasks": [
                    736,
                    761,
                    703
                ],
                "running_tasks": [
                    704,
                    762,
                    733
                ],
                "upstream_table": [
                    705,
                    724
                ],
                "greedy_resources": [
                    745,
                    707,
                    757,
                    743
                ],
                "n_unique_pending": [
                    738,
                    708,
                    764
                ],
                "worker.is_trivial_worker": [
                    711
                ],
                "relevant_tasks": [
                    712,
                    716,
                    720
                ],
                "worker.get_pending_tasks": [
                    712
                ],
                "greedy_workers": [
                    740,
                    741,
                    714,
                    718,
                    751,
                    753
                ],
                "self._state.get_pending_tasks": [
                    716,
                    903
                ],
                "self._used_resources": [
                    717
                ],
                "worker.info.get": [
                    718
                ],
                "worker.info": [
                    896,
                    718
                ],
                "tasks.sort": [
                    721
                ],
                "self._rank": [
                    721
                ],
                "upstream_status": [
                    803,
                    804,
                    805,
                    881,
                    882,
                    724,
                    735
                ],
                "self._upstream_status": [
                    882,
                    724
                ],
                "in_workers": [
                    746,
                    725,
                    726,
                    735
                ],
                "other_worker": [
                    729,
                    730,
                    731,
                    732
                ],
                "more_info": [
                    730,
                    732,
                    733
                ],
                "str": [
                    730
                ],
                "more_info.update": [
                    732
                ],
                "other_worker.info": [
                    732
                ],
                "running_tasks.append": [
                    733
                ],
                "self._schedulable": [
                    745
                ],
                "self._has_resources": [
                    745,
                    746
                ],
                "workers": [
                    898,
                    749,
                    750,
                    911,
                    917,
                    891
                ],
                "task_worker": [
                    753,
                    750,
                    751
                ],
                "greedy_workers.get": [
                    751
                ],
                "reply": [
                    772,
                    773,
                    774,
                    775,
                    777,
                    761
                ],
                "best_task.worker_running": [
                    768
                ],
                "best_task.time_running": [
                    769
                ],
                "best_task.id": [
                    770,
                    772
                ],
                "best_task.family": [
                    773
                ],
                "best_task.params": [
                    775
                ],
                "upstream_status_table": [
                    800,
                    803,
                    806,
                    807,
                    874,
                    784,
                    785,
                    882,
                    793,
                    796,
                    799
                ],
                "self._state.has_task": [
                    864,
                    963,
                    786,
                    791,
                    922
                ],
                "task_stack": [
                    795,
                    787,
                    789,
                    790
                ],
                "dep_id": [
                    800,
                    806,
                    807,
                    790,
                    791,
                    792,
                    793,
                    795,
                    796,
                    799
                ],
                "task_stack.pop": [
                    790
                ],
                "dep.status": [
                    794,
                    798
                ],
                "dep.deps": [
                    800,
                    803,
                    794,
                    795
                ],
                "dep_status": [
                    798,
                    799
                ],
                "STATUS_TO_UPSTREAM_MAP.get": [
                    798
                ],
                "upstream_status_table.get": [
                    803
                ],
                "upstream_status.append": [
                    804
                ],
                "ret": [
                    825,
                    826,
                    811,
                    823
                ],
                "include_deps": [
                    824
                ],
                "self.prune": [
                    872,
                    946,
                    920,
                    890,
                    829,
                    862
                ],
                "serialized": [
                    921,
                    923,
                    924,
                    928,
                    933,
                    934,
                    935,
                    936,
                    950,
                    951,
                    955,
                    830,
                    959,
                    832,
                    833,
                    960,
                    836,
                    847,
                    857,
                    859,
                    863,
                    865,
                    866,
                    883,
                    884
                ],
                "self._serialize_task": [
                    832,
                    928,
                    935,
                    905,
                    883,
                    950,
                    857,
                    959
                ],
                "logger.warn": [
                    839
                ],
                "_": [
                    843
                ],
                "param_str": [
                    843,
                    844
                ],
                "partition": [
                    843
                ],
                "task_id.rstrip": [
                    843
                ],
                "param.split": [
                    844
                ],
                "param": [
                    844
                ],
                "param_str.split": [
                    844
                ],
                "self._recurse_deps": [
                    865,
                    859
                ],
                "result": [
                    873,
                    951,
                    947,
                    884,
                    885,
                    886,
                    887,
                    952
                ],
                "search": [
                    875,
                    878
                ],
                "filter_func": [
                    880,
                    876,
                    879
                ],
                "terms": [
                    878,
                    879
                ],
                "search.split": [
                    878
                ],
                "term": [
                    879
                ],
                "t.id": [
                    879
                ],
                "limit": [
                    885
                ],
                "self._config.max_shown_tasks": [
                    885
                ],
                "workers.sort": [
                    898
                ],
                "include_running": [
                    899
                ],
                "running": [
                    912,
                    905,
                    900
                ],
                "num_pending": [
                    914,
                    908,
                    901
                ],
                "num_uniques": [
                    910,
                    915,
                    902
                ],
                "self._traverse_inverse_deps": [
                    923
                ],
                "stack": [
                    929,
                    930,
                    937,
                    927
                ],
                "curr_id": [
                    930,
                    932,
                    933
                ],
                "stack.pop": [
                    930
                ],
                "append": [
                    933
                ],
                "stack.append": [
                    937
                ],
                "task.id.find": [
                    949
                ],
                "task_str": [
                    949
                ],
                "self._state.re_enable": [
                    958
                ],
                "successful": [
                    971,
                    972
                ],
                "self._task_history.task_finished": [
                    972
                ],
                "self._task_history.task_scheduled": [
                    974
                ],
                "self._task_history.task_started": [
                    976
                ]
            },
            "filtered_variables_in_file": {
                "logger": [
                    290,
                    515,
                    292,
                    325,
                    519,
                    839,
                    297,
                    426,
                    45,
                    302,
                    978,
                    406,
                    538,
                    412
                ],
                "logging.getLogger": [
                    45
                ],
                "logging": [
                    45
                ],
                "add_task": [
                    54
                ],
                "get_work": [
                    55
                ],
                "ping": [
                    56
                ],
                "UPSTREAM_RUNNING": [
                    73,
                    65,
                    58
                ],
                "UPSTREAM_MISSING_INPUT": [
                    66,
                    59,
                    74
                ],
                "UPSTREAM_FAILED": [
                    72,
                    67,
                    60
                ],
                "UPSTREAM_DISABLED": [
                    75,
                    68,
                    61,
                    735
                ],
                "UPSTREAM_SEVERITY_ORDER": [
                    70,
                    63
                ],
                "UPSTREAM_SEVERITY_KEY": [
                    805,
                    70
                ],
                "UPSTREAM_SEVERITY_ORDER.index": [
                    70
                ],
                "STATUS_TO_UPSTREAM_MAP": [
                    798,
                    71
                ],
                "FAILED": [
                    416,
                    357,
                    72,
                    361,
                    970,
                    430,
                    597,
                    379
                ],
                "RUNNING": [
                    770,
                    740,
                    904,
                    73,
                    649,
                    589,
                    975,
                    336,
                    368,
                    340,
                    726,
                    249,
                    411,
                    767
                ],
                "PENDING": [
                    675,
                    74,
                    906,
                    589,
                    366,
                    431,
                    560,
                    591,
                    735,
                    881,
                    340,
                    596,
                    973,
                    249,
                    794,
                    575
                ],
                "DISABLED": [
                    420,
                    393,
                    75,
                    368,
                    371,
                    822,
                    471,
                    957,
                    383
                ],
                "Config": [
                    79
                ],
                "retry_delay": [
                    82
                ],
                "parameter.FloatParameter": [
                    82,
                    83,
                    84
                ],
                "parameter": [
                    97,
                    98,
                    100,
                    102,
                    82,
                    83,
                    84,
                    85,
                    89,
                    91,
                    93,
                    95
                ],
                "remove_delay": [
                    83
                ],
                "worker_disconnect_delay": [
                    84
                ],
                "state_path": [
                    85,
                    279
                ],
                "parameter.Parameter": [
                    85,
                    102
                ],
                "disable_window": [
                    89,
                    193
                ],
                "parameter.IntParameter": [
                    97,
                    89,
                    91,
                    93,
                    95
                ],
                "disable_failures": [
                    91,
                    191
                ],
                "disable_hard_timeout": [
                    192,
                    93
                ],
                "disable_persist": [
                    95
                ],
                "max_shown_tasks": [
                    97
                ],
                "prune_done_tasks": [
                    98
                ],
                "parameter.BoolParameter": [
                    98,
                    100
                ],
                "record_task_history": [
                    100
                ],
                "visualization_graph": [
                    102
                ],
                "x": [
                    162,
                    163,
                    108,
                    109,
                    111
                ],
                "datetime.datetime": [
                    108
                ],
                "datetime": [
                    108
                ],
                "time.mktime": [
                    109
                ],
                "time": [
                    417,
                    769,
                    421,
                    231,
                    136,
                    425,
                    109,
                    430,
                    208,
                    241,
                    147,
                    180,
                    245,
                    598,
                    408,
                    382
                ],
                "x.timetuple": [
                    109
                ],
                "self.window": [
                    128,
                    147
                ],
                "self": [
                    512,
                    517,
                    518,
                    519,
                    522,
                    524,
                    528,
                    532,
                    533,
                    536,
                    544,
                    556,
                    558,
                    572,
                    574,
                    595,
                    596,
                    598,
                    615,
                    618,
                    622,
                    628,
                    631,
                    632,
                    633,
                    639,
                    128,
                    129,
                    130,
                    647,
                    648,
                    138,
                    139,
                    141,
                    147,
                    149,
                    150,
                    663,
                    152,
                    158,
                    678,
                    172,
                    173,
                    174,
                    176,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    699,
                    701,
                    197,
                    710,
                    200,
                    716,
                    717,
                    206,
                    207,
                    208,
                    209,
                    719,
                    721,
                    212,
                    724,
                    729,
                    218,
                    219,
                    228,
                    229,
                    230,
                    231,
                    232,
                    233,
                    745,
                    746,
                    236,
                    240,
                    241,
                    245,
                    250,
                    767,
                    257,
                    770,
                    259,
                    263,
                    266,
                    781,
                    786,
                    279,
                    280,
                    281,
                    282,
                    791,
                    792,
                    285,
                    287,
                    292,
                    296,
                    297,
                    810,
                    299,
                    305,
                    306,
                    307,
                    308,
                    313,
                    315,
                    317,
                    829,
                    319,
                    831,
                    321,
                    832,
                    323,
                    325,
                    837,
                    329,
                    332,
                    336,
                    339,
                    344,
                    345,
                    857,
                    859,
                    348,
                    862,
                    351,
                    864,
                    865,
                    357,
                    872,
                    880,
                    882,
                    883,
                    373,
                    885,
                    890,
                    897,
                    903,
                    905,
                    396,
                    397,
                    920,
                    922,
                    923,
                    416,
                    928,
                    931,
                    422,
                    935,
                    431,
                    946,
                    948,
                    950,
                    440,
                    441,
                    444,
                    956,
                    958,
                    959,
                    450,
                    963,
                    964,
                    453,
                    456,
                    972,
                    461,
                    974,
                    464,
                    976,
                    470,
                    983,
                    492,
                    493,
                    496,
                    497,
                    499,
                    501,
                    502,
                    503,
                    504,
                    505,
                    506,
                    509
                ],
                "window": [
                    128
                ],
                "self.failures": [
                    129,
                    193,
                    200,
                    141,
                    206,
                    208,
                    212,
                    149,
                    150,
                    152,
                    158
                ],
                "collections.deque": [
                    129
                ],
                "collections": [
                    129,
                    707,
                    900,
                    901,
                    646,
                    902,
                    713,
                    306,
                    947,
                    660,
                    281
                ],
                "self.first_failure_time": [
                    130,
                    139,
                    138
                ],
                "failure_time": [
                    136,
                    139,
                    141
                ],
                "time.time": [
                    417,
                    769,
                    421,
                    231,
                    136,
                    425,
                    430,
                    208,
                    241,
                    147,
                    180,
                    245,
                    598,
                    408,
                    382
                ],
                "self.failures.append": [
                    141
                ],
                "min_time": [
                    147,
                    149
                ],
                "fix_time": [
                    149,
                    421
                ],
                "self.failures.popleft": [
                    150
                ],
                "self.failures.clear": [
                    158
                ],
                "default": [
                    348,
                    165
                ],
                "self.id": [
                    266,
                    172,
                    228
                ],
                "task_id": [
                    784,
                    785,
                    786,
                    787,
                    922,
                    923,
                    927,
                    928,
                    803,
                    810,
                    172,
                    956,
                    574,
                    575,
                    959,
                    963,
                    836,
                    837,
                    964,
                    839,
                    966,
                    843,
                    972,
                    974,
                    847,
                    976,
                    595,
                    344,
                    857,
                    348,
                    351,
                    864,
                    865
                ],
                "self.stakeholders": [
                    173
                ],
                "self.workers": [
                    174
                ],
                "deps": [
                    175,
                    178,
                    600,
                    601,
                    667,
                    668,
                    669,
                    575
                ],
                "self.deps": [
                    176,
                    178
                ],
                "self.status": [
                    179
                ],
                "status": [
                    805,
                    806,
                    328,
                    329,
                    970,
                    971,
                    589,
                    973,
                    591,
                    880,
                    975,
                    339,
                    179,
                    340,
                    595,
                    596,
                    597
                ],
                "self.time": [
                    180
                ],
                "self.retry": [
                    181
                ],
                "self.remove": [
                    182
                ],
                "self.worker_running": [
                    183
                ],
                "self.time_running": [
                    184
                ],
                "self.expl": [
                    185
                ],
                "self.priority": [
                    186
                ],
                "priority": [
                    576,
                    186,
                    618,
                    615
                ],
                "self.resources": [
                    187
                ],
                "_get_default": [
                    584,
                    187,
                    190
                ],
                "resources": [
                    575,
                    502,
                    633,
                    187,
                    606,
                    607
                ],
                "self.family": [
                    188
                ],
                "family": [
                    576,
                    580,
                    843,
                    846,
                    853,
                    188
                ],
                "self.module": [
                    189
                ],
                "module": [
                    576,
                    189,
                    582
                ],
                "self.params": [
                    190
                ],
                "params": [
                    576,
                    584,
                    844,
                    846,
                    852,
                    190
                ],
                "self.disable_failures": [
                    218,
                    212,
                    191
                ],
                "self.disable_hard_timeout": [
                    192,
                    209,
                    219,
                    207
                ],
                "Failures": [
                    193
                ],
                "self.scheduler_disable_time": [
                    194
                ],
                "self.failures.add_failure": [
                    200
                ],
                "excessive_failures": [
                    210,
                    204,
                    213,
                    215
                ],
                "self.failures.first_failure_time": [
                    208,
                    206
                ],
                "self.failures.num_failures": [
                    212
                ],
                "worker_id": [
                    768,
                    780,
                    781,
                    544,
                    697,
                    571,
                    572,
                    701,
                    699,
                    322,
                    323,
                    710,
                    456,
                    725,
                    610,
                    228,
                    616,
                    618,
                    621,
                    622,
                    749
                ],
                "self.reference": [
                    240,
                    229
                ],
                "self.last_active": [
                    241,
                    245,
                    230
                ],
                "last_active": [
                    230
                ],
                "self.started": [
                    231
                ],
                "self.tasks": [
                    232,
                    250
                ],
                "self.info": [
                    233,
                    236,
                    263
                ],
                "self.info.update": [
                    236
                ],
                "info": [
                    628,
                    236
                ],
                "worker_reference": [
                    240,
                    545,
                    239
                ],
                "config.worker_disconnect_delay": [
                    245
                ],
                "config": [
                    416,
                    417,
                    388,
                    357,
                    356,
                    390,
                    391,
                    421,
                    362,
                    422,
                    492,
                    430,
                    431,
                    245,
                    407,
                    408,
                    414
                ],
                "six.moves.filter": [
                    249
                ],
                "six.moves": [
                    249
                ],
                "six": [
                    640,
                    321,
                    742,
                    313,
                    329,
                    650,
                    332,
                    336,
                    307,
                    339,
                    756,
                    249,
                    444,
                    317,
                    319
                ],
                "task.status": [
                    904,
                    649,
                    906,
                    396,
                    398,
                    664,
                    666,
                    411,
                    675,
                    420,
                    812,
                    430,
                    308,
                    822,
                    951,
                    957,
                    589,
                    591,
                    726,
                    471,
                    345,
                    735,
                    740,
                    368,
                    881,
                    371,
                    249
                ],
                "task": [
                    532,
                    533,
                    534,
                    554,
                    555,
                    574,
                    579,
                    580,
                    581,
                    582,
                    583,
                    584,
                    586,
                    587,
                    589,
                    591,
                    596,
                    598,
                    601,
                    604,
                    607,
                    610,
                    614,
                    618,
                    621,
                    622,
                    625,
                    648,
                    649,
                    650,
                    663,
                    664,
                    665,
                    666,
                    667,
                    672,
                    675,
                    677,
                    723,
                    724,
                    725,
                    726,
                    729,
                    730,
                    735,
                    737,
                    740,
                    741,
                    742,
                    745,
                    746,
                    747,
                    749,
                    756,
                    249,
                    259,
                    810,
                    812,
                    813,
                    814,
                    815,
                    816,
                    817,
                    818,
                    307,
                    308,
                    819,
                    820,
                    822,
                    823,
                    825,
                    831,
                    832,
                    321,
                    322,
                    323,
                    837,
                    838,
                    329,
                    330,
                    332,
                    333,
                    344,
                    345,
                    346,
                    858,
                    354,
                    355,
                    357,
                    358,
                    368,
                    880,
                    881,
                    371,
                    882,
                    373,
                    883,
                    884,
                    376,
                    379,
                    380,
                    381,
                    382,
                    385,
                    389,
                    903,
                    904,
                    905,
                    394,
                    906,
                    396,
                    397,
                    398,
                    907,
                    909,
                    910,
                    404,
                    405,
                    407,
                    408,
                    411,
                    413,
                    415,
                    416,
                    417,
                    931,
                    420,
                    421,
                    422,
                    932,
                    933,
                    425,
                    426,
                    934,
                    935,
                    936,
                    430,
                    431,
                    937,
                    948,
                    949,
                    950,
                    439,
                    440,
                    441,
                    951,
                    956,
                    957,
                    958,
                    464,
                    465,
                    466,
                    470,
                    471,
                    472,
                    473,
                    474
                ],
                "self.assistant": [
                    257
                ],
                "task.resources": [
                    259,
                    742,
                    649,
                    650,
                    745,
                    746,
                    756,
                    820,
                    607
                ],
                "self.get_pending_tasks": [
                    259
                ],
                "self.info.get": [
                    263
                ],
                "self._state_path": [
                    292,
                    325,
                    296,
                    297,
                    299,
                    279,
                    287
                ],
                "self._tasks": [
                    321,
                    344,
                    440,
                    332,
                    305,
                    307,
                    280,
                    348,
                    285,
                    351
                ],
                "self._status_tasks": [
                    345,
                    329,
                    441,
                    396,
                    397,
                    336,
                    306,
                    339,
                    308,
                    281
                ],
                "collections.defaultdict": [
                    707,
                    900,
                    901,
                    646,
                    902,
                    713,
                    306,
                    947,
                    660,
                    281
                ],
                "self._active_workers": [
                    323,
                    453,
                    317,
                    456,
                    461,
                    305,
                    313,
                    282,
                    315,
                    444,
                    285,
                    319
                ],
                "state": [
                    288,
                    305,
                    300,
                    285
                ],
                "fobj": [
                    288,
                    299,
                    300,
                    287
                ],
                "pickle.dump": [
                    288
                ],
                "pickle": [
                    288,
                    300
                ],
                "logger.warning": [
                    978,
                    290
                ],
                "logger.info": [
                    515,
                    292,
                    325,
                    519,
                    297,
                    426,
                    406,
                    538,
                    412
                ],
                "os.path.exists": [
                    296
                ],
                "os.path": [
                    296
                ],
                "os": [
                    296
                ],
                "pickle.load": [
                    300
                ],
                "logger.exception": [
                    302
                ],
                "six.itervalues": [
                    321,
                    329,
                    332,
                    336,
                    307,
                    339,
                    444
                ],
                "task.id": [
                    385,
                    389,
                    905,
                    396,
                    397,
                    533,
                    534,
                    407,
                    413,
                    672,
                    933,
                    934,
                    935,
                    936,
                    937,
                    426,
                    308,
                    949,
                    950,
                    951,
                    832,
                    724,
                    345,
                    474,
                    730,
                    882,
                    883,
                    884
                ],
                "k": [
                    313,
                    315,
                    317,
                    319
                ],
                "v": [
                    313,
                    314,
                    315
                ],
                "six.iteritems": [
                    640,
                    742,
                    650,
                    756,
                    313,
                    317,
                    319
                ],
                "Worker": [
                    456,
                    315
                ],
                "w": [
                    450,
                    524,
                    317
                ],
                "worker": [
                    896,
                    897,
                    898,
                    517,
                    518,
                    519,
                    520,
                    907,
                    908,
                    911,
                    912,
                    913,
                    914,
                    915,
                    916,
                    544,
                    545,
                    558,
                    444,
                    445,
                    319,
                    320,
                    447,
                    710,
                    711,
                    712,
                    460,
                    461,
                    718,
                    719,
                    628,
                    893,
                    894,
                    895
                ],
                "worker.tasks": [
                    320
                ],
                "task.workers": [
                    737,
                    322,
                    907,
                    621,
                    749,
                    813,
                    909,
                    910,
                    466,
                    725
                ],
                "tasks.add": [
                    323,
                    622
                ],
                "tasks": [
                    323,
                    622,
                    720,
                    721,
                    912,
                    723,
                    913,
                    916
                ],
                "itertools.chain.from_iterable": [
                    339
                ],
                "itertools.chain": [
                    339,
                    749
                ],
                "itertools": [
                    339,
                    749
                ],
                "setdefault": [
                    344,
                    343
                ],
                "self._tasks.setdefault": [
                    344
                ],
                "self._tasks.get": [
                    348
                ],
                "task.scheduler_disable_time": [
                    354,
                    420,
                    421,
                    394,
                    823,
                    376,
                    957,
                    382
                ],
                "task.failures.clear": [
                    355,
                    358
                ],
                "task.failures": [
                    355,
                    358
                ],
                "self.set_status": [
                    416,
                    357,
                    431
                ],
                "new_status": [
                    361,
                    393,
                    365,
                    366,
                    397,
                    368,
                    398,
                    372,
                    379,
                    383
                ],
                "SUSPENDED": [
                    596,
                    365
                ],
                "DONE": [
                    679,
                    970,
                    971,
                    372,
                    471,
                    664,
                    666
                ],
                "self.re_enable": [
                    373,
                    422
                ],
                "task.can_disable": [
                    379
                ],
                "task.add_failure": [
                    380
                ],
                "task.has_excessive_failures": [
                    381
                ],
                "notifications.send_error_email": [
                    384
                ],
                "notifications": [
                    384
                ],
                "config.disable_failures": [
                    388
                ],
                "config.disable_window": [
                    390
                ],
                "config.disable_persist": [
                    421,
                    391
                ],
                "pop": [
                    441,
                    396
                ],
                "remove": [
                    433,
                    401,
                    427
                ],
                "task.stakeholders": [
                    610,
                    465,
                    404,
                    407,
                    411
                ],
                "task.remove": [
                    425,
                    586,
                    587,
                    405,
                    408
                ],
                "config.remove_delay": [
                    408,
                    407
                ],
                "task.worker_running": [
                    740,
                    741,
                    904,
                    905,
                    814,
                    729,
                    411,
                    413,
                    415
                ],
                "assistants": [
                    411
                ],
                "config.retry_delay": [
                    417,
                    430,
                    414
                ],
                "task.retry": [
                    417,
                    430,
                    598
                ],
                "delete_tasks": [
                    439
                ],
                "task_obj": [
                    440,
                    441
                ],
                "self._tasks.pop": [
                    440
                ],
                "task_obj.status": [
                    441
                ],
                "last_active_lt": [
                    450,
                    445
                ],
                "worker.last_active": [
                    445,
                    894
                ],
                "w.assistant": [
                    450
                ],
                "self.get_active_workers": [
                    450
                ],
                "self._active_workers.keys": [
                    453
                ],
                "self._active_workers.setdefault": [
                    456
                ],
                "delete_workers": [
                    465,
                    466,
                    460
                ],
                "self._active_workers.pop": [
                    461
                ],
                "self.get_active_tasks": [
                    464,
                    470
                ],
                "task.stakeholders.difference_update": [
                    465
                ],
                "task.workers.difference_update": [
                    466
                ],
                "necessary_tasks": [
                    528,
                    530,
                    469,
                    533,
                    473,
                    474,
                    475
                ],
                "necessary_tasks.update": [
                    473
                ],
                "task.deps": [
                    932,
                    677,
                    614,
                    555,
                    473,
                    825,
                    601,
                    858,
                    667,
                    604
                ],
                "necessary_tasks.add": [
                    474
                ],
                "Scheduler": [
                    478
                ],
                "self._config": [
                    518,
                    519,
                    492,
                    493,
                    497,
                    596,
                    533,
                    598,
                    885,
                    504,
                    505,
                    506,
                    958,
                    767
                ],
                "scheduler": [
                    492
                ],
                "kwargs": [
                    697,
                    571,
                    492,
                    780
                ],
                "self._state": [
                    512,
                    897,
                    517,
                    903,
                    648,
                    522,
                    524,
                    528,
                    786,
                    532,
                    533,
                    663,
                    536,
                    791,
                    792,
                    922,
                    544,
                    931,
                    678,
                    810,
                    556,
                    948,
                    956,
                    574,
                    831,
                    958,
                    963,
                    964,
                    837,
                    710,
                    716,
                    719,
                    596,
                    729,
                    864,
                    615,
                    493,
                    622,
                    880,
                    628,
                    509,
                    767
                ],
                "SimpleTaskState": [
                    493
                ],
                "self._config.state_path": [
                    493
                ],
                "task_history_impl": [
                    496,
                    495
                ],
                "self._task_history": [
                    972,
                    974,
                    496,
                    976,
                    499,
                    501,
                    983
                ],
                "self._config.record_task_history": [
                    497
                ],
                "db_task_history.DbTaskHistory": [
                    499
                ],
                "db_task_history": [
                    499
                ],
                "history.NopHistory": [
                    501
                ],
                "history": [
                    501
                ],
                "self._resources": [
                    647,
                    502,
                    631,
                    632,
                    633,
                    639
                ],
                "getintdict": [
                    502
                ],
                "configuration.get_config": [
                    502
                ],
                "configuration": [
                    502
                ],
                "self._make_task": [
                    615,
                    574,
                    503
                ],
                "functools.partial": [
                    503
                ],
                "functools": [
                    503
                ],
                "Task": [
                    504
                ],
                "self._config.disable_failures": [
                    504
                ],
                "self._config.disable_hard_timeout": [
                    505
                ],
                "self._config.disable_window": [
                    506
                ],
                "self._state.load": [
                    509
                ],
                "self._state.dump": [
                    512
                ],
                "remove_workers": [
                    520,
                    522,
                    516
                ],
                "self._state.get_active_workers": [
                    897,
                    517,
                    719
                ],
                "worker.prune": [
                    518
                ],
                "self._config.worker_disconnect_delay": [
                    519
                ],
                "remove_workers.append": [
                    520
                ],
                "worker.id": [
                    520,
                    893,
                    718
                ],
                "self._state.inactivate_workers": [
                    522
                ],
                "assistant_ids": [
                    524,
                    533,
                    527
                ],
                "w.id": [
                    524
                ],
                "self._state.get_assistants": [
                    524
                ],
                "remove_tasks": [
                    536,
                    525,
                    534
                ],
                "self._state.get_necessary_tasks": [
                    528
                ],
                "self._state.get_active_tasks": [
                    931,
                    648,
                    880,
                    532,
                    948,
                    831
                ],
                "self._state.prune": [
                    533
                ],
                "remove_tasks.append": [
                    534
                ],
                "self._state.inactivate_tasks": [
                    536
                ],
                "self._state.get_worker": [
                    544,
                    710,
                    622,
                    628,
                    729
                ],
                "worker.update": [
                    545
                ],
                "task.priority": [
                    672,
                    554,
                    819
                ],
                "prio": [
                    554,
                    557,
                    558
                ],
                "dep": [
                    800,
                    859,
                    803,
                    677,
                    614,
                    615,
                    678,
                    555,
                    556,
                    798,
                    858,
                    792,
                    794,
                    795,
                    669,
                    670
                ],
                "t": [
                    615,
                    616,
                    556,
                    557,
                    558,
                    879,
                    663
                ],
                "self._state.get_task": [
                    964,
                    837,
                    678,
                    615,
                    810,
                    556,
                    663,
                    792,
                    956,
                    574
                ],
                "t.priority": [
                    557
                ],
                "self._update_priority": [
                    618,
                    558
                ],
                "self.update": [
                    699,
                    572,
                    781
                ],
                "task.family": [
                    818,
                    579,
                    580,
                    838
                ],
                "task.module": [
                    582
                ],
                "task.params": [
                    584,
                    817,
                    583
                ],
                "self._update_task_history": [
                    770,
                    595
                ],
                "self._state.set_status": [
                    596,
                    767
                ],
                "self._config.retry_delay": [
                    598
                ],
                "new_deps": [
                    603,
                    604
                ],
                "task.deps.update": [
                    604
                ],
                "assistant": [
                    609,
                    737,
                    749,
                    725,
                    700,
                    701
                ],
                "task.stakeholders.add": [
                    610
                ],
                "UNKNOWN": [
                    849,
                    851,
                    615
                ],
                "t.stakeholders.add": [
                    616
                ],
                "t.stakeholders": [
                    616
                ],
                "runnable": [
                    620
                ],
                "task.workers.add": [
                    621
                ],
                "expl": [
                    624,
                    625,
                    964
                ],
                "task.expl": [
                    625
                ],
                "add_info": [
                    628
                ],
                "self._resources.update": [
                    633
                ],
                "needed_resources": [
                    640,
                    636
                ],
                "available_resources": [
                    641,
                    639
                ],
                "resource": [
                    640,
                    641,
                    742,
                    743,
                    650,
                    651,
                    756,
                    757
                ],
                "amount": [
                    640,
                    641,
                    742,
                    743,
                    650,
                    651,
                    756,
                    757
                ],
                "used_resources": [
                    641,
                    646,
                    713,
                    746,
                    651,
                    652,
                    717
                ],
                "available_resources.get": [
                    641
                ],
                "dependents": [
                    672,
                    660,
                    670
                ],
                "among_tasks": [
                    665
                ],
                "not_done": [
                    667
                ],
                "inverse_num_deps": [
                    668,
                    670
                ],
                "task.time": [
                    672,
                    816
                ],
                "dep_task": [
                    678,
                    679
                ],
                "dep_task.status": [
                    679
                ],
                "host": [
                    976,
                    770,
                    699
                ],
                "self.add_worker": [
                    701
                ],
                "best_task": [
                    768,
                    769,
                    770,
                    772,
                    773,
                    774,
                    775,
                    745,
                    747,
                    766,
                    702,
                    767
                ],
                "locally_pending_tasks": [
                    736,
                    761,
                    703
                ],
                "running_tasks": [
                    704,
                    762,
                    733
                ],
                "upstream_table": [
                    705,
                    724
                ],
                "greedy_resources": [
                    745,
                    707,
                    757,
                    743
                ],
                "n_unique_pending": [
                    738,
                    708,
                    764
                ],
                "worker.is_trivial_worker": [
                    711
                ],
                "relevant_tasks": [
                    712,
                    716,
                    720
                ],
                "worker.get_pending_tasks": [
                    712
                ],
                "greedy_workers": [
                    740,
                    741,
                    714,
                    718,
                    751,
                    753
                ],
                "self._state.get_pending_tasks": [
                    716,
                    903
                ],
                "self._used_resources": [
                    717
                ],
                "worker.info.get": [
                    718
                ],
                "worker.info": [
                    896,
                    718
                ],
                "tasks.sort": [
                    721
                ],
                "self._rank": [
                    721
                ],
                "upstream_status": [
                    803,
                    804,
                    805,
                    881,
                    882,
                    724,
                    735
                ],
                "self._upstream_status": [
                    882,
                    724
                ],
                "in_workers": [
                    746,
                    725,
                    726,
                    735
                ],
                "other_worker": [
                    729,
                    730,
                    731,
                    732
                ],
                "more_info": [
                    730,
                    732,
                    733
                ],
                "more_info.update": [
                    732
                ],
                "other_worker.info": [
                    732
                ],
                "running_tasks.append": [
                    733
                ],
                "self._schedulable": [
                    745
                ],
                "self._has_resources": [
                    745,
                    746
                ],
                "workers": [
                    898,
                    749,
                    750,
                    911,
                    917,
                    891
                ],
                "task_worker": [
                    753,
                    750,
                    751
                ],
                "greedy_workers.get": [
                    751
                ],
                "reply": [
                    772,
                    773,
                    774,
                    775,
                    777,
                    761
                ],
                "best_task.worker_running": [
                    768
                ],
                "best_task.time_running": [
                    769
                ],
                "best_task.id": [
                    770,
                    772
                ],
                "best_task.family": [
                    773
                ],
                "best_task.params": [
                    775
                ],
                "upstream_status_table": [
                    800,
                    803,
                    806,
                    807,
                    874,
                    784,
                    785,
                    882,
                    793,
                    796,
                    799
                ],
                "self._state.has_task": [
                    864,
                    963,
                    786,
                    791,
                    922
                ],
                "task_stack": [
                    795,
                    787,
                    789,
                    790
                ],
                "dep_id": [
                    800,
                    806,
                    807,
                    790,
                    791,
                    792,
                    793,
                    795,
                    796,
                    799
                ],
                "task_stack.pop": [
                    790
                ],
                "dep.status": [
                    794,
                    798
                ],
                "dep.deps": [
                    800,
                    803,
                    794,
                    795
                ],
                "dep_status": [
                    798,
                    799
                ],
                "STATUS_TO_UPSTREAM_MAP.get": [
                    798
                ],
                "upstream_status_table.get": [
                    803
                ],
                "upstream_status.append": [
                    804
                ],
                "ret": [
                    825,
                    826,
                    811,
                    823
                ],
                "include_deps": [
                    824
                ],
                "self.prune": [
                    872,
                    946,
                    920,
                    890,
                    829,
                    862
                ],
                "serialized": [
                    921,
                    923,
                    924,
                    928,
                    933,
                    934,
                    935,
                    936,
                    950,
                    951,
                    955,
                    830,
                    959,
                    832,
                    833,
                    960,
                    836,
                    847,
                    857,
                    859,
                    863,
                    865,
                    866,
                    883,
                    884
                ],
                "self._serialize_task": [
                    832,
                    928,
                    935,
                    905,
                    883,
                    950,
                    857,
                    959
                ],
                "logger.warn": [
                    839
                ],
                "_": [
                    843
                ],
                "param_str": [
                    843,
                    844
                ],
                "partition": [
                    843
                ],
                "task_id.rstrip": [
                    843
                ],
                "param.split": [
                    844
                ],
                "param": [
                    844
                ],
                "param_str.split": [
                    844
                ],
                "self._recurse_deps": [
                    865,
                    859
                ],
                "result": [
                    873,
                    951,
                    947,
                    884,
                    885,
                    886,
                    887,
                    952
                ],
                "search": [
                    875,
                    878
                ],
                "filter_func": [
                    880,
                    876,
                    879
                ],
                "terms": [
                    878,
                    879
                ],
                "search.split": [
                    878
                ],
                "term": [
                    879
                ],
                "t.id": [
                    879
                ],
                "limit": [
                    885
                ],
                "self._config.max_shown_tasks": [
                    885
                ],
                "workers.sort": [
                    898
                ],
                "include_running": [
                    899
                ],
                "running": [
                    912,
                    905,
                    900
                ],
                "num_pending": [
                    914,
                    908,
                    901
                ],
                "num_uniques": [
                    910,
                    915,
                    902
                ],
                "self._traverse_inverse_deps": [
                    923
                ],
                "stack": [
                    929,
                    930,
                    937,
                    927
                ],
                "curr_id": [
                    930,
                    932,
                    933
                ],
                "stack.pop": [
                    930
                ],
                "append": [
                    933
                ],
                "stack.append": [
                    937
                ],
                "task.id.find": [
                    949
                ],
                "task_str": [
                    949
                ],
                "self._state.re_enable": [
                    958
                ],
                "successful": [
                    971,
                    972
                ],
                "self._task_history.task_finished": [
                    972
                ],
                "self._task_history.task_scheduled": [
                    974
                ],
                "self._task_history.task_started": [
                    976
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/luigi_22/test/scheduler_test.py",
                "test_function": "test_worker_prune_after_init",
                "test_function_code": "    def test_worker_prune_after_init(self):\n        worker = luigi.scheduler.Worker(123)\n\n        class TmpCfg:\n            def __init__(self):\n                self.worker_disconnect_delay = 10\n\n        worker.prune(TmpCfg())",
                "test_error": "TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'",
                "full_test_error": "self = <scheduler_test.SchedulerTest testMethod=test_worker_prune_after_init>\n\n    def test_worker_prune_after_init(self):\n        worker = luigi.scheduler.Worker(123)\n    \n        class TmpCfg:\n            def __init__(self):\n                self.worker_disconnect_delay = 10\n    \n>       worker.prune(TmpCfg())\n\ntest/scheduler_test.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <luigi.scheduler.Worker object at 0x7f35ce6f2190>\nconfig = <scheduler_test.SchedulerTest.test_worker_prune_after_init.<locals>.TmpCfg object at 0x7f35ce61fd00>\n\n    def prune(self, config):\n        # Delete workers that haven't said anything for a while (probably killed)\n>       if self.last_active + config.worker_disconnect_delay < time.time():\nE       TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'\n\nluigi/scheduler.py:245: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}