{
    "luigi": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 0,
                "1.5.1": 1,
                "1.5.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0,
                "8": 1,
                "9": 1
            },
            "bugID": 28,
            "start_line": 137,
            "file_name": "luigi/contrib/hive.py",
            "replace_code": "def test_table_exists(self, run_command):\n        run_command.return_value = \"OK\"\n        returned = self.client.table_exists(\"mytable\")\n        self.assertFalse(returned)\n\n        run_command.return_value = \"OK\\n\" \\\n                                   \"mytable\"\n        returned = self.client.table_exists(\"mytable\")\n        self.assertTrue(returned)\n\n        returned = self.client.table_exists(\"MyTable\")\n        self.assertTrue(returned)\n\n        run_command.return_value = \"day=2013-06-28/hour=3\\n\" \\\n                                   \"day=2013-06-28/hour=4\\n\" \\\n                                   \"day=2013-07-07/hour=2\\n\"\n        self.client.partition_spec = mock.Mock(name=\"partition_spec\")\n        self.client.partition_spec.return_value = \"somepart\"\n        returned = self.client.table_exists(\"mytable\", partition={'a': 'b'})\n        self.assertTrue(returned)\n\n        run_command.return_value = \"\"\n        returned = self.client.table_exists(\"mytable\", partition={'a': 'b'})\n        self.assertFalse(returned)",
            "import_list": []
        }
    ]
}