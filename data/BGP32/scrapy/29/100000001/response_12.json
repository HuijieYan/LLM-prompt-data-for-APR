{
    "scrapy": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "2.3.1": 0,
                "2.3.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0,
                "8": 0,
                "9": 1
            },
            "bugID": 29,
            "start_line": 73,
            "file_name": "scrapy/utils/request.py",
            "replace_code": "def request_httprepr(request):\n    \"\"\"Return the raw HTTP representation (as bytes) of the given request.\n    This is provided only for reference since it's not the actual stream of\n    bytes that will be send when performing the request (that's controlled\n    by Twisted).\n    \"\"\"\n    parsed = urlparse_cached(request.url)  # Use request.url instead of request directly\n    path = urlunparse(('', '', parsed.path or '/', parsed.params, parsed.query, ''))\n\n    method_bytes = to_bytes(request.method) if request.method else b''\n    path_bytes = to_bytes(path) if path else b''\n    hostname_bytes = to_bytes(parsed.hostname) if parsed.hostname else b''\n\n    headers_bytes = to_bytes(request.headers.to_string()) if request.headers else b''\n\n    full_request_bytes = b\"{} {} HTTP/1.1\\r\\n\".format(method_bytes, path_bytes)\n    full_request_bytes += b\"Host: {}\\r\\n\".format(hostname_bytes)\n    full_request_bytes += headers_bytes + b\"\\r\\n\"\n    full_request_bytes += b\"\\r\\n\" + request.body\n\n    return full_request_bytes",
            "import_list": []
        }
    ]
}