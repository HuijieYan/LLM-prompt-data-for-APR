{
    "scrapy": [
        {
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.2.1": 1,
                "1.4.2": 0,
                "1.2.2": 1,
                "1.5.1": 0,
                "1.5.2": 0,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "2.3.1": 1,
                "2.3.2": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1,
                "8": 0,
                "9": 1
            },
            "bugID": 6,
            "start_line": 130,
            "file_name": "scrapy/pipelines/images.py",
            "replace_code": "def convert_image(self, image, size=None):\n        if image.format == 'PNG' and image.mode == 'RGBA':\n            # Create an RGBA image with a white background\n            background = Image.new('RGBA', image.size, (255, 255, 255, 255))\n            # Composite the original image onto the white background preserving transparency\n            image = Image.alpha_composite(background, image)\n            # Convert the RGBA image to RGB preserving the colors\n            image = image.convert('RGB')\n        elif image.mode not in ['RGB', 'RGBA']:\n            image = image.convert('RGB')\n        \n        if size:\n            # Create a copy of the image before resizing to maintain the original\n            image_copy = image.copy()\n            # Resize the copied image to the specified size\n            image_copy.thumbnail(size, Image.ANTIALIAS)\n            # Replace the original image with the resized image\n            image = image_copy\n        \n        buf = BytesIO()\n        # Save the image as JPEG\n        image.save(buf, 'JPEG')\n        return image, buf",
            "import_list": [
                "from PIL import Image",
                "from cStringIO import StringIO as BytesIO"
            ]
        }
    ]
}